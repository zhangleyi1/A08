Index: packages/apps/Launcher3/ext/src/com/sprd/ext/LauncherExtCallbacks.java
===================================================================
--- packages/apps/Launcher3/ext/src/com/sprd/ext/LauncherExtCallbacks.java	(revision 0)
+++ packages/apps/Launcher3/ext/src/com/sprd/ext/LauncherExtCallbacks.java	(revision 173429)
@@ -0,0 +1,328 @@
+package com.sprd.ext;
+
+import android.content.Intent;
+import android.graphics.Rect;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.View;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.FrameLayout;
+
+import com.android.launcher3.AppInfo;
+import com.android.launcher3.Launcher;
+import com.android.launcher3.Launcher.CustomContentCallbacks;
+import com.android.launcher3.LauncherCallbacks;
+import com.android.launcher3.R;
+import com.android.launcher3.allapps.AllAppsSearchBarController;
+import com.android.launcher3.util.ComponentKey;
+
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This class represents a very trivial LauncherExt. It primarily serves as a simple
+ * class to exercise the LauncherOverlay interface.
+ */
+public class LauncherExtCallbacks implements LauncherCallbacks {
+    private Launcher mLauncher;
+
+    public LauncherExtCallbacks(Launcher launcher) {
+        mLauncher = launcher;
+    }
+
+    @Override
+    public void preOnCreate() {
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+    }
+
+    @Override
+    public void preOnResume() {
+    }
+
+    @Override
+    public void onResume() {
+    }
+
+    @Override
+    public void onStart() {
+    }
+
+    @Override
+    public void onStop() {
+    }
+
+    @Override
+    public void onPause() {
+    }
+
+    @Override
+    public void onDestroy() {
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+    }
+
+    @Override
+    public void onPostCreate(Bundle savedInstanceState) {
+    }
+
+    @Override
+    public void onNewIntent(Intent intent) {
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions,
+            int[] grantResults) {
+    }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasFocus) {
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        return false;
+    }
+
+    @Override
+    public void dump(String prefix, FileDescriptor fd, PrintWriter w, String[] args) {
+    }
+
+    @Override
+    public void onHomeIntent() {
+    }
+
+    @Override
+    public boolean handleBackPressed() {
+        return false;
+    }
+
+    @Override
+    public void onTrimMemory(int level) {
+    }
+
+    @Override
+    public void onLauncherProviderChange() {
+    }
+
+    @Override
+    public void finishBindingItems(boolean upgradePath) {
+        mLauncher.getWorkspace().createCustomContentContainer();
+        populateCustomContentContainer();
+    }
+
+    @Override
+    public void onClickAllAppsButton(View v) {
+    }
+
+    @Override
+    public void bindAllApplications(ArrayList<AppInfo> apps) {
+    }
+
+    @Override
+    public void onClickFolderIcon(View v) {
+    }
+
+    @Override
+    public void onClickAppShortcut(View v) {
+    }
+
+    @Override
+    public void onClickPagedViewIcon(View v) {
+    }
+
+    @Override
+    public void onClickWallpaperPicker(View v) {
+    }
+
+    @Override
+    public void onClickSettingsButton(View v) {
+    }
+
+    @Override
+    public void onClickAddWidgetButton(View v) {
+    }
+
+    @Override
+    public void onPageSwitch(View newPage, int newPageIndex) {
+    }
+
+    @Override
+    public void onWorkspaceLockedChanged() {
+    }
+
+    @Override
+    public void onDragStarted(View view) {
+    }
+
+    @Override
+    public void onInteractionBegin() {
+    }
+
+    @Override
+    public void onInteractionEnd() {
+    }
+
+    @Override
+    public boolean providesSearch() {
+        return false;
+    }
+
+    @Override
+    public boolean startSearch(String initialQuery, boolean selectInitialQuery,
+            Bundle appSearchData, Rect sourceBounds) {
+        return false;
+    }
+
+    @Override
+    public boolean startSearchFromAllApps(String query) {
+        return false;
+    }
+
+    Launcher.CustomContentCallbacks mCustomContentCallbacks = new CustomContentCallbacks() {
+
+        // Custom content is completely shown. {@code fromResume} indicates whether this was caused
+        // by a onResume or by scrolling otherwise.
+        public void onShow(boolean fromResume) {
+        }
+
+        // Custom content is completely hidden
+        public void onHide() {
+        }
+
+        // Custom content scroll progress changed. From 0 (not showing) to 1 (fully showing).
+        public void onScrollProgressChanged(float progress) {
+            if (mLauncher.getSearchDropTargetBar() != null) {
+                mLauncher.getSearchDropTargetBar().setX(mLauncher.getSearchBarBounds().width() * progress + 5);
+                mLauncher.getSearchDropTargetBar().setAlpha(1 - progress);
+            }
+        }
+
+        // Indicates whether the user is allowed to scroll away from the custom content.
+        public boolean isScrollingAllowed() {
+            return true;
+        }
+
+    };
+
+    @Override
+    public boolean hasCustomContentToLeft() {
+        return FeatureOption.SPRD_CUSTOM_CONTENT_SUPPORT;
+    }
+
+    @Override
+    public void populateCustomContentContainer() {
+        if(FeatureOption.SPRD_CUSTOM_CONTENT_SUPPORT) {
+            FrameLayout customContent = null;
+            try {
+                WebView webView;
+                LayoutInflater inflater = LayoutInflater.from(mLauncher);
+                customContent = (FrameLayout) inflater.inflate(R.layout.custom_content, null);
+                webView = (WebView) customContent.findViewById(R.id.web_view);
+                webView.loadUrl("https://www.google.com");
+                webView.setWebViewClient(new WebViewClient() {
+                    @Override
+                    public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                        view.loadUrl(url);
+                        return true;
+                    }
+                });
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            if (customContent != null) {
+                mLauncher.addToCustomContentPage(customContent, mCustomContentCallbacks, "");
+            }
+        }
+    }
+
+    @Override
+    public View getQsbBar() {
+        return null;
+    }
+
+    @Override
+    public Bundle getAdditionalSearchWidgetOptions() {
+        return new Bundle();
+    }
+
+    @Override
+    public Intent getFirstRunActivity() {
+        return null;
+    }
+
+    @Override
+    public boolean hasFirstRunActivity() {
+        return false;
+    }
+
+    @Override
+    public boolean hasDismissableIntroScreen() {
+        return false;
+    }
+
+    @Override
+    public View getIntroScreen() {
+        return null;
+    }
+
+    @Override
+    public boolean shouldMoveToDefaultScreenOnHomeIntent() {
+        return true;
+    }
+
+    @Override
+    public boolean hasSettings() {
+        return false;
+    }
+
+    @Override
+    public boolean overrideWallpaperDimensions() {
+        return false;
+    }
+
+    @Override
+    public AllAppsSearchBarController getAllAppsSearchBarController() {
+        return null;
+    }
+
+    @Override
+    public List<ComponentKey> getPredictedApps() {
+        return new ArrayList<>();
+    }
+
+    @Override
+    public int getSearchBarHeight() {
+        return SEARCH_BAR_HEIGHT_NORMAL;
+    }
+
+    @Override
+    public boolean isLauncherPreinstalled() {
+        return false;
+    }
+
+    @Override
+    public void setLauncherSearchCallback(Object callbacks) {
+        // Do nothing
+    }
+
+    @Override
+    public void onAttachedToWindow() {
+    }
+
+    @Override
+    public void onDetachedFromWindow() {
+    };
+}
