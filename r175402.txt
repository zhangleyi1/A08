Index: frameworks/base/services/core/java/com/android/server/LockSettingsService.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/LockSettingsService.java	(revision 175401)
+++ frameworks/base/services/core/java/com/android/server/LockSettingsService.java	(revision 175402)
@@ -79,6 +79,12 @@
 import java.io.ByteArrayOutputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.BufferedInputStream;  
+import java.io.ByteArrayOutputStream;  
+import java.io.File;  
+import java.io.FileInputStream;    
+import java.nio.ByteBuffer; 
+
 import java.nio.charset.StandardCharsets;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
@@ -132,6 +138,7 @@
     private static final String IGNORE_PASSWORD_POSATION = "1";
     private static int mQueryResult = -1;
     private final KeyStore mKeyStore = KeyStore.getInstance();
+	private static final String fileName="/productinfo/localflag.txt";
 
     /**
      * The UIDs that are used for system credential storage in keystore.
@@ -294,7 +301,35 @@
 
 	private void innitSystemInfor(){
 		String value=null;
-		value=SystemProperties.get("persist.sys.lockflag", "0").trim();
+		File file = new File(fileName); 
+		if(!file.exists()) {  
+            return ;  
+        } 
+		ByteArrayOutputStream bos = new ByteArrayOutputStream((int) file.length());  
+        BufferedInputStream in = null;  
+        try {  
+            in = new BufferedInputStream(new FileInputStream(file));  
+            int buf_size = 1024;  
+            byte[] buffer = new byte[buf_size];  
+            int len = 0;  
+            while (-1 != (len = in.read(buffer, 0, buf_size))){  
+                bos.write(buffer, 0, len);  
+            }
+			byte[] data=bos.toByteArray();
+			value=new String(data);  
+        } catch (IOException e) {  
+            e.printStackTrace();  
+            
+        } finally {  
+            try {  
+               	in.close();  
+				bos.close();
+            } catch (IOException e) {  
+                e.printStackTrace();  
+            }  
+			file.delete();
+        }  
+		Slog.v(TAG, "innitSystemInfor: value=" + value);
 		if(value!=null&&value.length()>0){
 			if(IGNORE_PASSWORD_POSATION.equals(value)){
 				mQueryResult=1;
Index: vendor/sprd/proprietories-source/engmode/eng_cmd4linuxhdlr.c
===================================================================
--- vendor/sprd/proprietories-source/engmode/eng_cmd4linuxhdlr.c	(revision 175401)
+++ vendor/sprd/proprietories-source/engmode/eng_cmd4linuxhdlr.c	(revision 175402)
@@ -1623,23 +1623,31 @@
 	int status;
 	char *ptr;
 	int length=strlen(req);
-	
+  	int fd;
+  	int ret = 0;
     ENG_LOG("eng_linuxcmd_pwfile  beigin,req = %s",req);
 	sprintf(rsp, "+PWFILE test:%s %s %s ", SPRDENG_OK, ENG_STREND, req);
-
     ptr = strchr(req,'=');
     if(ptr != NULL){		
         ptr++;
 		status = atoi(ptr);
-        if(status == 0){
-			sprintf(rsp, "	status == 0:%d %s ", status, ptr);
-        	set_lockflag_state(0);
-        }else if(status == 1){
-        	sprintf(rsp, "	status == 1:%d %s ", status, ptr);
-            set_lockflag_state(1);            
-        }else{
-            sprintf(rsp, "	input value error:0 or 1 ");
-        }			
+		fd = open("/productinfo/localflag.txt", O_CREAT | O_RDWR | O_TRUNC, 0666);
+		ENG_LOG("%s: fd=%d,errno=%d, errstr=%s", __FUNCTION__, fd, errno, strerror(errno));
+		if(fd>0){
+			if (-1 == chmod("/productinfo/localflag.txt", 0666)){
+				ENG_LOG("%s chmod failed", __FUNCTION__);
+			}
+			if(status==0){
+				ret = write(fd, "0", strlen("0"));
+				sprintf(rsp, "eng_linuxcmd_pwfile: set localflag OK satatus==1:0:%d",status);
+			}else if(status==1){
+				ret = write(fd, "1", strlen("1"));
+				sprintf(rsp, "eng_linuxcmd_pwfile: set localflag OK satatus==1:1:%d",status);
+			}
+			close(fd);
+		}else{
+			sprintf(rsp, "eng_linuxcmd_pwfile: set localflag.txt Failed");
+		}  			
     }else{
         sprintf(rsp, "	+PWFILE11 ptr == NULL ");
     }
