Index: u-boot64/drivers/power/battery/fan54015.c
===================================================================
--- u-boot64/drivers/power/battery/fan54015.c	(revision 166561)
+++ u-boot64/drivers/power/battery/fan54015.c	(revision 166562)
@@ -1,339 +1,809 @@
-
 #include "sprd_chg_helper.h"
 
-/******************************************************************************
-* Register addresses
-******************************************************************************/
-#define FAN5405_REG_CONTROL0	              0
-#define FAN5405_REG_CONTROL1	              1
-#define FAN5405_REG_OREG	              2
-#define FAN5405_REG_IC_INFO                   3
-#define FAN5405_REG_IBAT	              4
-#define FAN5405_REG_SP_CHARGER                5
-#define FAN5405_REG_SAFETY                    6
-#define FAN5405_REG_MONITOR                  16
+#include "fan54015.h"
 
-/******************************************************************************
-* Register bits
-******************************************************************************/
-/* FAN5405_REG_CONTROL0 (0x00) */
-#define FAN5405_FAULT                   (0x07)
-#define FAN5405_FAULT_SHIFT                  0
-#define FAN5405_BOOST              (0x01 << 3)
-#define FAN5405_BOOST_SHIFT                  3
-#define FAN5405_STAT               (0x3 <<  4)
-#define FAN5405_STAT_SHIFT                   4
-#define FAN5405_EN_STAT            (0x01 << 6)
-#define FAN5405_EN_STAT_SHIFT                6
-#define FAN5405_TMR_RST_OTG        (0x01 << 7)  // writing a 1 resets the t32s timer, writing a 0 has no effect
-#define FAN5405_TMR_RST_OTG_SHIFT            7
-
-/* FAN5405_REG_CONTROL1 (0x01) */
-#define FAN5405_OPA_MODE                (0x01)
-#define FAN5405_OPA_MODE_SHIFT               0
-#define FAN5405_HZ_MODE            (0x01 << 1)
-#define FAN5405_HZ_MODE_SHIFT                1
-#define FAN5405_CE_N               (0x01 << 2)
-#define FAN5405_CE_N_SHIFT                   2
-#define FAN5405_TE                 (0x01 << 3)
-#define FAN5405_TE_SHIFT                     3
-#define FAN5405_VLOWV              (0x03 << 4)
-#define FAN5405_VLOWV_SHIFT                  4
-#define FAN5405_IINLIM             (0x03 << 6)
-#define FAN5405_IINLIM_SHIFT                 6
-
-/* FAN5405_REG_OREG (0x02) */
-#define FAN5405_OTG_EN                  (0x01)
-#define FAN5405_OTG_EN_SHIFT                 0
-#define FAN5405_OTG_PL             (0x01 << 1)
-#define FAN5405_OTG_PL_SHIFT                 1
-#define FAN5405_OREG               (0x3f << 2)
-#define FAN5405_OREG_SHIFT                   2
-
-/* FAN5405_REG_IC_INFO (0x03) */
-#define FAN5405_REV                     (0x03)
-#define FAN5405_REV_SHIFT                    0
-#define FAN5405_PN                 (0x07 << 2)
-#define FAN5405_PN_SHIFT                     2
-#define FAN5405_VENDOR_CODE        (0x07 << 5)
-#define FAN5405_VENDOR_CODE_SHIFT            5
-
-/* FAN5405_REG_IBAT (0x04) */
-#define FAN5405_ITERM                   (0x07)
-#define FAN5405_ITERM_SHIFT                  0
-#define FAN5405_IOCHARGE           (0x07 << 4)
-#define FAN5405_IOCHARGE_SHIFT               4
-#define FAN5405_RESET              (0x01 << 7)
-#define FAN5405_RESET_SHIFT                  7
-
-/* FAN5405_REG_SP_CHARGER (0x05) */
-#define FAN5405_VSP                     (0x07)
-#define FAN5405_VSP_SHIFT                    0
-#define FAN5405_EN_LEVEL           (0x01 << 3)
-#define FAN5405_EN_LEVEL_SHIFT               3
-#define FAN5405_SP                 (0x01 << 4)
-#define FAN5405_SP_SHIFT                     4
-#define FAN5405_IO_LEVEL           (0x01 << 5)
-#define FAN5405_IO_LEVEL_SHIFT               5
-#define FAN5405_DIS_VREG           (0x01 << 6)
-#define FAN5405_DIS_VREG_SHIFT               6
-
-/* FAN5405_REG_SAFETY (0x06) */
-#define FAN5405_VSAFE                   (0x0f)
-#define FAN5405_VSAFE_SHIFT                  0
-#define FAN5405_ISAFE              (0x07 << 4)
-#define FAN5405_ISAFE_SHIFT                  4
-
-/* FAN5405_REG_MONITOR (0x10) */
-#define FAN5405_CV                      (0x01)
-#define FAN5405_CV_SHIFT                     0
-#define FAN5405_VBUS_VALID         (0x01 << 1)
-#define FAN5405_VBUS_VALID_SHIFT             1
-#define FAN5405_IBUS               (0x01 << 2)
-#define FAN5405_IBUS_SHIFT                   2
-#define FAN5405_ICHG               (0x01 << 3)
-#define FAN5405_ICHG_SHIFT                   3
-#define FAN5405_T_120              (0x01 << 4)
-#define FAN5405_T_120_SHIFT                  4
-#define FAN5405_LINCHG             (0x01 << 5)
-#define FAN5405_LINCHG_SHIFT                 5
-#define FAN5405_VBAT_CMP           (0x01 << 6)
-#define FAN5405_VBAT_CMP_SHIFT               6
-#define FAN5405_ITERM_CMP          (0x01 << 7)
-#define FAN5405_ITERM_CMP_SHIFT              7
-
-/******************************************************************************
-* bit definitions
-******************************************************************************/
-/********** FAN5405_REG_CONTROL0 (0x00) **********/
-// EN_STAT [6]
-#define ENSTAT 1
-#define DISSTAT 0
-// TMR_RST [7]
-#define RESET32S 1
-
-/********** FAN5405_REG_CONTROL1 (0x01) **********/
-// OPA_MODE [0]
-#define CHARGEMODE 0
-#define BOOSTMODE 1
-//HZ_MODE [1]
-#define NOTHIGHIMP 0
-#define HIGHIMP 1
-// CE/ [2]
-#define ENCHARGER 0
-#define DISCHARGER 1
-// TE [3]
-#define DISTE 0
-#define ENTE 1
-// VLOWV [5:4]
-#define VLOWV3P4 0
-#define VLOWV3P5 1
-#define VLOWV3P6 2
-#define VLOWV3P7 3
-// IINLIM [7:6]
-#define IINLIM100 0
-#define IINLIM500 1
-#define IINLIM800 2
-#define NOLIMIT 3
-
-/********** FAN5405_REG_OREG (0x02) **********/
-// OTG_EN [0]
-#define DISOTG 0
-#define ENOTG 1
-// OTG_PL [1]
-#define OTGACTIVELOW 0
-#define OTGACTIVEHIGH 1
-// OREG [7:2]
-#define VOREG4P2 35  // refer to table 3
-
-/********** FAN5405_REG_IC_INFO (0x03) **********/
-
-/********** FAN5405_REG_IBAT (0x04) **********/
-// ITERM [2:0] - 68mOhm
-#define ITERM49 0
-#define ITERM97 1
-#define ITERM146 2
-#define ITERM194 3
-#define ITERM243 4
-#define ITERM291 5
-#define ITERM340 6
-#define ITERM388 7
-// IOCHARGE [6:4] - 68mOhm
-#define IOCHARGE550 0
-#define IOCHARGE650 1
-#define IOCHARGE750 2
-#define IOCHARGE850 3
-#define IOCHARGE1050 4
-#define IOCHARGE1150 5
-#define IOCHARGE1350 6
-#define IOCHARGE1450 7
-
-/********** FAN5405_REG_SP_CHARGER (0x05) **********/
-// VSP [2:0]
-#define VSP4P213 0
-#define VSP4P293 1
-#define VSP4P373 2
-#define VSP4P453 3
-#define VSP4P533 4
-#define VSP4P613 5
-#define VSP4P693 6
-#define VSP4P773 7
-// IO_LEVEL [5]
-#define ENIOLEVEL 0
-#define DISIOLEVEL 1
-// DIS_VREG [6]
-#define VREGON 0
-#define VREGOFF 1
-
-/********** FAN5405_REG_SAFETY (0x06) **********/
-// VSAFE [3:0]
-#define VSAFE4P20 0
-#define VSAFE4P22 1
-#define VSAFE4P24 2
-#define VSAFE4P26 3
-#define VSAFE4P28 4
-#define VSAFE4P30 5
-#define VSAFE4P32 6
-#define VSAFE4P34 7
-#define VSAFE4P36 8
-#define VSAFE4P38 9
-#define VSAFE4P40 10
-#define VSAFE4P42 11
-#define VSAFE4P44 12
-// ISAFE [6:4] - 68mOhm
-#define ISAFE550 0
-#define ISAFE650 1
-#define ISAFE750 2
-#define ISAFE850 3
-#define ISAFE1050 4
-#define ISAFE1150 5
-#define ISAFE1350 6
-#define ISAFE1450 7
-
-#define I2C_SPEED			(100000)
-#ifdef CONFIG_SC9838A
-#define BUS_NUM		(2)
-#else
-#define BUS_NUM		(1)
-#endif
-#define SLAVE_ADDR 		(0x6a)
-
-uint16_t sprd_fan54015_i2c_init(void)
+#define SPRDCHG_DEBUG(format, arg...) printf("hl7059: " format, ## arg)
+#define SLAVE_ADDR 0x6b
+#define BUS_NUM 1
+#define I2C_SPEED 400
+uint16_t sprd_hl7059_i2c_init(void)
 {
 	i2c_set_bus_num(BUS_NUM);
 	i2c_init(I2C_SPEED, SLAVE_ADDR);
 	return 0;
 }
-static int fan54015_write_reg(int reg, u8 val)
+static int hl7059_write_reg(int reg, u8 val)
 {
 	i2c_reg_write(SLAVE_ADDR,reg,val);
    	return 0;
 }
 
-int fan54015_read_reg(int reg, u8 *value)
+int hl7059_read_reg(int reg, u8 *value)
 {
 	int ret;
 	ret = i2c_reg_read(SLAVE_ADDR , reg);
 	if (ret < 0) {
-		printf("%s reg(0x%x), ret(%d)\n", __func__, reg, ret);
+		//printf("uboot64 %s reg(0x%x), ret(%d)\n", __func__, reg, ret);
 		return ret;
 	}
 
 	ret &= 0xff;
 	*value = ret;
-	printf("######fan54015readreg reg  = %d value =%d/%x\n",reg, ret, ret);
+	//printf("uboot64 hl7059 readreg reg  = %d value =%d/%x\n",reg, ret, ret);
 	return 0;
 }
 
-static void fan54015_set_value(BYTE reg, BYTE reg_bit,BYTE reg_shift, BYTE val)
+static void hl7059_set_value(BYTE reg, BYTE val, BYTE reg_bit,BYTE reg_shift)
 {
 	BYTE tmp;
-	fan54015_read_reg(reg, &tmp);
+	hl7059_read_reg(reg, &tmp);
 	tmp = tmp & (~reg_bit) |(val << reg_shift);
-	if((0x04 == reg)&&(FAN5405_RESET != reg_bit)){
-		tmp &= 0x7f;
-	}
-	fan54015_write_reg(reg,tmp);
+
+	hl7059_write_reg(reg,tmp);
 }
 
-static BYTE fan54015_get_value(BYTE reg, BYTE reg_bit, BYTE reg_shift)
+static BYTE hl7059_get_value(BYTE reg, BYTE reg_bit, BYTE reg_shift)
 {
 	BYTE data = 0;
 	int ret = 0 ;
-	ret = fan54015_read_reg(reg, &data);
+	ret = hl7059_read_reg(reg, &data);
 	ret = (data & reg_bit) >> reg_shift;
 
 	return ret;
 }
+void hl7059_set_en_hiz(BYTE val)
+{
+    hl7059_set_value(hl7059_CON0, val, CON0_EN_HIZ_MASK, CON0_EN_HIZ_SHIFT );
+}
 
-void fan54015_usb_start_charging(void)
+void hl7059_set_vindpm(BYTE val)
 {
-	printf("uboot fan54015 enter USB charging fan54015\n");
-	fan54015_set_value(FAN5405_REG_IBAT, FAN5405_IOCHARGE,FAN5405_IOCHARGE_SHIFT, IOCHARGE550);  //550mA
-	fan54015_set_value(FAN5405_REG_IBAT, FAN5405_ITERM, FAN5405_ITERM_SHIFT,ITERM194);  //194mA
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_TE,FAN5405_TE_SHIFT, ENTE);
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_CE_N,FAN5405_CE_N_SHIFT, ENCHARGER);
+    hl7059_set_value(hl7059_CON0, val, CON0_VINDPM_MASK, CON0_VINDPM_SHIFT );
 }
 
-void fan54015_ta_start_charging(void)
+void hl7059_set_iinlim(BYTE val)
 {
-	printf("uboot fan54015 enter TA charging fan54015\n");
-	fan54015_set_value(FAN5405_REG_IBAT, FAN5405_IOCHARGE,FAN5405_IOCHARGE_SHIFT, IOCHARGE1450);  //1450mA
-	fan54015_set_value(FAN5405_REG_IBAT, FAN5405_ITERM,FAN5405_ITERM_SHIFT, ITERM97);  //97ma
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_IINLIM, FAN5405_IINLIM_SHIFT,NOLIMIT);  // no limit
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_TE,FAN5405_TE_SHIFT, ENTE);
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_CE_N,FAN5405_CE_N_SHIFT, ENCHARGER);
+    hl7059_set_value(hl7059_CON0, val, CON0_IINLIM_MASK, CON0_IINLIM_SHIFT );
 }
 
-void sprdchg_fan54015_start_chg(int type)
+//CON1----------------------------------------------------
+
+void hl7059_set_reg_rst(BYTE val)
 {
+    hl7059_set_value(hl7059_CON1, val, CON1_REG_RST_MASK, CON1_REG_RST_SHIFT );
+}
+
+void hl7059_set_wdt_rst(BYTE val)
+{
+   hl7059_set_value(hl7059_CON1, val, CON1_WDT_RST_MASK, CON1_WDT_RST_SHIFT );
+}
+
+void hl7059_set_otg_config(BYTE val)
+{
+
+    hl7059_set_value(hl7059_CON1, val, CON1_OTG_CONFIG_MASK, CON1_OTG_CONFIG_SHIFT );
+}
+
+void hl7059_set_chg_config(BYTE val)
+{
+    hl7059_set_value(hl7059_CON1, val, CON1_CHG_CONFIG_MASK, CON1_CHG_CONFIG_SHIFT );
+}
+
+void hl7059_set_sys_min(BYTE val)
+{
+
+    hl7059_set_value(hl7059_CON1, val, CON1_SYS_MIN_MASK, CON1_SYS_MIN_SHIFT );
+}
+
+void hl7059_set_boost_lim(BYTE val)
+{
+    hl7059_set_value(hl7059_CON1, val, CON1_BOOST_LIM_MASK, CON1_BOOST_LIM_SHIFT );
+}
+
+//CON2----------------------------------------------------
+
+void hl7059_set_ichg(int  val)
+{		
+    hl7059_set_value(hl7059_CON2, val,CON2_ICHG_MASK, CON2_ICHG_SHIFT);//0~64 
+}
+
+void hl7059_set_bcold(BYTE val)
+{
+
+    hl7059_set_value(hl7059_CON2, val, CON2_BCOLD_MASK, CON2_BCOLD_SHIFT );
+}
+void hl7059_set_force_20pct(BYTE val)
+{
+   hl7059_set_value(hl7059_CON2, val, CON2_FORCE_20PCT_MASK, CON2_FORCE_20PCT_SHIFT
+                                    );
+}
+
+//CON3----------------------------------------------------
+
+void hl7059_set_iprechg(BYTE val)
+{
+
+    hl7059_set_value(hl7059_CON3, val, CON3_IPRECHG_MASK, CON3_IPRECHG_SHIFT );
+}
+
+void hl7059_set_iterm(BYTE val)
+{
+    hl7059_set_value(hl7059_CON3, val, CON3_ITERM_MASK, CON3_ITERM_SHIFT );
+}
+
+//CON4----------------------------------------------------
+
+void hl7059_set_vreg(int val)
+{
+	BYTE regval;
+	
+	if (val > 4300)
+	{
+		val =4352;
+	}
+	else
+	{
+		val = 4208;
+	}
+	
+	regval = (val -3504) / 16;
+    hl7059_set_value(hl7059_CON4, regval, CON4_VREG_MASK, CON4_VREG_SHIFT );
+}
+
+void hl7059_set_batlowv(BYTE val)
+{
+    hl7059_set_value(hl7059_CON4,  val, CON4_BATLOWV_MASK, CON4_BATLOWV_SHIFT );
+}
+
+void hl7059_set_vrechg(BYTE val)
+{
+    hl7059_set_value(hl7059_CON4,  val,  CON4_VRECHG_MASK, CON4_VRECHG_SHIFT );
+}
+
+//CON5----------------------------------------------------
+
+void hl7059_set_en_term(BYTE val)
+{
+    hl7059_set_value(hl7059_CON5, val, CON5_EN_TERM_MASK, CON5_EN_TERM_SHIFT );
+}
+
+void hl7059_set_watchdog(BYTE val)
+{
+    hl7059_set_value(hl7059_CON5, val, CON5_WATCHDOG_MASK,  CON5_WATCHDOG_SHIFT );
+}
+
+void hl7059_set_en_timer(BYTE val)
+{
+    hl7059_set_value(hl7059_CON5, val, CON5_EN_TIMER_MASK, CON5_EN_TIMER_SHIFT );
+}
+
+void hl7059_set_chg_timer(BYTE val)
+{
+    hl7059_set_value(hl7059_CON5, val, CON5_CHG_TIMER_MASK, CON5_CHG_TIMER_SHIFT );
+}
+
+//CON6----------------------------------------------------
+
+void hl7059_set_treg(BYTE val)
+{
+    hl7059_set_value(hl7059_CON6,  val, CON6_TREG_MASK, CON6_TREG_SHIFT );
+}
+
+void hl7059_set_boostv(BYTE val)
+{
+    hl7059_set_value(hl7059_CON6, val, CON6_BOOSTV_MASK, CON6_BOOSTV_SHIFT);
+}
+
+void hl7059_set_bhot(BYTE val)
+{
+    hl7059_set_value(hl7059_CON6, val, CON6_BHOT_MASK, CON6_BHOT_SHIFT );
+}
+
+//CON7----------------------------------------------------
+
+void hl7059_set_tmr2x_en(BYTE val)
+{
+    hl7059_set_value(hl7059_CON7, val, CON7_TMR2X_EN_MASK, CON7_TMR2X_EN_SHIFT );
+}
+
+void hl7059_set_batfet_disable(BYTE val)
+{
+   hl7059_set_value(hl7059_CON7, val, CON7_BATFET_Disable_MASK, CON7_BATFET_Disable_SHIFT );
+}
+
+void hl7059_set_int_mask(BYTE val)
+{
+    hl7059_set_value(hl7059_CON7, val, CON7_INT_MASK_MASK, CON7_INT_MASK_SHIFT);
+}
+
+//CON8----------------------------------------------------
+
+BYTE hl7059_get_system_status(void)
+{
+    BYTE val=0;
+
+    val=hl7059_get_value(hl7059_CON8, 0xFF, 0x0);
+    return val;
+}
+
+BYTE hl7059_get_vbus_stat(void)
+{
+    BYTE val=0;
+
+    val=hl7059_get_value(hl7059_CON8,  CON8_VBUS_STAT_MASK, CON8_VBUS_STAT_SHIFT );
+    return val;
+}
+
+BYTE hl7059_get_chrg_stat(void)
+{
+    BYTE val=0;
+
+    val=hl7059_get_value(hl7059_CON8, CON8_CHRG_STAT_MASK, CON8_CHRG_STAT_SHIFT );
+    return val;
+}
+
+BYTE hl7059_get_vsys_stat(void)
+{
+    BYTE val=0;
+
+    val=hl7059_get_value(hl7059_CON8, CON8_VSYS_STAT_MASK, CON8_VSYS_STAT_SHIFT );
+    return val;
+}
+
+BYTE hl7059_get_fault_status(void)
+{
+    BYTE val=0;
+
+    val=hl7059_get_value(hl7059_CON9, 0xFF, 0x0 );
+
+    if (!val)
+        return 0; //nomal
+   else if (val&0x80)
+        return 7;     //watchdog fault 
+   else if (val&0x40)
+        return 6;     //otg fault 
+   else if  (val&0x30)
+        return 5;    //chg fault 
+   else if (val&0x08)
+        return 4;    //bat fault
+   else
+        return 3;   //NTC fault
+}
+/////////////////////////////////////////////////////////////////////////////////////////
+
+void hl7059_reset_timer(void)
+{
+	hl7059_set_wdt_rst(1);
+}
+
+void show_regs_value(void)
+{
+    int i = 0;
+    BYTE data = 0;
+	for(i = 0;  i < 11;  i++){
+		hl7059_read_reg(i, &data);
+		//printf("hl7059 i:%d,data:0x%x\n",i,data);
+	}
+}
+
+void hl7059_otg_enable(int enable)
+{
+	//SPRD_EX_DEBUG("%s enable =%d\n", __func__, enable);
+}
+
+void hl7059_enable_chg(void)
+{
+	sprd_gpio_direction_output(NULL,142,0);
+	sprd_gpio_set(NULL,142,0);
+	hl7059_set_chg_config(1); 
+}
+
+void hl7059_set_chg_current(unsigned char reg_val)
+{
+	hl7059_set_ichg(reg_val); 
+}
+
+unsigned char hl7059_get_chg_current(void)
+{
+    return hl7059_get_value(hl7059_CON2, CON2_ICHG_MASK, CON2_ICHG_SHIFT);
+}
+
+void sprdchg_hl7059_set_vindpm(int vin)
+{
+	unsigned char reg_val = 0x0;
+
+	//SPRDCHG_DEBUG("%s vin =%d\n", __func__, vin);
+
+	if (vin <= 3880 )
+		reg_val = 0x0;
+	else if (vin >= 5080)
+		reg_val = 0x0f;
+	else
+		reg_val = (vin - 3880) / 80;
+
+	hl7059_set_vindpm(reg_val);
+}
+
+void sprdchg_hl7059_termina_cur_set(uint32_t cur)
+{
+	unsigned char reg_val = 0x0;
+
+	//SPRDCHG_DEBUG("%s cur =%d\n", __func__, cur);
+
+	if (cur <= 128)
+		reg_val = 0x0;
+	else if (cur >= 2048)
+		reg_val = 0xf;
+	else
+		reg_val = (cur - 128) / 128;
+
+	hl7059_set_iterm(reg_val);
+}
+
+void sprdchg_hl7059_termina_vol_set(uint32_t vol)
+{
+	//unsigned char reg_val = 0x0;
+
+	//SPRDCHG_DEBUG("%s vol =%d\n", __func__, vol);
+#if 0
+	if (vol <= 3504)
+		reg_val = 0x0;
+	else if (vol >= 4440)
+		reg_val = 0x38;
+	else
+		reg_val = (vol - 3504) / 16;
+#endif
+	
+	hl7059_set_vreg(vol);
+}
+
+void sprdchg_hl7059_set_safety_vol(int vol)
+{
+#if 0	
+	unsigned char reg_val = 0x0;
+
+	SPRDCHG_DEBUG("%s vol =%d\n", __func__, vol);
+
+	if (vol < 4200)
+		vol = 4200;
+	if (vol > 4440)
+		vol = 4440;
+	reg_val = (vol - 4200) / 20 + 1;
+
+	hl7059_set_safety_vol(reg_val);
+#endif 
+}
+
+void sprdchg_hl7059_set_safety_cur(int cur)
+{
+#if 0	
+	unsigned char reg_val = 0x7;
+
+	SPRDCHG_DEBUG("%s cur = max\n", __func__);
+	hl7059_set_safety_cur(reg_val);
+#endif
+}
+
+unsigned char sprdchg_hl7059_cur2reg(uint32_t cur)
+{
+	unsigned char reg_val;
+
+	if (cur < 512)
+	reg_val = 0;
+	if ((cur >= 512) && (cur < 576))
+	reg_val = 1;
+	if ((cur >= 576) && (cur < 640))
+	reg_val = 2;
+	if ((cur >= 640) && (cur < 704))
+	reg_val = 3;
+	if ((cur >= 704) && (cur < 768))
+	reg_val = 4;
+	if ((cur >= 768) && (cur < 832))
+	reg_val = 5;
+	if ((cur >= 832) && (cur < 896))
+	reg_val = 6;
+	if ((cur >= 896) && (cur < 960))
+	reg_val = 7;
+	if ((cur >= 960) && (cur < 1024))
+	reg_val = 8;
+	if ((cur >= 1024) && (cur < 1088))
+	reg_val = 9;
+	if ((cur >= 1088) && (cur < 1152))
+	reg_val = 10;
+	if ((cur >= 1152) && (cur < 1216))
+	reg_val = 11;
+	if ((cur >= 1216) && (cur < 1280))
+	reg_val = 12;
+	if ((cur >= 1280) && (cur < 1344))
+	reg_val = 13;
+	if ((cur >= 1344) && (cur < 1408))
+	reg_val = 14;
+	if ((cur >= 1408) && (cur < 1472))
+	reg_val = 15;
+	if ((cur >= 1472) && (cur < 1536))
+	reg_val = 16;
+	if ((cur >= 1536) && (cur < 1600))
+	reg_val = 17;
+	if ((cur >= 1600) && (cur < 1664))
+	reg_val = 18;
+	if ((cur >= 1664) && (cur < 1728))
+	reg_val = 19;
+	if ((cur >= 1728) && (cur < 1792))
+	reg_val = 20;
+	if ((cur >= 1792) && (cur < 1856))
+	reg_val = 21;
+	if ((cur >= 1856) && (cur < 1920))
+	reg_val = 22;
+	if ((cur >= 1920) && (cur < 1984))
+	reg_val = 23;
+	if (cur >= 1984)
+	reg_val = 24;
+	
+	return reg_val;
+}
+
+unsigned int sprdchg_hl7059_reg2cur(unsigned char reg_val)
+{
+	unsigned int cur = 0;
+
+	switch (reg_val) {
+	case 0:
+	cur = 512;
+	break;
+	case 1:
+	cur = 576;
+	break;
+	case 2:
+	cur = 640;
+	break;
+	case 3:
+	cur = 704;
+	break;
+	case 4:
+	cur = 768;
+	break;
+	case 5:
+	cur = 832;
+	break;
+	case 6:
+	cur = 896;
+	break;
+	case 7:
+	cur = 960;
+	break;
+	case 8:
+	cur = 1024;
+	break;
+	case 9:
+	cur = 1088;
+	break;
+	case 10:
+	cur = 1152;
+	break;
+	case 11:
+	cur = 1216;
+	break;
+	case 12:
+	cur = 1280;
+	break;
+	case 13:
+	cur = 1344;
+	break;
+	case 14:
+	cur = 1408;
+	break;
+	case 15:
+	cur = 1472;
+	break;
+	case 16:
+	cur = 1536;
+	break;
+	case 17:
+	cur = 1600;
+	break;
+	case 18:
+	cur = 1664;
+	break;
+	case 19:
+	cur = 1728;
+	break;
+	case 20:
+	cur = 1792;
+	break;
+	case 21:
+	cur = 1856;
+	break;
+	case 22:
+	cur = 1920;
+	break;
+	case 23:
+	cur = 1984;
+	break;
+	case 24:
+	cur = 2048;
+	break;
+	case 25:
+	cur = 2112;
+	break;
+	case 26:
+	cur = 2176;
+	break;
+	case 27:
+	cur = 2240;
+	break;
+	case 28:
+	cur = 2304;
+	break;
+	case 29:
+	cur = 2368;
+	break;
+	case 30:
+	cur = 2432;
+	break;
+	case 31:
+	cur = 2496;
+	break;
+	case 32:
+	cur = 2560;
+	break;
+	case 33:
+	cur = 2624;
+	break;
+	case 34:
+	cur = 2688;
+	break;
+	case 35:
+	cur = 2752;
+	break;
+	case 36:
+	cur = 2816;
+	break;
+	case 37:
+	cur = 2880;
+	break;
+	case 38:
+	cur = 2944;
+	break;
+	case 39:
+	cur = 3008;
+	break;
+	case 40:
+	cur = 3072;
+	break;
+	case 41:
+	cur = 3136;
+	break;
+	case 42:
+	cur = 3200;
+	break;
+	case 43:
+	cur = 3264;
+	break;
+	case 44:
+	cur = 3328;
+	break;
+	case 45:
+	cur = 3392;
+	break;
+	case 46:
+	cur = 3456;
+	break;
+	case 47:
+	cur = 3520;
+	break;
+	case 48:
+	cur = 3584;
+	break;
+	case 49:
+	cur = 3648;
+	break;
+	case 50:
+	cur = 3712;
+	break;
+	case 51:
+	cur = 3776;
+	break;
+	case 52:
+	cur = 3840;
+	break;
+	case 53:
+	cur = 3904;
+	break;
+	case 54:
+	cur = 3968;
+	break;
+	case 55:
+	cur = 4032;
+	break;
+	case 56:
+	cur = 4096;
+	break;
+	case 57:
+	cur = 4160;
+	break;
+	case 58:
+	cur = 4224;
+	break;
+	case 59:
+	cur = 4288;
+	break;
+	case 60:
+	cur = 4352;
+	break;
+	case 61:
+	cur = 4416;
+	break;
+	case 62:
+	cur = 4480;
+	break;
+	case 63:
+	cur = 4544;
+	break;
+	case 64:
+	cur = 4544;
+	break;		
+	default:
+	cur = 2048;
+	}
+	return cur;
+}
+
+void sprdchg_hl7059_reset_timer(void)
+{
+	hl7059_reset_timer();
+}
+
+void sprdchg_hl7059_otg_enable(int enable)
+{
+	//hl7059_otg_enable(enable);
+}
+
+void sprdchg_hl7059_stop_charging(unsigned int flag)
+{
+	hl7059_set_chg_config(flag);
+}
+
+void sprdchg_hl7059_set_cur(uint32_t cur)
+{
+	unsigned char reg_val = 0;
+
+	
+	//SPRDCHG_DEBUG("%s cur =%d\n", __func__, cur);
+
+	reg_val = sprdchg_hl7059_cur2reg(cur);
+
+	//SPRDCHG_DEBUG("%s reg_val=%d\n", __func__, reg_val);
+	hl7059_set_chg_current(reg_val);
+}
+
+void sprdchg_hl7059_enable_chg(int type)
+{
 	if(type == ADP_TYPE_CDP || type == ADP_TYPE_DCP){
-		printf("charge start with AC\n");
-		fan54015_ta_start_charging();
+		//printf("charge start with AC\n");
+		sprdchg_hl7059_set_cur(2000);
 	}else{
-		printf("charge start with USB\n");
-		fan54015_usb_start_charging();
+		//printf("charge start with USB\n");
+		sprdchg_hl7059_set_cur(500);
 	}
+	hl7059_enable_chg();	
 }
- void sprdchg_fan54015_stop_charging(void)
+
+unsigned int sprdchg_hl7059_get_chgcur(void)
 {
-	printf("stop charge\n");
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_CE_N,FAN5405_CE_N_SHIFT, DISCHARGER);	
+	unsigned char reg_val = 0;
+	unsigned int cur = 550;
+
+	reg_val = hl7059_get_chg_current();
+
+	cur = sprdchg_hl7059_reg2cur(reg_val);
+
+	//SPRDCHG_DEBUG("%s cur =%d\n", __func__, cur);
+	return cur;
 }
-void  fan54015_sw_reset(void)
+
+void sprdchg_hl7059_adjust_cur(int adjust)
 {
-	printf("fan54015_sw_reset\n");
-	fan54015_set_value(FAN5405_REG_IBAT, FAN5405_RESET, FAN5405_RESET_SHIFT, 1);
+	unsigned char reg_val = hl7059_get_chg_current();
+
+	if (adjust > 0) {
+		if (reg_val == 7)
+			return;
+
+		reg_val++;
+	} else {
+		if (!reg_val)
+			return;
+
+		reg_val--;
+	}
+	hl7059_set_chg_current(reg_val);
+	hl7059_enable_chg();
 }
-void sprdchg_fan54015_init(void)
+
+int sprdchg_hl7059_get_chgcur_step(int cur, int increase)
 {
-	printf("fan5405init\n");
-	sprd_fan54015_i2c_init();
-//reg 6
-	fan54015_set_value(FAN5405_REG_SAFETY, FAN5405_VSAFE,FAN5405_VSAFE_SHIFT, VSAFE4P38);  // VSAFE = 4.38V
-	fan54015_set_value(FAN5405_REG_SAFETY, FAN5405_ISAFE, FAN5405_ISAFE_SHIFT, ISAFE1450);  // ISAFE = 1450mA (68mOhm)
-	fan54015_sw_reset();
-//reg 1
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_VLOWV, FAN5405_VLOWV_SHIFT,VLOWV3P4);  // VLOWV = 3.4V
-	fan54015_set_value(FAN5405_REG_CONTROL1, FAN5405_IINLIM, FAN5405_IINLIM_SHIFT,IINLIM500);  // INLIM = 500mA
-//reg 2
-	fan54015_set_value(FAN5405_REG_OREG, FAN5405_OREG,FAN5405_OREG_SHIFT, VOREG4P2);  //OREG = 4.20V
-//reg 5
-	fan54015_set_value(FAN5405_REG_SP_CHARGER, FAN5405_IO_LEVEL,FAN5405_IO_LEVEL_SHIFT, ENIOLEVEL);  //IO_LEVEL is 0. Output current is controlled by IOCHARGE bits.
+	unsigned char reg_val = hl7059_get_chg_current();
+	int new_cur = 0;
 
+	if (increase > 0) {
+		if (reg_val == 7)
+			return 0;
+
+		reg_val++;
+	} else {
+		if (!reg_val)
+			return 0;
+
+		reg_val--;
+	}
+    
+	new_cur = sprdchg_hl7059_reg2cur(reg_val);
+
+	if (increase > 0)
+		return (new_cur - cur);
+
+	else
+		return (cur - new_cur);
 }
 
-void sprdchg_fan54015_reset_timer(void)
+#define EN_HIZ 0x0
+#define SYS_MIN 0x4 //Minimum system voltage 3.4V	
+
+#define WTD_TIME_40S 0x1 
+#define WTD_TIME_80S 0x2
+
+#define EN_TIME 0x0 //Disable charge timer
+#define INT_MASK_1 0x0 //Disable fault interrupt
+
+#define IINLIMSET_2P5_A 0x7
+#define IINLIMSET_2_A 0x6
+#define IINLIMSET_1P5_A 0x5
+#define IINLIMSET_1P2_A 0x4
+#define IINLIMSET_900_MA 0x3
+#define IINLIMSET_500_MA 0x2
+
+void hl7059_ic_init(void)
 {
-	printf("fan 54015 reset rimer\n");
-	fan54015_set_value(FAN5405_REG_CONTROL0, FAN5405_TMR_RST_OTG,FAN5405_TMR_RST_OTG_SHIFT, RESET32S);
+	hl7059_set_reg_rst(0x1);
+        hl7059_set_en_hiz(EN_HIZ);
+        //hl7059_set_reg_rst(1);
+
+        hl7059_reset_timer();
+        hl7059_set_iinlim(IINLIMSET_2P5_A);
+
+        //hl7059_set_sys_min( SYS_MIN);
+        
+        hl7059_set_en_timer( EN_TIME);
+
+        //hl7059_set_en_term(0x1); //Enable termination
+
+        //hl7059_set_watchdog( WTD_TIME_40S);
+
+        hl7059_set_int_mask( INT_MASK_1);  
+
+ 		//hl7059_set_vrechg(0x1);
 }
-struct sprd_ext_ic_operations sprd_extic_op ={
-	.ic_init = sprdchg_fan54015_init,
-	.charge_start_ext = sprdchg_fan54015_start_chg,
-	.charge_stop_ext = sprdchg_fan54015_stop_charging,
-	.timer_callback_ext = sprdchg_fan54015_reset_timer,
+
+void sprdchg_hl7059_init(void)
+{
+	sprd_hl7059_i2c_init();
+    hl7059_ic_init();      
+
+	sprdchg_hl7059_set_vindpm(4400);
+
+
+      //show_regs_value();
+
+}
+
+struct sprd_ext_ic_operations sprdchg_hl7059_op ={
+	.ic_init = sprdchg_hl7059_init,
+	.charge_start_ext = sprdchg_hl7059_enable_chg,
+	.charge_stop_ext = sprdchg_hl7059_stop_charging,
+	.timer_callback_ext = sprdchg_hl7059_reset_timer,
 };
-struct sprd_ext_ic_operations *sprd_get_ext_ic_ops(void){
-	return &sprd_extic_op;
+
+struct sprd_ext_ic_operations *sprd_get_ext_ic_ops(void)
+{
+	return &sprdchg_hl7059_op;
 }
Index: u-boot64/drivers/power/battery/fan54015.h
===================================================================
--- u-boot64/drivers/power/battery/fan54015.h	(revision 0)
+++ u-boot64/drivers/power/battery/fan54015.h	(revision 166562)
@@ -0,0 +1,159 @@
+#ifndef __LINUX_HL7059_H
+#define __LINUX_HL7059_H
+
+typedef unsigned char BYTE;
+
+#define hl7059_CON0      0x00
+#define hl7059_CON1      0x01
+#define hl7059_CON2      0x02
+#define hl7059_CON3      0x03
+#define hl7059_CON4      0x04
+#define hl7059_CON5      0x05
+#define hl7059_CON6      0x06
+#define hl7059_CON7      0x07
+#define hl7059_CON8      0x08
+#define hl7059_CON9      0x09
+#define hl7059_CON10      0x0A
+#define hl7059_CON11      0x0B
+/**********************************************************
+  *
+  *   [MASK/SHIFT] 
+  *
+  *********************************************************/
+//CON0
+#define CON0_EN_HIZ_MASK   0x01 << 7
+#define CON0_EN_HIZ_SHIFT  7
+
+#define CON0_VINDPM_MASK       0x0F << 3
+#define CON0_VINDPM_SHIFT      3
+
+#define CON0_IINLIM_MASK   0x07
+#define CON0_IINLIM_SHIFT  0
+
+//CON1
+#define CON1_REG_RST_MASK     0x01 << 7
+#define CON1_REG_RST_SHIFT    7
+
+#define CON1_WDT_RST_MASK     0x01 << 6
+#define CON1_WDT_RST_SHIFT    6
+#define CON1_OTG_CONFIG_MASK        0x01 << 5
+#define CON1_OTG_CONFIG_SHIFT       5
+
+#define CON1_CHG_CONFIG_MASK        0x01 << 4
+#define CON1_CHG_CONFIG_SHIFT       4
+
+#define CON1_SYS_MIN_MASK        0x07 << 1
+#define CON1_SYS_MIN_SHIFT       1
+
+#define CON1_BOOST_LIM_MASK   0x01
+#define CON1_BOOST_LIM_SHIFT  0
+
+//CON2
+#define CON2_ICHG_MASK    0x3F << 2
+#define CON2_ICHG_SHIFT   2
+
+#define CON2_BCOLD_MASK    0x1 << 1
+#define CON2_BCOLD_SHIFT   1
+#define CON2_FORCE_20PCT_MASK    0x1
+#define CON2_FORCE_20PCT_SHIFT   0
+
+//CON3
+#define CON3_IPRECHG_MASK   0x0F << 4
+#define CON3_IPRECHG_SHIFT  4
+
+#define CON3_ITERM_MASK           0x0F
+#define CON3_ITERM_SHIFT          0
+//CON4
+#define CON4_VREG_MASK     0x3F << 2
+#define CON4_VREG_SHIFT    2
+
+#define CON4_BATLOWV_MASK     0x01 << 1
+#define CON4_BATLOWV_SHIFT    1
+
+#define CON4_VRECHG_MASK    0x01
+#define CON4_VRECHG_SHIFT   0
+//CON5
+#define CON5_EN_TERM_MASK      0x01 << 7
+#define CON5_EN_TERM_SHIFT     7
+
+#define CON5_WATCHDOG_MASK     0x03 << 4
+#define CON5_WATCHDOG_SHIFT    4
+
+#define CON5_EN_TIMER_MASK      0x01 << 3
+#define CON5_EN_TIMER_SHIFT     3
+#define CON5_CHG_TIMER_MASK           0x03 << 1
+#define CON5_CHG_TIMER_SHIFT          1
+
+//CON6
+#define CON6_BOOSTV_MASK         0xF << 4
+#define CON6_BOOSTV_SHIFT        4
+#define CON6_BHOT_MASK           0x3 << 2
+#define CON6_BHOT_SHIFT          2
+#define CON6_TREG_MASK     0x03
+#define CON6_TREG_SHIFT    0
+//CON7
+
+#define CON7_DPDM_EN_MASK      0x01 << 7
+#define CON7_DPDM_EN_SHIFT     7
+
+#define CON7_TMR2X_EN_MASK      0x01 << 6
+#define CON7_TMR2X_EN_SHIFT     6
+
+#define CON7_BATFET_Disable_MASK      0x01 << 5
+#define CON7_BATFET_Disable_SHIFT     5
+#define CON7_INT_MASK_MASK     0x03
+#define CON7_INT_MASK_SHIFT    0
+
+//CON8
+#define CON8_VBUS_STAT_MASK      0x03 << 6
+#define CON8_VBUS_STAT_SHIFT     6 
+
+#define CON8_CHRG_STAT_MASK           0x03 << 4
+#define CON8_CHRG_STAT_SHIFT          4
+
+#define CON8_DPM_STAT_MASK           0x01 << 3
+#define CON8_DPM_STAT_SHIFT          3
+
+#define CON8_PG_STAT_MASK           0x01 << 2
+#define CON8_PG_STAT_SHIFT          2
+
+#define CON8_THERM_STAT_MASK           0x01 << 1
+#define CON8_THERM_STAT_SHIFT          1
+#define CON8_VSYS_STAT_MASK           0x01 
+#define CON8_VSYS_STAT_SHIFT          0
+//CON9
+#define CON9_WATCHDOG_FAULT_MASK      0x01 << 7
+#define CON9_WATCHDOG_FAULT_SHIFT     7
+#define CON9_OTG_FAULT_MASK           0x01
+#define CON9_OTG_FAULT_SHIFT          6
+#define CON9_CHRG_FAULT_MASK           0x03 << 4
+#define CON9_CHRG_FAULT_SHIFT          4
+#define CON9_BAT_FAULT_MASK           0x01 << 3
+#define CON9_BAT_FAULT_SHIFT          3
+
+#define CON9_NTC_FAULT_MASK           0x07
+#define CON9_NTC_FAULT_SHIFT          0
+//CON10
+#define CON10_PN_MASK      0x07 << 3
+#define CON10_PN_SHIFT     3
+
+#define CON10_Rev_MASK           0x07
+#define CON10_Rev_SHIFT          0
+
+//CON11
+#define CON11_TSR_MASK      0x03 << 6
+#define CON11_TSR_SHIFT     6
+
+#define CON11_TRSP_MASK           0x01 << 5
+#define CON11_TRSP_SHIFT          5
+
+#define CON11_DIS_RECONNECT_MASK           0x01 << 4
+#define CON11_DIS_RECONNECT_SHIFT          4
+
+#define CON11_DIS_SR_INCHG_MASK           0x01 << 3
+#define CON11_DIS_SR_INCHG_SHIFT          3
+
+#define CON11_TSHIP_MASK           0x07 
+#define CON11_TSHIP_SHIFT          0
+
+#endif
