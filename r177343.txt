Index: vendor/custom/cts/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java
===================================================================
--- vendor/custom/cts/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 0)
+++ vendor/custom/cts/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 177343)
@@ -0,0 +1,2032 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.phone;
+
+import com.android.ims.ImsManager;
+import com.android.ims.ImsConfig;
+import com.android.ims.ImsConfigListener;
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneConstants;
+import com.android.internal.telephony.PhoneFactory;
+import com.android.internal.telephony.TelephonyIntents;
+import com.android.internal.telephony.TelephonyProperties;
+import com.android.internal.telephony.TeleFrameworkFactory;
+import com.android.settingslib.RestrictedLockUtils;
+import com.sprd.phone.TeleServicePluginsHelper;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import android.app.ActionBar;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.SharedPreferences;
+import android.database.ContentObserver;
+import android.net.Uri;
+import android.os.AsyncResult;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.PersistableBundle;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.os.AsyncTask;
+
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceActivity;
+import android.preference.PreferenceManager;
+import android.preference.PreferenceScreen;
+import android.preference.SwitchPreference;
+import android.provider.Settings;
+import android.telephony.CarrierConfigManager;
+import android.telephony.CarrierConfigManagerEx;
+import android.telephony.PhoneStateListener;
+import android.telephony.SubscriptionInfo;
+import android.telephony.SubscriptionManager;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.TabHost.OnTabChangeListener;
+import android.widget.TabHost.TabContentFactory;
+import android.widget.TabHost.TabSpec;
+import android.widget.TabHost;
+import android.widget.Toast;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnClickListener;
+
+
+
+/**
+ * "Mobile network settings" screen.  This preference screen lets you
+ * enable/disable mobile data, and control data roaming and other
+ * network-specific mobile data features.  It's used on non-voice-capable
+ * tablets as well as regular phone devices.
+ *
+ * Note that this PreferenceActivity is part of the phone app, even though
+ * you reach it from the "Wireless & Networks" section of the main
+ * Settings app.  It's not part of the "Call settings" hierarchy that's
+ * available from the Phone app (see CallFeaturesSetting for that.)
+ */
+public class MobileNetworkSettings extends PreferenceActivity
+        implements DialogInterface.OnClickListener,
+        DialogInterface.OnDismissListener, Preference.OnPreferenceChangeListener{
+
+    // debug data
+    private static final String LOG_TAG = "NetworkSettings";
+    private static final boolean DBG = true;
+    public static final int REQUEST_CODE_EXIT_ECM = 17;
+
+    // Number of active Subscriptions to show tabs
+    private static final int TAB_THRESHOLD = 2;
+
+    //String keys for preference lookup
+    private static final String BUTTON_PREFERED_NETWORK_MODE = "preferred_network_mode_key";
+    private static final String BUTTON_ROAMING_KEY = "button_roaming_key";
+    // SPRD: FEATURE_NATIONAL_DATA_ROAMING
+    private static final String BUTTON_PREFERRED_DATA_ROAMING = "preferred_data_roaming_key";
+    // SPRD: FEATURE_DATA_ALWAYS_ONLINE
+    private static final String BUTTON_ALWAYS_ONLINE_KEY = "data_always_online";
+    private static final int DIALOG_DISABLE_MOBILE_DATA_AOL = 100;
+    private static final String BUTTON_CDMA_LTE_DATA_SERVICE_KEY = "cdma_lte_data_service_key";
+    private static final String BUTTON_ENABLED_NETWORKS_KEY = "enabled_networks_key";
+    private static final String BUTTON_4G_LTE_KEY = "enhanced_4g_lte";
+	private static final String BUTTON_GSM_ROAMING_KEY = "gsm_roaming_key";
+    private static final String BUTTON_CELL_BROADCAST_SETTINGS = "cell_broadcast_settings";
+    private static final String BUTTON_APN_EXPAND_KEY = "button_apn_key";
+    private static final String BUTTON_OPERATOR_SELECTION_EXPAND_KEY = "button_carrier_sel_key";
+    private static final String BUTTON_CARRIER_SETTINGS_KEY = "carrier_settings_key";
+    private static final String BUTTON_CDMA_SYSTEM_SELECT_KEY = "cdma_system_select_key";
+    //SPRD: 474686 Feature for Uplmn
+    private static final String BUTTON_UPLMN_KEY = "uplmn_setting_key";
+    // SPRD: FEATURE_VOLTE_LOCK
+    private static final String BUTTON_VOLTE_CONFIG_LIST_KEY = "volte_config_list_key";
+
+    static final int preferredNetworkMode = Phone.PREFERRED_NT_MODE;
+
+    //Information about logical "up" Activity
+    private static final String UP_ACTIVITY_PACKAGE = "com.android.settings";
+    private static final String UP_ACTIVITY_CLASS =
+            "com.android.settings.Settings$WirelessSettingsActivity";
+
+    private SubscriptionManager mSubscriptionManager;
+
+    //UI objects
+    private ListPreference mButtonPreferredNetworkMode;
+    private ListPreference mButtonEnabledNetworks;
+    private RestrictedSwitchPreference mButtonDataRoam;
+    // SPRD: FEATURE_NATIONAL_DATA_ROAMING
+    private ListPreference mButtonPreferredDataRoam;
+    /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+    private SwitchPreference mButtonDataAol;
+    private SharedPreferences mSharedPrefs;
+    /* @} */
+    private SwitchPreference mButton4glte;
+	  private SwitchPreference mButtonGsmRoaming;
+    private Preference mLteDataServicePref;
+    //SPRD: 474686 Feature for Uplmn
+    private Preference mUplmnPref;
+    // SPRD: FEATURE_VOLTE_LOCK
+    private Preference mVolteLockPref;
+    //SPRD: Bug636916,FEATURE_MOBILE_DATA_BUTTON
+    private SwitchPreference mMobileDataSwitch;
+    /* SPRD: FEATURE_RESOLUTION_SETTING @{ */
+    private ListPreference mPreferredSetResolution;
+    ImsConfig  mImsConfig;
+    ImsConfigListenerProxy mImsConfigListenerProxy;
+    public static final String VT_RESOLUTION = "vt_resolution";
+    private static final String BUTTON_IC_RESOLUTION = "vt_resolution_set_key";
+    public static final int RESOLUTION_720P = 0;
+    public static final int RESOLUTION_VGA_15 = 1;
+    public static final int RESOLUTION_VGA_30 = 2;
+    public static final int RESOLUTION_QVGA_15 = 3;
+    public static final int RESOLUTION_QVGA_30 = 4;
+    public static final int RESOLUTION_CIF = 5;
+    public static final int RESOLUTION_QCIF = 6;
+    public static class VideoQualityConstants {
+        public static final int FEATURE_VT_RESOLUTION = 50;
+        public static final int NETWORK_VT_RESOLUTION = 51;
+    }
+    /* @} */
+
+    private static final String iface = "rmnet0"; //TODO: this will go away
+    private List<SubscriptionInfo> mActiveSubInfos;
+
+    private UserManager mUm;
+    private Phone mPhone;
+    private MyHandler mHandler;
+    private boolean mOkClicked;
+
+    // We assume the the value returned by mTabHost.getCurrentTab() == slotId
+    private TabHost mTabHost;
+
+    //GsmUmts options and Cdma options
+    GsmUmtsOptions mGsmUmtsOptions;
+    CdmaOptions mCdmaOptions;
+
+    private Preference mClickedPreference;
+    private boolean mShow4GForLTE;
+    private boolean mIsGlobalCdma;
+    private boolean mUnavailable;
+	private boolean mGsmRoamingIsOpen=false;
+	
+    // SPRD: FEATURE_NATIONAL_DATA_ROAMING
+    private boolean mShowNationalDataRoam;
+    private static final int DATA_ROAM_THIS_TRIP = 0;
+    private static final int DATA_ROAM_DISABLE = 1;
+    private static final int DATA_ROAM_ALL_TRIP = 2;
+    private static final String COUNTRY_CODE_MCC = "country_code_mcc";
+
+    /* SPRD: modify by BUG 612017 @{ */
+    private int mCurrentTab = 0;
+    private static final String CURRENT_TAB = "currentTab";
+    private Bundle mSavedInstanceState = null;
+    /* @} */
+
+    //SPRD: Bug 623247 Fail to switch volte on/off
+    private ContentObserver mEnhancedLTEObserver;
+
+	
+	
+    private final PhoneStateListener mPhoneStateListener = new PhoneStateListener() {
+        /*
+         * Enable/disable the 'Enhanced 4G LTE Mode' when in/out of a call
+         * and depending on TTY mode and TTY support over VoLTE.
+         * @see android.telephony.PhoneStateListener#onCallStateChanged(int,
+         * java.lang.String)
+         */
+        @Override
+        public void onCallStateChanged(int state, String incomingNumber) {
+            if (DBG) log("PhoneStateListener.onCallStateChanged: state=" + state);
+            boolean enabled = (state == TelephonyManager.CALL_STATE_IDLE) &&
+                    ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext());
+            Preference pref = getPreferenceScreen().findPreference(BUTTON_4G_LTE_KEY);
+            if (pref != null) pref.setEnabled(enabled && hasActiveSubscriptions());
+        }
+    };
+
+    private final BroadcastReceiver mPhoneChangeReceiver = new PhoneChangeReceiver();
+
+    private class PhoneChangeReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (DBG) log("onReceive:");
+            // When the radio changes (ex: CDMA->GSM), refresh all options.
+            mGsmUmtsOptions = null;
+            mCdmaOptions = null;
+            updateBody();
+        }
+    }
+
+    //This is a method implemented for DialogInterface.OnClickListener.
+    //  Used to dismiss the dialogs when they come up.
+    public void onClick(DialogInterface dialog, int which) {
+        if (which == DialogInterface.BUTTON_POSITIVE) {
+            mPhone.setDataRoamingEnabled(true);
+            mOkClicked = true;
+        } else {
+            // Reset the toggle
+            mButtonDataRoam.setChecked(false);
+        }
+    }
+
+    @Override
+    public void onDismiss(DialogInterface dialog) {
+        // Assuming that onClick gets called first
+        mButtonDataRoam.setChecked(mOkClicked);
+    }
+
+    /**
+     * Invoked on each preference click in this hierarchy, overrides
+     * PreferenceActivity's implementation.  Used to make sure we track the
+     * preference click events.
+     */
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        /** TODO: Refactor and get rid of the if's using subclasses */
+        final int phoneSubId = mPhone.getSubId();
+        if (preference.getKey().equals(BUTTON_4G_LTE_KEY)) {
+            return true;
+        } else if (mGsmUmtsOptions != null &&
+                mGsmUmtsOptions.preferenceTreeClick(preference) == true) {
+            return true;
+        } else if (mCdmaOptions != null &&
+                   mCdmaOptions.preferenceTreeClick(preference) == true) {
+            if (Boolean.parseBoolean(
+                    SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
+
+                mClickedPreference = preference;
+
+                // In ECM mode launch ECM app dialog
+                startActivityForResult(
+                    new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS, null),
+                    REQUEST_CODE_EXIT_ECM);
+            }
+            return true;
+        } else if (preference == mButtonPreferredNetworkMode) {
+            //displays the value taken from the Settings.System
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().
+                    getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+            mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
+            return true;
+        } else if (preference == mLteDataServicePref) {
+            String tmpl = android.provider.Settings.Global.getString(getContentResolver(),
+                        android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL);
+            if (!TextUtils.isEmpty(tmpl)) {
+                TelephonyManager tm = (TelephonyManager) getSystemService(
+                        Context.TELEPHONY_SERVICE);
+                String imsi = tm.getSubscriberId();
+                if (imsi == null) {
+                    imsi = "";
+                }
+                final String url = TextUtils.isEmpty(tmpl) ? null
+                        : TextUtils.expandTemplate(tmpl, imsi).toString();
+                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                startActivity(intent);
+            } else {
+                android.util.Log.e(LOG_TAG, "Missing SETUP_PREPAID_DATA_SERVICE_URL");
+            }
+            return true;
+        }  else if (preference == mButtonEnabledNetworks) {
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().
+                            getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+            mButtonEnabledNetworks.setValue(Integer.toString(settingsNetworkMode));
+            return true;
+        } else if (preference == mButtonDataRoam) {
+            // Do not disable the preference screen if the user clicks Data roaming.
+            return true;
+        /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+        } else if (preference == mButtonDataAol) {
+            return false;
+        /* @} */
+        /* SPRD: FEATURE_NATIONAL_DATA_ROAMING @{ */
+        } else if (preference == mButtonPreferredDataRoam) {
+            return false;
+        /* @} */
+        }
+        /* SPRD: 474686 Feature for Uplmn @{*/
+        else if(preference == mUplmnPref){
+            if (DBG) log("onPreferenceTreeClick: preference = mUplmnPref");
+            Intent intent = new Intent("android.intent.action.startuplmnsettings");
+            intent.putExtra("sub_id", phoneSubId);
+            startActivity(intent);
+            return false;
+        }
+        /* @} */
+        /* SPRD: FEATURE_RESOLUTION_SETTING @{*/
+        else if(preference == mPreferredSetResolution){
+            if (preference != null) {
+                int phoneId = SubscriptionManager.getPhoneId(phoneSubId);
+                if (phoneId == SubscriptionManager.INVALID_PHONE_INDEX) {
+                    Log.i(LOG_TAG, "phoneId is invalid");
+                    return false;
+                }
+                if(mImsConfig == null){
+                    try {
+                        mImsConfig = ImsManager.getInstance(this,phoneId).getConfigInterface();
+                    } catch (Exception ie) {
+                        Log.d(LOG_TAG, "Get ImsConfig occour exception =" + ie);
+                    }
+                }
+                if(mImsConfigListenerProxy == null){
+                    mImsConfigListenerProxy = new ImsConfigListenerProxy();
+                }
+            }
+            return false;
+        }
+        /* @} */
+        else if (preference == mMobileDataSwitch) {
+            return false;
+        }else if(preference == mButtonGsmRoaming){
+			return true;
+		}
+        else {
+            // if the button is anything but the simple toggle preference,
+            // we'll need to disable all preferences to reject all click
+            // events until the sub-activity's UI comes up.
+            preferenceScreen.setEnabled(false);
+            // Let the intents be launched by the Preference manager
+            return false;
+        }
+    }
+
+    private final SubscriptionManager.OnSubscriptionsChangedListener mOnSubscriptionsChangeListener
+            = new SubscriptionManager.OnSubscriptionsChangedListener() {
+        @Override
+        public void onSubscriptionsChanged() {
+            if (DBG) log("onSubscriptionsChanged:");
+            initializeSubscriptions();
+        }
+    };
+
+    private void initializeSubscriptions() {
+        if (isDestroyed()) { // Process preferences in activity only if its not destroyed
+            return;
+        }
+        int currentTab = 0;
+        if (DBG) log("initializeSubscriptions:+");
+
+        // Before updating the the active subscription list check
+        // if tab updating is needed as the list is changing.
+        List<SubscriptionInfo> sil = mSubscriptionManager.getActiveSubscriptionInfoList();
+        TabState state = isUpdateTabsNeeded(sil);
+
+        // Update to the active subscription list
+        mActiveSubInfos.clear();
+        if (sil != null) {
+            mActiveSubInfos.addAll(sil);
+            // If there is only 1 sim then currenTab should represent slot no. of the sim.
+            if (sil.size() == 1) {
+                currentTab = sil.get(0).getSimSlotIndex();
+            }
+        }
+
+        switch (state) {
+            case UPDATE: {
+                if (DBG) log("initializeSubscriptions: UPDATE");
+                currentTab = mTabHost != null ? mTabHost.getCurrentTab() : 0;
+
+                setContentView(com.android.internal.R.layout.common_tab_settings);
+
+                mTabHost = (TabHost) findViewById(android.R.id.tabhost);
+                mTabHost.setup();
+
+                // Update the tabName. Since the mActiveSubInfos are in slot order
+                // we can iterate though the tabs and subscription info in one loop. But
+                // we need to handle the case where a slot may be empty.
+
+                Iterator<SubscriptionInfo> siIterator = mActiveSubInfos.listIterator();
+                SubscriptionInfo si = siIterator.hasNext() ? siIterator.next() : null;
+                for (int simSlotIndex = 0; simSlotIndex  < mActiveSubInfos.size(); simSlotIndex++) {
+                    String tabName;
+                    if (si != null && si.getSimSlotIndex() == simSlotIndex) {
+                        // Slot is not empty and we match
+                        tabName = String.valueOf(si.getDisplayName());
+                        si = siIterator.hasNext() ? siIterator.next() : null;
+                    } else {
+                        // Slot is empty, set name to unknown
+                        tabName = getResources().getString(R.string.unknown);
+                    }
+                    if (DBG) {
+                        log("initializeSubscriptions: tab=" + simSlotIndex + " name=" + tabName);
+                    }
+
+                    mTabHost.addTab(buildTabSpec(String.valueOf(simSlotIndex), tabName));
+                }
+
+                /* SPRD: modify by BUG 612017 @{ */
+                if (mSavedInstanceState != null) {
+                    currentTab = mCurrentTab;
+                }
+                /* @} */
+                mTabHost.setOnTabChangedListener(mTabListener);
+                mTabHost.setCurrentTab(currentTab);
+                break;
+            }
+            case NO_TABS: {
+                if (DBG) log("initializeSubscriptions: NO_TABS");
+
+                if (mTabHost != null) {
+                    mTabHost.clearAllTabs();
+                    mTabHost = null;
+                }
+                setContentView(com.android.internal.R.layout.common_tab_settings);
+                break;
+            }
+            case DO_NOTHING: {
+                if (DBG) log("initializeSubscriptions: DO_NOTHING");
+                if (mTabHost != null) {
+                    currentTab = mTabHost.getCurrentTab();
+                }
+                break;
+            }
+        }
+        updatePhone(currentTab);
+        updateBody();
+        if (DBG) log("initializeSubscriptions:-");
+    }
+
+    private enum TabState {
+        NO_TABS, UPDATE, DO_NOTHING
+    }
+    private TabState isUpdateTabsNeeded(List<SubscriptionInfo> newSil) {
+        TabState state = TabState.DO_NOTHING;
+        if (newSil == null) {
+            if (mActiveSubInfos.size() >= TAB_THRESHOLD) {
+                if (DBG) log("isUpdateTabsNeeded: NO_TABS, size unknown and was tabbed");
+                state = TabState.NO_TABS;
+            }
+        } else if (newSil.size() < TAB_THRESHOLD && mActiveSubInfos.size() >= TAB_THRESHOLD) {
+            if (DBG) log("isUpdateTabsNeeded: NO_TABS, size went to small");
+            state = TabState.NO_TABS;
+        } else if (newSil.size() >= TAB_THRESHOLD && mActiveSubInfos.size() < TAB_THRESHOLD) {
+            if (DBG) log("isUpdateTabsNeeded: UPDATE, size changed");
+            state = TabState.UPDATE;
+        } else if (newSil.size() >= TAB_THRESHOLD) {
+            Iterator<SubscriptionInfo> siIterator = mActiveSubInfos.iterator();
+            for(SubscriptionInfo newSi : newSil) {
+                SubscriptionInfo curSi = siIterator.next();
+                if (!newSi.getDisplayName().equals(curSi.getDisplayName())) {
+                    if (DBG) log("isUpdateTabsNeeded: UPDATE, new name=" + newSi.getDisplayName());
+                    state = TabState.UPDATE;
+                    break;
+                }
+            }
+        }
+        if (DBG) {
+            log("isUpdateTabsNeeded:- " + state
+                + " newSil.size()=" + ((newSil != null) ? newSil.size() : 0)
+                + " mActiveSubInfos.size()=" + mActiveSubInfos.size());
+        }
+        return state;
+    }
+
+    private OnTabChangeListener mTabListener = new OnTabChangeListener() {
+        @Override
+        public void onTabChanged(String tabId) {
+            if (DBG) log("onTabChanged:");
+            // The User has changed tab; update the body.
+            updatePhone(Integer.parseInt(tabId));
+            updateBody();
+        }
+    };
+
+    private void updatePhone(int slotId) {
+        final SubscriptionInfo sir = mSubscriptionManager
+                .getActiveSubscriptionInfoForSimSlotIndex(slotId);
+        if (sir != null) {
+            mPhone = PhoneFactory.getPhone(
+                    SubscriptionManager.getPhoneId(sir.getSubscriptionId()));
+        }
+        if (mPhone == null) {
+            // Do the best we can
+            mPhone = PhoneGlobals.getPhone();
+        }
+        if (DBG) log("updatePhone:- slotId=" + slotId + " sir=" + sir);
+    }
+
+    private TabContentFactory mEmptyTabContent = new TabContentFactory() {
+        @Override
+        public View createTabContent(String tag) {
+            return new View(mTabHost.getContext());
+        }
+    };
+
+    private TabSpec buildTabSpec(String tag, String title) {
+        return mTabHost.newTabSpec(tag).setIndicator(title).setContent(
+                mEmptyTabContent);
+    }
+
+    @Override
+    protected void onCreate(Bundle icicle) {
+        if (DBG) log("onCreate:+");
+        setTheme(R.style.Theme_Material_Settings);
+        super.onCreate(icicle);
+
+        mHandler = new MyHandler();
+        mUm = (UserManager) getSystemService(Context.USER_SERVICE);
+        mSubscriptionManager = SubscriptionManager.from(this);
+
+        if (mUm.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)) {
+            mUnavailable = true;
+            setContentView(R.layout.telephony_disallowed_preference_screen);
+            return;
+        }
+
+        /* SPRD: FEATURE_RESOLUTION_SETTING @{ */
+        if(ImsManager.isVolteEnabledByPlatform(this)){
+            addPreferencesFromResource(R.xml.network_setting_volte);
+            PreferenceScreen prefSet = getPreferenceScreen();
+            mPreferredSetResolution = (ListPreference) prefSet.findPreference(BUTTON_IC_RESOLUTION);
+        } else {
+            addPreferencesFromResource(R.xml.network_setting);
+        }
+        /* @} */
+
+        mButton4glte = (SwitchPreference)findPreference(BUTTON_4G_LTE_KEY);
+        mButton4glte.setOnPreferenceChangeListener(this);
+		mButtonGsmRoaming = (SwitchPreference)findPreference(BUTTON_GSM_ROAMING_KEY);
+        mButtonGsmRoaming.setOnPreferenceChangeListener(this);
+
+        try {
+            Context con = createPackageContext("com.android.systemui", 0);
+            int id = con.getResources().getIdentifier("config_show4GForLTE",
+                    "bool", "com.android.systemui");
+            mShow4GForLTE = con.getResources().getBoolean(id);
+        } catch (NameNotFoundException e) {
+            loge("NameNotFoundException for show4GFotLTE");
+            mShow4GForLTE = false;
+        }
+
+        //get UI object references
+        PreferenceScreen prefSet = getPreferenceScreen();
+
+        mButtonDataRoam = (RestrictedSwitchPreference) prefSet.findPreference(BUTTON_ROAMING_KEY);
+        /* SPRD: FEATURE_NATIONAL_DATA_ROAMING @{ */
+        mButtonPreferredDataRoam = (ListPreference) prefSet.findPreference(
+                BUTTON_PREFERRED_DATA_ROAMING);
+        if (mButtonPreferredDataRoam != null) {
+            mButtonPreferredDataRoam.setOnPreferenceChangeListener(this);
+        }
+        /* @} */
+
+        /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+        mSharedPrefs = PreferenceManager.getDefaultSharedPreferences(this);
+        mButtonDataAol = (SwitchPreference) prefSet.findPreference(BUTTON_ALWAYS_ONLINE_KEY);
+        if (mButtonDataAol != null) {
+            mButtonDataAol.setOnPreferenceChangeListener(this);
+        }
+        /* @} */
+
+        mButtonPreferredNetworkMode = (ListPreference) prefSet.findPreference(
+                BUTTON_PREFERED_NETWORK_MODE);
+        mButtonEnabledNetworks = (ListPreference) prefSet.findPreference(
+                BUTTON_ENABLED_NETWORKS_KEY);
+        mButtonDataRoam.setOnPreferenceChangeListener(this);
+
+        mLteDataServicePref = prefSet.findPreference(BUTTON_CDMA_LTE_DATA_SERVICE_KEY);
+        //SPRD: 474686 Feature for Uplmn
+        mUplmnPref = (Preference)prefSet.findPreference(BUTTON_UPLMN_KEY);
+
+        // SPRD: FEATURE_VOLTE_LOCK
+        mVolteLockPref = prefSet.findPreference(BUTTON_VOLTE_CONFIG_LIST_KEY);
+
+        /* SPRD: Bug636916,FEATURE_MOBILE_DATA_BUTTON @{ */
+        mMobileDataSwitch = (SwitchPreference) prefSet.findPreference("mobile_data_network_button");
+        mMobileDataSwitch.setOnPreferenceChangeListener(this);
+        /* @} */
+
+        // Initialize mActiveSubInfo
+        int max = mSubscriptionManager.getActiveSubscriptionInfoCountMax();
+        mActiveSubInfos = new ArrayList<SubscriptionInfo>(max);
+
+        /* SPRD: modify by BUG 612017 @{ */
+        if (icicle != null) {
+            mSavedInstanceState = icicle;
+            mCurrentTab = icicle.getInt(CURRENT_TAB);
+        }
+        /* @} */
+        initializeSubscriptions();
+
+        IntentFilter intentFilter = new IntentFilter(
+                TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
+        registerReceiver(mPhoneChangeReceiver, intentFilter);
+
+        /* SPRD: Bug 623247 Fail to switch volte on/off @{*/
+        mEnhancedLTEObserver = new ContentObserver(mHandler) {
+            @Override
+            public void onChange(boolean selfChange) {
+                //If the 'Enhance 4G LTE Mode' value in database changes and it is opposite to user behavior, we need to reset the value.
+                if(mButton4glte != null){
+                    boolean isEnhanced4gLteMode = ImsManager.isEnhanced4gLteModeSettingEnabledByUser(MobileNetworkSettings.this);
+                    if (DBG) log("isEnhanced4gLteMode = " + isEnhanced4gLteMode + ", mButton4glte.isChecked() = " + mButton4glte.isChecked());
+                    if ((isEnhanced4gLteMode && !mButton4glte.isChecked()) || (!isEnhanced4gLteMode && mButton4glte.isChecked())) {
+                        mButton4glte.setChecked(isEnhanced4gLteMode);
+                        ImsManager.setEnhanced4gLteModeSetting(MobileNetworkSettings.this, mButton4glte.isChecked());
+                    }
+                }
+            }
+        };
+        getContentResolver().registerContentObserver(Settings.Global.getUriFor(android.provider.Settings.Global.ENHANCED_4G_MODE_ENABLED),
+                true, mEnhancedLTEObserver);
+        /* @} */
+        if (DBG) log("onCreate:-");
+    }
+
+	
+    /* SPRD: modify by BUG 612017 @{ */
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        // TODO Auto-generated method stub
+        if (mTabHost != null) {
+            outState.putInt(CURRENT_TAB, mTabHost.getCurrentTab());
+        }
+        super.onSaveInstanceState(outState);
+    }
+    /* @} */
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        unregisterReceiver(mPhoneChangeReceiver);
+        // SPRD: FEATURE_CHOOSE_NETWORK_TYPE
+        TeleServiceFactory.getInstance().disposeNetworkTypeOptions();
+        //SPRD: Bug 623247 Fail to switch volte on/off
+        getContentResolver().unregisterContentObserver(mEnhancedLTEObserver);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (DBG) log("onResume:+");
+
+        if (mUnavailable) {
+            if (DBG) log("onResume:- ignore mUnavailable == false");
+            return;
+        }
+        // upon resumption from the sub-activity, make sure we re-enable the
+        // preferences.
+        // SPRD modify for bug 612903
+        getPreferenceScreen().setEnabled(Settings.System.getInt(getContentResolver(), Settings.Global.AIRPLANE_MODE_ON, 0) == 0);
+
+        // Set UI state in onResume because a user could go home, launch some
+        // app to change this setting's backend, and re-launch this settings app
+        // and the UI state would be inconsistent with actual state
+        mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
+
+        /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+        if (mButtonDataAol != null) {
+            mButtonDataAol.setChecked(isMobileDataAlwaysOnline(mPhone.getSubId()));
+        }
+        /* @} */
+
+        /* SPRD: FEATURE_RESOLUTION_SETTING @{ */
+        if(mPreferredSetResolution != null){
+           // mPreferredSetResolution.setValueIndex(getVideoQualityFromPreference());
+            //mPreferredSetResolution.setSummary(mPreferredSetResolution.getEntry());
+            getPreferenceScreen().removePreference(mPreferredSetResolution);
+        }
+		 
+        /* @} */
+
+        if (getPreferenceScreen().findPreference(BUTTON_PREFERED_NETWORK_MODE) != null
+                || getPreferenceScreen().findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null)  {
+            updatePreferredNetworkUIFromDb();
+        }
+
+        if (ImsManager.isVolteEnabledByPlatform(this)
+                && ImsManager.isVolteProvisionedOnDevice(this)) {
+            TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+            tm.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
+        }
+
+        // NOTE: Buttons will be enabled/disabled in mPhoneStateListener
+        boolean enh4glteMode = ImsManager.isEnhanced4gLteModeSettingEnabledByUser(this)
+                && ImsManager.isNonTtyOrTtyOnVolteEnabled(this);
+        mButton4glte.setChecked(enh4glteMode);
+		
+        int iGsmRoamingSetting = android.provider.Settings.Global.getInt(
+                mPhone.getContext().getContentResolver(),
+                android.provider.Settings.Global.GSM_ROAMING_ENABLED + mPhone.getSubId(), 0);
+        boolean gsmRoamingOn = (1 == iGsmRoamingSetting);
+        android.util.Log.e("Tony","onResume gsmRoamingOn = " + gsmRoamingOn + ",mPhone.getSubId() = " + mPhone.getSubId());
+        mButtonGsmRoaming.setChecked(gsmRoamingOn);
+		if(mButtonGsmRoaming.isChecked()){
+			mGsmRoamingIsOpen=true;
+		}else{
+			mGsmRoamingIsOpen=false;
+		}
+        mSubscriptionManager.addOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
+		
+
+        //SPRD: Bug636916,FEATURE_MOBILE_DATA_BUTTON
+        TeleServicePluginsHelper.getInstance(this).needRegisterMobileData(this);
+
+        if (DBG) log("onResume:-");
+
+    }
+
+    private boolean hasActiveSubscriptions() {
+        return mActiveSubInfos.size() > 0;
+    }
+
+    private void updateBody() {
+        final Context context = getApplicationContext();
+        PreferenceScreen prefSet = getPreferenceScreen();
+        boolean isLteOnCdma = mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE;
+        final int phoneSubId = mPhone.getSubId();
+        /* SPRD: add for bug 596388 @{ */
+        int defaultDataSubId = mSubscriptionManager.getDefaultDataSubscriptionId();
+        int phoneSlotId = mSubscriptionManager.getSlotId(phoneSubId);
+
+        if (DBG) {
+            log("updateBody: isLteOnCdma=" + isLteOnCdma + " phoneSubId=" + phoneSubId
+                    + " defaultDataSubId=" + defaultDataSubId + " phoneSlotId:" + phoneSlotId);
+        }
+        /* @} */
+
+        if (prefSet != null) {
+            prefSet.removeAll();
+            prefSet.addPreference(mButtonDataRoam);
+            /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+            if (enableDataAlwaysOnline() && mButtonDataAol != null && phoneSlotId != 1) {
+                prefSet.addPreference(mButtonDataAol);
+            }
+            /* @} */
+            prefSet.addPreference(mButtonPreferredNetworkMode);
+            prefSet.addPreference(mButtonEnabledNetworks);
+            CarrierConfigManagerEx carrierConfigManagerEx = CarrierConfigManagerEx.from(this);
+            PersistableBundle carrierConfigEx = carrierConfigManagerEx.getConfigForDefaultPhone();
+            if (carrierConfigEx != null) {
+                int fixSlot = carrierConfigEx.getInt(CarrierConfigManagerEx.KEY_FIXED_PRIMARY_SLOT_INT);
+                if (SubscriptionManager.isValidPhoneId(fixSlot)) {
+                    if (mPhone.getPhoneId() == fixSlot) {
+                        prefSet.addPreference(mButton4glte);
+                    } else {
+                        prefSet.removePreference(mButton4glte);
+                    }
+                } else {
+            /* SPRD: add for bug 596388 @{ */
+            // SPRD: bug644303 HIDE_4GLTE_BUTTON_FOR_EE.
+            if (mButton4glte != null && defaultDataSubId == phoneSubId
+                    && (context.getResources()
+                            .getBoolean(R.bool.config_show_4GLTE_button))) {
+                prefSet.addPreference(mButton4glte);
+            }
+			
+             /* @} */
+                }
+				prefSet.addPreference(mButtonGsmRoaming);
+            }
+            /* SPRD: FEATURE_PLMN_LOCK @{ */
+            SubscriptionInfoHelper subInfoHelper = new SubscriptionInfoHelper(context, getIntent());
+            Intent volteLockIntent = subInfoHelper.getCallSettingsIntent(null,
+                    mVolteLockPref.getIntent());
+            if (volteLockIntent != null) {
+                Log.i(LOG_TAG, "volteLockIntent:" + volteLockIntent);
+                /* SPRD: add for bug 596388 @{ */
+                if (mVolteLockPref != null && defaultDataSubId == phoneSubId) {
+                    //prefSet.addPreference(mVolteLockPref);
+					prefSet.removePreference(mVolteLockPref);
+                }
+                /* @} */
+            }
+            /* @} */
+
+            /* SPRD: FEATURE_RESOLUTION_SETTING @{ */
+            if(ImsManager.isVolteEnabledByPlatform(this)){
+                /* SPRD: add for bug 596388 @{ */
+                if (mPreferredSetResolution != null && defaultDataSubId == phoneSubId) {
+                    prefSet.addPreference(mPreferredSetResolution);
+                    //prefSet.removePreference(mPreferredSetResolution);
+                }
+                /* @} */
+            }
+            if(mPreferredSetResolution!= null){
+                mPreferredSetResolution.setEnabled(true);
+                mPreferredSetResolution.setOnPreferenceChangeListener(this);
+            }
+            /* @} */
+			if (mPreferredSetResolution != null) {
+                prefSet.removePreference(mPreferredSetResolution);
+            }
+        }
+
+        /* SPRD: 474686 Feature for Uplmn @{*/
+        if("true".equals(SystemProperties.get("persist.sys.uplmn.enable"))){
+            prefSet.addPreference(mUplmnPref);
+            if(mUplmnPref != null){
+                mUplmnPref.setEnabled(!(SubscriptionManager.getSimStateForSlotIdx(SubscriptionManager.getPhoneId(phoneSubId))
+                        != TelephonyManager.SIM_STATE_READY));
+            }
+        }
+        /* @} */
+
+        /* SPRD: Bug636916,FEATURE_MOBILE_DATA_BUTTON @{ */
+        prefSet = TeleServicePluginsHelper.getInstance(this).needShwoDataSwitch(prefSet,mMobileDataSwitch,phoneSubId,this);
+        mMobileDataSwitch = TeleServicePluginsHelper.getInstance(this).updateDataSwitch(mMobileDataSwitch,phoneSubId);
+        /* @} */
+
+        int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                mPhone.getContext().getContentResolver(),
+                android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                preferredNetworkMode);
+
+        PersistableBundle carrierConfig =
+                PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId());
+        mIsGlobalCdma = isLteOnCdma
+                && carrierConfig.getBoolean(CarrierConfigManager.KEY_SHOW_CDMA_CHOICES_BOOL);
+        if (carrierConfig.getBoolean(CarrierConfigManager.KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL)) {
+            prefSet.removePreference(mButtonPreferredNetworkMode);
+            prefSet.removePreference(mButtonEnabledNetworks);
+            prefSet.removePreference(mLteDataServicePref);
+        } else if (carrierConfig.getBoolean(CarrierConfigManager
+                    .KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL)
+                && !mPhone.getServiceState().getRoaming()) {
+            prefSet.removePreference(mButtonPreferredNetworkMode);
+            prefSet.removePreference(mButtonEnabledNetworks);
+
+            final int phoneType = mPhone.getPhoneType();
+            if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
+                mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+                // In World mode force a refresh of GSM Options.
+                if (isWorldMode()) {
+                    mGsmUmtsOptions = null;
+                }
+            } else if (phoneType == PhoneConstants.PHONE_TYPE_GSM) {
+                mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
+            } else {
+                throw new IllegalStateException("Unexpected phone type: " + phoneType);
+            }
+            // Since pref is being hidden from user, set network mode to default
+            // in case it is currently something else. That is possible if user
+            // changed the setting while roaming and is now back to home network.
+            settingsNetworkMode = preferredNetworkMode;
+        } else if (carrierConfig.getBoolean(CarrierConfigManager.KEY_WORLD_PHONE_BOOL) == true) {
+            prefSet.removePreference(mButtonEnabledNetworks);
+            // set the listener for the mButtonPreferredNetworkMode list preference so we can issue
+            // change Preferred Network Mode.
+            mButtonPreferredNetworkMode.setOnPreferenceChangeListener(this);
+
+            mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+            mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
+        } else {
+            prefSet.removePreference(mButtonPreferredNetworkMode);
+            final int phoneType = mPhone.getPhoneType();
+            if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
+                int lteForced = android.provider.Settings.Global.getInt(
+                        mPhone.getContext().getContentResolver(),
+                        android.provider.Settings.Global.LTE_SERVICE_FORCED + mPhone.getSubId(),
+                        0);
+
+                if (isLteOnCdma) {
+                    if (lteForced == 0) {
+                        mButtonEnabledNetworks.setEntries(
+                                R.array.enabled_networks_cdma_choices);
+                        mButtonEnabledNetworks.setEntryValues(
+                                R.array.enabled_networks_cdma_values);
+                    } else {
+                        switch (settingsNetworkMode) {
+                            case Phone.NT_MODE_CDMA:
+                            case Phone.NT_MODE_CDMA_NO_EVDO:
+                            case Phone.NT_MODE_EVDO_NO_CDMA:
+                                mButtonEnabledNetworks.setEntries(
+                                        R.array.enabled_networks_cdma_no_lte_choices);
+                                mButtonEnabledNetworks.setEntryValues(
+                                        R.array.enabled_networks_cdma_no_lte_values);
+                                break;
+                            case Phone.NT_MODE_GLOBAL:
+                            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                            case Phone.NT_MODE_LTE_ONLY:
+                                mButtonEnabledNetworks.setEntries(
+                                        R.array.enabled_networks_cdma_only_lte_choices);
+                                mButtonEnabledNetworks.setEntryValues(
+                                        R.array.enabled_networks_cdma_only_lte_values);
+                                break;
+                            default:
+                                mButtonEnabledNetworks.setEntries(
+                                        R.array.enabled_networks_cdma_choices);
+                                mButtonEnabledNetworks.setEntryValues(
+                                        R.array.enabled_networks_cdma_values);
+                                break;
+                        }
+                    }
+                }
+                mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+
+                // In World mode force a refresh of GSM Options.
+                if (isWorldMode()) {
+                    mGsmUmtsOptions = null;
+                }
+            } else if (phoneType == PhoneConstants.PHONE_TYPE_GSM) {
+                if (isSupportTdscdma()) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_tdscdma_choices);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_tdscdma_values);
+                } else if (!carrierConfig.getBoolean(CarrierConfigManager.KEY_PREFER_2G_BOOL)
+                        && !getResources().getBoolean(R.bool.config_enabled_lte)) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_except_gsm_lte_choices);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_except_gsm_lte_values);
+                } else if (!carrierConfig.getBoolean(CarrierConfigManager.KEY_PREFER_2G_BOOL)) {
+                    int select = (mShow4GForLTE == true) ?
+                            R.array.enabled_networks_except_gsm_4g_choices
+                            : R.array.enabled_networks_except_gsm_choices;
+                    mButtonEnabledNetworks.setEntries(select);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_except_gsm_values);
+                } else if (!getResources().getBoolean(R.bool.config_enabled_lte)) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_except_lte_choices);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_except_lte_values);
+                } else if (mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_cdma_choices);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_cdma_values);
+                } else {
+                    int select = (mShow4GForLTE == true) ? R.array.enabled_networks_4g_choices
+                            : R.array.enabled_networks_choices;
+                    mButtonEnabledNetworks.setEntries(select);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_values);
+                }
+                mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
+            } else {
+                throw new IllegalStateException("Unexpected phone type: " + phoneType);
+            }
+            if (isWorldMode()) {
+                mButtonEnabledNetworks.setEntries(
+                        R.array.preferred_network_mode_choices_world_mode);
+                mButtonEnabledNetworks.setEntryValues(
+                        R.array.preferred_network_mode_values_world_mode);
+            }
+            // SPRD: FEATURE_CHOOSE_NETWORK_TYPE
+            TeleServiceFactory.getInstance().updateNetworkTypeOptions(this, prefSet,phoneSubId);
+            mButtonEnabledNetworks.setOnPreferenceChangeListener(this);
+            if (DBG) log("settingsNetworkMode: " + settingsNetworkMode);
+        }
+
+        final boolean missingDataServiceUrl = TextUtils.isEmpty(
+                android.provider.Settings.Global.getString(getContentResolver(),
+                        android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL));
+        if (!isLteOnCdma || missingDataServiceUrl) {
+            prefSet.removePreference(mLteDataServicePref);
+        } else {
+            android.util.Log.d(LOG_TAG, "keep ltePref");
+        }
+
+        // Enable enhanced 4G LTE mode settings depending on whether exists on platform
+        if (!(ImsManager.isVolteEnabledByPlatform(this)
+                && ImsManager.isVolteProvisionedOnDevice(this))) {
+            Preference pref = prefSet.findPreference(BUTTON_4G_LTE_KEY);
+            if (pref != null) {
+                prefSet.removePreference(pref);
+            }
+
+            /* SPRD: FEATURE_VOLTE_LOCK @{ */
+            if (mVolteLockPref != null) {
+                prefSet.removePreference(mVolteLockPref);
+            }
+            /* @} */
+        }
+
+        /* SPRD: FEATURE_NATIONAL_DATA_ROAMING @{ */
+        /*mShowNationalDataRoam = carrierConfig
+                .getBoolean("national_data_roaming_bool");*/
+        mShowNationalDataRoam = false;
+        if (phoneSlotId == 1) {
+            mShowNationalDataRoam = false;
+            prefSet.removePreference(mButtonDataRoam);
+            prefSet.removePreference(mButtonPreferredDataRoam);
+        }
+
+        if (mShowNationalDataRoam) {
+            prefSet.removePreference(mButtonDataRoam);
+            prefSet.addPreference(mButtonPreferredDataRoam);
+        }
+        /* @} */
+
+        ActionBar actionBar = getActionBar();
+        if (actionBar != null) {
+            // android.R.id.home will be triggered in onOptionsItemSelected()
+            actionBar.setDisplayHomeAsUpEnabled(true);
+        }
+
+        // Enable link to CMAS app settings depending on the value in config.xml.
+        final boolean isCellBroadcastAppLinkEnabled = this.getResources().getBoolean(
+                com.android.internal.R.bool.config_cellBroadcastAppLinks);
+        if (!mUm.isAdminUser() || !isCellBroadcastAppLinkEnabled
+                || mUm.hasUserRestriction(UserManager.DISALLOW_CONFIG_CELL_BROADCASTS)) {
+            PreferenceScreen root = getPreferenceScreen();
+            Preference ps = findPreference(BUTTON_CELL_BROADCAST_SETTINGS);
+            if (ps != null) {
+                root.removePreference(ps);
+            }
+        }
+
+        // Get the networkMode from Settings.System and displays it
+        /* SPRD: FEATURE_NATIONAL_DATA_ROAMING @{ */
+        if (mShowNationalDataRoam) {
+            int roamType = android.provider.Settings.Global.getInt(mPhone.getContext().
+                    getContentResolver(),
+                    android.provider.Settings.Global.DATA_ROAMING + phoneSubId, 2);
+            updatePreferredDataRoamValueAndSummary(roamType);
+        } else {
+            mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
+        }
+        /* @} */
+
+        mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
+        /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+        if (mButtonDataAol != null) {
+            mButtonDataAol.setChecked(isMobileDataAlwaysOnline(phoneSubId));
+        }
+        /* @} */
+        mButtonEnabledNetworks.setValue(Integer.toString(settingsNetworkMode));
+        mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
+        UpdatePreferredNetworkModeSummary(settingsNetworkMode);
+        UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
+        // Display preferred network type based on what modem returns b/18676277
+        mPhone.setPreferredNetworkType(settingsNetworkMode, mHandler
+                .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+
+        /**
+         * Enable/disable depending upon if there are any active subscriptions.
+         *
+         * I've decided to put this enable/disable code at the bottom as the
+         * code above works even when there are no active subscriptions, thus
+         * putting it afterwards is a smaller change. This can be refined later,
+         * but you do need to remember that this all needs to work when subscriptions
+         * change dynamically such as when hot swapping sims.
+         */
+        boolean hasActiveSubscriptions = hasActiveSubscriptions();
+        TelephonyManager tm = (TelephonyManager) getSystemService(
+                Context.TELEPHONY_SERVICE);
+        boolean canChange4glte = (tm.getCallState() == TelephonyManager.CALL_STATE_IDLE) &&
+                ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext()) &&
+                carrierConfig.getBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL);
+        mButtonDataRoam.setDisabledByAdmin(false);
+        mButtonDataRoam.setEnabled(hasActiveSubscriptions);
+        if (mButtonDataRoam.isEnabled()) {
+            if (RestrictedLockUtils.hasBaseUserRestriction(context,
+                    UserManager.DISALLOW_DATA_ROAMING, UserHandle.myUserId())) {
+                mButtonDataRoam.setEnabled(false);
+            } else {
+                mButtonDataRoam.checkRestrictionAndSetDisabled(UserManager.DISALLOW_DATA_ROAMING);
+            }
+        }
+        /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+        if (mButtonDataAol != null) {
+            mButtonDataAol.setEnabled(hasActiveSubscriptions);
+        }
+        /* @} */
+        mButtonPreferredNetworkMode.setEnabled(hasActiveSubscriptions);
+        mButtonEnabledNetworks.setEnabled(hasActiveSubscriptions);
+        mButton4glte.setEnabled(hasActiveSubscriptions && canChange4glte);
+        mLteDataServicePref.setEnabled(hasActiveSubscriptions);
+        Preference ps;
+        PreferenceScreen root = getPreferenceScreen();
+        ps = findPreference(BUTTON_CELL_BROADCAST_SETTINGS);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+        ps = findPreference(BUTTON_APN_EXPAND_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+        ps = findPreference(BUTTON_OPERATOR_SELECTION_EXPAND_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions && mGsmRoamingIsOpen);
+        }
+        ps = findPreference(BUTTON_CARRIER_SETTINGS_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+        ps = findPreference(BUTTON_CDMA_SYSTEM_SELECT_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        if (DBG) log("onPause:+");
+
+        if (ImsManager.isVolteEnabledByPlatform(this)
+                && ImsManager.isVolteProvisionedOnDevice(this)) {
+            TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+            tm.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);
+        }
+
+        mSubscriptionManager
+            .removeOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
+        TeleServicePluginsHelper.getInstance(this).needUnregisterMobieData(this);
+        if (DBG) log("onPause:-");
+    }
+
+    /**
+     * Implemented to support onPreferenceChangeListener to look for preference
+     * changes specifically on CLIR.
+     *
+     * @param preference is the preference to be changed, should be mButtonCLIR.
+     * @param objValue should be the value of the selection, NOT its localized
+     * display value.
+     */
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        final int phoneSubId = mPhone.getSubId();
+        if (preference == mButtonPreferredNetworkMode) {
+            //NOTE onPreferenceChange seems to be called even if there is no change
+            //Check if the button value is changed from the System.Setting
+            mButtonPreferredNetworkMode.setValue((String) objValue);
+            int buttonNetworkMode;
+            buttonNetworkMode = Integer.parseInt((String) objValue);
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                    mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+            if (buttonNetworkMode != settingsNetworkMode) {
+                int modemNetworkMode;
+                // if new mode is invalid ignore it
+                switch (buttonNetworkMode) {
+                    case Phone.NT_MODE_WCDMA_PREF:
+                    case Phone.NT_MODE_GSM_ONLY:
+                    case Phone.NT_MODE_WCDMA_ONLY:
+                    case Phone.NT_MODE_GSM_UMTS:
+                    case Phone.NT_MODE_CDMA:
+                    case Phone.NT_MODE_CDMA_NO_EVDO:
+                    case Phone.NT_MODE_EVDO_NO_CDMA:
+                    case Phone.NT_MODE_GLOBAL:
+                    case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                    case Phone.NT_MODE_LTE_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_ONLY:
+                    case Phone.NT_MODE_LTE_WCDMA:
+                    case Phone.NT_MODE_TDSCDMA_ONLY:
+                    case Phone.NT_MODE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA:
+                    case Phone.NT_MODE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                        // This is one of the modes we recognize
+                        modemNetworkMode = buttonNetworkMode;
+                        break;
+                    default:
+                        loge("Invalid Network Mode (" + buttonNetworkMode + ") chosen. Ignore.");
+                        return true;
+                }
+
+                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                        buttonNetworkMode );
+                //Set the modem network mode
+                mPhone.setPreferredNetworkType(modemNetworkMode, mHandler
+                        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+            }
+        } else if (preference == mButtonEnabledNetworks) {
+            mButtonEnabledNetworks.setValue((String) objValue);
+            int buttonNetworkMode;
+            buttonNetworkMode = Integer.parseInt((String) objValue);
+            if (DBG) log("buttonNetworkMode: " + buttonNetworkMode);
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                    mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+            if (buttonNetworkMode != settingsNetworkMode) {
+                int modemNetworkMode;
+                // if new mode is invalid ignore it
+                switch (buttonNetworkMode) {
+                    case Phone.NT_MODE_WCDMA_PREF:
+                    case Phone.NT_MODE_GSM_ONLY:
+                    case Phone.NT_MODE_LTE_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_CDMA:
+                    case Phone.NT_MODE_CDMA_NO_EVDO:
+                    case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                    case Phone.NT_MODE_TDSCDMA_ONLY:
+                    case Phone.NT_MODE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA:
+                    case Phone.NT_MODE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_ONLY:
+                    case Phone.NT_MODE_WCDMA_ONLY:
+                    case Phone.NT_MODE_LTE_WCDMA:
+                        // This is one of the modes we recognize
+                        modemNetworkMode = buttonNetworkMode;
+                        break;
+                    default:
+                        loge("Invalid Network Mode (" + buttonNetworkMode + ") chosen. Ignore.");
+                        return true;
+                }
+
+                if (buttonNetworkMode == Phone.NT_MODE_LTE_ONLY) {
+                    AlertDialog show = new AlertDialog.Builder(this)
+                        .setTitle(R.string.network_mode_dialog_title)
+                        .setMessage(R.string.network_mode_dialog_content)
+                        .setPositiveButton(R.string.network_mode_dialog_ok, new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int which) {
+                                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                                    buttonNetworkMode );
+                                //Set the modem network mode
+                                mPhone.setPreferredNetworkType(modemNetworkMode, mHandler
+                                        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+                                UpdateEnabledNetworksValueAndSummary(buttonNetworkMode);
+                            }
+
+                        })
+                        .setNegativeButton(R.string.network_mode_dialog_cancel, new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int which) {
+                                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                                android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                                buttonNetworkMode );
+                                //Set the modem network mode
+                                mPhone.setPreferredNetworkType(Phone.NT_MODE_LTE_GSM_WCDMA, mHandler
+                                    .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+                                mButtonEnabledNetworks.setValue(
+                                    Integer.toString(Phone.NT_MODE_LTE_GSM_WCDMA));
+
+                            }
+                        })
+                        .setCancelable(false)
+                        .show();
+                } else {
+                    android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                            android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                            buttonNetworkMode );
+                    //Set the modem network mode
+                    mPhone.setPreferredNetworkType(modemNetworkMode, mHandler
+                            .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+                }
+
+
+            }
+        } else if (preference == mButton4glte) {
+            SwitchPreference enhanced4gModePref = (SwitchPreference) preference;
+            if (!isImsTurnOffAllowed(getApplicationContext()) &&
+                    enhanced4gModePref.isChecked()) {
+                Toast.makeText(this, getString(R.string.turn_off_ims_error), Toast.LENGTH_LONG)
+                        .show();
+                return false;
+            }
+            boolean enhanced4gMode = !enhanced4gModePref.isChecked();
+			if(enhanced4gMode){
+				ImsManager.setEnhanced4gLteModeSetting(MobileNetworkSettings.this, true);
+			}
+			if (DBG) log("enhanced4gModePref.setChecked():  "+enhanced4gMode); 
+            if (!enhanced4gMode) {                
+				AlertDialog.Builder dialog = new AlertDialog.Builder(this);                
+				dialog.setMessage(R.string.close_volte_info);                
+				dialog.setPositiveButton(R.string.confirm,                    
+					new OnClickListener() {                        
+					@Override                        
+						public void onClick(DialogInterface dialog, int which) {                           
+							enhanced4gModePref.setChecked(enhanced4gMode);
+							ImsManager.setEnhanced4gLteModeSetting(MobileNetworkSettings.this, false);
+						}                    
+				});                
+				dialog.setNegativeButton(R.string.votle_cancel,                    
+					new OnClickListener() {                        
+					@Override                        
+						public void onClick(DialogInterface dialog, int which) {                            
+						// TODO Auto-generated method stub                            
+							enhanced4gModePref.setChecked(!enhanced4gMode);
+						}                    
+					});                
+				dialog.setCancelable(false);                
+				dialog.create();                
+				dialog.show();            
+				}
+        } else if (preference == mButtonDataRoam) {
+            if (DBG) log("onPreferenceTreeClick: preference == mButtonDataRoam.");
+
+            //normally called on the toggle click
+            if (!mButtonDataRoam.isChecked()) {
+                // First confirm with a warning dialog about charges
+                mOkClicked = false;
+                new AlertDialog.Builder(this).setMessage(
+                        getResources().getString(R.string.roaming_warning))
+                        .setTitle(R.string.roaming_alert_title)
+                        .setIconAttribute(android.R.attr.alertDialogIcon)
+                        .setPositiveButton(android.R.string.yes, this)
+                        .setNegativeButton(android.R.string.no, this)
+                        .show()
+                        .setOnDismissListener(this);
+            } else {
+                mPhone.setDataRoamingEnabled(false);
+            }
+            return true;
+        /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+        } else if (preference == mButtonDataAol) {
+            if (mButtonDataAol.isChecked()) {
+                showDialog(DIALOG_DISABLE_MOBILE_DATA_AOL);
+            } else {
+                setMobileDataAlwaysOnline(phoneSubId, true);
+            }
+            return true;
+        /* @} */
+        /* SPRD: FEATURE_NATIONAL_DATA_ROAMING @{ */
+        } else if (preference == mButtonPreferredDataRoam) {
+            if(DBG) log("onPreferenceChange: preference == mButtonPreferredDataRoam.");
+            final int buttonDataRoam;
+            buttonDataRoam = Integer.valueOf((String) objValue).intValue();
+            if (DBG) log("buttonDataRoam: " + buttonDataRoam);
+
+            /*updatePreferredDataRoamValueAndSummary(buttonDataRoam);
+            android.provider.Settings.Global.putInt(
+                    mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.DATA_ROAMING + phoneSubId,
+                    buttonDataRoam);*/
+            /* @} */
+            final int currentRoamingType = Integer.valueOf(mButtonPreferredDataRoam.getValue()).intValue();
+            if (buttonDataRoam != currentRoamingType) {
+                if (buttonDataRoam != DATA_ROAM_DISABLE) {
+                    new AlertDialog.Builder(this).setMessage(
+                            getResources().getString(R.string.roaming_warning))
+                            .setTitle(R.string.roaming_alert_title)
+                            .setIconAttribute(android.R.attr.alertDialogIcon)
+                            .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which) {
+                                    updatePreferredDataRoamValueAndSummary(buttonDataRoam);
+                                    android.provider.Settings.Global.putInt(
+                                            mPhone.getContext().getContentResolver(),
+                                            android.provider.Settings.Global.DATA_ROAMING + phoneSubId,
+                                            buttonDataRoam);
+                                    if (DATA_ROAM_THIS_TRIP == buttonDataRoam) {
+                                        TelephonyManager tm = (TelephonyManager) getSystemService(
+                                                Context.TELEPHONY_SERVICE);
+                                        String mcc = tm.getNetworkOperator(phoneSubId);
+                                        if (!TextUtils.isEmpty(mcc)) {
+                                            android.provider.Settings.Global.putString(mPhone.getContext().getContentResolver(),
+                                                    COUNTRY_CODE_MCC + phoneSubId, mcc.substring(0, 3));
+                                            android.util.Log.i("zhangheng" , "mcc = " + mcc.substring(0, 3));
+                                        }
+                                    }
+                                }
+                            })
+                            .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which) {
+                                    updatePreferredDataRoamValueAndSummary(currentRoamingType);
+                                }
+                            })
+                            .setOnCancelListener(new DialogInterface.OnCancelListener() {
+                                @Override
+                                public void onCancel(DialogInterface dialog) {
+                                    updatePreferredDataRoamValueAndSummary(currentRoamingType);
+                                }
+                            })
+                            .show();
+                } else {
+                    updatePreferredDataRoamValueAndSummary(buttonDataRoam);
+                    android.provider.Settings.Global.putInt(
+                            mPhone.getContext().getContentResolver(),
+                            android.provider.Settings.Global.DATA_ROAMING + phoneSubId,
+                            buttonDataRoam);
+                }
+            }
+
+            /* SPRD: FEATURE_RESOLUTION_SETTING @{ */
+        } else if (preference == mPreferredSetResolution) {
+            try {
+                mImsConfig.setFeatureValue(VideoQualityConstants.FEATURE_VT_RESOLUTION,VideoQualityConstants.NETWORK_VT_RESOLUTION,
+                        Integer.parseInt((String) objValue)+1,mImsConfigListenerProxy);
+            } catch (Exception ie) {
+
+            }
+            //mPreferredSetResolution.setValueIndex(Integer.parseInt((String)objValue));
+            mPreferredSetResolution.setValueIndex(RESOLUTION_QVGA_15-1);
+            mPreferredSetResolution.setSummary(mPreferredSetResolution.getEntry());
+            setVideoQualitytoPreference(Integer.parseInt((String)objValue));
+        }
+        /* @} */
+        /* SPRD: Bug636916,FEATURE_MOBILE_DATA_BUTTON @{ */
+        else if (preference == mMobileDataSwitch) {
+            mMobileDataSwitch = TeleServicePluginsHelper.getInstance(this).
+                    needSetDataEnable(mMobileDataSwitch,phoneSubId);
+
+        }else if(preference == mButtonGsmRoaming){
+			SwitchPreference gsmRoamingPreference = (SwitchPreference) preference;
+            boolean gsmRaomingOn = !gsmRoamingPreference.isChecked();
+            gsmRoamingPreference.setChecked(gsmRaomingOn);
+			if(gsmRoamingPreference.isChecked()){
+				mGsmRoamingIsOpen=true;
+			}else{
+				mGsmRoamingIsOpen=false;
+			}
+            android.provider.Settings.Global.putInt(
+                    mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.GSM_ROAMING_ENABLED + phoneSubId, gsmRoamingPreference.isChecked() ? 1: 0);
+            android.util.Log.e("Tony","gsmRaomingOn = " + gsmRaomingOn + ",phoneSubId = " + phoneSubId);
+			if(gsmRaomingOn){
+				AlertDialog.Builder dialog = new AlertDialog.Builder(this);
+        		dialog.setTitle(R.string.roaming_mode);
+				dialog.setMessage(R.string.roaming_info);                
+				dialog.setPositiveButton(R.string.roaming_ok,                    
+				new OnClickListener() {                        
+				@Override                        
+					public void onClick(DialogInterface dialog, int which) {                           
+						gsmRoamingPreference.setChecked(gsmRaomingOn);
+					}                    
+				});                
+				dialog.setNegativeButton(R.string.roaming_cancle,                    
+				new OnClickListener() {                        
+				@Override                        
+					public void onClick(DialogInterface dialog, int which) {                            
+						gsmRoamingPreference.setChecked(!gsmRaomingOn);
+						if(gsmRaomingOn && null != Integer.valueOf(phoneSubId) && phoneSubId > 0) {
+                	//send AT command for gsm roaming
+                		new AsyncTask<Void, Void, Void>() {
+                    		@Override
+                   			 protected Void doInBackground(Void... voids) {
+                        		final TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+                        		tm.setNetworkSelectionModeAutomatic(phoneSubId);
+                        		return null;
+                    		}
+                		  }.execute();
+            			}
+					}                    
+				});
+				dialog.setCancelable(false);
+				dialog.create();                
+				dialog.show();  
+
+			}
+           
+		}
+
+        updateBody();
+        // always let the preference setting proceed.
+        return true;
+    }
+
+    private class MyHandler extends Handler {
+
+        static final int MESSAGE_SET_PREFERRED_NETWORK_TYPE = 0;
+
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case MESSAGE_SET_PREFERRED_NETWORK_TYPE:
+                    handleSetPreferredNetworkTypeResponse(msg);
+                    break;
+            }
+        }
+
+        private void handleSetPreferredNetworkTypeResponse(Message msg) {
+            if (isDestroyed()) { // Access preferences of activity only if it is not destroyed
+                return;
+            }
+
+            AsyncResult ar = (AsyncResult) msg.obj;
+            final int phoneSubId = mPhone.getSubId();
+
+            if (ar.exception == null) {
+                int networkMode;
+                if (getPreferenceScreen().findPreference(BUTTON_PREFERED_NETWORK_MODE) != null)  {
+                    networkMode =  Integer.parseInt(mButtonPreferredNetworkMode.getValue());
+                    android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                            android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                            networkMode );
+                }
+                if (getPreferenceScreen().findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null)  {
+                    networkMode = Integer.parseInt(mButtonEnabledNetworks.getValue());
+                    android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                            android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                            networkMode );
+                }
+            } else {
+                if (DBG) {
+                    log("handleSetPreferredNetworkTypeResponse: exception in setting network mode.");
+                }
+                updatePreferredNetworkUIFromDb();
+            }
+        }
+    }
+
+    private void updatePreferredNetworkUIFromDb() {
+        final int phoneSubId = mPhone.getSubId();
+
+        int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                mPhone.getContext().getContentResolver(),
+                android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                preferredNetworkMode);
+
+        if (DBG) {
+            log("updatePreferredNetworkUIFromDb: settingsNetworkMode = " +
+                    settingsNetworkMode);
+        }
+
+        UpdatePreferredNetworkModeSummary(settingsNetworkMode);
+        UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
+        // changes the mButtonPreferredNetworkMode accordingly to settingsNetworkMode
+        mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
+    }
+
+    private void UpdatePreferredNetworkModeSummary(int NetworkMode) {
+        switch(NetworkMode) {
+            case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_TDSCDMA_GSM:
+            case Phone.NT_MODE_WCDMA_PREF:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_wcdma_perf_summary);
+                break;
+            case Phone.NT_MODE_GSM_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_gsm_only_summary);
+                break;
+            case Phone.NT_MODE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_WCDMA_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_wcdma_only_summary);
+                break;
+            case Phone.NT_MODE_GSM_UMTS:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_gsm_wcdma_summary);
+                break;
+            case Phone.NT_MODE_CDMA:
+                switch (mPhone.getLteOnCdmaMode()) {
+                    case PhoneConstants.LTE_ON_CDMA_TRUE:
+                        mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_cdma_summary);
+                    break;
+                    case PhoneConstants.LTE_ON_CDMA_FALSE:
+                    default:
+                        mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_cdma_evdo_summary);
+                        break;
+                }
+                break;
+            case Phone.NT_MODE_CDMA_NO_EVDO:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_cdma_only_summary);
+                break;
+            case Phone.NT_MODE_EVDO_NO_CDMA:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_evdo_only_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA:
+            case Phone.NT_MODE_LTE_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_GSM_WCDMA:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_gsm_wcdma_summary);
+                break;
+            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_cdma_evdo_summary);
+                break;
+            case Phone.NT_MODE_TDSCDMA_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_tdscdma_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                if (mPhone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA ||
+                        mIsGlobalCdma ||
+                        isWorldMode()) {
+                    mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_global_summary);
+                } else {
+                    mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_lte_summary);
+                }
+                break;
+            case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+            case Phone.NT_MODE_GLOBAL:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_cdma_evdo_gsm_wcdma_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_LTE_WCDMA:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_wcdma_summary);
+                break;
+            default:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_global_summary);
+        }
+    }
+
+    private void UpdateEnabledNetworksValueAndSummary(int NetworkMode) {
+        switch (NetworkMode) {
+            case Phone.NT_MODE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_TDSCDMA_GSM:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_TDSCDMA_GSM_WCDMA));
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_WCDMA_ONLY:
+            case Phone.NT_MODE_GSM_UMTS:
+            case Phone.NT_MODE_WCDMA_PREF:
+                if (!mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_WCDMA_PREF));
+                    mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_global);
+                }
+                break;
+            case Phone.NT_MODE_GSM_ONLY:
+                if (!mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_GSM_ONLY));
+                    mButtonEnabledNetworks.setSummary(R.string.network_2G);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_global);
+                }
+                break;
+            case Phone.NT_MODE_LTE_GSM_WCDMA:
+                if (isWorldMode()) {
+                    mButtonEnabledNetworks.setSummary(
+                            R.string.preferred_network_mode_lte_gsm_umts_summary);
+                    controlCdmaOptions(false);
+                    controlGsmOptions(true);
+                    break;
+                }
+            case Phone.NT_MODE_LTE_ONLY:
+            case Phone.NT_MODE_LTE_WCDMA:
+                if (!mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary((mShow4GForLTE == true)
+                            ? R.string.network_4G : R.string.network_lte);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_global);
+                }
+                break;
+            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                if (isWorldMode()) {
+                    mButtonEnabledNetworks.setSummary(
+                            R.string.preferred_network_mode_lte_cdma_summary);
+                    controlCdmaOptions(true);
+                    controlGsmOptions(false);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_AND_EVDO));
+                    mButtonEnabledNetworks.setSummary(R.string.network_lte);
+                }
+                break;
+            case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA));
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_CDMA:
+            case Phone.NT_MODE_EVDO_NO_CDMA:
+            case Phone.NT_MODE_GLOBAL:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_CDMA));
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_CDMA_NO_EVDO:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_CDMA_NO_EVDO));
+                mButtonEnabledNetworks.setSummary(R.string.network_1x);
+                break;
+            case Phone.NT_MODE_TDSCDMA_ONLY:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_TDSCDMA_ONLY));
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_TDSCDMA:
+            case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                if (isSupportTdscdma()) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_lte);
+                } else {
+                    if (isWorldMode()) {
+                        controlCdmaOptions(true);
+                        controlGsmOptions(false);
+                    }
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    if (mPhone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA ||
+                            mIsGlobalCdma ||
+                            isWorldMode()) {
+                        mButtonEnabledNetworks.setSummary(R.string.network_global);
+                    } else {
+                        mButtonEnabledNetworks.setSummary((mShow4GForLTE == true)
+                                ? R.string.network_4G : R.string.network_lte);
+                    }
+                }
+                break;
+            default:
+                String errMsg = "Invalid Network Mode (" + NetworkMode + "). Ignore.";
+                loge(errMsg);
+                mButtonEnabledNetworks.setSummary(errMsg);
+        }
+        // SPRD: FEATURE_CHOOSE_NETWORK_TYPE
+        TeleServiceFactory.getInstance().UpdateEnabledNetworksValueAndSummary(NetworkMode);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch(requestCode) {
+        case REQUEST_CODE_EXIT_ECM:
+            Boolean isChoiceYes =
+                data.getBooleanExtra(EmergencyCallbackModeExitDialog.EXTRA_EXIT_ECM_RESULT, false);
+            if (isChoiceYes) {
+                // If the phone exits from ECM mode, show the CDMA Options
+                mCdmaOptions.showDialog(mClickedPreference);
+            } else {
+                // do nothing
+            }
+            break;
+
+        default:
+            break;
+        }
+    }
+
+    private static void log(String msg) {
+        Log.d(LOG_TAG, msg);
+    }
+
+    private static void loge(String msg) {
+        Log.e(LOG_TAG, msg);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        final int itemId = item.getItemId();
+        if (itemId == android.R.id.home) {  // See ActionBar#setDisplayHomeAsUpEnabled()
+            // Commenting out "logical up" capability. This is a workaround for issue 5278083.
+            //
+            // Settings app may not launch this activity via UP_ACTIVITY_CLASS but the other
+            // Activity that looks exactly same as UP_ACTIVITY_CLASS ("SubSettings" Activity).
+            // At that moment, this Activity launches UP_ACTIVITY_CLASS on top of the Activity.
+            // which confuses users.
+            // TODO: introduce better mechanism for "up" capability here.
+            /*Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.setClassName(UP_ACTIVITY_PACKAGE, UP_ACTIVITY_CLASS);
+            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+            startActivity(intent);*/
+            finish();
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    private boolean isWorldMode() {
+        boolean worldModeOn = false;
+        final TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+        final String configString = getResources().getString(R.string.config_world_mode);
+
+        if (!TextUtils.isEmpty(configString)) {
+            String[] configArray = configString.split(";");
+            // Check if we have World mode configuration set to True only or config is set to True
+            // and SIM GID value is also set and matches to the current SIM GID.
+            if (configArray != null &&
+                   ((configArray.length == 1 && configArray[0].equalsIgnoreCase("true")) ||
+                       (configArray.length == 2 && !TextUtils.isEmpty(configArray[1]) &&
+                           tm != null && configArray[1].equalsIgnoreCase(tm.getGroupIdLevel1())))) {
+                               worldModeOn = true;
+            }
+        }
+
+        if (DBG) {
+            log("isWorldMode=" + worldModeOn);
+        }
+
+        return worldModeOn;
+    }
+
+    private void controlGsmOptions(boolean enable) {
+        PreferenceScreen prefSet = getPreferenceScreen();
+        if (prefSet == null) {
+            return;
+        }
+
+        if (mGsmUmtsOptions == null) {
+            mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, mPhone.getSubId());
+        }
+        PreferenceScreen apnExpand =
+                (PreferenceScreen) prefSet.findPreference(BUTTON_APN_EXPAND_KEY);
+        PreferenceScreen operatorSelectionExpand =
+                (PreferenceScreen) prefSet.findPreference(BUTTON_OPERATOR_SELECTION_EXPAND_KEY);
+        PreferenceScreen carrierSettings =
+                (PreferenceScreen) prefSet.findPreference(BUTTON_CARRIER_SETTINGS_KEY);
+        if (apnExpand != null) {
+            apnExpand.setEnabled(isWorldMode() || enable);
+        }
+        if (operatorSelectionExpand != null) {
+            if (enable && mGsmRoamingIsOpen) {
+                operatorSelectionExpand.setEnabled(true);
+            } else {
+                prefSet.removePreference(operatorSelectionExpand);
+            }
+        }
+        if (carrierSettings != null) {
+            prefSet.removePreference(carrierSettings);
+        }
+    }
+
+    private void controlCdmaOptions(boolean enable) {
+        PreferenceScreen prefSet = getPreferenceScreen();
+        if (prefSet == null) {
+            return;
+        }
+        if (enable && mCdmaOptions == null) {
+            mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+        }
+        CdmaSystemSelectListPreference systemSelect =
+                (CdmaSystemSelectListPreference)prefSet.findPreference
+                        (BUTTON_CDMA_SYSTEM_SELECT_KEY);
+        if (systemSelect != null) {
+            systemSelect.setEnabled(enable);
+        }
+    }
+
+    private boolean isSupportTdscdma() {
+        if (getResources().getBoolean(R.bool.config_support_tdscdma)) {
+            return true;
+        }
+
+        String operatorNumeric = mPhone.getServiceState().getOperatorNumeric();
+        String[] numericArray = getResources().getStringArray(
+                R.array.config_support_tdscdma_roaming_on_networks);
+        if (numericArray.length == 0 || operatorNumeric == null) {
+            return false;
+        }
+        for (String numeric : numericArray) {
+            if (operatorNumeric.equals(numeric)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /* SPRD: FEATURE_DATA_ALWAYS_ONLINE @{ */
+    @Override
+    protected Dialog onCreateDialog(int id) {
+        switch (id) {
+            case DIALOG_DISABLE_MOBILE_DATA_AOL:
+                AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                builder.setIcon(R.drawable.ic_dialog_alert)
+                        .setMessage(R.string.data_always_online_dialog)
+                        .setTitle(R.string.dialog_alert_title)
+                        .setPositiveButton(android.R.string.ok,
+                                new DialogInterface.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int id) {
+                                        int phoneSubId = mPhone.getSubId();
+                                        // SPRD: Bug 612136 Make sure the option is unchecked
+                                        mButtonDataAol.setChecked(false);
+                                        setMobileDataAlwaysOnline(phoneSubId, false);
+                                    }
+                                })
+                        .setNegativeButton(android.R.string.no,
+                                new DialogInterface.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int id) {
+                                        mButtonDataAol.setChecked(true);
+                                        dialog.cancel();
+                                    }
+                                })
+                        /* SPRD: Bug 609271 restore check state when dialog is cancelled @{ */
+                        .setOnCancelListener(new DialogInterface.OnCancelListener() {
+                            @Override
+                            public void onCancel(DialogInterface dialog) {
+                                mButtonDataAol.setChecked(true);
+                            }
+                        })
+                        /* @} */
+                        .setOnDismissListener(new DialogInterface.OnDismissListener() {
+                            @Override
+                            public void onDismiss(DialogInterface dialog) {
+                                removeDialog(DIALOG_DISABLE_MOBILE_DATA_AOL);
+                            }
+                        });
+                AlertDialog dialog = builder.create();
+                return dialog;
+            default:
+                break;
+        }
+        return null;
+    }
+
+    private boolean enableDataAlwaysOnline() {
+        PersistableBundle carrierConfig = PhoneGlobals.getInstance().getCarrierConfig();
+        if (carrierConfig != null) {
+            return carrierConfig.getBoolean("enable_data_always_online_bool", true);
+        }
+        return true;
+    }
+
+    private boolean isMobileDataAlwaysOnline(int subId) {
+        return mSharedPrefs.getBoolean(BUTTON_ALWAYS_ONLINE_KEY + subId, true);
+    }
+
+    private void setMobileDataAlwaysOnline(int subId, boolean onOff) {
+        SharedPreferences.Editor editor = mSharedPrefs.edit();
+        editor.putBoolean(BUTTON_ALWAYS_ONLINE_KEY + subId, onOff);
+        editor.commit();
+    }
+    /* @} */
+
+    /* SPRD: FEATURE_NATIONAL_DATA_ROAMING @ */
+    private void updatePreferredDataRoamValueAndSummary(int roamType) {
+        mButtonPreferredDataRoam.setValue(String.valueOf(roamType));
+        mButtonPreferredDataRoam.setSummary(mButtonPreferredDataRoam.getEntry());
+    }
+    /* @} */
+
+    /* SPRD: FEATURE_RESOLUTION_SETTING @{ */
+    private void setVideoQualitytoPreference(int quality){
+        SharedPreferences.Editor editor = mSharedPrefs.edit();
+        editor.putInt(VT_RESOLUTION , quality);
+        editor.commit();
+    }
+
+    private int getVideoQualityFromPreference(){
+        int videoQuality = mSharedPrefs.getInt(VT_RESOLUTION , 2);
+        log("getVideoQualityFromSharedPrefs :videoQuality "+videoQuality);
+        return videoQuality;
+    }
+
+    private class ImsConfigListenerProxy extends ImsConfigListener.Stub {
+
+        @Override
+        public void onGetFeatureResponse(int feature, int network, int value, int status){
+        }
+
+        @Override
+        public void onSetFeatureResponse(int feature, int network, int value, int status){
+        }
+
+        @Override
+        public void onGetVideoQuality(int status, int quality){
+            mPreferredSetResolution.setValueIndex(quality - 1);
+            mPreferredSetResolution.setSummary(mPreferredSetResolution.getEntry());
+        }
+
+        @Override
+        public void onSetVideoQuality(int status){
+        }
+    }
+    /* @} */
+
+    private boolean isImsTurnOffAllowed(Context context) {
+        return !ImsManager.isWfcEnabledByPlatform(context)
+                || !ImsManager.isWfcEnabledByUser(context);
+    }
+}
