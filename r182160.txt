Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/modem_entry.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/modem_entry.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/modem_entry.c	(revision 182160)
@@ -0,0 +1,45 @@
+#include <common.h>
+#include <asm/arch/sprd_reg.h>
+#include "cp_boot.h"
+#include "loader_common.h"
+
+
+void cp_adr_remap(u32 cp_kernel_exec_addr, u32 cp_zero_map_addr)
+{
+    u32 data[3] = {0xe59f0000, 0xe12fff10,   cp_kernel_exec_addr};
+    memcpy( cp_zero_map_addr, data, sizeof(data));      /* copy cp0 source code */
+}
+
+void modem_entry()
+{
+	sipc_addr_reset();
+
+#if !defined( CONFIG_KERNEL_BOOT_CP )
+	pmic_arm7_boot();
+
+	/*if recovery mode and not cali mode, skip boot modem image*/
+	if (strstr(getenv("bootmode"), "recovery")
+			&& NULL == get_calibration_parameter()) {
+		debugf("recovery mode, skip boot modem!");
+		return;
+	}
+
+	cp_adr_remap(CP1_EXEC_ADR, CP1_ZERO_MAP_ADR);
+	cp1_boot();
+#endif
+}
+
+
+void sipc_addr_reset()
+{
+
+	/*to be fill in*/
+	//memset((void *)SIPC_GGE_APCP_START_ADDR, 0x0, SIPC_APCP_RESET_ADDR_SIZE);
+	memset((void *)SIPC_LTE_APCP_START_ADDR, 0x0, SIPC_APCP_RESET_ADDR_SIZE);
+	memset((void *)SIPC_PMIC_SIPC_START_ADDR, 0x0, 0x2000);
+	return;
+
+}
+
+
+
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/sprd_kp.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/sprd_kp.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/sprd_kp.c	(revision 182160)
@@ -0,0 +1,60 @@
+#include <common.h>
+#include <malloc.h>
+#include "key_map.h"
+#include <boot_mode.h>
+#include <asm/arch/mfp.h>
+#include <asm/arch/chip_drv_common_io.h>
+#include <asm/arch/sprd_eic.h>
+
+void board_keypad_init(void)
+{
+	sprd_gpio_request(NULL, 124);
+	sprd_gpio_direction_input(NULL, 124);
+
+	sprd_gpio_request(NULL, 125);
+	sprd_gpio_direction_input(NULL, 125);
+
+	printf("[gpio keys] init!\n");
+	return;
+}
+
+unsigned char board_key_scan(void)
+{
+	uint32_t key_code = KEY_RESERVED;
+	int gpio_volumeup = -1;
+	int gpio_volumedown = -1;
+
+    sprd_eic_request(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
+    udelay(3000);
+    gpio_volumeup = sprd_eic_get(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
+    if(gpio_volumeup < 0)
+        printf("[eic keys] volumeup : sprd_eic_get return ERROR!\n");
+    if(gpio_volumeup > 0) {
+        key_code = KEY_VOLUMEUP;
+        printf("[eic keys] volumeup pressed!\n");
+    }
+
+    gpio_volumedown = sprd_gpio_get(NULL, 124);
+    if(gpio_volumedown < 0)
+        printf("[gpio keys] volumedown : sprd_gpio_get return ERROR!\n");
+	if (0 == gpio_volumedown) {
+        key_code = KEY_VOLUMEDOWN;
+        printf("[gpio keys] volumedown pressed!\n");
+	}
+
+	if (KEY_RESERVED == key_code)
+		printf("[gpio keys] no key pressed!\n");
+	return key_code;
+}
+
+unsigned int check_key_boot(unsigned char key)
+{
+	if(KEY_VOLUMEUP == key)
+		return CMD_FACTORYTEST_MODE;
+	else if(KEY_HOME == key)
+		return CMD_FASTBOOT_MODE;
+	else if(KEY_VOLUMEDOWN== key)
+		return CMD_RECOVERY_MODE;
+	else
+		return 0;
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/sprd_bl.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/sprd_bl.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/sprd_bl.c	(revision 182160)
@@ -0,0 +1,53 @@
+#include <common.h>
+#include <asm/arch/hardware.h>
+#include <asm/io.h>
+#include <asm/arch/sprd_reg.h>
+
+#define PWM_INDEX 2
+
+#define PWM_PRESCALE (0x0000)
+#define PWM_CNT (0x0004)
+#define PWM_PAT_LOW (0x000C)
+#define PWM_PAT_HIG (0x0010)
+
+#define PWM_ENABLE (1 << 8)
+#define PWM2_SCALE 0x0
+#define PWM_REG_MSK 0xffff
+#define PWM_MOD_MAX 0xff
+
+extern void backlight_control(int brigtness);
+static inline uint32_t pwm_read(int index, uint32_t reg)
+{
+	return __raw_readl(CTL_BASE_PWM + index * 0x20 + reg);
+}
+
+static void pwm_write(int index, uint32_t value, uint32_t reg)
+{
+	__raw_writel(value, CTL_BASE_PWM + index * 0x20 + reg);
+}
+
+void set_backlight(uint32_t brightness)
+{
+	int index = PWM_INDEX;
+
+#if defined CONFIG_FB_LCD_ILI9881C_1_MIPI
+	backlight_control(brightness);
+#else
+	__raw_bits_or((0x1 << 0), REG_AON_CLK_PWM0_CFG + index * 4);//ext_26m select
+
+	if (0 == brightness) {
+		pwm_write(index, 0, PWM_PRESCALE);
+		printf("sprd backlight power off. pwm_index=%d  brightness=%d\n", index, brightness);
+	} else {
+		__raw_bits_or((0x1 << (index+4)), REG_AON_APB_APB_EB0); //PWMx EN
+
+		pwm_write(index, PWM2_SCALE, PWM_PRESCALE);
+		pwm_write(index, (brightness << 8) | PWM_MOD_MAX, PWM_CNT);
+		pwm_write(index, PWM_REG_MSK, PWM_PAT_LOW);
+		pwm_write(index, PWM_REG_MSK, PWM_PAT_HIG);
+		pwm_write(index, PWM_ENABLE, PWM_PRESCALE);
+		printf("sprd backlight power on. pwm_index=%d  brightness=%d\n", index, brightness);
+	}
+#endif
+	return;
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/u-boot.lds
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/u-boot.lds	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/u-boot.lds	(revision 182160)
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2004-2008 Texas Instruments
+ *
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	. = 0x00000000;
+
+	. = ALIGN(4);
+	.text :
+	{
+		*(.__image_copy_start)
+		CPUDIR/start.o (.text*)
+		*(.text*)
+	}
+
+	. = ALIGN(4);
+	.rodata : { *(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*))) }
+
+
+	. = ALIGN(4);
+
+        .rodata : { *(.rodata) KEEP(*(SORT_BY_NAME(.rodata.regu*))) }
+
+        . = ALIGN(4);
+
+	.data : {
+		*(.data*)
+	}
+
+	. = ALIGN(4);
+
+	. = .;
+
+	. = ALIGN(4);
+	.u_boot_list : {
+		KEEP(*(SORT(.u_boot_list*)));
+	}
+
+	. = ALIGN(4);
+
+	.image_copy_end :
+	{
+		*(.__image_copy_end)
+	}
+
+	.rel_dyn_start :
+	{
+		*(.__rel_dyn_start)
+	}
+
+	.rel.dyn : {
+		*(.rel*)
+	}
+
+	.rel_dyn_end :
+	{
+		*(.__rel_dyn_end)
+	}
+
+	_end = .;
+
+	/*
+	 * Deprecated: this MMU section is used by pxa at present but
+	 * should not be used by new boards/CPUs.
+	 */
+	. = ALIGN(4096);
+	.mmutable : {
+		*(.mmutable)
+	}
+
+/*
+ * Compiler-generated __bss_start and __bss_end, see arch/arm/lib/bss.c
+ * __bss_base and __bss_limit are for linker only (overlay ordering)
+ */
+
+	.bss_start __rel_dyn_start (OVERLAY) : {
+		KEEP(*(.__bss_start));
+		__bss_base = .;
+	}
+
+	.bss __bss_base (OVERLAY) : {
+		*(.bss*)
+		 . = ALIGN(4);
+		 __bss_limit = .;
+	}
+
+	.bss_end __bss_limit (OVERLAY) : {
+		KEEP(*(.__bss_end));
+	}
+
+	.dynsym _end : { *(.dynsym) }
+	.dynbss : { *(.dynbss) }
+	.dynstr : { *(.dynstr*) }
+	.dynamic : { *(.dynamic*) }
+	.plt : { *(.plt*) }
+	.interp : { *(.interp*) }
+	.gnu : { *(.gnu*) }
+	.ARM.exidx : { *(.ARM.exidx*) }
+	.gnu.linkonce.armexidx : { *(.gnu.linkonce.armexidx.*) }
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/ldo_sleep.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/ldo_sleep.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/ldo_sleep.c	(revision 182160)
@@ -0,0 +1,364 @@
+#include <asm/arch/sci_types.h>
+#include "adi_hal_internal.h"
+#include <asm/arch/chip_drv_common_io.h>
+#include <asm/arch/sprd_reg.h>
+
+/***************************************************************************************************************************/
+/*     VDD18 VDD28 VDD25 RF0 RF1 RF2 EMMCIO EMMCCORE DCDCARM DCDCWRF DCDCWPA DCDCGEN DCDCOTP AVDD18 SD SIM0 SIM1 SIM2 CAMA */
+/* AP    x     x    v     v   v   v     v      v        v       v       v       x       v      v    v    v   v     v    v  */
+/* CP0   x     x    v     v   v   x     x      x        x       v       x       x       x      x    x    x   x     x    x  */
+/* CP1   x     x    v     x   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* CP2   x     x    v     v   x   v     x      x        x       v       x       x       x      x    x    x   x     x    x  */
+/* EX0   x     x    x     v   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* EX1   x     x    x     x   v   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* EX2   x     x    x     v   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/***************************************************************************************************************************/
+
+/***************************************************************************************************************************/
+/*     CAMD CMAIO CAMMOT USB CLSG LPREF LPRF0 LPRF1 LPRF2 LPEMMCIO LPEMMCCORE LPWPA  LPGEN   LPARM LPMEM LPCORE LPBG  BG   */
+/* AP    v     v    v     v   v   v     v      v     v       v       v          x       v      v     v     v     v     v   */
+/* CP0   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* CP1   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* CP2   x     x    x     x   x   x     v      v     x       x       x          x       x      x     x     x     x     x   */
+/* EX0   x     x    x     x   x   x     x      x     v       x       x          x       x      x     x     x     x     x   */
+/* EX1   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* EX2   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/***************************************************************************************************************************/
+
+void init_ldo_sleep_gr(void)
+{
+	unsigned int reg_val;
+	ANA_REG_SET(ANA_REG_GLB_PWR_WR_PROT_VALUE,0x6e7f);
+	while( (ANA_REG_GET(ANA_REG_GLB_PWR_WR_PROT_VALUE) & 0x8000) != 0x8000 );
+
+	ANA_REG_SET(ANA_REG_GLB_LDO_DCDC_PD,
+		//BIT_LDO_EMM_PD |
+		//BIT_DCDC_TOPCLK6M_PD |
+		//BIT_DCDC_RF_PD |
+		//BIT_DCDC_GEN_PD |
+		//BIT_DCDC_MEM_PD |
+		//BIT_DCDC_ARM_PD |
+		//BIT_DCDC_CORE_PD |
+		//BIT_LDO_RF0_PD |
+		//BIT_LDO_EMMCCORE_PD |
+		//BIT_LDO_GEN1_PD |
+		//BIT_LDO_DCXO_PD |
+		//BIT_LDO_GEN0_PD |
+		//BIT_LDO_VDD25_PD |
+		//BIT_LDO_VDD28_PD |
+		//BIT_LDO_VDD18_PD |
+		//BIT_BG_PD |
+		0
+	);
+	ANA_REG_SET(ANA_REG_GLB_LDO_PD_CTRL,
+		BIT_LDO_LPREF_PD_SW |
+		BIT_DCDC_WPA_PD |
+		BIT_DCDC_CON_PD |
+		BIT_LDO_WIFIPA_PD |
+		BIT_LDO_SDCORE_PD |
+		//BIT_LDO_USB_PD |
+		BIT_LDO_CAMMOT_PD |
+		BIT_LDO_CAMIO_PD |
+		BIT_LDO_CAMD_PD |
+		BIT_LDO_CAMA_PD |
+		BIT_LDO_SIM2_PD |
+		BIT_LDO_SIM1_PD |
+		BIT_LDO_SIM0_PD |
+		BIT_LDO_SDIO_PD |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_WR_PROT_VALUE,0x0000);
+
+	ANA_REG_SET(ANA_REG_GLB_SLP_WAIT_DCDCARM,
+		BITS_SLP_IN_WAIT_DCDCARM(7) |
+		BITS_SLP_OUT_WAIT_DCDCARM(8) |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL0,
+		BIT_SLP_IO_EN |
+		BIT_SLP_DCDCRF_PD_EN |
+		//BIT_SLP_DCDCCON_PD_EN |
+		//BIT_SLP_DCDCGEN_PD_EN |
+		//BIT_SLP_DCDCWPA_PD_EN |
+		BIT_SLP_DCDCARM_PD_EN |
+		BIT_SLP_LDOVDD25_PD_EN |
+		BIT_SLP_LDORF0_PD_EN |
+		BIT_SLP_LDOEMMCCORE_PD_EN |
+		BIT_SLP_LDOGEN0_PD_EN |
+		BIT_SLP_LDODCXO_PD_EN |
+		BIT_SLP_LDOGEN1_PD_EN |
+		BIT_SLP_LDOWIFIPA_PD_EN |
+		//BIT_SLP_LDOVDD28_PD_EN |
+		//BIT_SLP_LDOVDD18_PD_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL1,
+		BIT_SLP_LDO_PD_EN |
+		BIT_SLP_LDOLPREF_PD_EN |
+		BIT_SLP_LDOSDCORE_PD_EN |
+		BIT_SLP_LDOUSB_PD_EN |
+		BIT_SLP_LDOCAMMOT_PD_EN |
+		BIT_SLP_LDOCAMIO_PD_EN |
+		BIT_SLP_LDOCAMD_PD_EN |
+		BIT_SLP_LDOCAMA_PD_EN |
+		BIT_SLP_LDOSIM2_PD_EN |
+		//BIT_SLP_LDOSIM1_PD_EN |
+		//BIT_SLP_LDOSIM0_PD_EN |
+		//BIT_SLP_LDOSDIO_PD_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL2,
+		//BIT_SLP_DCDCRF_LP_EN |
+		//BIT_SLP_DCDCCON_LP_EN |
+		BIT_SLP_DCDCCORE_LP_EN |
+		BIT_SLP_DCDCMEM_LP_EN |
+		//BIT_SLP_DCDCARM_LP_EN |
+		BIT_SLP_DCDCGEN_LP_EN |
+		//BIT_SLP_DCDCWPA_LP_EN |
+		//BIT_SLP_LDORF0_LP_EN  |
+		//BIT_SLP_LDOEMMCCORE_LP_EN |
+		//BIT_SLP_LDOGEN0_LP_EN |
+		//BIT_SLP_LDODCXO_LP_EN |
+		//BIT_SLP_LDOGEN1_LP_EN |
+		//BIT_SLP_LDOWIFIPA_LP_EN |
+		//BIT_SLP_LDOVDD28_LP_EN |
+		//BIT_SLP_LDOVDD18_LP_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL3,
+		//BIT_SLP_BG_LP_EN |
+		//BIT_LDOVDD25_LP_EN_SW |
+		//BIT_LDOSDCORE_LP_EN_SW |
+		//BIT_LDOUSB_LP_EN_SW |
+		//BIT_SLP_LDOVDD25_LP_EN |
+		//BIT_SLP_LDOSDCORE_LP_EN |
+		//BIT_SLP_LDOUSB_LP_EN |
+		//BIT_SLP_LDOCAMMOT_LP_EN |
+		//BIT_SLP_LDOCAMIO_LP_EN |
+		//BIT_SLP_LDOCAMD_LP_EN |
+		//BIT_SLP_LDOCAMA_LP_EN |
+		//BIT_SLP_LDOSIM2_LP_EN |
+		//BIT_SLP_LDOSIM1_LP_EN |
+		//BIT_SLP_LDOSIM0_LP_EN |
+		//BIT_SLP_LDOSDIO_LP_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL4,
+		//BIT_LDOCAMIO_LP_EN_SW |
+		//BIT_LDOCAMMOT_LP_EN_SW |
+		//BIT_LDOCAMD_LP_EN_SW |
+		//BIT_LDOCAMA_LP_EN_SW |
+		//BIT_LDOSIM2_LP_EN_SW |
+		//BIT_LDOSIM1_LP_EN_SW |
+		//BIT_LDOSIM0_LP_EN_SW |
+		//BIT_LDOSDIO_LP_EN_SW |
+		//BIT_LDORF0_LP_EN_SW |
+		//BIT_LDOEMMCCORE_LP_EN_SW |
+		//BIT_LDOGEN0_LP_EN_SW |
+		//BIT_LDODCXO_LP_EN_SW |
+		//BIT_LDOGEN1_LP_EN_SW |
+		//BIT_LDOWIFIPA_LP_EN_SW |
+		//BIT_LDOVDD28_LP_EN_SW |
+		//BIT_LDOVDD18_LP_EN_SW |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN0,
+		BIT_LDO_XTL_EN |
+		//BIT_LDO_GEN0_EXT_XTL0_EN |
+		//BIT_LDO_GEN0_XTL1_EN |
+		//BIT_LDO_GEN0_XTL0_EN |
+		BIT_LDO_GEN1_EXT_XTL0_EN |
+		BIT_LDO_GEN1_XTL1_EN |
+		BIT_LDO_GEN1_XTL0_EN |
+		BIT_LDO_DCXO_EXT_XTL0_EN |
+		BIT_LDO_DCXO_XTL1_EN |
+		BIT_LDO_DCXO_XTL0_EN |
+		//BIT_LDO_VDD18_EXT_XTL0_EN |
+		//BIT_LDO_VDD18_XTL1_EN |
+		//BIT_LDO_VDD18_XTL0_EN |
+		//BIT_LDO_VDD28_EXT_XTL0_EN |
+		//BIT_LDO_VDD28_XTL1_EN |
+		//BIT_LDO_VDD28_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN1,
+		BIT_LDO_RF0_EXT_XTL0_EN |
+		BIT_LDO_RF0_XTL1_EN |
+		BIT_LDO_RF0_XTL0_EN |
+		BIT_LDO_WIFIPA_EXT_XTL0_EN |
+		//BIT_LDO_WIFIPA_XTL1_EN |
+		//BIT_LDO_WIFIPA_XTL0_EN |
+		//BIT_LDO_SIM2_EXT_XTL0_EN |
+		//BIT_LDO_SIM2_XTL1_EN |
+		//BIT_LDO_SIM2_XTL0_EN |
+		//BIT_LDO_SIM1_EXT_XTL0_EN |
+		//BIT_LDO_SIM1_XTL1_EN |
+		//BIT_LDO_SIM1_XTL0_EN |
+		//BIT_LDO_SIM0_EXT_XTL0_EN |
+		//BIT_LDO_SIM0_XTL1_EN |
+		//BIT_LDO_SIM0_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN2,
+		BIT_LDO_VDD25_EXT_XTL0_EN |
+		BIT_LDO_VDD25_XTL1_EN |
+		BIT_LDO_VDD25_XTL0_EN |
+		BIT_DCDC_RF_EXT_XTL0_EN |
+		BIT_DCDC_RF_XTL1_EN |
+		BIT_DCDC_RF_XTL0_EN |
+		BIT_XO_EXT_XTL0_EN |
+		BIT_XO_XTL1_EN |
+		BIT_XO_XTL0_EN |
+		BIT_BG_EXT_XTL0_EN |
+		BIT_BG_XTL1_EN |
+		BIT_BG_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN3,
+		//BIT_DCDC_CON_EXT_XTL0_EN |
+		//BIT_DCDC_CON_XTL1_EN |
+		//BIT_DCDC_CON_XTL0_EN |
+		//BIT_DCDC_WPA_EXT_XTL0_EN |
+		//BIT_DCDC_WPA_XTL1_EN |
+		//BIT_DCDC_WPA_XTL0_EN |
+		BIT_DCDC_MEM_EXT_XTL0_EN |
+		BIT_DCDC_MEM_XTL1_EN |
+		BIT_DCDC_MEM_XTL0_EN |
+		BIT_DCDC_GEN_EXT_XTL0_EN |
+		BIT_DCDC_GEN_XTL1_EN |
+		BIT_DCDC_GEN_XTL0_EN |
+		BIT_DCDC_CORE_EXT_XTL0_EN |
+		BIT_DCDC_CORE_XTL1_EN |
+		BIT_DCDC_CORE_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_XTL_WAIT_CTRL,
+		BIT_SLP_XTLBUF_PD_EN |
+		BIT_XTL_EN |
+		BITS_XTL_WAIT(0x32) |
+		0
+	);
+
+
+	/************************************************
+	*   Following is AP/CP LDO D DIE Sleep Control   *
+	*************************************************/
+
+	REG32(REG_PMU_APB_26M_SEL_CFG) |= (BIT_CP1_26M_SEL | BIT_CP0_26M_SEL);
+
+	CHIP_REG_SET(REG_PMU_APB_XTL0_REL_CFG,
+		BIT_XTL0_ARM7_SEL |
+		BIT_XTL0_VCP1_SEL |
+		BIT_XTL0_VCP0_SEL |
+		BIT_XTL0_CP1_SEL |
+		BIT_XTL0_CP0_SEL |
+		BIT_XTL0_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTL1_REL_CFG,
+		BIT_XTL1_ARM7_SEL |
+		BIT_XTL1_VCP1_SEL |
+		BIT_XTL1_VCP0_SEL |
+		BIT_XTL1_CP1_SEL |
+		BIT_XTL1_CP0_SEL |
+		BIT_XTL1_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTLBUF0_REL_CFG,
+		BIT_XTLBUF0_ARM7_SEL |
+		BIT_XTLBUF0_VCP1_SEL |
+		BIT_XTLBUF0_VCP0_SEL |
+		BIT_XTLBUF0_CP1_SEL |
+		BIT_XTLBUF0_CP0_SEL |
+		BIT_XTLBUF0_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTLBUF1_REL_CFG,
+		BIT_XTLBUF1_ARM7_SEL |
+		BIT_XTLBUF1_VCP1_SEL |
+		BIT_XTLBUF1_VCP0_SEL |
+		BIT_XTLBUF1_CP1_SEL |
+		BIT_XTLBUF1_CP0_SEL |
+		BIT_XTLBUF1_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_MPLL_REL_CFG,
+		//BIT_MPLL_REF_SEL |
+		//BIT_MPLL_ARM7_SEL |
+		//BIT_MPLL_VCP1_SEL |
+		//BIT_MPLL_VCP0_SEL |
+		//BIT_MPLL_CP1_SEL |
+		//BIT_MPLL_CP0_SEL |
+		BIT_MPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_DPLL_REL_CFG,
+		//BIT_DPLL_REF_SEL |
+		BIT_DPLL_ARM7_SEL |
+		BIT_DPLL_VCP1_SEL |
+		//BIT_DPLL_VCP0_SEL |
+		//BIT_DPLL_CP1_SEL |
+		//BIT_DPLL_CP0_SEL |
+		BIT_DPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_LTEPLL_REL_CFG,
+		BIT_LTEPLL_REF_SEL |
+		//BIT_LTEPLL_ARM7_SEL |
+		BIT_LTEPLL_VCP1_SEL |
+		//BIT_LTEPLL_VCP0_SEL |
+		//BIT_LTEPLL_CP1_SEL |
+		//BIT_LTEPLL_CP0_SEL |
+		//BIT_LTEPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_TWPLL_REL_CFG,
+		BIT_TWPLL_REF_SEL |
+		BIT_TWPLL_ARM7_SEL |
+		BIT_TWPLL_VCP1_SEL |
+		//BIT_TWPLL_VCP0_SEL |
+		//BIT_TWPLL_CP1_SEL |
+		//BIT_TWPLL_CP0_SEL |
+		BIT_TWPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_LVDSDIS_PLL_REL_CFG,
+		BIT_LVDSDIS_PLL_REF_SEL |
+		//BIT_LVDSDIS_PLL_ARM7_SEL |
+		//BIT_LVDSDIS_PLL_VCP1_SEL |
+		//BIT_LVDSDIS_PLL_VCP0_SEL |
+		//BIT_LVDSDIS_PLL_CP1_SEL |
+		//BIT_LVDSDIS_PLL_CP0_SEL |
+		//BIT_LVDSDIS_PLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_PD_CODEC_TOP_CFG,
+		BIT_PD_CODEC_TOP_AUTO_SHUTDOWN_EN          |
+		BITS_PD_CODEC_TOP_PWR_ON_DLY(8)            |
+		BITS_PD_CODEC_TOP_PWR_ON_SEQ_DLY(0)        |
+		BITS_PD_CODEC_TOP_ISO_ON_DLY(4)            |
+		0
+	);
+
+	CSP_Init(0x50001800);
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/pinmap-sp9630.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/pinmap-sp9630.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/pinmap-sp9630.c	(revision 182160)
@@ -0,0 +1,227 @@
+/*
+ * Copyright (C) 2012 Spreadtrum Communications Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/*
+ *Version SP9830A-2_LA_SCH_V1.1.0_V1.0
+ */
+
+#include <asm/io.h>
+#include <asm/arch/pinmap.h>
+#define BIT_PIN_SLP_ALL  (BIT_PIN_SLP_AP|BIT_PIN_SLP_CP0|BIT_PIN_SLP_CP1|BIT_PIN_SLP_VCP0|BIT_PIN_SLP_VCP1)
+
+static pinmap_t pinmap[]={
+{REG_PIN_CTRL0,0x08000000},
+{REG_PIN_CTRL1,0x0},
+{REG_PIN_CTRL2,0x00285000}, // uart0->bt'uart;  uart1->ap'uart0; uart2->cp1'uart1(lte dsp uart); uart3->ap'uart3; uart4->cp0 uart1(td dsp uart), BIT17:15=0
+{REG_PIN_CTRL3,0x0},
+{REG_PIN_CTRL4,0x12},
+{REG_PIN_CTRL5,0x0},
+{REG_PIN_RFSDA0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_DATA_RF0
+{REG_PIN_RFSCK0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_CLK_RF0
+{REG_PIN_RFSEN0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_CSN_RF0
+{REG_PIN_RFSDA1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFSCK1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFSEN1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFCTL15,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL16,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL17,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL18,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL18
+{REG_PIN_RFCTL19,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL19
+{REG_PIN_RFCTL20,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL20
+{REG_PIN_RFCTL21,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL22,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL23,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL24,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL25,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL26,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LTE_RX_PRIORITY
+{REG_PIN_RFCTL0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL0
+{REG_PIN_RFCTL1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL1
+{REG_PIN_RFCTL2,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL2
+{REG_PIN_RFCTL3,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL3
+{REG_PIN_RFCTL4,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL4
+{REG_PIN_RFCTL5,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL5
+{REG_PIN_RFCTL6,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL6 
+{REG_PIN_RFCTL7,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL7
+{REG_PIN_RFCTL8,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL8
+{REG_PIN_RFCTL9,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL9
+{REG_PIN_RFCTL10,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL10
+{REG_PIN_RFCTL11,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL11
+{REG_PIN_RFCTL12,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL12
+{REG_PIN_RFCTL13,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL13
+{REG_PIN_RFCTL14,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL14
+{REG_PIN_RFCTL27,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LTE_TX_PRIORITY
+{REG_PIN_XTL_EN,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//GPS_GPIO0
+{REG_PIN_RFFE_SCK0,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RFFE_SCLK0
+{REG_PIN_RFFE_SDA0,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RFFE_SDA0
+{REG_PIN_RFCTL28,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL29,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_SIMCLK0,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM0_CLK
+{REG_PIN_SIMDA0,              BIT_PIN_SLP_VCP1|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM0_DA
+{REG_PIN_SIMRST0,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM0_RST
+{REG_PIN_SIMCLK1,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM1_CLK
+{REG_PIN_SIMDA1,              BIT_PIN_SLP_VCP1|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM1_DA
+{REG_PIN_SIMRST1,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM1_RST
+{REG_PIN_SIMCLK2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_SIMDA2,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//FP_INT
+{REG_PIN_SIMRST2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//FP_RST
+{REG_PIN_SD0_D3,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D3
+{REG_PIN_SD0_D2,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D2
+{REG_PIN_SD0_CMD,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_CMD
+{REG_PIN_SD0_D0,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D0
+{REG_PIN_SD0_D1,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D1
+{REG_PIN_SD0_CLK0,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(4)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SD0_CLK0
+{REG_PIN_SD1_CLK,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SD1_CLK
+{REG_PIN_SD1_CMD,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_CMD
+{REG_PIN_SD1_D0,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D0
+{REG_PIN_SD1_D1,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D1
+{REG_PIN_SD1_D2,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D2
+{REG_PIN_SD1_D3,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D3
+{REG_PIN_IIS0DI,              BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//BT_IISDO
+{REG_PIN_IIS0DO,              BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_IISDI
+{REG_PIN_IIS0CLK,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BT_IISCLK
+{REG_PIN_IIS0LRCK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BT_IISRCK
+{REG_PIN_U0TXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_U0RXD
+{REG_PIN_U0RXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//BT_U0TXD
+{REG_PIN_U0CTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//BT_U0RTS
+{REG_PIN_U0RTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//BT_U0CTS
+{REG_PIN_PTEST,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GND
+{REG_PIN_ANA_INT,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//ANA_INT
+{REG_PIN_EXT_RST_B,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//EXT_RST_B
+{REG_PIN_CHIP_SLEEP,          BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CHIP_SLEEP
+{REG_PIN_XTL_BUF_EN0,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//XTL_BUF_EN0
+{REG_PIN_XTL_BUF_EN1,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//XTL_BUF_EN1
+{REG_PIN_CLK_32K,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//CLK_32K
+{REG_PIN_AUD_SCLK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_SCLK
+{REG_PIN_AUD_ADD0,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//AUD_ADD0
+{REG_PIN_AUD_ADSYNC,          BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//AUD_ADSYNC
+{REG_PIN_AUD_DAD1,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DAD1
+{REG_PIN_AUD_DAD0,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DAD0
+{REG_PIN_AUD_DASYNC,          BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DASYNC
+{REG_PIN_ADI_D,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//ADI_D
+{REG_PIN_ADI_SYNC,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//ADI_SYNC
+{REG_PIN_ADI_SCLK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//ADI_SCLK
+{REG_PIN_LCM_RSTN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LCM_RSTN
+{REG_PIN_DSI_TE,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//LCM_FMARK
+{REG_PIN_MTDO_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTDI_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTCK_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTMS_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTRST_N_ARM,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_DTDO_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TDO_LTE_WG
+{REG_PIN_DTDI_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TDI_LTE_WG
+{REG_PIN_DTCK_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TCK_LTE_WG
+{REG_PIN_DTMS_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TMS_LTE_WG
+{REG_PIN_DRTCK_LTE,           BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RTCK_LTE_WG
+{REG_PIN_NFWPN,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT0
+{REG_PIN_NFRB,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//EMMC_CMD
+{REG_PIN_NFCLE,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT6
+{REG_PIN_NFALE,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT7
+{REG_PIN_NFREN,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//EMMC_CLK
+{REG_PIN_NFD4,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT5
+{REG_PIN_NFD5,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT4
+{REG_PIN_NFD6,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD7,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT3
+{REG_PIN_NFD10,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(2)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//EMMC_RST
+{REG_PIN_NFD11,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT1
+{REG_PIN_NFD14,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT2
+{REG_PIN_NFCEN0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFWEN,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD0,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD1,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD2,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD3,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD8,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD9,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD12,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD13,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD15,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_CCIRD0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CCIRD1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CMMCLK,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//MCLK
+{REG_PIN_CMPCLK,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CMRST0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RST0
+{REG_PIN_CMRST1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RST1
+{REG_PIN_CMPD0,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//PWDN0
+{REG_PIN_CMPD1,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//PWDN1
+{REG_PIN_SCL0,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C0_SCL
+{REG_PIN_SDA0,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C0_SDA
+{REG_PIN_SPI2_CSN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_CS
+{REG_PIN_SPI2_DO,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_MOSI
+{REG_PIN_SPI2_DI,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_MISO
+{REG_PIN_SPI2_CLK,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_CLK
+{REG_PIN_SPI0_CSN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//OTG_ID  
+{REG_PIN_SPI0_DO,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C1_SDA
+{REG_PIN_SPI0_DI,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//FLASH_EN       
+{REG_PIN_SPI0_CLK,            BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C1_SCL
+{REG_PIN_MEMS_MIC_CLK0,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//WF_COEXIST
+{REG_PIN_MEMS_MIC_DATA0,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//GPS_COEXIST     
+{REG_PIN_MEMS_MIC_CLK1,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GPS_INT   
+{REG_PIN_MEMS_MIC_DATA1,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//WIFI_WAKE_HOST
+{REG_PIN_KEYOUT0,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//KEYOUT0    
+{REG_PIN_KEYOUT1,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//Marlin_RST
+{REG_PIN_KEYOUT2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//FLASH_LED
+{REG_PIN_KEYIN0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN0
+{REG_PIN_KEYIN1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN1
+{REG_PIN_KEYIN2,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN2
+{REG_PIN_SCL2,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C2_SCL
+{REG_PIN_SDA2,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C2_SDA
+{REG_PIN_CLK_AUX0,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SLEEP_32K
+{REG_PIN_IIS1DI,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//GPS_PDN
+{REG_PIN_IIS1DO,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//CHG_DONE
+{REG_PIN_IIS1CLK,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//BT_DEV_WAKE
+{REG_PIN_IIS1LRCK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_HOST_WAKE
+{REG_PIN_TRACECLK,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BAND_INFO1
+{REG_PIN_TRACECTRL,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BAND_INFO2
+{REG_PIN_TRACEDAT0,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CHG_EN
+{REG_PIN_TRACEDAT1,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_GPIO1
+{REG_PIN_TRACEDAT2,           BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//LCM_BL_PWM
+{REG_PIN_TRACEDAT3,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//G_INT1
+{REG_PIN_TRACEDAT4,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//PROX_INT
+{REG_PIN_TRACEDAT5,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//TF_DET
+{REG_PIN_TRACEDAT6,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//SIM0_DET
+{REG_PIN_TRACEDAT7,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM1_DET
+{REG_PIN_EXTINT0,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//CTP_INT
+{REG_PIN_EXTINT1,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CTP_RST
+{REG_PIN_SCL3,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C3_SCL
+{REG_PIN_SDA3,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C3_SDA
+{REG_PIN_U1TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U1TXD
+{REG_PIN_U1RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U1RXD
+{REG_PIN_U2TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U2TXD
+{REG_PIN_U2RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U2RXD
+{REG_PIN_U3TXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//GPS_U0RXD
+{REG_PIN_U3RXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_U0TXD
+{REG_PIN_U3CTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_U0RTS
+{REG_PIN_U3RTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//GPS_U0CTS
+{REG_PIN_U4TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U4TXD
+{REG_PIN_U4RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U4RXD
+};
+
+/*here is the adie pinmap such as 2723*/
+static pinmap_t adie_pinmap[]={
+{REG_PIN_ANA_EXT_XTL_EN0,		BITS_ANA_PIN_DS(1)|BIT_ANA_PIN_WPD|BIT_ANA_PIN_SLP_IE},
+};
+
+int  pin_init(void)
+{
+	int i;
+	for (i = 0; i < sizeof(pinmap)/sizeof(pinmap[0]); i++) {
+		__raw_writel(pinmap[i].val, CTL_PIN_BASE + pinmap[i].reg);
+	}
+
+	for (i = 0; i < sizeof(adie_pinmap)/sizeof(adie_pinmap[0]); i++) {
+		sci_adi_set(CTL_ANA_PIN_BASE + adie_pinmap[i].reg, adie_pinmap[i].val);
+	}
+
+	return 0;
+}
+
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/config.mk
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/config.mk	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/config.mk	(revision 182160)
@@ -0,0 +1,6 @@
+ifdef CONFIG_NAND_SPL
+CONFIG_SYS_TEXT_BASE = 0x50005000
+else
+#CONFIG_SYS_TEXT_BASE = 0x8f800000
+CONFIG_SYS_TEXT_BASE = 0x9f000000
+endif
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/cp_boot.h
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/cp_boot.h	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/cp_boot.h	(revision 182160)
@@ -0,0 +1,162 @@
+/******************************************************************************
+ ** File Name:      cp_mode.c                                                 *
+ ** Author:         Andrew.Yang                                               *
+ ** DATE:           31/03/2014                                                *
+ ** Copyright:      2014 Spreatrum, Incoporated. All Rights Reserved.         *
+ ** Description:    This file defines the logic interfaces called during boot,*
+ **                 including reset mode setting, initialization etc.
+ ******************************************************************************
+
+ ******************************************************************************
+ **                        Edit History                                       *
+ ** ------------------------------------------------------------------------- *
+ ** DATE           NAME             DESCRIPTION                               *
+ ** 31/03/2014     Andrew           Create.                                   *
+ ******************************************************************************/
+
+/**---------------------------------------------------------------------------*
+ **                         Dependencies                                      *
+ **---------------------------------------------------------------------------*/
+/**---------------------------------------------------------------------------*
+ **                         Compiler Flag                                     *
+ **---------------------------------------------------------------------------*/
+#ifndef _CP_BOOT_H_
+#define  _CP_BOOT_H__
+
+
+/**---------------------------------------------------------------------------*
+ **                         Global variables                                  *
+ **---------------------------------------------------------------------------*/
+
+#define msleep(cnt) udelay(cnt*1000)
+/**---------------------------------------------------------------------------*
+ **                         Local variables                                   *
+ **---------------------------------------------------------------------------*/
+
+/**---------------------------------------------------------------------------*
+ **                     Local Function Prototypes                             *
+ **---------------------------------------------------------------------------*/
+
+/**---------------------------------------------------------------------------*
+ **                         Function Prototypes                               *
+ **---------------------------------------------------------------------------*/
+/*****************************************************************************/
+//  Description:    Sets the different kinds of reset modes, used in normal p-
+//                  ower up mode, watchdog reset mode and calibration mode etc.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp0_arm0_boot(void)
+{
+    u32 state;
+
+      /* open cp0 pmu controller
+    *((volatile u32*)REG_PMU_APB_PD_CP0_SYS_CFG ) &= ~BIT(25);
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_PD_CP0_SYS_CFG ) &= ~BIT(28);
+    */
+
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~ BIT(17);   /*clear cp0 sleep */
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(0);   /* reset cp0 */
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~ BIT(0); /* clear cp0 force shutdown */
+
+    while(1)
+    {
+    state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+    if(!(state & BIT(0)))
+      break;
+    }
+}
+
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp1_boot(void)
+{
+    u32 state;
+    *((volatile u32*)REG_AON_APB_APB_RST1) |= BIT(20);   /* reset cp1 */
+    msleep(50);
+    *((volatile u32*)REG_AON_APB_APB_RST1) &= ~ BIT(20);   /*clear reset cp1 */
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~(BIT(18) | BIT(20));   /*clear cp1 sleep */
+
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(1);   /* reset cp0 */
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~ BIT(1); /* clear cp0 force shutdown */
+
+    while(1)
+    {
+    state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+    if(!(state & BIT(1)))
+      break;
+    }
+}
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+void pmic_arm7_RAM_active(void)
+{
+    u32 state;
+    *((volatile u32*)REG_AON_APB_ARM7_SYS_SOFT_RST) |= BIT(0);   /* 0x402e0114*/
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(8);   /* reset arm7*/
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~BIT(8); /* clear arm7*/
+    while(1)
+    {
+        state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+        if(!(state & BIT(8)))
+          break;
+    }
+}
+
+
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void pmic_arm7_boot(void)
+{
+    u32 state;
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~ BIT(21);   /*clear arm7 force sleep */
+    *((volatile u32*)REG_AON_APB_ARM7_SYS_SOFT_RST) &= ~ BIT(0);   /* reset arm7 */
+    msleep(50);
+}
+
+
+/*****************************************************************************/
+//  Description:    After normal power on, the HW_RST flag should be reset in
+//                  order to judge differrent reset conditions between normal
+//                  power on reset and watchdog reset.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp2_boot()
+{
+}
+
+/*****************************************************************************/
+//  Description:    Before watchdog reset, writting HW_RST flag is uesed to j-
+//                  udge differrent watchdog reset conditions between MCU reset
+//                  and system-halted.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp0_arm1_boot(void)
+{
+}
+
+static inline void cp0_arm2_boot(void)
+{
+}
+
+
+/**---------------------------------------------------------------------------*
+ **                         Compiler Flag                                     *
+ **---------------------------------------------------------------------------*/
+#endif
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/key_map.h
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/key_map.h	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/key_map.h	(revision 182160)
@@ -0,0 +1,24 @@
+#ifndef _KEY_MAP_H_
+#define _KEY_MAP_H_
+
+#include <linux/input.h>
+
+static unsigned char board_key_map[]={
+#if 0
+    0x27, KEY_HOME,
+    0x42, KEY_BACK,
+    0x41, KEY_VOLUMEUP,
+#else
+//    0x00, KEY_BACK,//DOWN
+    0x01, KEY_HOME,//CAM
+//    0x10, KEY_MENU,//UP
+#endif
+    0x10, KEY_VOLUMEUP,		
+    0x00, KEY_VOLUMEDOWN,
+};
+
+#define CONFIG_KEYPAD_ROW_CNT 5
+#define CONFIG_KEYPAD_COL_CNT 5
+#define CONFIG_KEYPAD_LONG_CNT 0xc
+#define CONFIG_KEYPAD_DEBOUNCE_CNT 0x5
+#endif //_KEY_MAP_H_
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/Makefile
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/Makefile	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/Makefile	(revision 182160)
@@ -0,0 +1,27 @@
+#
+# (C) Copyright 2009 DENX Software Engineering
+# Author: John Rigby <jcrigby@gmail.com>
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+
+obj-y	= sp9832a_7c20_volte.o sprd_kp.o ldo_sleep.o sprd_bl.o modem_entry.o sdio_cfg.o
+obj-y   += pinmap-sp9630.o
+
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/sdio_cfg.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/sdio_cfg.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/sdio_cfg.c	(revision 182160)
@@ -0,0 +1,93 @@
+/*
+ * This file is produced by tools!!
+ *
+ * Copyright (C) 2012 Spreadtrum Communications Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <asm/arch/sprd_reg.h>
+#include <asm/io.h>
+#include <asm/arch/sdio_cfg.h>
+#include <asm/arch/sdio_reg.h>
+#include <asm/arch/chip_drv_common_io.h>
+
+
+const  SDIO_BASE_INFO  sdio_ctrl_info[2] =
+{
+	{
+		EMMC,
+		//SPRD_EMMC_BASE,
+		0X20600000,
+#ifdef CONFIG_FPGA
+             NULL,
+             NULL,
+	      36000000,
+	      100000,
+#else
+		REG_AP_CLK_EMMC_CFG,
+		BIT_0|BIT_1,
+ 	       384000000,
+		400000,
+#endif
+		//REG_AP_AHB_AHB_EB,
+		0X20E00000,
+		BIT_11,
+		//REG_AP_AHB_AHB_RST,
+		0X20E00004,
+		BIT_14,
+
+		LDO_LDO_EMMCIO,
+		LDO_LDO_EMMCCORE,
+	},
+	{
+		SD,
+		0X20300000,
+#ifdef CONFIG_FPGA
+             NULL,
+             NULL,
+	      36000000,
+	      100000,
+#else
+		REG_AP_CLK_SDIO0_CFG,
+		BIT_0|BIT_1,
+        384000000,
+		400000,
+#endif
+
+		//REG_AP_AHB_AHB_EB,
+		0X20E00000,
+		BIT_8,
+		//REG_AP_AHB_AHB_RST,
+		0X20E00004,
+		BIT_11,
+
+		LDO_LDO_SDIO1,
+		LDO_LDO_SDIO0,
+	}
+};
+
+SDIO_BASE_INFO*  get_sdcontrol_info(uint32_t device_type)
+{
+	return  &sdio_ctrl_info[device_type];
+}
+
+void  sdio_dump(uint32_t regbase)
+{
+	uint32_t  i;
+	printf("*****SDIO REGISTER DUMP*****\n");
+
+    for(i=0;i<8;i++){
+		printf("0x%08x,0x%08x,0x%08x,0x%08x\n",CHIP_REG_GET(regbase + i*16 +0),CHIP_REG_GET(regbase + i*16 +4),CHIP_REG_GET(regbase + i*16 +8),CHIP_REG_GET(regbase + i*16+0xc));
+	}
+}
+
+
Index: u-boot64/board/spreadtrum/sp9832a_7c20_volte/sp9832a_7c20_volte.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c20_volte/sp9832a_7c20_volte.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c20_volte/sp9832a_7c20_volte.c	(revision 182160)
@@ -0,0 +1,159 @@
+#include <common.h>
+#include <asm/io.h>
+#include <sprd_regulator.h>
+//#include <asm/arch/sprd_reg_ahb.h>
+//#include <asm/arch/regs_ahb.h>
+#include <asm/arch/common.h>
+#include "adi_hal_internal.h"
+#include <asm/u-boot.h>
+#include <part.h>
+#include <sdhci.h>
+#include <asm/arch/mfp.h>
+//#include <linux/gpio.h>
+//#include <asm/arch/gpio.h>
+#include <asm/arch/pinmap.h>
+#include "asm/arch/sprd_module_config.h"
+
+#include <boot_mode.h>
+#include <chipram_env.h>
+
+
+DECLARE_GLOBAL_DATA_PTR;
+
+extern void sprd_gpio_init(void);
+extern void ADI_init (void);
+extern int LDO_Init(void);
+extern void ADC_Init(void);
+extern void init_ldo_sleep_gr(void);
+
+phys_size_t real_ram_size = 0x40000000;
+
+
+//extern struct eic_gpio_resource sprd_gpio_resource[];
+
+int board_init()
+{
+	//gd->bd->bi_arch_number = MACH_TYPE_OPENPHONE;
+	/*get env transfer from chipram*/
+	setup_chipram_env();
+	gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100;
+	ADI_init();
+	misc_init();
+	LDO_Init();
+	ADC_Init();
+	pin_init();
+	sprd_eic_init();
+	sprd_gpio_init();
+	init_ldo_sleep_gr();
+//	TDPllRefConfig(1);
+
+	return 0;
+}
+
+phys_size_t get_real_ram_size(void)
+{
+        return real_ram_size;
+}
+
+int dram_init(void)
+{
+#ifdef CONFIG_DDR_AUTO_DETECT
+        ulong sdram_base = CONFIG_SYS_SDRAM_BASE;
+        ulong sdram_size = 0;
+        int i;
+
+        real_ram_size = 0;
+        ulong bank_cnt = CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM;
+
+        for (i = 1; i <= *(volatile uint32 *)CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM; i++) {
+                real_ram_size += *(volatile ulong *)((volatile ulong *)CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM + i);
+        }
+
+        real_ram_size = get_ram_size((volatile void *)sdram_base, real_ram_size);
+#else
+	real_ram_size = REAL_SDRAM_SIZE;
+#endif
+        gd->ram_size = get_ram_size((volatile void *)PHYS_SDRAM_1,
+                        PHYS_SDRAM_1_SIZE);
+
+        return 0;
+}
+
+
+CBOOT_FUNC s_boot_func_array[CHECK_BOOTMODE_FUN_NUM] = {
+
+	get_mode_from_bat_low,
+	write_sysdump_before_boot_extend,
+	/* 1 get mode from file*/
+	get_mode_from_file_extend,
+	/* 2 get mode from watch dog*/
+	get_mode_from_watchdog,
+	/*3 get mode from alarm register*/
+	get_mode_from_alarm_register,
+	/*0 get mode from calibration detect*/
+	get_mode_from_pctool,
+	/*4 get mode from charger*/
+	get_mode_from_charger,
+	/*5 get mode from keypad*/
+	get_mode_from_keypad,
+	/*6 get mode from gpio*/
+	get_mode_from_gpio_extend,
+
+	/*shutdown device*/
+//	get_mode_from_shutdown,
+
+	0
+};
+
+
+
+void board_boot_mode_regist(CBOOT_MODE_ENTRY *array)
+{
+	MODE_REGIST(CMD_NORMAL_MODE, normal_mode);
+	MODE_REGIST(CMD_RECOVERY_MODE, recovery_mode);
+	MODE_REGIST(CMD_FASTBOOT_MODE, fastboot_mode);
+	MODE_REGIST(CMD_WATCHDOG_REBOOT, watchdog_mode);
+	MODE_REGIST(CMD_UNKNOW_REBOOT_MODE, unknow_reboot_mode);
+	MODE_REGIST(CMD_PANIC_REBOOT, panic_reboot_mode);
+	MODE_REGIST(CMD_AUTODLOADER_REBOOT, autodloader_mode);
+	MODE_REGIST(CMD_SPECIAL_MODE, special_mode);
+	MODE_REGIST(CMD_CHARGE_MODE, charge_mode);
+	MODE_REGIST(CMD_ENGTEST_MODE,engtest_mode);
+	MODE_REGIST(CMD_FACTORYTEST_MODE,factorytest_mode);
+	MODE_REGIST(CMD_CALIBRATION_MODE, calibration_mode);
+	MODE_REGIST(CMD_EXT_RSTN_REBOOT_MODE, normal_mode);
+	MODE_REGIST(CMD_IQ_REBOOT_MODE, iq_mode);
+	MODE_REGIST(CMD_ALARM_MODE, alarm_mode);
+       MODE_REGIST(CMD_AUTOTEST_MODE, autotest_mode);
+
+	return ;
+}
+
+int board_late_init(void)
+{
+	boot_mode_t boot_role;
+	extern chipram_env_t* get_chipram_env(void);
+	chipram_env_t* cr_env = get_chipram_env();
+	boot_role = cr_env->mode;
+
+	boot_pwr_check();
+
+#if !defined(CONFIG_FPGA)
+#ifdef CONFIG_NAND_BOOT
+	//extern int nand_ubi_dev_init(void);
+	nand_ubi_dev_init();
+	debugf("nand ubi init OK!\n");
+#endif
+
+#endif
+	extern void sprdbat_init(void);
+	sprdbat_init();
+	debugf("CHG init OK!\n");
+	if (sprdbat_get_vbatauxadc_caltype() != 0) {
+		/*fix me*/
+		DCDC_Cal_ArmCore();
+	}
+	board_keypad_init();
+	return 0;
+}
+
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/modem_entry.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/modem_entry.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/modem_entry.c	(revision 182160)
@@ -0,0 +1,45 @@
+#include <common.h>
+#include <asm/arch/sprd_reg.h>
+#include "cp_boot.h"
+#include "loader_common.h"
+
+
+void cp_adr_remap(u32 cp_kernel_exec_addr, u32 cp_zero_map_addr)
+{
+    u32 data[3] = {0xe59f0000, 0xe12fff10,   cp_kernel_exec_addr};
+    memcpy( cp_zero_map_addr, data, sizeof(data));      /* copy cp0 source code */
+}
+
+void modem_entry()
+{
+	sipc_addr_reset();
+
+#if !defined( CONFIG_KERNEL_BOOT_CP )
+	pmic_arm7_boot();
+
+	/*if recovery mode and not cali mode, skip boot modem image*/
+	if (strstr(getenv("bootmode"), "recovery")
+			&& NULL == get_calibration_parameter()) {
+		debugf("recovery mode, skip boot modem!");
+		return;
+	}
+
+	cp_adr_remap(CP1_EXEC_ADR, CP1_ZERO_MAP_ADR);
+	cp1_boot();
+#endif
+}
+
+
+void sipc_addr_reset()
+{
+
+	/*to be fill in*/
+	//memset((void *)SIPC_GGE_APCP_START_ADDR, 0x0, SIPC_APCP_RESET_ADDR_SIZE);
+	memset((void *)SIPC_LTE_APCP_START_ADDR, 0x0, SIPC_APCP_RESET_ADDR_SIZE);
+	memset((void *)SIPC_PMIC_SIPC_START_ADDR, 0x0, 0x2000);
+	return;
+
+}
+
+
+
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/sprd_kp.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/sprd_kp.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/sprd_kp.c	(revision 182160)
@@ -0,0 +1,60 @@
+#include <common.h>
+#include <malloc.h>
+#include "key_map.h"
+#include <boot_mode.h>
+#include <asm/arch/mfp.h>
+#include <asm/arch/chip_drv_common_io.h>
+#include <asm/arch/sprd_eic.h>
+
+void board_keypad_init(void)
+{
+	sprd_gpio_request(NULL, 124);
+	sprd_gpio_direction_input(NULL, 124);
+
+	sprd_gpio_request(NULL, 125);
+	sprd_gpio_direction_input(NULL, 125);
+
+	printf("[gpio keys] init!\n");
+	return;
+}
+
+unsigned char board_key_scan(void)
+{
+	uint32_t key_code = KEY_RESERVED;
+	int gpio_volumeup = -1;
+	int gpio_volumedown = -1;
+
+    sprd_eic_request(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
+    udelay(3000);
+    gpio_volumeup = sprd_eic_get(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
+    if(gpio_volumeup < 0)
+        printf("[eic keys] volumeup : sprd_eic_get return ERROR!\n");
+    if(gpio_volumeup > 0) {
+        key_code = KEY_VOLUMEUP;
+        printf("[eic keys] volumeup pressed!\n");
+    }
+
+    gpio_volumedown = sprd_gpio_get(NULL, 124);
+    if(gpio_volumedown < 0)
+        printf("[gpio keys] volumedown : sprd_gpio_get return ERROR!\n");
+	if (0 == gpio_volumedown) {
+        key_code = KEY_VOLUMEDOWN;
+        printf("[gpio keys] volumedown pressed!\n");
+	}
+
+	if (KEY_RESERVED == key_code)
+		printf("[gpio keys] no key pressed!\n");
+	return key_code;
+}
+
+unsigned int check_key_boot(unsigned char key)
+{
+	if(KEY_VOLUMEUP == key)
+		return CMD_FACTORYTEST_MODE;
+	else if(KEY_HOME == key)
+		return CMD_FASTBOOT_MODE;
+	else if(KEY_VOLUMEDOWN== key)
+		return CMD_RECOVERY_MODE;
+	else
+		return 0;
+}
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/sprd_bl.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/sprd_bl.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/sprd_bl.c	(revision 182160)
@@ -0,0 +1,50 @@
+#include <common.h>
+#include <asm/arch/hardware.h>
+#include <asm/io.h>
+#include <asm/arch/sprd_reg.h>
+
+#define PWM_INDEX 2
+
+#define PWM_PRESCALE (0x0000)
+#define PWM_CNT (0x0004)
+#define PWM_PAT_LOW (0x000C)
+#define PWM_PAT_HIG (0x0010)
+
+#define PWM_ENABLE (1 << 8)
+#define PWM2_SCALE 0x0
+#define PWM_REG_MSK 0xffff
+#define PWM_MOD_MAX 0xff
+
+
+static inline uint32_t pwm_read(int index, uint32_t reg)
+{
+	return __raw_readl(CTL_BASE_PWM + index * 0x20 + reg);
+}
+
+static void pwm_write(int index, uint32_t value, uint32_t reg)
+{
+	__raw_writel(value, CTL_BASE_PWM + index * 0x20 + reg);
+}
+
+void set_backlight(uint32_t brightness)
+{
+	int index = PWM_INDEX;
+
+	__raw_bits_or((0x1 << 0), REG_AON_CLK_PWM0_CFG + index * 4);//ext_26m select
+
+	if (0 == brightness) {
+		pwm_write(index, 0, PWM_PRESCALE);
+		printf("sprd backlight power off. pwm_index=%d  brightness=%d\n", index, brightness);
+	} else {
+		__raw_bits_or((0x1 << (index+4)), REG_AON_APB_APB_EB0); //PWMx EN
+
+		pwm_write(index, PWM2_SCALE, PWM_PRESCALE);
+		pwm_write(index, (brightness << 8) | PWM_MOD_MAX, PWM_CNT);
+		pwm_write(index, PWM_REG_MSK, PWM_PAT_LOW);
+		pwm_write(index, PWM_REG_MSK, PWM_PAT_HIG);
+		pwm_write(index, PWM_ENABLE, PWM_PRESCALE);
+		printf("sprd backlight power on. pwm_index=%d  brightness=%d\n", index, brightness);
+	}
+
+	return;
+}
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/u-boot.lds
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/u-boot.lds	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/u-boot.lds	(revision 182160)
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2004-2008 Texas Instruments
+ *
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	. = 0x00000000;
+
+	. = ALIGN(4);
+	.text :
+	{
+		*(.__image_copy_start)
+		CPUDIR/start.o (.text*)
+		*(.text*)
+	}
+
+	. = ALIGN(4);
+	.rodata : { *(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*))) }
+
+
+	. = ALIGN(4);
+
+        .rodata : { *(.rodata) KEEP(*(SORT_BY_NAME(.rodata.regu*))) }
+
+        . = ALIGN(4);
+
+	.data : {
+		*(.data*)
+	}
+
+	. = ALIGN(4);
+
+	. = .;
+
+	. = ALIGN(4);
+	.u_boot_list : {
+		KEEP(*(SORT(.u_boot_list*)));
+	}
+
+	. = ALIGN(4);
+
+	.image_copy_end :
+	{
+		*(.__image_copy_end)
+	}
+
+	.rel_dyn_start :
+	{
+		*(.__rel_dyn_start)
+	}
+
+	.rel.dyn : {
+		*(.rel*)
+	}
+
+	.rel_dyn_end :
+	{
+		*(.__rel_dyn_end)
+	}
+
+	_end = .;
+
+	/*
+	 * Deprecated: this MMU section is used by pxa at present but
+	 * should not be used by new boards/CPUs.
+	 */
+	. = ALIGN(4096);
+	.mmutable : {
+		*(.mmutable)
+	}
+
+/*
+ * Compiler-generated __bss_start and __bss_end, see arch/arm/lib/bss.c
+ * __bss_base and __bss_limit are for linker only (overlay ordering)
+ */
+
+	.bss_start __rel_dyn_start (OVERLAY) : {
+		KEEP(*(.__bss_start));
+		__bss_base = .;
+	}
+
+	.bss __bss_base (OVERLAY) : {
+		*(.bss*)
+		 . = ALIGN(4);
+		 __bss_limit = .;
+	}
+
+	.bss_end __bss_limit (OVERLAY) : {
+		KEEP(*(.__bss_end));
+	}
+
+	.dynsym _end : { *(.dynsym) }
+	.dynbss : { *(.dynbss) }
+	.dynstr : { *(.dynstr*) }
+	.dynamic : { *(.dynamic*) }
+	.plt : { *(.plt*) }
+	.interp : { *(.interp*) }
+	.gnu : { *(.gnu*) }
+	.ARM.exidx : { *(.ARM.exidx*) }
+	.gnu.linkonce.armexidx : { *(.gnu.linkonce.armexidx.*) }
+}
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/ldo_sleep.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/ldo_sleep.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/ldo_sleep.c	(revision 182160)
@@ -0,0 +1,364 @@
+#include <asm/arch/sci_types.h>
+#include "adi_hal_internal.h"
+#include <asm/arch/chip_drv_common_io.h>
+#include <asm/arch/sprd_reg.h>
+
+/***************************************************************************************************************************/
+/*     VDD18 VDD28 VDD25 RF0 RF1 RF2 EMMCIO EMMCCORE DCDCARM DCDCWRF DCDCWPA DCDCGEN DCDCOTP AVDD18 SD SIM0 SIM1 SIM2 CAMA */
+/* AP    x     x    v     v   v   v     v      v        v       v       v       x       v      v    v    v   v     v    v  */
+/* CP0   x     x    v     v   v   x     x      x        x       v       x       x       x      x    x    x   x     x    x  */
+/* CP1   x     x    v     x   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* CP2   x     x    v     v   x   v     x      x        x       v       x       x       x      x    x    x   x     x    x  */
+/* EX0   x     x    x     v   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* EX1   x     x    x     x   v   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* EX2   x     x    x     v   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/***************************************************************************************************************************/
+
+/***************************************************************************************************************************/
+/*     CAMD CMAIO CAMMOT USB CLSG LPREF LPRF0 LPRF1 LPRF2 LPEMMCIO LPEMMCCORE LPWPA  LPGEN   LPARM LPMEM LPCORE LPBG  BG   */
+/* AP    v     v    v     v   v   v     v      v     v       v       v          x       v      v     v     v     v     v   */
+/* CP0   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* CP1   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* CP2   x     x    x     x   x   x     v      v     x       x       x          x       x      x     x     x     x     x   */
+/* EX0   x     x    x     x   x   x     x      x     v       x       x          x       x      x     x     x     x     x   */
+/* EX1   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* EX2   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/***************************************************************************************************************************/
+
+void init_ldo_sleep_gr(void)
+{
+	unsigned int reg_val;
+	ANA_REG_SET(ANA_REG_GLB_PWR_WR_PROT_VALUE,0x6e7f);
+	while( (ANA_REG_GET(ANA_REG_GLB_PWR_WR_PROT_VALUE) & 0x8000) != 0x8000 );
+
+	ANA_REG_SET(ANA_REG_GLB_LDO_DCDC_PD,
+		//BIT_LDO_EMM_PD |
+		//BIT_DCDC_TOPCLK6M_PD |
+		//BIT_DCDC_RF_PD |
+		//BIT_DCDC_GEN_PD |
+		//BIT_DCDC_MEM_PD |
+		//BIT_DCDC_ARM_PD |
+		//BIT_DCDC_CORE_PD |
+		//BIT_LDO_RF0_PD |
+		//BIT_LDO_EMMCCORE_PD |
+		//BIT_LDO_GEN1_PD |
+		//BIT_LDO_DCXO_PD |
+		//BIT_LDO_GEN0_PD |
+		//BIT_LDO_VDD25_PD |
+		//BIT_LDO_VDD28_PD |
+		//BIT_LDO_VDD18_PD |
+		//BIT_BG_PD |
+		0
+	);
+	ANA_REG_SET(ANA_REG_GLB_LDO_PD_CTRL,
+		BIT_LDO_LPREF_PD_SW |
+		BIT_DCDC_WPA_PD |
+		BIT_DCDC_CON_PD |
+		BIT_LDO_WIFIPA_PD |
+		BIT_LDO_SDCORE_PD |
+		//BIT_LDO_USB_PD |
+		BIT_LDO_CAMMOT_PD |
+		BIT_LDO_CAMIO_PD |
+		BIT_LDO_CAMD_PD |
+		BIT_LDO_CAMA_PD |
+		BIT_LDO_SIM2_PD |
+		BIT_LDO_SIM1_PD |
+		BIT_LDO_SIM0_PD |
+		BIT_LDO_SDIO_PD |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_WR_PROT_VALUE,0x0000);
+
+	ANA_REG_SET(ANA_REG_GLB_SLP_WAIT_DCDCARM,
+		BITS_SLP_IN_WAIT_DCDCARM(7) |
+		BITS_SLP_OUT_WAIT_DCDCARM(8) |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL0,
+		BIT_SLP_IO_EN |
+		BIT_SLP_DCDCRF_PD_EN |
+		//BIT_SLP_DCDCCON_PD_EN |
+		//BIT_SLP_DCDCGEN_PD_EN |
+		//BIT_SLP_DCDCWPA_PD_EN |
+		BIT_SLP_DCDCARM_PD_EN |
+		BIT_SLP_LDOVDD25_PD_EN |
+		BIT_SLP_LDORF0_PD_EN |
+		BIT_SLP_LDOEMMCCORE_PD_EN |
+		BIT_SLP_LDOGEN0_PD_EN |
+		BIT_SLP_LDODCXO_PD_EN |
+		BIT_SLP_LDOGEN1_PD_EN |
+		BIT_SLP_LDOWIFIPA_PD_EN |
+		//BIT_SLP_LDOVDD28_PD_EN |
+		//BIT_SLP_LDOVDD18_PD_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL1,
+		BIT_SLP_LDO_PD_EN |
+		BIT_SLP_LDOLPREF_PD_EN |
+		BIT_SLP_LDOSDCORE_PD_EN |
+		BIT_SLP_LDOUSB_PD_EN |
+		BIT_SLP_LDOCAMMOT_PD_EN |
+		BIT_SLP_LDOCAMIO_PD_EN |
+		BIT_SLP_LDOCAMD_PD_EN |
+		BIT_SLP_LDOCAMA_PD_EN |
+		BIT_SLP_LDOSIM2_PD_EN |
+		//BIT_SLP_LDOSIM1_PD_EN |
+		//BIT_SLP_LDOSIM0_PD_EN |
+		//BIT_SLP_LDOSDIO_PD_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL2,
+		//BIT_SLP_DCDCRF_LP_EN |
+		//BIT_SLP_DCDCCON_LP_EN |
+		BIT_SLP_DCDCCORE_LP_EN |
+		BIT_SLP_DCDCMEM_LP_EN |
+		//BIT_SLP_DCDCARM_LP_EN |
+		BIT_SLP_DCDCGEN_LP_EN |
+		//BIT_SLP_DCDCWPA_LP_EN |
+		//BIT_SLP_LDORF0_LP_EN  |
+		//BIT_SLP_LDOEMMCCORE_LP_EN |
+		//BIT_SLP_LDOGEN0_LP_EN |
+		//BIT_SLP_LDODCXO_LP_EN |
+		//BIT_SLP_LDOGEN1_LP_EN |
+		//BIT_SLP_LDOWIFIPA_LP_EN |
+		//BIT_SLP_LDOVDD28_LP_EN |
+		//BIT_SLP_LDOVDD18_LP_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL3,
+		//BIT_SLP_BG_LP_EN |
+		//BIT_LDOVDD25_LP_EN_SW |
+		//BIT_LDOSDCORE_LP_EN_SW |
+		//BIT_LDOUSB_LP_EN_SW |
+		//BIT_SLP_LDOVDD25_LP_EN |
+		//BIT_SLP_LDOSDCORE_LP_EN |
+		//BIT_SLP_LDOUSB_LP_EN |
+		//BIT_SLP_LDOCAMMOT_LP_EN |
+		//BIT_SLP_LDOCAMIO_LP_EN |
+		//BIT_SLP_LDOCAMD_LP_EN |
+		//BIT_SLP_LDOCAMA_LP_EN |
+		//BIT_SLP_LDOSIM2_LP_EN |
+		//BIT_SLP_LDOSIM1_LP_EN |
+		//BIT_SLP_LDOSIM0_LP_EN |
+		//BIT_SLP_LDOSDIO_LP_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL4,
+		//BIT_LDOCAMIO_LP_EN_SW |
+		//BIT_LDOCAMMOT_LP_EN_SW |
+		//BIT_LDOCAMD_LP_EN_SW |
+		//BIT_LDOCAMA_LP_EN_SW |
+		//BIT_LDOSIM2_LP_EN_SW |
+		//BIT_LDOSIM1_LP_EN_SW |
+		//BIT_LDOSIM0_LP_EN_SW |
+		//BIT_LDOSDIO_LP_EN_SW |
+		//BIT_LDORF0_LP_EN_SW |
+		//BIT_LDOEMMCCORE_LP_EN_SW |
+		//BIT_LDOGEN0_LP_EN_SW |
+		//BIT_LDODCXO_LP_EN_SW |
+		//BIT_LDOGEN1_LP_EN_SW |
+		//BIT_LDOWIFIPA_LP_EN_SW |
+		//BIT_LDOVDD28_LP_EN_SW |
+		//BIT_LDOVDD18_LP_EN_SW |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN0,
+		BIT_LDO_XTL_EN |
+		//BIT_LDO_GEN0_EXT_XTL0_EN |
+		//BIT_LDO_GEN0_XTL1_EN |
+		//BIT_LDO_GEN0_XTL0_EN |
+		BIT_LDO_GEN1_EXT_XTL0_EN |
+		BIT_LDO_GEN1_XTL1_EN |
+		BIT_LDO_GEN1_XTL0_EN |
+		BIT_LDO_DCXO_EXT_XTL0_EN |
+		BIT_LDO_DCXO_XTL1_EN |
+		BIT_LDO_DCXO_XTL0_EN |
+		//BIT_LDO_VDD18_EXT_XTL0_EN |
+		//BIT_LDO_VDD18_XTL1_EN |
+		//BIT_LDO_VDD18_XTL0_EN |
+		//BIT_LDO_VDD28_EXT_XTL0_EN |
+		//BIT_LDO_VDD28_XTL1_EN |
+		//BIT_LDO_VDD28_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN1,
+		BIT_LDO_RF0_EXT_XTL0_EN |
+		BIT_LDO_RF0_XTL1_EN |
+		BIT_LDO_RF0_XTL0_EN |
+		BIT_LDO_WIFIPA_EXT_XTL0_EN |
+		//BIT_LDO_WIFIPA_XTL1_EN |
+		//BIT_LDO_WIFIPA_XTL0_EN |
+		//BIT_LDO_SIM2_EXT_XTL0_EN |
+		//BIT_LDO_SIM2_XTL1_EN |
+		//BIT_LDO_SIM2_XTL0_EN |
+		//BIT_LDO_SIM1_EXT_XTL0_EN |
+		//BIT_LDO_SIM1_XTL1_EN |
+		//BIT_LDO_SIM1_XTL0_EN |
+		//BIT_LDO_SIM0_EXT_XTL0_EN |
+		//BIT_LDO_SIM0_XTL1_EN |
+		//BIT_LDO_SIM0_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN2,
+		BIT_LDO_VDD25_EXT_XTL0_EN |
+		BIT_LDO_VDD25_XTL1_EN |
+		BIT_LDO_VDD25_XTL0_EN |
+		BIT_DCDC_RF_EXT_XTL0_EN |
+		BIT_DCDC_RF_XTL1_EN |
+		BIT_DCDC_RF_XTL0_EN |
+		BIT_XO_EXT_XTL0_EN |
+		BIT_XO_XTL1_EN |
+		BIT_XO_XTL0_EN |
+		BIT_BG_EXT_XTL0_EN |
+		BIT_BG_XTL1_EN |
+		BIT_BG_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN3,
+		//BIT_DCDC_CON_EXT_XTL0_EN |
+		//BIT_DCDC_CON_XTL1_EN |
+		//BIT_DCDC_CON_XTL0_EN |
+		//BIT_DCDC_WPA_EXT_XTL0_EN |
+		//BIT_DCDC_WPA_XTL1_EN |
+		//BIT_DCDC_WPA_XTL0_EN |
+		BIT_DCDC_MEM_EXT_XTL0_EN |
+		BIT_DCDC_MEM_XTL1_EN |
+		BIT_DCDC_MEM_XTL0_EN |
+		BIT_DCDC_GEN_EXT_XTL0_EN |
+		BIT_DCDC_GEN_XTL1_EN |
+		BIT_DCDC_GEN_XTL0_EN |
+		BIT_DCDC_CORE_EXT_XTL0_EN |
+		BIT_DCDC_CORE_XTL1_EN |
+		BIT_DCDC_CORE_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_XTL_WAIT_CTRL,
+		BIT_SLP_XTLBUF_PD_EN |
+		BIT_XTL_EN |
+		BITS_XTL_WAIT(0x32) |
+		0
+	);
+
+
+	/************************************************
+	*   Following is AP/CP LDO D DIE Sleep Control   *
+	*************************************************/
+
+	REG32(REG_PMU_APB_26M_SEL_CFG) |= (BIT_CP1_26M_SEL | BIT_CP0_26M_SEL);
+
+	CHIP_REG_SET(REG_PMU_APB_XTL0_REL_CFG,
+		BIT_XTL0_ARM7_SEL |
+		BIT_XTL0_VCP1_SEL |
+		BIT_XTL0_VCP0_SEL |
+		BIT_XTL0_CP1_SEL |
+		BIT_XTL0_CP0_SEL |
+		BIT_XTL0_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTL1_REL_CFG,
+		BIT_XTL1_ARM7_SEL |
+		BIT_XTL1_VCP1_SEL |
+		BIT_XTL1_VCP0_SEL |
+		BIT_XTL1_CP1_SEL |
+		BIT_XTL1_CP0_SEL |
+		BIT_XTL1_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTLBUF0_REL_CFG,
+		BIT_XTLBUF0_ARM7_SEL |
+		BIT_XTLBUF0_VCP1_SEL |
+		BIT_XTLBUF0_VCP0_SEL |
+		BIT_XTLBUF0_CP1_SEL |
+		BIT_XTLBUF0_CP0_SEL |
+		BIT_XTLBUF0_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTLBUF1_REL_CFG,
+		BIT_XTLBUF1_ARM7_SEL |
+		BIT_XTLBUF1_VCP1_SEL |
+		BIT_XTLBUF1_VCP0_SEL |
+		BIT_XTLBUF1_CP1_SEL |
+		BIT_XTLBUF1_CP0_SEL |
+		BIT_XTLBUF1_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_MPLL_REL_CFG,
+		//BIT_MPLL_REF_SEL |
+		//BIT_MPLL_ARM7_SEL |
+		//BIT_MPLL_VCP1_SEL |
+		//BIT_MPLL_VCP0_SEL |
+		//BIT_MPLL_CP1_SEL |
+		//BIT_MPLL_CP0_SEL |
+		BIT_MPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_DPLL_REL_CFG,
+		//BIT_DPLL_REF_SEL |
+		BIT_DPLL_ARM7_SEL |
+		BIT_DPLL_VCP1_SEL |
+		//BIT_DPLL_VCP0_SEL |
+		//BIT_DPLL_CP1_SEL |
+		//BIT_DPLL_CP0_SEL |
+		BIT_DPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_LTEPLL_REL_CFG,
+		BIT_LTEPLL_REF_SEL |
+		//BIT_LTEPLL_ARM7_SEL |
+		BIT_LTEPLL_VCP1_SEL |
+		//BIT_LTEPLL_VCP0_SEL |
+		//BIT_LTEPLL_CP1_SEL |
+		//BIT_LTEPLL_CP0_SEL |
+		//BIT_LTEPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_TWPLL_REL_CFG,
+		BIT_TWPLL_REF_SEL |
+		BIT_TWPLL_ARM7_SEL |
+		BIT_TWPLL_VCP1_SEL |
+		//BIT_TWPLL_VCP0_SEL |
+		//BIT_TWPLL_CP1_SEL |
+		//BIT_TWPLL_CP0_SEL |
+		BIT_TWPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_LVDSDIS_PLL_REL_CFG,
+		BIT_LVDSDIS_PLL_REF_SEL |
+		//BIT_LVDSDIS_PLL_ARM7_SEL |
+		//BIT_LVDSDIS_PLL_VCP1_SEL |
+		//BIT_LVDSDIS_PLL_VCP0_SEL |
+		//BIT_LVDSDIS_PLL_CP1_SEL |
+		//BIT_LVDSDIS_PLL_CP0_SEL |
+		//BIT_LVDSDIS_PLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_PD_CODEC_TOP_CFG,
+		BIT_PD_CODEC_TOP_AUTO_SHUTDOWN_EN          |
+		BITS_PD_CODEC_TOP_PWR_ON_DLY(8)            |
+		BITS_PD_CODEC_TOP_PWR_ON_SEQ_DLY(0)        |
+		BITS_PD_CODEC_TOP_ISO_ON_DLY(4)            |
+		0
+	);
+
+	CSP_Init(0x50001800);
+}
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/pinmap-sp9630.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/pinmap-sp9630.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/pinmap-sp9630.c	(revision 182160)
@@ -0,0 +1,227 @@
+/*
+ * Copyright (C) 2012 Spreadtrum Communications Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/*
+ *Version SP9830A-2_LA_SCH_V1.1.0_V1.0
+ */
+
+#include <asm/io.h>
+#include <asm/arch/pinmap.h>
+#define BIT_PIN_SLP_ALL  (BIT_PIN_SLP_AP|BIT_PIN_SLP_CP0|BIT_PIN_SLP_CP1|BIT_PIN_SLP_VCP0|BIT_PIN_SLP_VCP1)
+
+static pinmap_t pinmap[]={
+{REG_PIN_CTRL0,0x08000000},
+{REG_PIN_CTRL1,0x0},
+{REG_PIN_CTRL2,0x00285000}, // uart0->bt'uart;  uart1->ap'uart0; uart2->cp1'uart1(lte dsp uart); uart3->ap'uart3; uart4->cp0 uart1(td dsp uart), BIT17:15=0
+{REG_PIN_CTRL3,0x0},
+{REG_PIN_CTRL4,0x0},
+{REG_PIN_CTRL5,0x0},
+{REG_PIN_RFSDA0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_DATA_RF0
+{REG_PIN_RFSCK0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_CLK_RF0
+{REG_PIN_RFSEN0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_CSN_RF0
+{REG_PIN_RFSDA1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFSCK1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFSEN1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFCTL15,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL16,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL17,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL18,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL18
+{REG_PIN_RFCTL19,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL19
+{REG_PIN_RFCTL20,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL20
+{REG_PIN_RFCTL21,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL22,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL23,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL24,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL25,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL26,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LTE_RX_PRIORITY
+{REG_PIN_RFCTL0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL0
+{REG_PIN_RFCTL1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL1
+{REG_PIN_RFCTL2,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL2
+{REG_PIN_RFCTL3,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL3
+{REG_PIN_RFCTL4,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL4
+{REG_PIN_RFCTL5,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL5
+{REG_PIN_RFCTL6,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL6 
+{REG_PIN_RFCTL7,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL7
+{REG_PIN_RFCTL8,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL8
+{REG_PIN_RFCTL9,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL9
+{REG_PIN_RFCTL10,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL10
+{REG_PIN_RFCTL11,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL11
+{REG_PIN_RFCTL12,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL12
+{REG_PIN_RFCTL13,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL13
+{REG_PIN_RFCTL14,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL14
+{REG_PIN_RFCTL27,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LTE_TX_PRIORITY
+{REG_PIN_XTL_EN,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//GPS_GPIO0
+{REG_PIN_RFFE_SCK0,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RFFE_SCLK0
+{REG_PIN_RFFE_SDA0,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RFFE_SDA0
+{REG_PIN_RFCTL28,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL29,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_SIMCLK0,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM0_CLK
+{REG_PIN_SIMDA0,              BIT_PIN_SLP_VCP1|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM0_DA
+{REG_PIN_SIMRST0,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM0_RST
+{REG_PIN_SIMCLK1,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM1_CLK
+{REG_PIN_SIMDA1,              BIT_PIN_SLP_VCP1|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM1_DA
+{REG_PIN_SIMRST1,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM1_RST
+{REG_PIN_SIMCLK2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_SIMDA2,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_SIMRST2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_SD0_D3,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D3
+{REG_PIN_SD0_D2,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D2
+{REG_PIN_SD0_CMD,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_CMD
+{REG_PIN_SD0_D0,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D0
+{REG_PIN_SD0_D1,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D1
+{REG_PIN_SD0_CLK0,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(4)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SD0_CLK0
+{REG_PIN_SD1_CLK,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SD1_CLK
+{REG_PIN_SD1_CMD,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_CMD
+{REG_PIN_SD1_D0,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D0
+{REG_PIN_SD1_D1,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D1
+{REG_PIN_SD1_D2,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D2
+{REG_PIN_SD1_D3,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D3
+{REG_PIN_IIS0DI,              BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//BT_IISDO
+{REG_PIN_IIS0DO,              BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_IISDI
+{REG_PIN_IIS0CLK,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BT_IISCLK
+{REG_PIN_IIS0LRCK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BT_IISRCK
+{REG_PIN_U0TXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_U0RXD
+{REG_PIN_U0RXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//BT_U0TXD
+{REG_PIN_U0CTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//BT_U0RTS
+{REG_PIN_U0RTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//BT_U0CTS
+{REG_PIN_PTEST,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GND
+{REG_PIN_ANA_INT,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//ANA_INT
+{REG_PIN_EXT_RST_B,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//EXT_RST_B
+{REG_PIN_CHIP_SLEEP,          BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CHIP_SLEEP
+{REG_PIN_XTL_BUF_EN0,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//XTL_BUF_EN0
+{REG_PIN_XTL_BUF_EN1,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//XTL_BUF_EN1
+{REG_PIN_CLK_32K,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//CLK_32K
+{REG_PIN_AUD_SCLK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_SCLK
+{REG_PIN_AUD_ADD0,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//AUD_ADD0
+{REG_PIN_AUD_ADSYNC,          BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//AUD_ADSYNC
+{REG_PIN_AUD_DAD1,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DAD1
+{REG_PIN_AUD_DAD0,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DAD0
+{REG_PIN_AUD_DASYNC,          BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DASYNC
+{REG_PIN_ADI_D,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//ADI_D
+{REG_PIN_ADI_SYNC,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//ADI_SYNC
+{REG_PIN_ADI_SCLK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//ADI_SCLK
+{REG_PIN_LCM_RSTN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LCM_RSTN
+{REG_PIN_DSI_TE,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//LCM_FMARK
+{REG_PIN_MTDO_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTDI_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTCK_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTMS_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTRST_N_ARM,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_DTDO_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TDO_LTE_WG
+{REG_PIN_DTDI_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TDI_LTE_WG
+{REG_PIN_DTCK_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TCK_LTE_WG
+{REG_PIN_DTMS_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TMS_LTE_WG
+{REG_PIN_DRTCK_LTE,           BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RTCK_LTE_WG
+{REG_PIN_NFWPN,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT0
+{REG_PIN_NFRB,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//EMMC_CMD
+{REG_PIN_NFCLE,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT6
+{REG_PIN_NFALE,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT7
+{REG_PIN_NFREN,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//EMMC_CLK
+{REG_PIN_NFD4,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT5
+{REG_PIN_NFD5,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT4
+{REG_PIN_NFD6,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD7,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT3
+{REG_PIN_NFD10,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(2)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//EMMC_RST
+{REG_PIN_NFD11,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT1
+{REG_PIN_NFD14,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT2
+{REG_PIN_NFCEN0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFWEN,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD0,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD1,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD2,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD3,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD8,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD9,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD12,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD13,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD15,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_CCIRD0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CCIRD1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CMMCLK,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//MCLK
+{REG_PIN_CMPCLK,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CMRST0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RST0
+{REG_PIN_CMRST1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RST1
+{REG_PIN_CMPD0,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//PWDN0
+{REG_PIN_CMPD1,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//PWDN1
+{REG_PIN_SCL0,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C0_SCL
+{REG_PIN_SDA0,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C0_SDA
+{REG_PIN_SPI2_CSN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GPS_SPI_CS
+{REG_PIN_SPI2_DO,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GPS_SPI_DI
+{REG_PIN_SPI2_DI,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GPS_SPI_DO
+{REG_PIN_SPI2_CLK,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GPS_SPI_CLK
+{REG_PIN_SPI0_CSN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//OTG_ID  
+{REG_PIN_SPI0_DO,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C1_SDA
+{REG_PIN_SPI0_DI,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//FLASH_EN       
+{REG_PIN_SPI0_CLK,            BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C1_SCL
+{REG_PIN_MEMS_MIC_CLK0,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//WF_COEXIST
+{REG_PIN_MEMS_MIC_DATA0,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//GPS_COEXIST     
+{REG_PIN_MEMS_MIC_CLK1,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GPS_INT   
+{REG_PIN_MEMS_MIC_DATA1,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//WIFI_WAKE_HOST
+{REG_PIN_KEYOUT0,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//KEYOUT0    
+{REG_PIN_KEYOUT1,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//Marlin_RST
+{REG_PIN_KEYOUT2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//FLASH_LED
+{REG_PIN_KEYIN0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN0
+{REG_PIN_KEYIN1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN1
+{REG_PIN_KEYIN2,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN2
+{REG_PIN_SCL2,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C2_SCL
+{REG_PIN_SDA2,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C2_SDA
+{REG_PIN_CLK_AUX0,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SLEEP_32K
+{REG_PIN_IIS1DI,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//GPS_PDN
+{REG_PIN_IIS1DO,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//CHG_DONE
+{REG_PIN_IIS1CLK,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//BT_DEV_WAKE
+{REG_PIN_IIS1LRCK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_HOST_WAKE
+{REG_PIN_TRACECLK,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BAND_INFO1    
+{REG_PIN_TRACECTRL,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BAND_INFO2   
+{REG_PIN_TRACEDAT0,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CHG_EN
+{REG_PIN_TRACEDAT1,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//GPS_GPIO1
+{REG_PIN_TRACEDAT2,           BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//LCM_BL_PWM
+{REG_PIN_TRACEDAT3,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//G_INT1
+{REG_PIN_TRACEDAT4,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//PROX_INT
+{REG_PIN_TRACEDAT5,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//TF_DET
+{REG_PIN_TRACEDAT6,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM0_DET
+{REG_PIN_TRACEDAT7,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM1_DET
+{REG_PIN_EXTINT0,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//CTP_INT
+{REG_PIN_EXTINT1,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CTP_RST
+{REG_PIN_SCL3,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C3_SCL
+{REG_PIN_SDA3,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C3_SDA
+{REG_PIN_U1TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U1TXD
+{REG_PIN_U1RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U1RXD
+{REG_PIN_U2TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U2TXD
+{REG_PIN_U2RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U2RXD
+{REG_PIN_U3TXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//GPS_U0RXD
+{REG_PIN_U3RXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_U0TXD
+{REG_PIN_U3CTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_U0RTS
+{REG_PIN_U3RTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//GPS_U0CTS
+{REG_PIN_U4TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U4TXD
+{REG_PIN_U4RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U4RXD
+};
+
+/*here is the adie pinmap such as 2723*/
+static pinmap_t adie_pinmap[]={
+{REG_PIN_ANA_EXT_XTL_EN0,		BITS_ANA_PIN_DS(1)|BIT_ANA_PIN_WPD|BIT_ANA_PIN_SLP_IE},
+};
+
+int  pin_init(void)
+{
+	int i;
+	for (i = 0; i < sizeof(pinmap)/sizeof(pinmap[0]); i++) {
+		__raw_writel(pinmap[i].val, CTL_PIN_BASE + pinmap[i].reg);
+	}
+
+	for (i = 0; i < sizeof(adie_pinmap)/sizeof(adie_pinmap[0]); i++) {
+		sci_adi_set(CTL_ANA_PIN_BASE + adie_pinmap[i].reg, adie_pinmap[i].val);
+	}
+
+	return 0;
+}
+
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/config.mk
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/config.mk	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/config.mk	(revision 182160)
@@ -0,0 +1,6 @@
+ifdef CONFIG_NAND_SPL
+CONFIG_SYS_TEXT_BASE = 0x50005000
+else
+#CONFIG_SYS_TEXT_BASE = 0x8f800000
+CONFIG_SYS_TEXT_BASE = 0x9f000000
+endif
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/cp_boot.h
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/cp_boot.h	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/cp_boot.h	(revision 182160)
@@ -0,0 +1,162 @@
+/******************************************************************************
+ ** File Name:      cp_mode.c                                                 *
+ ** Author:         Andrew.Yang                                               *
+ ** DATE:           31/03/2014                                                *
+ ** Copyright:      2014 Spreatrum, Incoporated. All Rights Reserved.         *
+ ** Description:    This file defines the logic interfaces called during boot,*
+ **                 including reset mode setting, initialization etc.
+ ******************************************************************************
+
+ ******************************************************************************
+ **                        Edit History                                       *
+ ** ------------------------------------------------------------------------- *
+ ** DATE           NAME             DESCRIPTION                               *
+ ** 31/03/2014     Andrew           Create.                                   *
+ ******************************************************************************/
+
+/**---------------------------------------------------------------------------*
+ **                         Dependencies                                      *
+ **---------------------------------------------------------------------------*/
+/**---------------------------------------------------------------------------*
+ **                         Compiler Flag                                     *
+ **---------------------------------------------------------------------------*/
+#ifndef _CP_BOOT_H_
+#define  _CP_BOOT_H__
+
+
+/**---------------------------------------------------------------------------*
+ **                         Global variables                                  *
+ **---------------------------------------------------------------------------*/
+
+#define msleep(cnt) udelay(cnt*1000)
+/**---------------------------------------------------------------------------*
+ **                         Local variables                                   *
+ **---------------------------------------------------------------------------*/
+
+/**---------------------------------------------------------------------------*
+ **                     Local Function Prototypes                             *
+ **---------------------------------------------------------------------------*/
+
+/**---------------------------------------------------------------------------*
+ **                         Function Prototypes                               *
+ **---------------------------------------------------------------------------*/
+/*****************************************************************************/
+//  Description:    Sets the different kinds of reset modes, used in normal p-
+//                  ower up mode, watchdog reset mode and calibration mode etc.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp0_arm0_boot(void)
+{
+    u32 state;
+
+      /* open cp0 pmu controller
+    *((volatile u32*)REG_PMU_APB_PD_CP0_SYS_CFG ) &= ~BIT(25);
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_PD_CP0_SYS_CFG ) &= ~BIT(28);
+    */
+
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~ BIT(17);   /*clear cp0 sleep */
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(0);   /* reset cp0 */
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~ BIT(0); /* clear cp0 force shutdown */
+
+    while(1)
+    {
+    state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+    if(!(state & BIT(0)))
+      break;
+    }
+}
+
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp1_boot(void)
+{
+    u32 state;
+    *((volatile u32*)REG_AON_APB_APB_RST1) |= BIT(20);   /* reset cp1 */
+    msleep(50);
+    *((volatile u32*)REG_AON_APB_APB_RST1) &= ~ BIT(20);   /*clear reset cp1 */
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~(BIT(18) | BIT(20));   /*clear cp1 sleep */
+
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(1);   /* reset cp0 */
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~ BIT(1); /* clear cp0 force shutdown */
+
+    while(1)
+    {
+    state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+    if(!(state & BIT(1)))
+      break;
+    }
+}
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+void pmic_arm7_RAM_active(void)
+{
+    u32 state;
+    *((volatile u32*)REG_AON_APB_ARM7_SYS_SOFT_RST) |= BIT(0);   /* 0x402e0114*/
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(8);   /* reset arm7*/
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~BIT(8); /* clear arm7*/
+    while(1)
+    {
+        state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+        if(!(state & BIT(8)))
+          break;
+    }
+}
+
+
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void pmic_arm7_boot(void)
+{
+    u32 state;
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~ BIT(21);   /*clear arm7 force sleep */
+    *((volatile u32*)REG_AON_APB_ARM7_SYS_SOFT_RST) &= ~ BIT(0);   /* reset arm7 */
+    msleep(50);
+}
+
+
+/*****************************************************************************/
+//  Description:    After normal power on, the HW_RST flag should be reset in
+//                  order to judge differrent reset conditions between normal
+//                  power on reset and watchdog reset.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp2_boot()
+{
+}
+
+/*****************************************************************************/
+//  Description:    Before watchdog reset, writting HW_RST flag is uesed to j-
+//                  udge differrent watchdog reset conditions between MCU reset
+//                  and system-halted.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp0_arm1_boot(void)
+{
+}
+
+static inline void cp0_arm2_boot(void)
+{
+}
+
+
+/**---------------------------------------------------------------------------*
+ **                         Compiler Flag                                     *
+ **---------------------------------------------------------------------------*/
+#endif
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/key_map.h
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/key_map.h	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/key_map.h	(revision 182160)
@@ -0,0 +1,24 @@
+#ifndef _KEY_MAP_H_
+#define _KEY_MAP_H_
+
+#include <linux/input.h>
+
+static unsigned char board_key_map[]={
+#if 0
+    0x27, KEY_HOME,
+    0x42, KEY_BACK,
+    0x41, KEY_VOLUMEUP,
+#else
+//    0x00, KEY_BACK,//DOWN
+    0x01, KEY_HOME,//CAM
+//    0x10, KEY_MENU,//UP
+#endif
+    0x10, KEY_VOLUMEUP,		
+    0x00, KEY_VOLUMEDOWN,
+};
+
+#define CONFIG_KEYPAD_ROW_CNT 5
+#define CONFIG_KEYPAD_COL_CNT 5
+#define CONFIG_KEYPAD_LONG_CNT 0xc
+#define CONFIG_KEYPAD_DEBOUNCE_CNT 0x5
+#endif //_KEY_MAP_H_
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/Makefile
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/Makefile	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/Makefile	(revision 182160)
@@ -0,0 +1,27 @@
+#
+# (C) Copyright 2009 DENX Software Engineering
+# Author: John Rigby <jcrigby@gmail.com>
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+
+obj-y	= sp9832a_2h11_volte.o sprd_kp.o ldo_sleep.o sprd_bl.o modem_entry.o sdio_cfg.o
+obj-y   += pinmap-sp9630.o
+
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/sdio_cfg.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/sdio_cfg.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/sdio_cfg.c	(revision 182160)
@@ -0,0 +1,93 @@
+/*
+ * This file is produced by tools!!
+ *
+ * Copyright (C) 2012 Spreadtrum Communications Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <asm/arch/sprd_reg.h>
+#include <asm/io.h>
+#include <asm/arch/sdio_cfg.h>
+#include <asm/arch/sdio_reg.h>
+#include <asm/arch/chip_drv_common_io.h>
+
+
+const  SDIO_BASE_INFO  sdio_ctrl_info[2] =
+{
+	{
+		EMMC,
+		//SPRD_EMMC_BASE,
+		0X20600000,
+#ifdef CONFIG_FPGA
+             NULL,
+             NULL,
+	      36000000,
+	      100000,
+#else
+		REG_AP_CLK_EMMC_CFG,
+		BIT_0|BIT_1,
+ 	       384000000,
+		400000,
+#endif
+		//REG_AP_AHB_AHB_EB,
+		0X20E00000,
+		BIT_11,
+		//REG_AP_AHB_AHB_RST,
+		0X20E00004,
+		BIT_14,
+
+		LDO_LDO_EMMCIO,
+		LDO_LDO_EMMCCORE,
+	},
+	{
+		SD,
+		0X20300000,
+#ifdef CONFIG_FPGA
+             NULL,
+             NULL,
+	      36000000,
+	      100000,
+#else
+		REG_AP_CLK_SDIO0_CFG,
+		BIT_0|BIT_1,
+        384000000,
+		400000,
+#endif
+
+		//REG_AP_AHB_AHB_EB,
+		0X20E00000,
+		BIT_8,
+		//REG_AP_AHB_AHB_RST,
+		0X20E00004,
+		BIT_11,
+
+		LDO_LDO_SDIO1,
+		LDO_LDO_SDIO0,
+	}
+};
+
+SDIO_BASE_INFO*  get_sdcontrol_info(uint32_t device_type)
+{
+	return  &sdio_ctrl_info[device_type];
+}
+
+void  sdio_dump(uint32_t regbase)
+{
+	uint32_t  i;
+	printf("*****SDIO REGISTER DUMP*****\n");
+
+    for(i=0;i<8;i++){
+		printf("0x%08x,0x%08x,0x%08x,0x%08x\n",CHIP_REG_GET(regbase + i*16 +0),CHIP_REG_GET(regbase + i*16 +4),CHIP_REG_GET(regbase + i*16 +8),CHIP_REG_GET(regbase + i*16+0xc));
+	}
+}
+
+
Index: u-boot64/board/spreadtrum/sp9832a_2h12_volte/sp9832a_2h11_volte.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h12_volte/sp9832a_2h11_volte.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_2h12_volte/sp9832a_2h11_volte.c	(revision 182160)
@@ -0,0 +1,159 @@
+#include <common.h>
+#include <asm/io.h>
+#include <sprd_regulator.h>
+//#include <asm/arch/sprd_reg_ahb.h>
+//#include <asm/arch/regs_ahb.h>
+#include <asm/arch/common.h>
+#include "adi_hal_internal.h"
+#include <asm/u-boot.h>
+#include <part.h>
+#include <sdhci.h>
+#include <asm/arch/mfp.h>
+//#include <linux/gpio.h>
+//#include <asm/arch/gpio.h>
+#include <asm/arch/pinmap.h>
+#include "asm/arch/sprd_module_config.h"
+
+#include <boot_mode.h>
+#include <chipram_env.h>
+
+
+DECLARE_GLOBAL_DATA_PTR;
+
+extern void sprd_gpio_init(void);
+extern void ADI_init (void);
+extern int LDO_Init(void);
+extern void ADC_Init(void);
+extern void init_ldo_sleep_gr(void);
+
+phys_size_t real_ram_size = 0x40000000;
+
+
+//extern struct eic_gpio_resource sprd_gpio_resource[];
+
+int board_init()
+{
+	//gd->bd->bi_arch_number = MACH_TYPE_OPENPHONE;
+	/*get env transfer from chipram*/
+	setup_chipram_env();
+	gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100;
+	ADI_init();
+	misc_init();
+	LDO_Init();
+	ADC_Init();
+	pin_init();
+	sprd_eic_init();
+	sprd_gpio_init();
+	init_ldo_sleep_gr();
+//	TDPllRefConfig(1);
+
+	return 0;
+}
+
+phys_size_t get_real_ram_size(void)
+{
+        return real_ram_size;
+}
+
+int dram_init(void)
+{
+#ifdef CONFIG_DDR_AUTO_DETECT
+        ulong sdram_base = CONFIG_SYS_SDRAM_BASE;
+        ulong sdram_size = 0;
+        int i;
+
+        real_ram_size = 0;
+        ulong bank_cnt = CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM;
+
+        for (i = 1; i <= *(volatile uint32 *)CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM; i++) {
+                real_ram_size += *(volatile ulong *)((volatile ulong *)CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM + i);
+        }
+
+        real_ram_size = get_ram_size((volatile void *)sdram_base, real_ram_size);
+#else
+	real_ram_size = REAL_SDRAM_SIZE;
+#endif
+        gd->ram_size = get_ram_size((volatile void *)PHYS_SDRAM_1,
+                        PHYS_SDRAM_1_SIZE);
+
+        return 0;
+}
+
+
+CBOOT_FUNC s_boot_func_array[CHECK_BOOTMODE_FUN_NUM] = {
+
+	get_mode_from_bat_low,
+	write_sysdump_before_boot_extend,
+	/* 1 get mode from file*/
+	get_mode_from_file_extend,
+	/* 2 get mode from watch dog*/
+	get_mode_from_watchdog,
+	/*3 get mode from alarm register*/
+	get_mode_from_alarm_register,
+	/*0 get mode from calibration detect*/
+	get_mode_from_pctool,
+	/*4 get mode from charger*/
+	get_mode_from_charger,
+	/*5 get mode from keypad*/
+	get_mode_from_keypad,
+	/*6 get mode from gpio*/
+	get_mode_from_gpio_extend,
+
+	/*shutdown device*/
+//	get_mode_from_shutdown,
+
+	0
+};
+
+
+
+void board_boot_mode_regist(CBOOT_MODE_ENTRY *array)
+{
+	MODE_REGIST(CMD_NORMAL_MODE, normal_mode);
+	MODE_REGIST(CMD_RECOVERY_MODE, recovery_mode);
+	MODE_REGIST(CMD_FASTBOOT_MODE, fastboot_mode);
+	MODE_REGIST(CMD_WATCHDOG_REBOOT, watchdog_mode);
+	MODE_REGIST(CMD_UNKNOW_REBOOT_MODE, unknow_reboot_mode);
+	MODE_REGIST(CMD_PANIC_REBOOT, panic_reboot_mode);
+	MODE_REGIST(CMD_AUTODLOADER_REBOOT, autodloader_mode);
+	MODE_REGIST(CMD_SPECIAL_MODE, special_mode);
+	MODE_REGIST(CMD_CHARGE_MODE, charge_mode);
+	MODE_REGIST(CMD_ENGTEST_MODE,engtest_mode);
+	MODE_REGIST(CMD_FACTORYTEST_MODE,factorytest_mode);
+	MODE_REGIST(CMD_CALIBRATION_MODE, calibration_mode);
+	MODE_REGIST(CMD_EXT_RSTN_REBOOT_MODE, normal_mode);
+	MODE_REGIST(CMD_IQ_REBOOT_MODE, iq_mode);
+	MODE_REGIST(CMD_ALARM_MODE, alarm_mode);
+       MODE_REGIST(CMD_AUTOTEST_MODE, autotest_mode);
+
+	return ;
+}
+
+int board_late_init(void)
+{
+	boot_mode_t boot_role;
+	extern chipram_env_t* get_chipram_env(void);
+	chipram_env_t* cr_env = get_chipram_env();
+	boot_role = cr_env->mode;
+
+	boot_pwr_check();
+
+#if !defined(CONFIG_FPGA)
+#ifdef CONFIG_NAND_BOOT
+	//extern int nand_ubi_dev_init(void);
+	nand_ubi_dev_init();
+	debugf("nand ubi init OK!\n");
+#endif
+
+#endif
+	extern void sprdbat_init(void);
+	sprdbat_init();
+	debugf("CHG init OK!\n");
+	if (sprdbat_get_vbatauxadc_caltype() != 0) {
+		/*fix me*/
+		DCDC_Cal_ArmCore();
+	}
+	board_keypad_init();
+	return 0;
+}
+
Index: u-boot64/board/spreadtrum/sp9832a_2h11_4m/sprd_kp.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h11_4m/sprd_kp.c	(revision 182159)
+++ u-boot64/board/spreadtrum/sp9832a_2h11_4m/sprd_kp.c	(revision 182160)
@@ -25,7 +25,7 @@
 	int gpio_volumedown = -1;
 
     sprd_eic_request(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
-    udelay(3000);
+   // udelay(3000);
     gpio_volumeup = sprd_eic_get(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
     if(gpio_volumeup < 0)
         printf("[eic keys] volumeup : sprd_eic_get return ERROR!\n");
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/config.mk
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/config.mk	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/config.mk	(revision 182160)
@@ -0,0 +1,6 @@
+ifdef CONFIG_NAND_SPL
+CONFIG_SYS_TEXT_BASE = 0x50005000
+else
+#CONFIG_SYS_TEXT_BASE = 0x8f800000
+CONFIG_SYS_TEXT_BASE = 0x9f000000
+endif
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/cp_boot.h
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/cp_boot.h	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/cp_boot.h	(revision 182160)
@@ -0,0 +1,162 @@
+/******************************************************************************
+ ** File Name:      cp_mode.c                                                 *
+ ** Author:         Andrew.Yang                                               *
+ ** DATE:           31/03/2014                                                *
+ ** Copyright:      2014 Spreatrum, Incoporated. All Rights Reserved.         *
+ ** Description:    This file defines the logic interfaces called during boot,*
+ **                 including reset mode setting, initialization etc.
+ ******************************************************************************
+
+ ******************************************************************************
+ **                        Edit History                                       *
+ ** ------------------------------------------------------------------------- *
+ ** DATE           NAME             DESCRIPTION                               *
+ ** 31/03/2014     Andrew           Create.                                   *
+ ******************************************************************************/
+
+/**---------------------------------------------------------------------------*
+ **                         Dependencies                                      *
+ **---------------------------------------------------------------------------*/
+/**---------------------------------------------------------------------------*
+ **                         Compiler Flag                                     *
+ **---------------------------------------------------------------------------*/
+#ifndef _CP_BOOT_H_
+#define  _CP_BOOT_H__
+
+
+/**---------------------------------------------------------------------------*
+ **                         Global variables                                  *
+ **---------------------------------------------------------------------------*/
+
+#define msleep(cnt) udelay(cnt*1000)
+/**---------------------------------------------------------------------------*
+ **                         Local variables                                   *
+ **---------------------------------------------------------------------------*/
+
+/**---------------------------------------------------------------------------*
+ **                     Local Function Prototypes                             *
+ **---------------------------------------------------------------------------*/
+
+/**---------------------------------------------------------------------------*
+ **                         Function Prototypes                               *
+ **---------------------------------------------------------------------------*/
+/*****************************************************************************/
+//  Description:    Sets the different kinds of reset modes, used in normal p-
+//                  ower up mode, watchdog reset mode and calibration mode etc.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp0_arm0_boot(void)
+{
+    u32 state;
+
+      /* open cp0 pmu controller
+    *((volatile u32*)REG_PMU_APB_PD_CP0_SYS_CFG ) &= ~BIT(25);
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_PD_CP0_SYS_CFG ) &= ~BIT(28);
+    */
+
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~ BIT(17);   /*clear cp0 sleep */
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(0);   /* reset cp0 */
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~ BIT(0); /* clear cp0 force shutdown */
+
+    while(1)
+    {
+    state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+    if(!(state & BIT(0)))
+      break;
+    }
+}
+
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp1_boot(void)
+{
+    u32 state;
+    *((volatile u32*)REG_AON_APB_APB_RST1) |= BIT(20);   /* reset cp1 */
+    msleep(50);
+    *((volatile u32*)REG_AON_APB_APB_RST1) &= ~ BIT(20);   /*clear reset cp1 */
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~(BIT(18) | BIT(20));   /*clear cp1 sleep */
+
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(1);   /* reset cp0 */
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~ BIT(1); /* clear cp0 force shutdown */
+
+    while(1)
+    {
+    state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+    if(!(state & BIT(1)))
+      break;
+    }
+}
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+void pmic_arm7_RAM_active(void)
+{
+    u32 state;
+    *((volatile u32*)REG_AON_APB_ARM7_SYS_SOFT_RST) |= BIT(0);   /* 0x402e0114*/
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST)|= BIT(8);   /* reset arm7*/
+    msleep(50);
+    *((volatile u32*)REG_PMU_APB_CP_SOFT_RST) &= ~BIT(8); /* clear arm7*/
+    while(1)
+    {
+        state = *((volatile u32*)REG_PMU_APB_CP_SOFT_RST);
+        if(!(state & BIT(8)))
+          break;
+    }
+}
+
+
+/*****************************************************************************/
+//  Description:    Gets the current reset mode.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void pmic_arm7_boot(void)
+{
+    u32 state;
+    *((volatile u32*)REG_PMU_APB_SLEEP_CTRL) &= ~ BIT(21);   /*clear arm7 force sleep */
+    *((volatile u32*)REG_AON_APB_ARM7_SYS_SOFT_RST) &= ~ BIT(0);   /* reset arm7 */
+    msleep(50);
+}
+
+
+/*****************************************************************************/
+//  Description:    After normal power on, the HW_RST flag should be reset in
+//                  order to judge differrent reset conditions between normal
+//                  power on reset and watchdog reset.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp2_boot()
+{
+}
+
+/*****************************************************************************/
+//  Description:    Before watchdog reset, writting HW_RST flag is uesed to j-
+//                  udge differrent watchdog reset conditions between MCU reset
+//                  and system-halted.
+//  Author:         Andrew.Yang
+//  Note:
+/*****************************************************************************/
+static inline void cp0_arm1_boot(void)
+{
+}
+
+static inline void cp0_arm2_boot(void)
+{
+}
+
+
+/**---------------------------------------------------------------------------*
+ **                         Compiler Flag                                     *
+ **---------------------------------------------------------------------------*/
+#endif
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/key_map.h
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/key_map.h	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/key_map.h	(revision 182160)
@@ -0,0 +1,24 @@
+#ifndef _KEY_MAP_H_
+#define _KEY_MAP_H_
+
+#include <linux/input.h>
+
+static unsigned char board_key_map[]={
+#if 0
+    0x27, KEY_HOME,
+    0x42, KEY_BACK,
+    0x41, KEY_VOLUMEUP,
+#else
+//    0x00, KEY_BACK,//DOWN
+    0x01, KEY_HOME,//CAM
+//    0x10, KEY_MENU,//UP
+#endif
+    0x10, KEY_VOLUMEUP,		
+    0x00, KEY_VOLUMEDOWN,
+};
+
+#define CONFIG_KEYPAD_ROW_CNT 5
+#define CONFIG_KEYPAD_COL_CNT 5
+#define CONFIG_KEYPAD_LONG_CNT 0xc
+#define CONFIG_KEYPAD_DEBOUNCE_CNT 0x5
+#endif //_KEY_MAP_H_
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/Makefile
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/Makefile	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/Makefile	(revision 182160)
@@ -0,0 +1,27 @@
+#
+# (C) Copyright 2009 DENX Software Engineering
+# Author: John Rigby <jcrigby@gmail.com>
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+
+obj-y	= sp9832a_7c10_volte.o sprd_kp.o ldo_sleep.o sprd_bl.o modem_entry.o sdio_cfg.o
+obj-y   += pinmap-sp9630.o
+
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/sp9832a_7c10_volte.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/sp9832a_7c10_volte.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/sp9832a_7c10_volte.c	(revision 182160)
@@ -0,0 +1,159 @@
+#include <common.h>
+#include <asm/io.h>
+#include <sprd_regulator.h>
+//#include <asm/arch/sprd_reg_ahb.h>
+//#include <asm/arch/regs_ahb.h>
+#include <asm/arch/common.h>
+#include "adi_hal_internal.h"
+#include <asm/u-boot.h>
+#include <part.h>
+#include <sdhci.h>
+#include <asm/arch/mfp.h>
+//#include <linux/gpio.h>
+//#include <asm/arch/gpio.h>
+#include <asm/arch/pinmap.h>
+#include "asm/arch/sprd_module_config.h"
+
+#include <boot_mode.h>
+#include <chipram_env.h>
+
+
+DECLARE_GLOBAL_DATA_PTR;
+
+extern void sprd_gpio_init(void);
+extern void ADI_init (void);
+extern int LDO_Init(void);
+extern void ADC_Init(void);
+extern void init_ldo_sleep_gr(void);
+
+phys_size_t real_ram_size = 0x40000000;
+
+
+//extern struct eic_gpio_resource sprd_gpio_resource[];
+
+int board_init()
+{
+	//gd->bd->bi_arch_number = MACH_TYPE_OPENPHONE;
+	/*get env transfer from chipram*/
+	setup_chipram_env();
+	gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100;
+	ADI_init();
+	misc_init();
+	LDO_Init();
+	ADC_Init();
+	pin_init();
+	sprd_eic_init();
+	sprd_gpio_init();
+	init_ldo_sleep_gr();
+//	TDPllRefConfig(1);
+
+	return 0;
+}
+
+phys_size_t get_real_ram_size(void)
+{
+        return real_ram_size;
+}
+
+int dram_init(void)
+{
+#ifdef CONFIG_DDR_AUTO_DETECT
+        ulong sdram_base = CONFIG_SYS_SDRAM_BASE;
+        ulong sdram_size = 0;
+        int i;
+
+        real_ram_size = 0;
+        ulong bank_cnt = CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM;
+
+        for (i = 1; i <= *(volatile uint32 *)CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM; i++) {
+                real_ram_size += *(volatile ulong *)((volatile ulong *)CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM + i);
+        }
+
+        real_ram_size = get_ram_size((volatile void *)sdram_base, real_ram_size);
+#else
+	real_ram_size = REAL_SDRAM_SIZE;
+#endif
+        gd->ram_size = get_ram_size((volatile void *)PHYS_SDRAM_1,
+                        PHYS_SDRAM_1_SIZE);
+
+        return 0;
+}
+
+
+CBOOT_FUNC s_boot_func_array[CHECK_BOOTMODE_FUN_NUM] = {
+
+	get_mode_from_bat_low,
+	write_sysdump_before_boot_extend,
+	/* 1 get mode from file*/
+	get_mode_from_file_extend,
+	/* 2 get mode from watch dog*/
+	get_mode_from_watchdog,
+	/*3 get mode from alarm register*/
+	get_mode_from_alarm_register,
+	/*0 get mode from calibration detect*/
+	get_mode_from_pctool,
+	/*4 get mode from charger*/
+	get_mode_from_charger,
+	/*5 get mode from keypad*/
+	get_mode_from_keypad,
+	/*6 get mode from gpio*/
+	get_mode_from_gpio_extend,
+
+	/*shutdown device*/
+//	get_mode_from_shutdown,
+
+	0
+};
+
+
+
+void board_boot_mode_regist(CBOOT_MODE_ENTRY *array)
+{
+	MODE_REGIST(CMD_NORMAL_MODE, normal_mode);
+	MODE_REGIST(CMD_RECOVERY_MODE, recovery_mode);
+	MODE_REGIST(CMD_FASTBOOT_MODE, fastboot_mode);
+	MODE_REGIST(CMD_WATCHDOG_REBOOT, watchdog_mode);
+	MODE_REGIST(CMD_UNKNOW_REBOOT_MODE, unknow_reboot_mode);
+	MODE_REGIST(CMD_PANIC_REBOOT, panic_reboot_mode);
+	MODE_REGIST(CMD_AUTODLOADER_REBOOT, autodloader_mode);
+	MODE_REGIST(CMD_SPECIAL_MODE, special_mode);
+	MODE_REGIST(CMD_CHARGE_MODE, charge_mode);
+	MODE_REGIST(CMD_ENGTEST_MODE,engtest_mode);
+	MODE_REGIST(CMD_FACTORYTEST_MODE,factorytest_mode);
+	MODE_REGIST(CMD_CALIBRATION_MODE, calibration_mode);
+	MODE_REGIST(CMD_EXT_RSTN_REBOOT_MODE, normal_mode);
+	MODE_REGIST(CMD_IQ_REBOOT_MODE, iq_mode);
+	MODE_REGIST(CMD_ALARM_MODE, alarm_mode);
+       MODE_REGIST(CMD_AUTOTEST_MODE, autotest_mode);
+
+	return ;
+}
+
+int board_late_init(void)
+{
+	boot_mode_t boot_role;
+	extern chipram_env_t* get_chipram_env(void);
+	chipram_env_t* cr_env = get_chipram_env();
+	boot_role = cr_env->mode;
+
+	boot_pwr_check();
+
+#if !defined(CONFIG_FPGA)
+#ifdef CONFIG_NAND_BOOT
+	//extern int nand_ubi_dev_init(void);
+	nand_ubi_dev_init();
+	debugf("nand ubi init OK!\n");
+#endif
+
+#endif
+	extern void sprdbat_init(void);
+	sprdbat_init();
+	debugf("CHG init OK!\n");
+	if (sprdbat_get_vbatauxadc_caltype() != 0) {
+		/*fix me*/
+		DCDC_Cal_ArmCore();
+	}
+	board_keypad_init();
+	return 0;
+}
+
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/sdio_cfg.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/sdio_cfg.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/sdio_cfg.c	(revision 182160)
@@ -0,0 +1,93 @@
+/*
+ * This file is produced by tools!!
+ *
+ * Copyright (C) 2012 Spreadtrum Communications Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <asm/arch/sprd_reg.h>
+#include <asm/io.h>
+#include <asm/arch/sdio_cfg.h>
+#include <asm/arch/sdio_reg.h>
+#include <asm/arch/chip_drv_common_io.h>
+
+
+const  SDIO_BASE_INFO  sdio_ctrl_info[2] =
+{
+	{
+		EMMC,
+		//SPRD_EMMC_BASE,
+		0X20600000,
+#ifdef CONFIG_FPGA
+             NULL,
+             NULL,
+	      36000000,
+	      100000,
+#else
+		REG_AP_CLK_EMMC_CFG,
+		BIT_0|BIT_1,
+ 	       384000000,
+		400000,
+#endif
+		//REG_AP_AHB_AHB_EB,
+		0X20E00000,
+		BIT_11,
+		//REG_AP_AHB_AHB_RST,
+		0X20E00004,
+		BIT_14,
+
+		LDO_LDO_EMMCIO,
+		LDO_LDO_EMMCCORE,
+	},
+	{
+		SD,
+		0X20300000,
+#ifdef CONFIG_FPGA
+             NULL,
+             NULL,
+	      36000000,
+	      100000,
+#else
+		REG_AP_CLK_SDIO0_CFG,
+		BIT_0|BIT_1,
+        384000000,
+		400000,
+#endif
+
+		//REG_AP_AHB_AHB_EB,
+		0X20E00000,
+		BIT_8,
+		//REG_AP_AHB_AHB_RST,
+		0X20E00004,
+		BIT_11,
+
+		LDO_LDO_SDIO1,
+		LDO_LDO_SDIO0,
+	}
+};
+
+SDIO_BASE_INFO*  get_sdcontrol_info(uint32_t device_type)
+{
+	return  &sdio_ctrl_info[device_type];
+}
+
+void  sdio_dump(uint32_t regbase)
+{
+	uint32_t  i;
+	printf("*****SDIO REGISTER DUMP*****\n");
+
+    for(i=0;i<8;i++){
+		printf("0x%08x,0x%08x,0x%08x,0x%08x\n",CHIP_REG_GET(regbase + i*16 +0),CHIP_REG_GET(regbase + i*16 +4),CHIP_REG_GET(regbase + i*16 +8),CHIP_REG_GET(regbase + i*16+0xc));
+	}
+}
+
+
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/modem_entry.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/modem_entry.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/modem_entry.c	(revision 182160)
@@ -0,0 +1,45 @@
+#include <common.h>
+#include <asm/arch/sprd_reg.h>
+#include "cp_boot.h"
+#include "loader_common.h"
+
+
+void cp_adr_remap(u32 cp_kernel_exec_addr, u32 cp_zero_map_addr)
+{
+    u32 data[3] = {0xe59f0000, 0xe12fff10,   cp_kernel_exec_addr};
+    memcpy( cp_zero_map_addr, data, sizeof(data));      /* copy cp0 source code */
+}
+
+void modem_entry()
+{
+	sipc_addr_reset();
+
+#if !defined( CONFIG_KERNEL_BOOT_CP )
+	pmic_arm7_boot();
+
+	/*if recovery mode and not cali mode, skip boot modem image*/
+	if (strstr(getenv("bootmode"), "recovery")
+			&& NULL == get_calibration_parameter()) {
+		debugf("recovery mode, skip boot modem!");
+		return;
+	}
+
+	cp_adr_remap(CP1_EXEC_ADR, CP1_ZERO_MAP_ADR);
+	cp1_boot();
+#endif
+}
+
+
+void sipc_addr_reset()
+{
+
+	/*to be fill in*/
+	//memset((void *)SIPC_GGE_APCP_START_ADDR, 0x0, SIPC_APCP_RESET_ADDR_SIZE);
+	memset((void *)SIPC_LTE_APCP_START_ADDR, 0x0, SIPC_APCP_RESET_ADDR_SIZE);
+	memset((void *)SIPC_PMIC_SIPC_START_ADDR, 0x0, 0x2000);
+	return;
+
+}
+
+
+
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/sprd_kp.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/sprd_kp.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/sprd_kp.c	(revision 182160)
@@ -0,0 +1,60 @@
+#include <common.h>
+#include <malloc.h>
+#include "key_map.h"
+#include <boot_mode.h>
+#include <asm/arch/mfp.h>
+#include <asm/arch/chip_drv_common_io.h>
+#include <asm/arch/sprd_eic.h>
+
+void board_keypad_init(void)
+{
+	sprd_gpio_request(NULL, 124);
+	sprd_gpio_direction_input(NULL, 124);
+
+	sprd_gpio_request(NULL, 125);
+	sprd_gpio_direction_input(NULL, 125);
+
+	printf("[gpio keys] init!\n");
+	return;
+}
+
+unsigned char board_key_scan(void)
+{
+	uint32_t key_code = KEY_RESERVED;
+	int gpio_volumeup = -1;
+	int gpio_volumedown = -1;
+
+    sprd_eic_request(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
+    udelay(3000);
+    gpio_volumeup = sprd_eic_get(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
+    if(gpio_volumeup < 0)
+        printf("[eic keys] volumeup : sprd_eic_get return ERROR!\n");
+    if(gpio_volumeup > 0) {
+        key_code = KEY_VOLUMEUP;
+        printf("[eic keys] volumeup pressed!\n");
+    }
+
+    gpio_volumedown = sprd_gpio_get(NULL, 124);
+    if(gpio_volumedown < 0)
+        printf("[gpio keys] volumedown : sprd_gpio_get return ERROR!\n");
+	if (0 == gpio_volumedown) {
+        key_code = KEY_VOLUMEDOWN;
+        printf("[gpio keys] volumedown pressed!\n");
+	}
+
+	if (KEY_RESERVED == key_code)
+		printf("[gpio keys] no key pressed!\n");
+	return key_code;
+}
+
+unsigned int check_key_boot(unsigned char key)
+{
+	if(KEY_VOLUMEUP == key)
+		return CMD_FACTORYTEST_MODE;
+	else if(KEY_HOME == key)
+		return CMD_FASTBOOT_MODE;
+	else if(KEY_VOLUMEDOWN== key)
+		return CMD_RECOVERY_MODE;
+	else
+		return 0;
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/sprd_bl.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/sprd_bl.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/sprd_bl.c	(revision 182160)
@@ -0,0 +1,53 @@
+#include <common.h>
+#include <asm/arch/hardware.h>
+#include <asm/io.h>
+#include <asm/arch/sprd_reg.h>
+
+#define PWM_INDEX 2
+
+#define PWM_PRESCALE (0x0000)
+#define PWM_CNT (0x0004)
+#define PWM_PAT_LOW (0x000C)
+#define PWM_PAT_HIG (0x0010)
+
+#define PWM_ENABLE (1 << 8)
+#define PWM2_SCALE 0x0
+#define PWM_REG_MSK 0xffff
+#define PWM_MOD_MAX 0xff
+
+extern void backlight_control(int brigtness);
+static inline uint32_t pwm_read(int index, uint32_t reg)
+{
+	return __raw_readl(CTL_BASE_PWM + index * 0x20 + reg);
+}
+
+static void pwm_write(int index, uint32_t value, uint32_t reg)
+{
+	__raw_writel(value, CTL_BASE_PWM + index * 0x20 + reg);
+}
+
+void set_backlight(uint32_t brightness)
+{
+	int index = PWM_INDEX;
+
+#if defined CONFIG_FB_LCD_ILI9881C_1_MIPI
+	backlight_control(brightness);
+#else
+	__raw_bits_or((0x1 << 0), REG_AON_CLK_PWM0_CFG + index * 4);//ext_26m select
+
+	if (0 == brightness) {
+		pwm_write(index, 0, PWM_PRESCALE);
+		printf("sprd backlight power off. pwm_index=%d  brightness=%d\n", index, brightness);
+	} else {
+		__raw_bits_or((0x1 << (index+4)), REG_AON_APB_APB_EB0); //PWMx EN
+
+		pwm_write(index, PWM2_SCALE, PWM_PRESCALE);
+		pwm_write(index, (brightness << 8) | PWM_MOD_MAX, PWM_CNT);
+		pwm_write(index, PWM_REG_MSK, PWM_PAT_LOW);
+		pwm_write(index, PWM_REG_MSK, PWM_PAT_HIG);
+		pwm_write(index, PWM_ENABLE, PWM_PRESCALE);
+		printf("sprd backlight power on. pwm_index=%d  brightness=%d\n", index, brightness);
+	}
+#endif
+	return;
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/u-boot.lds
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/u-boot.lds	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/u-boot.lds	(revision 182160)
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2004-2008 Texas Instruments
+ *
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	. = 0x00000000;
+
+	. = ALIGN(4);
+	.text :
+	{
+		*(.__image_copy_start)
+		CPUDIR/start.o (.text*)
+		*(.text*)
+	}
+
+	. = ALIGN(4);
+	.rodata : { *(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*))) }
+
+
+	. = ALIGN(4);
+
+        .rodata : { *(.rodata) KEEP(*(SORT_BY_NAME(.rodata.regu*))) }
+
+        . = ALIGN(4);
+
+	.data : {
+		*(.data*)
+	}
+
+	. = ALIGN(4);
+
+	. = .;
+
+	. = ALIGN(4);
+	.u_boot_list : {
+		KEEP(*(SORT(.u_boot_list*)));
+	}
+
+	. = ALIGN(4);
+
+	.image_copy_end :
+	{
+		*(.__image_copy_end)
+	}
+
+	.rel_dyn_start :
+	{
+		*(.__rel_dyn_start)
+	}
+
+	.rel.dyn : {
+		*(.rel*)
+	}
+
+	.rel_dyn_end :
+	{
+		*(.__rel_dyn_end)
+	}
+
+	_end = .;
+
+	/*
+	 * Deprecated: this MMU section is used by pxa at present but
+	 * should not be used by new boards/CPUs.
+	 */
+	. = ALIGN(4096);
+	.mmutable : {
+		*(.mmutable)
+	}
+
+/*
+ * Compiler-generated __bss_start and __bss_end, see arch/arm/lib/bss.c
+ * __bss_base and __bss_limit are for linker only (overlay ordering)
+ */
+
+	.bss_start __rel_dyn_start (OVERLAY) : {
+		KEEP(*(.__bss_start));
+		__bss_base = .;
+	}
+
+	.bss __bss_base (OVERLAY) : {
+		*(.bss*)
+		 . = ALIGN(4);
+		 __bss_limit = .;
+	}
+
+	.bss_end __bss_limit (OVERLAY) : {
+		KEEP(*(.__bss_end));
+	}
+
+	.dynsym _end : { *(.dynsym) }
+	.dynbss : { *(.dynbss) }
+	.dynstr : { *(.dynstr*) }
+	.dynamic : { *(.dynamic*) }
+	.plt : { *(.plt*) }
+	.interp : { *(.interp*) }
+	.gnu : { *(.gnu*) }
+	.ARM.exidx : { *(.ARM.exidx*) }
+	.gnu.linkonce.armexidx : { *(.gnu.linkonce.armexidx.*) }
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/ldo_sleep.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/ldo_sleep.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/ldo_sleep.c	(revision 182160)
@@ -0,0 +1,364 @@
+#include <asm/arch/sci_types.h>
+#include "adi_hal_internal.h"
+#include <asm/arch/chip_drv_common_io.h>
+#include <asm/arch/sprd_reg.h>
+
+/***************************************************************************************************************************/
+/*     VDD18 VDD28 VDD25 RF0 RF1 RF2 EMMCIO EMMCCORE DCDCARM DCDCWRF DCDCWPA DCDCGEN DCDCOTP AVDD18 SD SIM0 SIM1 SIM2 CAMA */
+/* AP    x     x    v     v   v   v     v      v        v       v       v       x       v      v    v    v   v     v    v  */
+/* CP0   x     x    v     v   v   x     x      x        x       v       x       x       x      x    x    x   x     x    x  */
+/* CP1   x     x    v     x   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* CP2   x     x    v     v   x   v     x      x        x       v       x       x       x      x    x    x   x     x    x  */
+/* EX0   x     x    x     v   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* EX1   x     x    x     x   v   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/* EX2   x     x    x     v   x   x     x      x        x       x       x       x       x      x    x    x   x     x    x  */
+/***************************************************************************************************************************/
+
+/***************************************************************************************************************************/
+/*     CAMD CMAIO CAMMOT USB CLSG LPREF LPRF0 LPRF1 LPRF2 LPEMMCIO LPEMMCCORE LPWPA  LPGEN   LPARM LPMEM LPCORE LPBG  BG   */
+/* AP    v     v    v     v   v   v     v      v     v       v       v          x       v      v     v     v     v     v   */
+/* CP0   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* CP1   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* CP2   x     x    x     x   x   x     v      v     x       x       x          x       x      x     x     x     x     x   */
+/* EX0   x     x    x     x   x   x     x      x     v       x       x          x       x      x     x     x     x     x   */
+/* EX1   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/* EX2   x     x    x     x   x   x     x      x     x       x       x          x       x      x     x     x     x     x   */
+/***************************************************************************************************************************/
+
+void init_ldo_sleep_gr(void)
+{
+	unsigned int reg_val;
+	ANA_REG_SET(ANA_REG_GLB_PWR_WR_PROT_VALUE,0x6e7f);
+	while( (ANA_REG_GET(ANA_REG_GLB_PWR_WR_PROT_VALUE) & 0x8000) != 0x8000 );
+
+	ANA_REG_SET(ANA_REG_GLB_LDO_DCDC_PD,
+		//BIT_LDO_EMM_PD |
+		//BIT_DCDC_TOPCLK6M_PD |
+		//BIT_DCDC_RF_PD |
+		//BIT_DCDC_GEN_PD |
+		//BIT_DCDC_MEM_PD |
+		//BIT_DCDC_ARM_PD |
+		//BIT_DCDC_CORE_PD |
+		//BIT_LDO_RF0_PD |
+		//BIT_LDO_EMMCCORE_PD |
+		//BIT_LDO_GEN1_PD |
+		//BIT_LDO_DCXO_PD |
+		//BIT_LDO_GEN0_PD |
+		//BIT_LDO_VDD25_PD |
+		//BIT_LDO_VDD28_PD |
+		//BIT_LDO_VDD18_PD |
+		//BIT_BG_PD |
+		0
+	);
+	ANA_REG_SET(ANA_REG_GLB_LDO_PD_CTRL,
+		BIT_LDO_LPREF_PD_SW |
+		BIT_DCDC_WPA_PD |
+		BIT_DCDC_CON_PD |
+		BIT_LDO_WIFIPA_PD |
+		BIT_LDO_SDCORE_PD |
+		//BIT_LDO_USB_PD |
+		BIT_LDO_CAMMOT_PD |
+		BIT_LDO_CAMIO_PD |
+		BIT_LDO_CAMD_PD |
+		BIT_LDO_CAMA_PD |
+		BIT_LDO_SIM2_PD |
+		BIT_LDO_SIM1_PD |
+		BIT_LDO_SIM0_PD |
+		BIT_LDO_SDIO_PD |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_WR_PROT_VALUE,0x0000);
+
+	ANA_REG_SET(ANA_REG_GLB_SLP_WAIT_DCDCARM,
+		BITS_SLP_IN_WAIT_DCDCARM(7) |
+		BITS_SLP_OUT_WAIT_DCDCARM(8) |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL0,
+		BIT_SLP_IO_EN |
+		BIT_SLP_DCDCRF_PD_EN |
+		//BIT_SLP_DCDCCON_PD_EN |
+		//BIT_SLP_DCDCGEN_PD_EN |
+		//BIT_SLP_DCDCWPA_PD_EN |
+		BIT_SLP_DCDCARM_PD_EN |
+		BIT_SLP_LDOVDD25_PD_EN |
+		BIT_SLP_LDORF0_PD_EN |
+		BIT_SLP_LDOEMMCCORE_PD_EN |
+		BIT_SLP_LDOGEN0_PD_EN |
+		BIT_SLP_LDODCXO_PD_EN |
+		BIT_SLP_LDOGEN1_PD_EN |
+		BIT_SLP_LDOWIFIPA_PD_EN |
+		//BIT_SLP_LDOVDD28_PD_EN |
+		//BIT_SLP_LDOVDD18_PD_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL1,
+		BIT_SLP_LDO_PD_EN |
+		BIT_SLP_LDOLPREF_PD_EN |
+		BIT_SLP_LDOSDCORE_PD_EN |
+		BIT_SLP_LDOUSB_PD_EN |
+		BIT_SLP_LDOCAMMOT_PD_EN |
+		BIT_SLP_LDOCAMIO_PD_EN |
+		BIT_SLP_LDOCAMD_PD_EN |
+		BIT_SLP_LDOCAMA_PD_EN |
+		BIT_SLP_LDOSIM2_PD_EN |
+		//BIT_SLP_LDOSIM1_PD_EN |
+		//BIT_SLP_LDOSIM0_PD_EN |
+		//BIT_SLP_LDOSDIO_PD_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL2,
+		//BIT_SLP_DCDCRF_LP_EN |
+		//BIT_SLP_DCDCCON_LP_EN |
+		BIT_SLP_DCDCCORE_LP_EN |
+		BIT_SLP_DCDCMEM_LP_EN |
+		//BIT_SLP_DCDCARM_LP_EN |
+		BIT_SLP_DCDCGEN_LP_EN |
+		//BIT_SLP_DCDCWPA_LP_EN |
+		//BIT_SLP_LDORF0_LP_EN  |
+		//BIT_SLP_LDOEMMCCORE_LP_EN |
+		//BIT_SLP_LDOGEN0_LP_EN |
+		//BIT_SLP_LDODCXO_LP_EN |
+		//BIT_SLP_LDOGEN1_LP_EN |
+		//BIT_SLP_LDOWIFIPA_LP_EN |
+		//BIT_SLP_LDOVDD28_LP_EN |
+		//BIT_SLP_LDOVDD18_LP_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL3,
+		//BIT_SLP_BG_LP_EN |
+		//BIT_LDOVDD25_LP_EN_SW |
+		//BIT_LDOSDCORE_LP_EN_SW |
+		//BIT_LDOUSB_LP_EN_SW |
+		//BIT_SLP_LDOVDD25_LP_EN |
+		//BIT_SLP_LDOSDCORE_LP_EN |
+		//BIT_SLP_LDOUSB_LP_EN |
+		//BIT_SLP_LDOCAMMOT_LP_EN |
+		//BIT_SLP_LDOCAMIO_LP_EN |
+		//BIT_SLP_LDOCAMD_LP_EN |
+		//BIT_SLP_LDOCAMA_LP_EN |
+		//BIT_SLP_LDOSIM2_LP_EN |
+		//BIT_SLP_LDOSIM1_LP_EN |
+		//BIT_SLP_LDOSIM0_LP_EN |
+		//BIT_SLP_LDOSDIO_LP_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_SLP_CTRL4,
+		//BIT_LDOCAMIO_LP_EN_SW |
+		//BIT_LDOCAMMOT_LP_EN_SW |
+		//BIT_LDOCAMD_LP_EN_SW |
+		//BIT_LDOCAMA_LP_EN_SW |
+		//BIT_LDOSIM2_LP_EN_SW |
+		//BIT_LDOSIM1_LP_EN_SW |
+		//BIT_LDOSIM0_LP_EN_SW |
+		//BIT_LDOSDIO_LP_EN_SW |
+		//BIT_LDORF0_LP_EN_SW |
+		//BIT_LDOEMMCCORE_LP_EN_SW |
+		//BIT_LDOGEN0_LP_EN_SW |
+		//BIT_LDODCXO_LP_EN_SW |
+		//BIT_LDOGEN1_LP_EN_SW |
+		//BIT_LDOWIFIPA_LP_EN_SW |
+		//BIT_LDOVDD28_LP_EN_SW |
+		//BIT_LDOVDD18_LP_EN_SW |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN0,
+		BIT_LDO_XTL_EN |
+		//BIT_LDO_GEN0_EXT_XTL0_EN |
+		//BIT_LDO_GEN0_XTL1_EN |
+		//BIT_LDO_GEN0_XTL0_EN |
+		BIT_LDO_GEN1_EXT_XTL0_EN |
+		BIT_LDO_GEN1_XTL1_EN |
+		BIT_LDO_GEN1_XTL0_EN |
+		BIT_LDO_DCXO_EXT_XTL0_EN |
+		BIT_LDO_DCXO_XTL1_EN |
+		BIT_LDO_DCXO_XTL0_EN |
+		//BIT_LDO_VDD18_EXT_XTL0_EN |
+		//BIT_LDO_VDD18_XTL1_EN |
+		//BIT_LDO_VDD18_XTL0_EN |
+		//BIT_LDO_VDD28_EXT_XTL0_EN |
+		//BIT_LDO_VDD28_XTL1_EN |
+		//BIT_LDO_VDD28_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN1,
+		BIT_LDO_RF0_EXT_XTL0_EN |
+		BIT_LDO_RF0_XTL1_EN |
+		BIT_LDO_RF0_XTL0_EN |
+		BIT_LDO_WIFIPA_EXT_XTL0_EN |
+		//BIT_LDO_WIFIPA_XTL1_EN |
+		//BIT_LDO_WIFIPA_XTL0_EN |
+		//BIT_LDO_SIM2_EXT_XTL0_EN |
+		//BIT_LDO_SIM2_XTL1_EN |
+		//BIT_LDO_SIM2_XTL0_EN |
+		//BIT_LDO_SIM1_EXT_XTL0_EN |
+		//BIT_LDO_SIM1_XTL1_EN |
+		//BIT_LDO_SIM1_XTL0_EN |
+		//BIT_LDO_SIM0_EXT_XTL0_EN |
+		//BIT_LDO_SIM0_XTL1_EN |
+		//BIT_LDO_SIM0_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN2,
+		BIT_LDO_VDD25_EXT_XTL0_EN |
+		BIT_LDO_VDD25_XTL1_EN |
+		BIT_LDO_VDD25_XTL0_EN |
+		BIT_DCDC_RF_EXT_XTL0_EN |
+		BIT_DCDC_RF_XTL1_EN |
+		BIT_DCDC_RF_XTL0_EN |
+		BIT_XO_EXT_XTL0_EN |
+		BIT_XO_XTL1_EN |
+		BIT_XO_XTL0_EN |
+		BIT_BG_EXT_XTL0_EN |
+		BIT_BG_XTL1_EN |
+		BIT_BG_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_PWR_XTL_EN3,
+		//BIT_DCDC_CON_EXT_XTL0_EN |
+		//BIT_DCDC_CON_XTL1_EN |
+		//BIT_DCDC_CON_XTL0_EN |
+		//BIT_DCDC_WPA_EXT_XTL0_EN |
+		//BIT_DCDC_WPA_XTL1_EN |
+		//BIT_DCDC_WPA_XTL0_EN |
+		BIT_DCDC_MEM_EXT_XTL0_EN |
+		BIT_DCDC_MEM_XTL1_EN |
+		BIT_DCDC_MEM_XTL0_EN |
+		BIT_DCDC_GEN_EXT_XTL0_EN |
+		BIT_DCDC_GEN_XTL1_EN |
+		BIT_DCDC_GEN_XTL0_EN |
+		BIT_DCDC_CORE_EXT_XTL0_EN |
+		BIT_DCDC_CORE_XTL1_EN |
+		BIT_DCDC_CORE_XTL0_EN |
+		0
+	);
+
+	ANA_REG_SET(ANA_REG_GLB_XTL_WAIT_CTRL,
+		BIT_SLP_XTLBUF_PD_EN |
+		BIT_XTL_EN |
+		BITS_XTL_WAIT(0x32) |
+		0
+	);
+
+
+	/************************************************
+	*   Following is AP/CP LDO D DIE Sleep Control   *
+	*************************************************/
+
+	REG32(REG_PMU_APB_26M_SEL_CFG) |= (BIT_CP1_26M_SEL | BIT_CP0_26M_SEL);
+
+	CHIP_REG_SET(REG_PMU_APB_XTL0_REL_CFG,
+		BIT_XTL0_ARM7_SEL |
+		BIT_XTL0_VCP1_SEL |
+		BIT_XTL0_VCP0_SEL |
+		BIT_XTL0_CP1_SEL |
+		BIT_XTL0_CP0_SEL |
+		BIT_XTL0_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTL1_REL_CFG,
+		BIT_XTL1_ARM7_SEL |
+		BIT_XTL1_VCP1_SEL |
+		BIT_XTL1_VCP0_SEL |
+		BIT_XTL1_CP1_SEL |
+		BIT_XTL1_CP0_SEL |
+		BIT_XTL1_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTLBUF0_REL_CFG,
+		BIT_XTLBUF0_ARM7_SEL |
+		BIT_XTLBUF0_VCP1_SEL |
+		BIT_XTLBUF0_VCP0_SEL |
+		BIT_XTLBUF0_CP1_SEL |
+		BIT_XTLBUF0_CP0_SEL |
+		BIT_XTLBUF0_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_XTLBUF1_REL_CFG,
+		BIT_XTLBUF1_ARM7_SEL |
+		BIT_XTLBUF1_VCP1_SEL |
+		BIT_XTLBUF1_VCP0_SEL |
+		BIT_XTLBUF1_CP1_SEL |
+		BIT_XTLBUF1_CP0_SEL |
+		BIT_XTLBUF1_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_MPLL_REL_CFG,
+		//BIT_MPLL_REF_SEL |
+		//BIT_MPLL_ARM7_SEL |
+		//BIT_MPLL_VCP1_SEL |
+		//BIT_MPLL_VCP0_SEL |
+		//BIT_MPLL_CP1_SEL |
+		//BIT_MPLL_CP0_SEL |
+		BIT_MPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_DPLL_REL_CFG,
+		//BIT_DPLL_REF_SEL |
+		BIT_DPLL_ARM7_SEL |
+		BIT_DPLL_VCP1_SEL |
+		//BIT_DPLL_VCP0_SEL |
+		//BIT_DPLL_CP1_SEL |
+		//BIT_DPLL_CP0_SEL |
+		BIT_DPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_LTEPLL_REL_CFG,
+		BIT_LTEPLL_REF_SEL |
+		//BIT_LTEPLL_ARM7_SEL |
+		BIT_LTEPLL_VCP1_SEL |
+		//BIT_LTEPLL_VCP0_SEL |
+		//BIT_LTEPLL_CP1_SEL |
+		//BIT_LTEPLL_CP0_SEL |
+		//BIT_LTEPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_TWPLL_REL_CFG,
+		BIT_TWPLL_REF_SEL |
+		BIT_TWPLL_ARM7_SEL |
+		BIT_TWPLL_VCP1_SEL |
+		//BIT_TWPLL_VCP0_SEL |
+		//BIT_TWPLL_CP1_SEL |
+		//BIT_TWPLL_CP0_SEL |
+		BIT_TWPLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_LVDSDIS_PLL_REL_CFG,
+		BIT_LVDSDIS_PLL_REF_SEL |
+		//BIT_LVDSDIS_PLL_ARM7_SEL |
+		//BIT_LVDSDIS_PLL_VCP1_SEL |
+		//BIT_LVDSDIS_PLL_VCP0_SEL |
+		//BIT_LVDSDIS_PLL_CP1_SEL |
+		//BIT_LVDSDIS_PLL_CP0_SEL |
+		//BIT_LVDSDIS_PLL_AP_SEL |
+		0
+	);
+
+	CHIP_REG_SET(REG_PMU_APB_PD_CODEC_TOP_CFG,
+		BIT_PD_CODEC_TOP_AUTO_SHUTDOWN_EN          |
+		BITS_PD_CODEC_TOP_PWR_ON_DLY(8)            |
+		BITS_PD_CODEC_TOP_PWR_ON_SEQ_DLY(0)        |
+		BITS_PD_CODEC_TOP_ISO_ON_DLY(4)            |
+		0
+	);
+
+	CSP_Init(0x50001800);
+}
Index: u-boot64/board/spreadtrum/sp9832a_7c10_volte/pinmap-sp9630.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_7c10_volte/pinmap-sp9630.c	(revision 0)
+++ u-boot64/board/spreadtrum/sp9832a_7c10_volte/pinmap-sp9630.c	(revision 182160)
@@ -0,0 +1,227 @@
+/*
+ * Copyright (C) 2012 Spreadtrum Communications Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/*
+ *Version SP9830A-2_LA_SCH_V1.1.0_V1.0
+ */
+
+#include <asm/io.h>
+#include <asm/arch/pinmap.h>
+#define BIT_PIN_SLP_ALL  (BIT_PIN_SLP_AP|BIT_PIN_SLP_CP0|BIT_PIN_SLP_CP1|BIT_PIN_SLP_VCP0|BIT_PIN_SLP_VCP1)
+
+static pinmap_t pinmap[]={
+{REG_PIN_CTRL0,0x08000000},
+{REG_PIN_CTRL1,0x0},
+{REG_PIN_CTRL2,0x00285000}, // uart0->bt'uart;  uart1->ap'uart0; uart2->cp1'uart1(lte dsp uart); uart3->ap'uart3; uart4->cp0 uart1(td dsp uart), BIT17:15=0
+{REG_PIN_CTRL3,0x0},
+{REG_PIN_CTRL4,0x12},
+{REG_PIN_CTRL5,0x0},
+{REG_PIN_RFSDA0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_DATA_RF0
+{REG_PIN_RFSCK0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_CLK_RF0
+{REG_PIN_RFSEN0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SPI_CSN_RF0
+{REG_PIN_RFSDA1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFSCK1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFSEN1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_RFCTL15,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL16,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL17,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL18,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL18
+{REG_PIN_RFCTL19,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL19
+{REG_PIN_RFCTL20,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL20
+{REG_PIN_RFCTL21,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL22,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL23,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL24,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL25,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL26,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LTE_RX_PRIORITY
+{REG_PIN_RFCTL0,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL0
+{REG_PIN_RFCTL1,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL1
+{REG_PIN_RFCTL2,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL2
+{REG_PIN_RFCTL3,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL3
+{REG_PIN_RFCTL4,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL4
+{REG_PIN_RFCTL5,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL5
+{REG_PIN_RFCTL6,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL6 
+{REG_PIN_RFCTL7,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL7
+{REG_PIN_RFCTL8,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL8
+{REG_PIN_RFCTL9,              BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL9
+{REG_PIN_RFCTL10,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL10
+{REG_PIN_RFCTL11,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL11
+{REG_PIN_RFCTL12,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL12
+{REG_PIN_RFCTL13,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL13
+{REG_PIN_RFCTL14,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RFCTL14
+{REG_PIN_RFCTL27,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LTE_TX_PRIORITY
+{REG_PIN_XTL_EN,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//GPS_GPIO0
+{REG_PIN_RFFE_SCK0,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RFFE_SCLK0
+{REG_PIN_RFFE_SDA0,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RFFE_SDA0
+{REG_PIN_RFCTL28,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_RFCTL29,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//NC
+{REG_PIN_SIMCLK0,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM0_CLK
+{REG_PIN_SIMDA0,              BIT_PIN_SLP_VCP1|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM0_DA
+{REG_PIN_SIMRST0,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM0_RST
+{REG_PIN_SIMCLK1,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM1_CLK
+{REG_PIN_SIMDA1,              BIT_PIN_SLP_VCP1|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM1_DA
+{REG_PIN_SIMRST1,             BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SIM1_RST
+{REG_PIN_SIMCLK2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_SIMDA2,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//FP_INT
+{REG_PIN_SIMRST2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//FP_RST
+{REG_PIN_SD0_D3,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D3
+{REG_PIN_SD0_D2,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D2
+{REG_PIN_SD0_CMD,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_CMD
+{REG_PIN_SD0_D0,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D0
+{REG_PIN_SD0_D1,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(3)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD0_D1
+{REG_PIN_SD0_CLK0,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(4)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SD0_CLK0
+{REG_PIN_SD1_CLK,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SD1_CLK
+{REG_PIN_SD1_CMD,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_CMD
+{REG_PIN_SD1_D0,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D0
+{REG_PIN_SD1_D1,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D1
+{REG_PIN_SD1_D2,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D2
+{REG_PIN_SD1_D3,              BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(0)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//SD1_D3
+{REG_PIN_IIS0DI,              BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//BT_IISDO
+{REG_PIN_IIS0DO,              BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_IISDI
+{REG_PIN_IIS0CLK,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BT_IISCLK
+{REG_PIN_IIS0LRCK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BT_IISRCK
+{REG_PIN_U0TXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_U0RXD
+{REG_PIN_U0RXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//BT_U0TXD
+{REG_PIN_U0CTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//BT_U0RTS
+{REG_PIN_U0RTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//BT_U0CTS
+{REG_PIN_PTEST,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GND
+{REG_PIN_ANA_INT,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//ANA_INT
+{REG_PIN_EXT_RST_B,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//EXT_RST_B
+{REG_PIN_CHIP_SLEEP,          BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CHIP_SLEEP
+{REG_PIN_XTL_BUF_EN0,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//XTL_BUF_EN0
+{REG_PIN_XTL_BUF_EN1,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//XTL_BUF_EN1
+{REG_PIN_CLK_32K,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//CLK_32K
+{REG_PIN_AUD_SCLK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_SCLK
+{REG_PIN_AUD_ADD0,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//AUD_ADD0
+{REG_PIN_AUD_ADSYNC,          BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//AUD_ADSYNC
+{REG_PIN_AUD_DAD1,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DAD1
+{REG_PIN_AUD_DAD0,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DAD0
+{REG_PIN_AUD_DASYNC,          BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//AUD_DASYNC
+{REG_PIN_ADI_D,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//ADI_D
+{REG_PIN_ADI_SYNC,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//ADI_SYNC
+{REG_PIN_ADI_SCLK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//ADI_SCLK
+{REG_PIN_LCM_RSTN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//LCM_RSTN
+{REG_PIN_DSI_TE,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//LCM_FMARK
+{REG_PIN_MTDO_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTDI_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTCK_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTMS_ARM,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_MTRST_N_ARM,         BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_DTDO_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TDO_LTE_WG
+{REG_PIN_DTDI_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TDI_LTE_WG
+{REG_PIN_DTCK_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TCK_LTE_WG
+{REG_PIN_DTMS_LTE,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//TMS_LTE_WG
+{REG_PIN_DRTCK_LTE,           BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//RTCK_LTE_WG
+{REG_PIN_NFWPN,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT0
+{REG_PIN_NFRB,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//EMMC_CMD
+{REG_PIN_NFCLE,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT6
+{REG_PIN_NFALE,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT7
+{REG_PIN_NFREN,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//EMMC_CLK
+{REG_PIN_NFD4,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT5
+{REG_PIN_NFD5,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT4
+{REG_PIN_NFD6,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD7,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT3
+{REG_PIN_NFD10,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(2)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//EMMC_RST
+{REG_PIN_NFD11,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT1
+{REG_PIN_NFD14,               BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//DAT2
+{REG_PIN_NFCEN0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFWEN,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD0,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD1,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD2,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD3,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_NFD8,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD9,                BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD12,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD13,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_NFD15,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//No Ball in SCH
+{REG_PIN_CCIRD0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CCIRD1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CMMCLK,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//MCLK
+{REG_PIN_CMPCLK,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//NC
+{REG_PIN_CMRST0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RST0
+{REG_PIN_CMRST1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//RST1
+{REG_PIN_CMPD0,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//PWDN0
+{REG_PIN_CMPD1,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//PWDN1
+{REG_PIN_SCL0,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C0_SCL
+{REG_PIN_SDA0,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C0_SDA
+{REG_PIN_SPI2_CSN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_CS
+{REG_PIN_SPI2_DO,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_MOSI
+{REG_PIN_SPI2_DI,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_MISO
+{REG_PIN_SPI2_CLK,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//FP_SPI2_CLK
+{REG_PIN_SPI0_CSN,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//OTG_ID  
+{REG_PIN_SPI0_DO,             BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C1_SDA
+{REG_PIN_SPI0_DI,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//FLASH_EN       
+{REG_PIN_SPI0_CLK,            BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C1_SCL
+{REG_PIN_MEMS_MIC_CLK0,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//WF_COEXIST
+{REG_PIN_MEMS_MIC_DATA0,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//GPS_COEXIST     
+{REG_PIN_MEMS_MIC_CLK1,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//GPS_INT   
+{REG_PIN_MEMS_MIC_DATA1,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//WIFI_WAKE_HOST
+{REG_PIN_KEYOUT0,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//KEYOUT0    
+{REG_PIN_KEYOUT1,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//Marlin_RST
+{REG_PIN_KEYOUT2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//FLASH_LED
+{REG_PIN_KEYIN0,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN0
+{REG_PIN_KEYIN1,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN1
+{REG_PIN_KEYIN2,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//KEYIN2
+{REG_PIN_SCL2,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C2_SCL
+{REG_PIN_SDA2,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C2_SDA
+{REG_PIN_CLK_AUX0,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//SLEEP_32K
+{REG_PIN_IIS1DI,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//GPS_PDN
+{REG_PIN_IIS1DO,              BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//CHG_DONE
+{REG_PIN_IIS1CLK,             BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_IE},//BT_DEV_WAKE
+{REG_PIN_IIS1LRCK,            BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//BT_HOST_WAKE
+{REG_PIN_TRACECLK,            BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BAND_INFO1
+{REG_PIN_TRACECTRL,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//BAND_INFO2
+{REG_PIN_TRACEDAT0,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CHG_EN
+{REG_PIN_TRACEDAT1,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_GPIO1
+{REG_PIN_TRACEDAT2,           BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//LCM_BL_PWM
+{REG_PIN_TRACEDAT3,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//G_INT1
+{REG_PIN_TRACEDAT4,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//PROX_INT
+{REG_PIN_TRACEDAT5,           BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//TF_DET
+{REG_PIN_TRACEDAT6,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM0_DET
+{REG_PIN_TRACEDAT7,           BIT_PIN_SLP_VCP1|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//SIM1_DET
+{REG_PIN_EXTINT0,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//CTP_INT
+{REG_PIN_EXTINT1,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//CTP_RST
+{REG_PIN_SCL3,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C3_SCL
+{REG_PIN_SDA3,                BIT_PIN_SLP_AP|BIT_PIN_WPUS|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//I2C3_SDA
+{REG_PIN_U1TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U1TXD
+{REG_PIN_U1RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U1RXD
+{REG_PIN_U2TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U2TXD
+{REG_PIN_U2RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U2RXD
+{REG_PIN_U3TXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//GPS_U0RXD
+{REG_PIN_U3RXD,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_U0TXD
+{REG_PIN_U3CTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//GPS_U0RTS
+{REG_PIN_U3RTS,               BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//GPS_U0CTS
+{REG_PIN_U4TXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_OE},//U4TXD
+{REG_PIN_U4RXD,               BIT_PIN_SLP_ALL|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(0)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//U4RXD
+};
+
+/*here is the adie pinmap such as 2723*/
+static pinmap_t adie_pinmap[]={
+{REG_PIN_ANA_EXT_XTL_EN0,		BITS_ANA_PIN_DS(1)|BIT_ANA_PIN_WPD|BIT_ANA_PIN_SLP_IE},
+};
+
+int  pin_init(void)
+{
+	int i;
+	for (i = 0; i < sizeof(pinmap)/sizeof(pinmap[0]); i++) {
+		__raw_writel(pinmap[i].val, CTL_PIN_BASE + pinmap[i].reg);
+	}
+
+	for (i = 0; i < sizeof(adie_pinmap)/sizeof(adie_pinmap[0]); i++) {
+		sci_adi_set(CTL_ANA_PIN_BASE + adie_pinmap[i].reg, adie_pinmap[i].val);
+	}
+
+	return 0;
+}
+
Index: u-boot64/board/spreadtrum/sp9832a_2h11_volte/sprd_kp.c
===================================================================
--- u-boot64/board/spreadtrum/sp9832a_2h11_volte/sprd_kp.c	(revision 182159)
+++ u-boot64/board/spreadtrum/sp9832a_2h11_volte/sprd_kp.c	(revision 182160)
@@ -25,7 +25,7 @@
 	int gpio_volumedown = -1;
 
     sprd_eic_request(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
-    //udelay(3000);
+//    udelay(3000);
     gpio_volumeup = sprd_eic_get(EIC_KEY2_7S_RST_EXT_RSTN_ACTIVE);
     if(gpio_volumeup < 0)
         printf("[eic keys] volumeup : sprd_eic_get return ERROR!\n");
Index: u-boot64/common/cmd_cboot.c
===================================================================
--- u-boot64/common/cmd_cboot.c	(revision 182159)
+++ u-boot64/common/cmd_cboot.c	(revision 182160)
@@ -191,7 +191,7 @@
 	uint32_t key_code = 0;
 	volatile int i;
 	if (boot_pwr_check() >= PWR_KEY_DETECT_CNT) {
-		//mdelay(50);
+	//	mdelay(50);
 		for (i = 0; i < 10; i++) {
 			key_code = board_key_scan();
 			if(key_code != KEY_RESERVED)
Index: u-boot64/boards.cfg
===================================================================
--- u-boot64/boards.cfg	(revision 182159)
+++ u-boot64/boards.cfg	(revision 182160)
@@ -1295,6 +1295,9 @@
 Active  arm         armv7          sc9630      spreadtrum      sp9830ieb_5m_h100          sp9830ieb_5m_h100            sp9830ieb_5m_h100                        -
 Active  arm         armv7          sc9630      spreadtrum      sp9832a_2h11_4m          sp9832a_2h11_4m            sp9832a_2h11_4m                        -
 Active  arm         armv7          sc9630      spreadtrum      sp9832a_2h11_volte          sp9832a_2h11_volte            sp9832a_2h11_volte                        -
+Active  arm         armv7          sc9630      spreadtrum      sp9832a_2h12_volte          sp9832a_2h12_volte            sp9832a_2h12_volte                        -
+Active  arm         armv7          sc9630      spreadtrum      sp9832a_7c10_volte          sp9832a_7c10_volte            sp9832a_7c10_volte                        -
+Active  arm         armv7          sc9630      spreadtrum      sp9832a_7c20_volte          sp9832a_7c20_volte            sp9832a_7c20_volte                        -
 Active  arm         armv7          sc9630      spreadtrum      sp9832a2_vol_13cam          sp9832a2_vol_13cam            sp9832a2_vol_13cam                        -
 Active  arm         armv7          sc9630      spreadtrum      sp9830i_j3lte              sp9830i_j3lte                  sp9830i_j3lte                        -
 Active  arm         armv7          sc9630      spreadtrum      sharklc_z2lte              sharklc_z2lte                  sharklc_z2lte                        -
Index: u-boot64/drivers/misc/otp_helper.c
===================================================================
--- u-boot64/drivers/misc/otp_helper.c	(revision 182159)
+++ u-boot64/drivers/misc/otp_helper.c	(revision 182160)
@@ -102,7 +102,7 @@
 
 	deta = __adie_efuse_read_bits(BLK_ADC_DETA_ABC_OTP * BLK_WIDTH_OTP_EMEMORY, 16);
 #elif defined(CONFIG_SPX30G) || defined(CONFIG_ARCH_SCX35L)
-    	//__ddie_efuse_block_dump(); /* dump d-die efuse */
+	//__ddie_efuse_block_dump(); /* dump d-die efuse */
 
 	deta = __ddie_efuse_read(BLK_ADC_DETA);
 #else
Index: u-boot64/drivers/video/sprdfb/sprdfb_panel.c
===================================================================
--- u-boot64/drivers/video/sprdfb/sprdfb_panel.c	(revision 182159)
+++ u-boot64/drivers/video/sprdfb/sprdfb_panel.c	(revision 182160)
@@ -65,6 +65,7 @@
 extern struct panel_spec lcd_s6d7aa0x62_mipi_spec;
 extern struct panel_spec lcd_ams549hq01_mipi_spec;
 extern struct panel_spec lcd_ili9881c_mipi_spec;
+extern struct panel_spec lcd_ili9881c_1_mipi_spec;
 extern struct panel_spec lcd_s6d77a1a01_mipi_spec;
 extern struct panel_spec lcd_sc7798d_mipi_spec;
 extern struct panel_spec lcd_gc9304_spi_spec;
@@ -453,6 +454,13 @@
 	.panel = &lcd_ili9881c_mipi_spec,
 },
 #endif
+
+#ifdef CONFIG_FB_LCD_ILI9881C_1_MIPI
+{
+	.lcd_id = 0x98811,
+	.panel = &lcd_ili9881c_1_mipi_spec,
+},
+#endif
 };
 
 vidinfo_t panel_info = {
Index: u-boot64/drivers/video/sprdfb/lcd/Makefile
===================================================================
--- u-boot64/drivers/video/sprdfb/lcd/Makefile	(revision 182159)
+++ u-boot64/drivers/video/sprdfb/lcd/Makefile	(revision 182160)
@@ -60,3 +60,4 @@
 obj-$(CONFIG_FB_LCD_AMS549HQ01_MIPI) += lcd_ams549hq01_mipi.o
 obj-$(CONFIG_FB_LCD_S6E8AA5X01_MIPI) += lcd_s6e8aa5x01_mipi.o
 obj-$(CONFIG_FB_LCD_ILI9881C_MIPI)  += lcd_ili9881c_mipi.o
+obj-$(CONFIG_FB_LCD_ILI9881C_1_MIPI)  += lcd_ili9881c_1_mipi.o
Index: u-boot64/drivers/video/sprdfb/lcd/lcd_ili9881c_1_mipi.c
===================================================================
--- u-boot64/drivers/video/sprdfb/lcd/lcd_ili9881c_1_mipi.c	(revision 0)
+++ u-boot64/drivers/video/sprdfb/lcd/lcd_ili9881c_1_mipi.c	(revision 182160)
@@ -0,0 +1,391 @@
++/* drivers/video/sc8825/lcd_ili9881c_1_mipi.c
+ *
+ * Support for ili9881c_1 mipi LCD device
+ *
+ * Copyright (C) 2010 Spreadtrum
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "../sprdfb_chip_common.h"
+#include "../sprdfb.h"
+#include "../sprdfb_panel.h"
+
+//#define LCD_Delay(ms)  uDelay(ms*1000)
+///#define printk printf
+
+#define  LCD_DEBUG
+#ifdef LCD_DEBUG
+#define LCD_PRINT printk
+#else
+#define LCD_PRINT(...)
+#endif
+
+#define MAX_DATA   56
+
+typedef struct LCM_Init_Code_tag {
+	unsigned int tag;
+	unsigned char data[MAX_DATA];
+}LCM_Init_Code;
+
+typedef struct LCM_force_cmd_code_tag{
+	unsigned int datatype;
+	LCM_Init_Code real_cmd_code;
+}LCM_Force_Cmd_Code;
+
+#define LCM_TAG_SHIFT 24
+#define LCM_TAG_MASK  ((1 << 24) -1)
+#define LCM_SEND(len) ((1 << LCM_TAG_SHIFT)| len)
+#define LCM_SLEEP(ms) ((2 << LCM_TAG_SHIFT)| ms)
+//#define ARRAY_SIZE(array) ( sizeof(array) / sizeof(array[0]))
+
+#define LCM_TAG_SEND  (1<< 0)
+#define LCM_TAG_SLEEP (1 << 1)
+
+static LCM_Init_Code init_data[] = {
+{LCM_SEND(6), {4,0,0xFF,0x98,0x81,0x03 }},
+{LCM_SEND(2), {0x01,0x00}},
+{LCM_SEND(2), {0x02,0x00}},
+{LCM_SEND(2), {0x03,0x53}},
+{LCM_SEND(2), {0x04,0x54}},
+{LCM_SEND(2), {0x05,0x14}},
+{LCM_SEND(2), {0x06,0x04}},
+{LCM_SEND(2), {0x07,0x03}},
+{LCM_SEND(2), {0x08,0x01}},
+{LCM_SEND(2), {0x09,0x00}},
+{LCM_SEND(2), {0x0a,0x64}},
+{LCM_SEND(2), {0x0b,0x64}},
+{LCM_SEND(2), {0x0c,0x00}},
+{LCM_SEND(2), {0x0d,0x00}},
+{LCM_SEND(2), {0x0e,0x00}},
+{LCM_SEND(2), {0x0f,0x00}},
+{LCM_SEND(2), {0x10,0x00}},
+{LCM_SEND(2), {0x11,0x00}},
+{LCM_SEND(2), {0x12,0x00}},
+{LCM_SEND(2), {0x13,0x00}},
+{LCM_SEND(2), {0x14,0x00}},
+{LCM_SEND(2), {0x15,0x00}},
+{LCM_SEND(2), {0x16,0x00}},
+{LCM_SEND(2), {0x17,0x00}},
+{LCM_SEND(2), {0x18,0x00}},
+{LCM_SEND(2), {0x19,0x00}},
+{LCM_SEND(2), {0x1a,0x00}},
+{LCM_SEND(2), {0x1b,0x00}},
+{LCM_SEND(2), {0x1c,0x00}},
+{LCM_SEND(2), {0x1d,0x00}},
+{LCM_SEND(2), {0x1e,0xC0}},
+{LCM_SEND(2), {0x1f,0x80}},
+{LCM_SEND(2), {0x20,0x02}},
+{LCM_SEND(2), {0x21,0x09}},
+{LCM_SEND(2), {0x22,0x00}},
+{LCM_SEND(2), {0x23,0x00}},
+{LCM_SEND(2), {0x24,0x00}},
+{LCM_SEND(2), {0x25,0x00}},
+{LCM_SEND(2), {0x26,0x00}},
+{LCM_SEND(2), {0x27,0x00}},
+{LCM_SEND(2), {0x28,0x55}},
+{LCM_SEND(2), {0x29,0x03}},
+{LCM_SEND(2), {0x2a,0x00}},
+{LCM_SEND(2), {0x2b,0x00}},
+{LCM_SEND(2), {0x2c,0x00}},
+{LCM_SEND(2), {0x2d,0x00}},
+{LCM_SEND(2), {0x2e,0x00}},
+{LCM_SEND(2), {0x2f,0x00}},
+{LCM_SEND(2), {0x30,0x00}},
+{LCM_SEND(2), {0x31,0x00}},
+{LCM_SEND(2), {0x32,0x00}},
+{LCM_SEND(2), {0x33,0x00}},
+{LCM_SEND(2), {0x34,0x03}},
+{LCM_SEND(2), {0x35,0x00}},
+{LCM_SEND(2), {0x36,0x05}},
+{LCM_SEND(2), {0x37,0x00}},
+{LCM_SEND(2), {0x38,0x01}},
+{LCM_SEND(2), {0x39,0x00}},
+{LCM_SEND(2), {0x3a,0x00}},
+{LCM_SEND(2), {0x3b,0x00}},
+{LCM_SEND(2), {0x3c,0x00}},
+{LCM_SEND(2), {0x3d,0x00}},
+{LCM_SEND(2), {0x3e,0x00}},
+{LCM_SEND(2), {0x3f,0x00}},
+{LCM_SEND(2), {0x40,0x00}},
+{LCM_SEND(2), {0x41,0x00}},
+{LCM_SEND(2), {0x42,0x00}},
+{LCM_SEND(2), {0x43,0x00}},
+{LCM_SEND(2), {0x44,0x00}},
+{LCM_SEND(2), {0x50,0x01}},
+{LCM_SEND(2), {0x51,0x23}},
+{LCM_SEND(2), {0x52,0x45}},
+{LCM_SEND(2), {0x53,0x67}},
+{LCM_SEND(2), {0x54,0x89}},
+{LCM_SEND(2), {0x55,0xab}},
+{LCM_SEND(2), {0x56,0x01}},
+{LCM_SEND(2), {0x57,0x23}},
+{LCM_SEND(2), {0x58,0x45}},
+{LCM_SEND(2), {0x59,0x67}},
+{LCM_SEND(2), {0x5a,0x89}},
+{LCM_SEND(2), {0x5b,0xab}},
+{LCM_SEND(2), {0x5c,0xcd}},
+{LCM_SEND(2), {0x5d,0xef}},
+{LCM_SEND(2), {0x5e,0x01}},
+{LCM_SEND(2), {0x5f,0x14}},
+{LCM_SEND(2), {0x60,0x15}},
+{LCM_SEND(2), {0x61,0x0C}},
+{LCM_SEND(2), {0x62,0x0D}},
+{LCM_SEND(2), {0x63,0x0E}},
+{LCM_SEND(2), {0x64,0x0F}},
+{LCM_SEND(2), {0x65,0x10}},
+{LCM_SEND(2), {0x66,0x11}},
+{LCM_SEND(2), {0x67,0x08}},
+{LCM_SEND(2), {0x68,0x02}},
+{LCM_SEND(2), {0x69,0x0A}},
+{LCM_SEND(2), {0x6a,0x02}},
+{LCM_SEND(2), {0x6b,0x02}},
+{LCM_SEND(2), {0x6c,0x02}},
+{LCM_SEND(2), {0x6d,0x02}},
+{LCM_SEND(2), {0x6e,0x02}},
+{LCM_SEND(2), {0x6f,0x02}},
+{LCM_SEND(2), {0x70,0x02}},
+{LCM_SEND(2), {0x71,0x02}},
+{LCM_SEND(2), {0x72,0x06}},
+{LCM_SEND(2), {0x73,0x02}},
+{LCM_SEND(2), {0x74,0x02}},
+{LCM_SEND(2), {0x75,0x14}},
+{LCM_SEND(2), {0x76,0x15}},
+{LCM_SEND(2), {0x77,0x0F}},
+{LCM_SEND(2), {0x78,0x0E}},
+{LCM_SEND(2), {0x79,0x0D}},
+{LCM_SEND(2), {0x7a,0x0C}},
+{LCM_SEND(2), {0x7b,0x11}},
+{LCM_SEND(2), {0x7c,0x10}},
+{LCM_SEND(2), {0x7d,0x06}},
+{LCM_SEND(2), {0x7e,0x02}},
+{LCM_SEND(2), {0x7f,0x0A}},
+{LCM_SEND(2), {0x80,0x02}},
+{LCM_SEND(2), {0x81,0x02}},
+{LCM_SEND(2), {0x82,0x02}},
+{LCM_SEND(2), {0x83,0x02}},
+{LCM_SEND(2), {0x84,0x02}},
+{LCM_SEND(2), {0x85,0x02}},
+{LCM_SEND(2), {0x86,0x02}},
+{LCM_SEND(2), {0x87,0x02}},
+{LCM_SEND(2), {0x88,0x08}},
+{LCM_SEND(2), {0x89,0x02}},
+{LCM_SEND(2), {0x8A,0x02}},
+{LCM_SEND(6), {4,0,0xFF,0x98,0x81,0x04 }},
+{LCM_SEND(2), {0x6C,0x15}},
+{LCM_SEND(2), {0x6E,0x2F}},
+{LCM_SEND(2), {0x6F,0x55}},
+{LCM_SEND(2), {0x3A,0xA4}},
+{LCM_SEND(2), {0x8D,0x1F}},+{LCM_SEND(2), {0x87,0xBA}},
+{LCM_SEND(2), {0x26,0x76}},
+{LCM_SEND(2), {0xB2,0xD1}},
+{LCM_SEND(2), {0x88,0x0B}},
+{LCM_SEND(6), {4,0,0xFF,0x98,0x81,0x01 }},
+{LCM_SEND(2), {0x22,0x0A}},
+{LCM_SEND(2), {0x31,0x00}},
+{LCM_SEND(2), {0x53,0x8A}},
+{LCM_SEND(2), {0x55,0x88}},
+{LCM_SEND(2), {0x50,0xC0}},
+{LCM_SEND(2), {0x51,0xC0}},
+{LCM_SEND(2), {0x60,0x30}},
+{LCM_SEND(2), {0xA0,0x08}},
+{LCM_SEND(2), {0xA1,0x1E}},
+{LCM_SEND(2), {0xA2,0x2C}},
+{LCM_SEND(2), {0xA3,0x15}},
+{LCM_SEND(2), {0xA4,0x18}},
+{LCM_SEND(2), {0xA5,0x2A}},
+{LCM_SEND(2), {0xA6,0x1F}},
+{LCM_SEND(2), {0xA7,0x1F}},
+{LCM_SEND(2), {0xA8,0x85}},
+{LCM_SEND(2), {0xA9,0x1C}},
+{LCM_SEND(2), {0xAA,0x2A}},
+{LCM_SEND(2), {0xAB,0x72}},
+{LCM_SEND(2), {0xAC,0x1A}},
+{LCM_SEND(2), {0xAD,0x18}},
+{LCM_SEND(2), {0xAE,0x4C}},
+{LCM_SEND(2), {0xAF,0x20}},
+{LCM_SEND(2), {0xB0,0x26}},
+{LCM_SEND(2), {0xB1,0x4A}},
+{LCM_SEND(2), {0xB2,0x57}},
+{LCM_SEND(2), {0xB3,0x2C}},
+{LCM_SEND(2), {0xC0,0x08}},
+{LCM_SEND(2), {0xC1,0x1B}},
+{LCM_SEND(2), {0xC2,0x27}},
+{LCM_SEND(2), {0xC3,0x12}},
+{LCM_SEND(2), {0xC4,0x14}},
+{LCM_SEND(2), {0xC5,0x25}},
+{LCM_SEND(2), {0xC6,0x1A}},
+{LCM_SEND(2), {0xC7,0x1D}},
+{LCM_SEND(2), {0xC8,0x7A}},
+{LCM_SEND(2), {0xC9,0x1A}},
+{LCM_SEND(2), {0xCA,0x28}},
+{LCM_SEND(2), {0xCB,0x6B}},
+{LCM_SEND(2), {0xCC,0x1F}},
+{LCM_SEND(2), {0xCD,0x1D}},
+{LCM_SEND(2), {0xCE,0x52}},
+{LCM_SEND(2), {0xCF,0x24}},
+{LCM_SEND(2), {0xD0,0x2D}},
+{LCM_SEND(2), {0xD1,0x47}},
+{LCM_SEND(2), {0xD2,0x55}},
+{LCM_SEND(2), {0xD3,0x2C}},
+{LCM_SEND(6), {4,0,0xFF,0x98,0x81,0x00 }},
+{LCM_SEND(2), {0x11,0x00}},
+{LCM_SLEEP(120)},
+{LCM_SEND(2), {0x29,0x00}},
+{LCM_SEND(5), {3,0,0x51,0x00,0x00}},
+{LCM_SEND(2), {0x53,0x24}},
+{LCM_SLEEP(20)},+};
+
+static LCM_Init_Code disp_on =  {LCM_SEND(1), {0x29}};
+
+static LCM_Init_Code sleep_in =  {LCM_SEND(1), {0x10}};
+
+static LCM_Init_Code sleep_out =  {LCM_SEND(1), {0x11}};
+
+
+
+static unsigned char set_bl_seq[] = {
+	0x53, 0x24,
+	3,0,0x51,0xff,0xff
+};
+extern struct panel_spec lcd_ili9881c_1_mipi_spec;
+void backlight_control(int brightness)
+{
+		//set_bl_seq[5] = ((brightness * 4095)/255)>>8;
+		//set_bl_seq[6] = ((brightness * 4095)/255) & 0xFF;
+    if (lcd_ili9881c_1_mipi_spec.info.mipi->ops == NULL || brightness==0)
+        return;
+	mipi_gen_write_t mipi_gen_write = lcd_ili9881c_1_mipi_spec.info.mipi->ops->mipi_gen_write;
+	LCD_PRINT("sprdfb power on backlight_control brightness=0xff\n");
+		//mipi_gen_write(&set_bl_seq[0], LCM_SEND(2) & LCM_TAG_MASK);
+		mipi_gen_write(&set_bl_seq[2], LCM_SEND(5) & LCM_TAG_MASK);
+}
+
+static int32_t ili9881c_1_mipi_init(struct panel_spec *self)
+{
+	int32_t i;
+	LCM_Init_Code *init = init_data;
+	unsigned int tag;
+
+	mipi_set_cmd_mode_t mipi_set_cmd_mode = self->info.mipi->ops->mipi_set_cmd_mode;
+	mipi_gen_write_t mipi_gen_write = self->info.mipi->ops->mipi_gen_write;
+
+	LCD_PRINT("ili9881c_1_init\n");
+
+	mipi_set_cmd_mode();
+
+	for(i = 0; i < ARRAY_SIZE(init_data); i++){
+		tag = (init->tag >>24);
+		if(tag & LCM_TAG_SEND){
+			mipi_gen_write(init->data, (init->tag & LCM_TAG_MASK));
+		}else if(tag & LCM_TAG_SLEEP){
+			mdelay((init->tag & LCM_TAG_MASK));
+		}
+		init++;
+	}
+	return 0;
+}
+
+static LCM_Force_Cmd_Code rd_prep_code[]={
+        {0x39, {LCM_SEND(6), {0x6, 0, 0xFF, 0x98, 0x81, 0x01}}},
+        {0x37, {LCM_SEND(2), {0x3, 0}}},
+};
+
+static uint32_t ili9881c_1_readid(struct panel_spec *self)
+{
+#if 1+        /*Jessica TODO: need read id*/
+        int32_t i = 0;
+        uint32_t j =0;
+        LCM_Force_Cmd_Code * rd_prepare = rd_prep_code;
+        uint8_t read_data[3] = {0};
+        int32_t read_rtn = 0;
+        unsigned int tag = 0;
+        mipi_set_cmd_mode_t mipi_set_cmd_mode = self->info.mipi->ops->mipi_set_cmd_mode;
+        mipi_force_write_t mipi_force_write = self->info.mipi->ops->mipi_force_write;
+        mipi_force_read_t mipi_force_read = self->info.mipi->ops->mipi_force_read;
+        mipi_eotp_set_t mipi_eotp_set = self->info.mipi->ops->mipi_eotp_set;
+
+
+        LCD_PRINT("lcd_ili9881c_1_mipi read id!\n");
+
+
+        mipi_set_cmd_mode();
+        for(j = 0; j < 4; j++){
+                rd_prepare = rd_prep_code;
+                for(i = 0; i < ARRAY_SIZE(rd_prep_code); i++){
+                        tag = (rd_prepare->real_cmd_code.tag >> 24);
+                        if(tag & LCM_TAG_SEND){
+                                mipi_force_write(rd_prepare->datatype, rd_prepare->real_cmd_code.data, (rd_prepare->real_cmd_code.tag & LCM_TAG_MASK));
+                        }else if(tag & LCM_TAG_SLEEP){
+                                mdelay((rd_prepare->real_cmd_code.tag & LCM_TAG_MASK));
+                        }
+                        rd_prepare++;
+                }
+                mipi_eotp_set(0,0);
+                read_rtn = mipi_force_read(0x00, 1,(uint8_t *)&read_data[0]);
+                read_rtn = mipi_force_read(0x01, 1,(uint8_t *)&read_data[1]);
+                mipi_eotp_set(1,1);
+                LCD_PRINT("lcd_ili9881c_1_mipi read id 0x00 value is 0x%x, 0x%x, 0x%x!\n", read_data[0], read_data[1], read_data[2]);
+
+                if((0x98 == read_data[0])&&(0x81 == read_data[1])){
+                        LCD_PRINT("lcd_ili9881c_1_mipi read id success!\n");
+                        return 0x98811;
+                }
+        }
+#endif
+        return 0;
+}
+
+static struct panel_operations lcd_ili9881c_1_mipi_operations = {
+	.panel_init = ili9881c_1_mipi_init,
+	.panel_readid = ili9881c_1_readid,
+};
+
+static struct timing_rgb lcd_ili9881c_1_mipi_timing = {
+	.hfp = 30,  /* unit: pixel */
+	.hbp = 30,
+	.hsync = 20,
+	.vfp = 20, /*unit: line*/
+	.vbp = 20,
+	.vsync = 6,
+};
+
+static struct info_mipi lcd_ili9881c_1_mipi_info = {
+	.work_mode  = SPRDFB_MIPI_MODE_VIDEO,
+	.video_bus_width = 24, /*18,16*/
+	.lan_number = 4,
+	.phy_feq = 500*1000,
+	.h_sync_pol = SPRDFB_POLARITY_POS,
+	.v_sync_pol = SPRDFB_POLARITY_POS,
+	.de_pol = SPRDFB_POLARITY_POS,
+	.te_pol = SPRDFB_POLARITY_POS,
+	.color_mode_pol = SPRDFB_POLARITY_NEG,
+	.shut_down_pol = SPRDFB_POLARITY_NEG,
+	.timing = &lcd_ili9881c_1_mipi_timing,
+	.ops = NULL,
+};
+
+struct panel_spec lcd_ili9881c_1_mipi_spec = {
+	.width = 720,
+	.height = 1280,
+	.fps = 60,
+	.type = LCD_MODE_DSI,
+	.direction = LCD_DIRECT_NORMAL,
+	.info = {
+		.mipi = &lcd_ili9881c_1_mipi_info
+	},
+	.ops = &lcd_ili9881c_1_mipi_operations,
+};
+
+Index: u-boot64/include/configs/sp9832a_7c10_volte.h
===================================================================
--- u-boot64/include/configs/sp9832a_7c10_volte.h	(revision 0)
+++ u-boot64/include/configs/sp9832a_7c10_volte.h	(revision 182160)
@@ -0,0 +1,422 @@
+/*
+ * (C) Copyright 2009 DENX Software Engineering
+ * Author: John Rigby <jrigby@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include "sprd_sharkl_modem_volte.h"
+
+//#define CONFIG_SECURE_BOOT
+//#define CONFIG_ROM_VERIFY_SPL
+
+#define PRIMPUKPATH "/dev/block/mmcblk0boot0"
+#define PRIMPUKSTART 512
+#define PRIMPUKLEN   260
+/* Flat Device Tree Definitions */
+#define CONFIG_OF_LIBFDT
+
+
+#define DT_PLATFROM_ID 8830
+#define DT_HARDWARE_ID 1
+#define DT_SOC_VER     0x20000
+
+//only used in fdl2 .in uart download, the debug infors  from  serial will break the download process.
+
+#define BOOT_NATIVE_LINUX_MODEM  1
+#define CONFIG_SILENT_CONSOLE
+#define CONFIG_SRAM_REPAIR
+
+#define SECURE_TOS_SIZE 0x00400000
+#ifdef CONFIG_WITH_VMM
+#define SECURE_TOS_ADDR 0xBDA00000
+#else
+#define SECURE_TOS_ADDR 0x96000000
+#endif
+
+/* It's defined in config.mk when required */
+#ifdef CONFIG_WITH_VMM
+#define VMM_SIZE 0x100000
+#define VMM_ADDR 0xBFA00000
+#define VMM_SIZE_RT 0x5D0000    /* VMM runtime memory size */
+#define VMM_ADDR_RT 0xBFA30000  /* VMM runtime memory base */
+#endif
+/*
+ * SPREADTRUM BIGPHONE board - SoC Configuration
+ */
+#define CONFIG_AUTODLOADER
+#define CONFIG_SP9830I
+#define CONFIG_SP9832A_7C10_VOLTE
+#define CONFIG_SC9630
+#define CONFIG_ADIE_SC2723
+//#define CONFIG_ARCH_SCX35L
+#define CONFIG_SPL_32K
+
+
+#define CONFIG_PMIC_ARM7_BOOT
+#define CONFIG_CP1_BOOT
+#define CHIP_ENDIAN_LITTLE
+#define _LITTLE_ENDIAN 1
+
+#define CONFIG_RAM512M
+
+#define CONFIG_EMMC_BOOT
+#define CONFIG_ARCH_SCX35L
+#define CONFIG_SPRD_MMC
+#define CONFIG_SUPPORT_EMMC_BOOT
+
+#ifdef  CONFIG_EMMC_BOOT
+#define EMMC_SECTOR_SIZE 512
+
+#define CONFIG_FS_EXT4
+#define CONFIG_EXT4_WRITE
+#define CONFIG_CMD_EXT4
+#define CONFIG_CMD_EXT4_WRITE
+
+#define CONFIG_FS_FAT
+#define CONFIG_UEFI_PARTITION
+#define CONFIG_EFI_PARTITION
+#define CONFIG_EXT4_SPARSE_DOWNLOAD
+#endif
+
+/*
+ * MMC definition
+ */
+#define CONFIG_CMD_MMC
+#ifdef  CONFIG_CMD_MMC
+#define CONFIG_CMD_FAT			1
+#define CONFIG_FAT_WRITE		1
+#define CONFIG_MMC			1
+#define CONFIG_GENERIC_MMC		1
+#define CONFIG_SDHCI			1
+#define CONFIG_SDHCI_CTRL_NO_HISPD 	1 /* disable high speed control */
+#define CONFIG_SYS_MMC_MAX_BLK_COUNT	0x1000
+#define CONFIG_MMC_SDMA			1
+#define CONFIG_MV_SDHCI			1
+#define CONFIG_DOS_PARTITION		1
+#define CONFIG_EFI_PARTITION		1
+#define CONFIG_SYS_MMC_NUM		1
+#endif
+
+
+
+#define CONFIG_SYS_HZ			1000
+#define CONFIG_SPRD_TIMER_CLK		1000 /*32768*/
+
+#define CP0_ZERO_MAP_ADR    0x50000000
+#define CP0_ARM0_EXEC_ADR        0x88400000
+
+#define CP1_ZERO_MAP_ADR    0x50001000
+#define CP1_EXEC_ADR        LTE_MODEM_ADDR
+
+
+#define MODEM_SIZE		(0x800000)
+#define DSP_SIZE		(0x2E0000)
+#define RUNTIMENV_SIZE		(3*128 * 1024)
+
+#ifdef CONFIG_ROM_VERIFY_SPL
+#define CONFIG_SPL_LOAD_LEN (0x8000)
+#define CONFIG_BOOTINFO_LENGTH (0x200)
+#define PUBKEY_BSC_BLOCK_INDEX (CONFIG_SPL_LOAD_LEN - CONFIG_BOOTINFO_LENGTH * 2) / EMMC_SECTOR_SIZE
+#define PUBKEY_VLR_BLOCK_INDEX 2
+#define PUBKEY_READ_BLOCK_NUMS 1
+#define CONFIG_SPL_HASH_LEN (0x400)
+#else
+#define CONFIG_SPL_LOAD_LEN	(0x6000)
+#endif
+
+
+//The macro deffined in config.mk of uboot 
+#ifdef SP9832A_2H11_32V4_VOLTE_LCD
+#define  CONFIG_FB_LOW_RES_SIMU
+#endif
+
+/*#define CMDLINE_NEED_CONV */
+
+
+#define CONFIG_SYS_SDRAM_BASE 0x80000000
+#define CONFIG_SYS_SDRAM_END (CONFIG_SYS_SDRAM_BASE + PHYS_SDRAM_1_SIZE)
+
+#define CONFIG_SYS_INIT_SP_ADDR     \
+	(CONFIG_SYS_SDRAM_END - 0x10000 - GENERATED_GBL_DATA_SIZE)
+
+#define CONFIG_SKIP_LOWLEVEL_INIT
+
+
+
+
+
+#define CONFIG_CMDLINE_TAG		1	/* enable passing of ATAGs */
+#define CONFIG_SETUP_MEMORY_TAGS	1
+#define CONFIG_INITRD_TAG		1
+
+/*
+ * Memory Info
+ */
+/* malloc() len */
+#define CONFIG_SYS_MALLOC_LEN           (CONFIG_ENV_SIZE + 5 * 1024 * 1024)
+/*
+ * Board has 2 32MB banks of DRAM but there is a bug when using
+ * both so only the first is configured
+ */
+#define CONFIG_NR_DRAM_BANKS	1
+
+#define PHYS_SDRAM_1		0x80000000
+#define PHYS_SDRAM_1_SIZE	0x20000000
+#if (CONFIG_NR_DRAM_BANKS == 2)
+#define PHYS_SDRAM_2		0x90000000
+#define PHYS_SDRAM_2_SIZE	0x10000000
+#endif
+/* 8MB DRAM test */
+#define CONFIG_SYS_MEMTEST_START	PHYS_SDRAM_1
+#define CONFIG_SYS_MEMTEST_END		(PHYS_SDRAM_1+0x0800000)
+#define CONFIG_STACKSIZE	(256 * 1024)	/* regular stack */
+
+/*
+ * Flash & Environment
+ */
+/* No NOR flash present */
+#define CONFIG_SYS_NO_FLASH	1
+#define CONFIG_ENV_IS_NOWHERE
+#define CONFIG_ENV_SIZE		(128 * 1024)
+/*
+#define	CONFIG_ENV_IS_IN_NAND
+#define	CONFIG_ENV_OFFSET	CONFIG_SYS_MONITOR_LEN
+#define CONFIG_ENV_OFFSET_REDUND	(CONFIG_ENV_OFFSET + CONFIG_ENV_SIZE)
+*/
+
+/* DDR */
+//#define DDR_CLK 464
+//---these three macro below,only one can be open
+//#define DDR_LPDDR1
+//#define DDR_LPDDR2
+//#define DDR_DDR3
+
+#define CONFIG_DDR_AUTO_DETECT
+#define CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM    0x1C00   /* IRAM store ddr info */
+
+//#define DDR_TYPE DRAM_LPDDR2_2CS_8G_X32
+//#define DDR_TYPE DRAM_LPDDR2_1CS_4G_X32
+//#define DDR_TYPE DRAM_LPDDR2_1CS_8G_X32
+//#define DDR_TYPE DRAM_LPDDR2_2CS_16G_X32
+//#define DDR_TYPE DRAM_DDR3_1CS_2G_X8_4P
+//#define DDR_TYPE DRAM_DDR3_1CS_4G_X16_2P
+
+//#define DDR3_DLL_ON TRUE
+//#define DLL_BYPASS
+//#define DDR_APB_CLK 128
+//#define DDR_DFS_SUPPORT
+//#define DDR_DFS_VAL_BASE 0X1c00
+
+//#define DDR_SCAN_SUPPORT
+//#define MEM_IO_DS LPDDR2_DS_40R
+
+//#define PUBL_LPDDR1_DS PUBL_LPDDR1_DS_48OHM
+//#define PUBL_LPDDR2_DS PUBL_LPDDR2_DS_40OHM
+//#define PUBL_DDR3_DS   PUBL_DDR3_DS_34OHM
+
+/* NAND */
+#define CONFIG_NAND_SC9630
+//#define CONFIG_SPRD_NAND_REGS_BASE	(0x21100000)
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define CONFIG_SYS_NAND_BASE		(0x21100000)
+
+
+#define CONFIG_CMD_MTDPARTS
+#define CONFIG_MTD_PARTITIONS
+#define CONFIG_MTD_DEVICE
+#define CONFIG_CMD_UBI
+#define CONFIG_RBTREE
+
+/* U-Boot general configuration */
+#define CONFIG_SYS_PROMPT	"=> "	/* Monitor Command Prompt */
+#define CONFIG_SYS_CBSIZE	1024	/* Console I/O Buffer Size  */
+/* Print buffer sz */
+#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + \
+		sizeof(CONFIG_SYS_PROMPT) + 16)
+#define CONFIG_SYS_MAXARGS	32	/* max number of command args */
+/* Boot Argument Buffer Size */
+#define CONFIG_SYS_BARGSIZE	CONFIG_SYS_CBSIZE
+#define CONFIG_SYS_LONGHELP
+
+
+
+
+#define CONFIG_BOOTDELAY	0
+
+
+#define CONFIG_LOADADDR		(CONFIG_SYS_TEXT_BASE - CONFIG_SYS_MALLOC_LEN - 4*1024*1024)	/* loadaddr env var */
+#define CONFIG_SYS_LOAD_ADDR	CONFIG_LOADADDR
+
+
+#define MTDIDS_DEFAULT "nand0=sprd-nand"
+#define MTDPARTS_DEFAULT "mtdparts=sprd-nand:256k(spl),512k(2ndbl),256k(params),512k(vmjaluna),10m(modem),3840k(fixnv),3840k(backupfixnv),5120k(dsp),3840k(runtimenv),10m(boot),10m(recovery),250m(system),180m(userdata),20m(cache),256k(misc),1m(boot_logo),1m(fastboot_logo),3840k(productinfo),512k(kpanic)"
+#define CONFIG_BOOTARGS "mem=512M loglevel=1 console=ttyS1,115200n8 init=/init " MTDPARTS_DEFAULT
+
+#define COPY_LINUX_KERNEL_SIZE	(0x600000)
+
+#define CONFIG_BOOTCOMMAND "cboot normal"
+#define	CONFIG_EXTRA_ENV_SETTINGS				""
+
+
+
+#define CONFIG_USB_GADGET_SC8800G
+#define CONFIG_USB_DWC
+#define CONFIG_USB_GADGET_DUALSPEED
+
+#define CONFIG_MODEM_CALIBERATE
+
+#define CONFIG_LCD
+#ifdef  CONFIG_LCD
+#define CONFIG_DSIH_VERSION_1P21A
+#define CONFIG_SPLASH_SCREEN
+#define LCD_BPP LCD_COLOR16
+//#define CONFIG_LCD_FWVGA
+#define CONFIG_LCD_720P
+#define CONFIG_CMD_BMP
+
+//#define CONFIG_FB_LCD_OTM8019A_MIPI
+//#define CONFIG_FB_LCD_HX8394A_MIPI
+#define CONFIG_FB_LCD_ILI9881C_1_MIPI
+#ifdef  CONFIG_FB_LOW_RES_SIMU
+#define LCD_DISPLAY_WIDTH 480
+#define LCD_DISPLAY_HEIGHT 854
+#endif
+#define CONFIG_SYS_WHITE_ON_BLACK
+#ifdef  LCD_TEST_PATTERN
+#define CONSOLE_COLOR_RED 0xf800
+#define CONSOLE_COLOR_GREEN 0x07e0
+#define CONSOLE_COLOR_YELLOW 0x07e0
+#define CONSOLE_COLOR_BLUE 0x001f
+#define CONSOLE_COLOR_MAGENTA 0x001f
+#define CONSOLE_COLOR_CYAN 0x001f
+#endif
+#endif // CONFIG_LCD
+
+/*for sysdump*/
+#define CONFIG_FS_FAT
+#define CONFIG_SPRD_SYSDUMP
+#define CONFIG_RAMDUMP_NO_SPLIT 1	/* Don't split sysdump file */
+#define REAL_SDRAM_SIZE 0x40000000	/*dump 1G */
+
+
+#define CALIBRATE_ENUM_MS 3000
+#define CALIBRATE_IO_MS 2000
+
+//#define LOW_BAT_ADC_LEVEL 782 /*phone battery adc value low than this value will not boot up*/
+#define LOW_BAT_VOL            3400 /*phone battery voltage low than this value will not boot up*/
+#define LOW_BAT_VOL_CHG        3300    //3.3V charger connect
+
+#define PWR_KEY_DETECT_CNT 2 /*this should match the count of boot_pwr_check() function */
+#define ALARM_LEAD_SET_MS 0 /* time set for alarm boot in advancd */
+
+
+/*rf board id */
+#define RF_BAND_INFO
+#ifdef RF_BAND_INFO
+#define LB_GPIO_NUM   134
+#define MB_GPIO_NUM   135
+//#define HB_GPIO_NUM  0
+#define ADC_CHANNEL_FOR_NV  1
+#endif
+
+/* 32K LESS SUPPORT */
+#define CONFIG_32K_SPRD
+#ifdef CONFIG_32K_SPRD
+#define CONFIG_32K
+#endif
+
+
+/* #define CONFIG_SPRD_AUDIO_DEBUG */
+
+
+#define CONFIG_PBINT_7S_RESET_V1
+/*7S reset config*/
+#define CONFIG_7S_RST_MODULE_EN		1	//0:disable module; 1:enable module
+
+#define CONFIG_7S_RST_SW_MODE		1	//0:hw reset,1:arm reset,power keep on
+#define CONFIG_7S_RST_SHORT_MODE	1	//0:long press then release key to trigger;1:press key some time to trigger
+#define CONFIG_7S_RST_2KEY_MODE		0	//0:1Key--Normal mode; 1:2KEY
+#define CONFIG_7S_RST_THRESHOLD		7	//7S, hold key down for this time to trigger
+
+#define DT_ADR          0x85400000
+#define KERNEL_ADR      0x80008000
+#define VLX_TAG_ADDR    0x82000100
+#define RAMDISK_ADR     0x85500000
+#define CONFIG_SPRD_VBAT_CHEK
+#define CONFIG_USB_DOWNLOAD
+#define CONFIG_DWC_OTG
+#define CONFIG_ARM32
+#define CONFIG_ARCH_SHARK
+#define CONFIG_PREBOOT "role"
+#define CONFIG_BOARD_LATE_INIT
+
+
+
+/*rf board id */
+
+#define RF_BAND_INFO
+
+#ifdef RF_BAND_INFO
+#define LB_GPIO_NUM 			134
+#define MB_GPIO_NUM 			135
+//#define HB_GPIO_NUM 			0
+//#define ADC_CHANNEL_FOR_NV		0
+#endif
+
+
+/* Chip Driver Macro Definitions Start*/
+/*sprd adc*/
+#define CONFIG_SPRD_ADC
+
+/*sprd adi*/
+#define CONFIG_SPRD_ADI
+
+/*sprd gpio*/
+#define CONFIG_SPRD_GPIO
+
+/*sprd rtc*/
+#define CONFIG_RTC_SPRD
+
+/*sprd watchdog*/
+#define CONFIG_HW_WATCHDOG
+#define CONFIG_SPRD_WATCHDOG
+
+ /*Serial Info*/
+#define CONFIG_SPRD_UART		1
+#define CONFIG_SYS_SC8800X_UART1	1
+#define CONFIG_CONS_INDEX	1	/* use UART0 for console */
+#define CONFIG_BAUDRATE		115200	/* Default baud rate */
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+#define CONFIG_SPRD_UART_PORTS	{ (void *) (CONFIG_SYS_SERIAL0), (void *) (CONFIG_SYS_SERIAL1) }
+#define CONFIG_SYS_SERIAL0		0x70000000
+#define CONFIG_SYS_SERIAL1		0x70100000
+
+/* Chip Driver Macro Definitions End*/
+/*active arm7 ram before access to it*/
+#define CONFIG_ARM7_RAM_ACTIVE
+
+#define CONFIG_SPRD_EXT_IC_POWER
+#define CONFIG_FAN54015_CHARGE_IC
+#define CONFIG_SYS_I2C
+#define CONFIG_SPRD_I2C
+
+#endif /* __CONFIG_H */
+
Index: u-boot64/include/configs/sp9832a_7c20_volte.h
===================================================================
--- u-boot64/include/configs/sp9832a_7c20_volte.h	(revision 0)
+++ u-boot64/include/configs/sp9832a_7c20_volte.h	(revision 182160)
@@ -0,0 +1,422 @@
+/*
+ * (C) Copyright 2009 DENX Software Engineering
+ * Author: John Rigby <jrigby@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include "sprd_sharkl_modem_volte.h"
+
+//#define CONFIG_SECURE_BOOT
+//#define CONFIG_ROM_VERIFY_SPL
+
+#define PRIMPUKPATH "/dev/block/mmcblk0boot0"
+#define PRIMPUKSTART 512
+#define PRIMPUKLEN   260
+/* Flat Device Tree Definitions */
+#define CONFIG_OF_LIBFDT
+
+
+#define DT_PLATFROM_ID 8830
+#define DT_HARDWARE_ID 1
+#define DT_SOC_VER     0x20000
+
+//only used in fdl2 .in uart download, the debug infors  from  serial will break the download process.
+
+#define BOOT_NATIVE_LINUX_MODEM  1
+#define CONFIG_SILENT_CONSOLE
+#define CONFIG_SRAM_REPAIR
+
+#define SECURE_TOS_SIZE 0x00400000
+#ifdef CONFIG_WITH_VMM
+#define SECURE_TOS_ADDR 0xFD800000
+#else
+#define SECURE_TOS_ADDR 0x96000000
+#endif
+
+/* It's defined in config.mk when required */
+#ifdef CONFIG_WITH_VMM
+#define VMM_SIZE 0x100000
+#define VMM_ADDR 0xFF800000
+#define VMM_SIZE_RT 0x5D0000    /* VMM runtime memory size */
+#define VMM_ADDR_RT 0xFF830000  /* VMM runtime memory base */
+#endif
+/*
+ * SPREADTRUM BIGPHONE board - SoC Configuration
+ */
+#define CONFIG_AUTODLOADER
+#define CONFIG_SP9830I
+#define CONFIG_SP9832A_7C20_VOLTE
+#define CONFIG_SC9630
+#define CONFIG_ADIE_SC2723
+//#define CONFIG_ARCH_SCX35L
+#define CONFIG_SPL_32K
+
+
+#define CONFIG_PMIC_ARM7_BOOT
+#define CONFIG_CP1_BOOT
+#define CHIP_ENDIAN_LITTLE
+#define _LITTLE_ENDIAN 1
+
+#define CONFIG_RAM512M
+
+#define CONFIG_EMMC_BOOT
+#define CONFIG_ARCH_SCX35L
+#define CONFIG_SPRD_MMC
+#define CONFIG_SUPPORT_EMMC_BOOT
+
+#ifdef  CONFIG_EMMC_BOOT
+#define EMMC_SECTOR_SIZE 512
+
+#define CONFIG_FS_EXT4
+#define CONFIG_EXT4_WRITE
+#define CONFIG_CMD_EXT4
+#define CONFIG_CMD_EXT4_WRITE
+
+#define CONFIG_FS_FAT
+#define CONFIG_UEFI_PARTITION
+#define CONFIG_EFI_PARTITION
+#define CONFIG_EXT4_SPARSE_DOWNLOAD
+#endif
+
+/*
+ * MMC definition
+ */
+#define CONFIG_CMD_MMC
+#ifdef  CONFIG_CMD_MMC
+#define CONFIG_CMD_FAT			1
+#define CONFIG_FAT_WRITE		1
+#define CONFIG_MMC			1
+#define CONFIG_GENERIC_MMC		1
+#define CONFIG_SDHCI			1
+#define CONFIG_SDHCI_CTRL_NO_HISPD 	1 /* disable high speed control */
+#define CONFIG_SYS_MMC_MAX_BLK_COUNT	0x1000
+#define CONFIG_MMC_SDMA			1
+#define CONFIG_MV_SDHCI			1
+#define CONFIG_DOS_PARTITION		1
+#define CONFIG_EFI_PARTITION		1
+#define CONFIG_SYS_MMC_NUM		1
+#endif
+
+
+
+#define CONFIG_SYS_HZ			1000
+#define CONFIG_SPRD_TIMER_CLK		1000 /*32768*/
+
+#define CP0_ZERO_MAP_ADR    0x50000000
+#define CP0_ARM0_EXEC_ADR        0x88400000
+
+#define CP1_ZERO_MAP_ADR    0x50001000
+#define CP1_EXEC_ADR        LTE_MODEM_ADDR
+
+
+#define MODEM_SIZE		(0x800000)
+#define DSP_SIZE		(0x2E0000)
+#define RUNTIMENV_SIZE		(3*128 * 1024)
+
+#ifdef CONFIG_ROM_VERIFY_SPL
+#define CONFIG_SPL_LOAD_LEN (0x8000)
+#define CONFIG_BOOTINFO_LENGTH (0x200)
+#define PUBKEY_BSC_BLOCK_INDEX (CONFIG_SPL_LOAD_LEN - CONFIG_BOOTINFO_LENGTH * 2) / EMMC_SECTOR_SIZE
+#define PUBKEY_VLR_BLOCK_INDEX 2
+#define PUBKEY_READ_BLOCK_NUMS 1
+#define CONFIG_SPL_HASH_LEN (0x400)
+#else
+#define CONFIG_SPL_LOAD_LEN	(0x6000)
+#endif
+
+
+//The macro deffined in config.mk of uboot 
+#ifdef SP9832A_2H11_32V4_VOLTE_LCD
+#define  CONFIG_FB_LOW_RES_SIMU
+#endif
+
+/*#define CMDLINE_NEED_CONV */
+
+
+#define CONFIG_SYS_SDRAM_BASE 0x80000000
+#define CONFIG_SYS_SDRAM_END (CONFIG_SYS_SDRAM_BASE + PHYS_SDRAM_1_SIZE)
+
+#define CONFIG_SYS_INIT_SP_ADDR     \
+	(CONFIG_SYS_SDRAM_END - 0x10000 - GENERATED_GBL_DATA_SIZE)
+
+#define CONFIG_SKIP_LOWLEVEL_INIT
+
+
+
+
+
+#define CONFIG_CMDLINE_TAG		1	/* enable passing of ATAGs */
+#define CONFIG_SETUP_MEMORY_TAGS	1
+#define CONFIG_INITRD_TAG		1
+
+/*
+ * Memory Info
+ */
+/* malloc() len */
+#define CONFIG_SYS_MALLOC_LEN           (CONFIG_ENV_SIZE + 5 * 1024 * 1024)
+/*
+ * Board has 2 32MB banks of DRAM but there is a bug when using
+ * both so only the first is configured
+ */
+#define CONFIG_NR_DRAM_BANKS	1
+
+#define PHYS_SDRAM_1		0x80000000
+#define PHYS_SDRAM_1_SIZE	0x20000000
+#if (CONFIG_NR_DRAM_BANKS == 2)
+#define PHYS_SDRAM_2		0x90000000
+#define PHYS_SDRAM_2_SIZE	0x10000000
+#endif
+/* 8MB DRAM test */
+#define CONFIG_SYS_MEMTEST_START	PHYS_SDRAM_1
+#define CONFIG_SYS_MEMTEST_END		(PHYS_SDRAM_1+0x0800000)
+#define CONFIG_STACKSIZE	(256 * 1024)	/* regular stack */
+
+/*
+ * Flash & Environment
+ */
+/* No NOR flash present */
+#define CONFIG_SYS_NO_FLASH	1
+#define CONFIG_ENV_IS_NOWHERE
+#define CONFIG_ENV_SIZE		(128 * 1024)
+/*
+#define	CONFIG_ENV_IS_IN_NAND
+#define	CONFIG_ENV_OFFSET	CONFIG_SYS_MONITOR_LEN
+#define CONFIG_ENV_OFFSET_REDUND	(CONFIG_ENV_OFFSET + CONFIG_ENV_SIZE)
+*/
+
+/* DDR */
+//#define DDR_CLK 464
+//---these three macro below,only one can be open
+//#define DDR_LPDDR1
+//#define DDR_LPDDR2
+//#define DDR_DDR3
+
+#define CONFIG_DDR_AUTO_DETECT
+#define CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM    0x1C00   /* IRAM store ddr info */
+
+//#define DDR_TYPE DRAM_LPDDR2_2CS_8G_X32
+//#define DDR_TYPE DRAM_LPDDR2_1CS_4G_X32
+//#define DDR_TYPE DRAM_LPDDR2_1CS_8G_X32
+//#define DDR_TYPE DRAM_LPDDR2_2CS_16G_X32
+//#define DDR_TYPE DRAM_DDR3_1CS_2G_X8_4P
+//#define DDR_TYPE DRAM_DDR3_1CS_4G_X16_2P
+
+//#define DDR3_DLL_ON TRUE
+//#define DLL_BYPASS
+//#define DDR_APB_CLK 128
+//#define DDR_DFS_SUPPORT
+//#define DDR_DFS_VAL_BASE 0X1c00
+
+//#define DDR_SCAN_SUPPORT
+//#define MEM_IO_DS LPDDR2_DS_40R
+
+//#define PUBL_LPDDR1_DS PUBL_LPDDR1_DS_48OHM
+//#define PUBL_LPDDR2_DS PUBL_LPDDR2_DS_40OHM
+//#define PUBL_DDR3_DS   PUBL_DDR3_DS_34OHM
+
+/* NAND */
+#define CONFIG_NAND_SC9630
+//#define CONFIG_SPRD_NAND_REGS_BASE	(0x21100000)
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define CONFIG_SYS_NAND_BASE		(0x21100000)
+
+
+#define CONFIG_CMD_MTDPARTS
+#define CONFIG_MTD_PARTITIONS
+#define CONFIG_MTD_DEVICE
+#define CONFIG_CMD_UBI
+#define CONFIG_RBTREE
+
+/* U-Boot general configuration */
+#define CONFIG_SYS_PROMPT	"=> "	/* Monitor Command Prompt */
+#define CONFIG_SYS_CBSIZE	1024	/* Console I/O Buffer Size  */
+/* Print buffer sz */
+#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + \
+		sizeof(CONFIG_SYS_PROMPT) + 16)
+#define CONFIG_SYS_MAXARGS	32	/* max number of command args */
+/* Boot Argument Buffer Size */
+#define CONFIG_SYS_BARGSIZE	CONFIG_SYS_CBSIZE
+#define CONFIG_SYS_LONGHELP
+
+
+
+
+#define CONFIG_BOOTDELAY	0
+
+
+#define CONFIG_LOADADDR		(CONFIG_SYS_TEXT_BASE - CONFIG_SYS_MALLOC_LEN - 4*1024*1024)	/* loadaddr env var */
+#define CONFIG_SYS_LOAD_ADDR	CONFIG_LOADADDR
+
+
+#define MTDIDS_DEFAULT "nand0=sprd-nand"
+#define MTDPARTS_DEFAULT "mtdparts=sprd-nand:256k(spl),512k(2ndbl),256k(params),512k(vmjaluna),10m(modem),3840k(fixnv),3840k(backupfixnv),5120k(dsp),3840k(runtimenv),10m(boot),10m(recovery),250m(system),180m(userdata),20m(cache),256k(misc),1m(boot_logo),1m(fastboot_logo),3840k(productinfo),512k(kpanic)"
+#define CONFIG_BOOTARGS "mem=512M loglevel=1 console=ttyS1,115200n8 init=/init " MTDPARTS_DEFAULT
+
+#define COPY_LINUX_KERNEL_SIZE	(0x600000)
+
+#define CONFIG_BOOTCOMMAND "cboot normal"
+#define	CONFIG_EXTRA_ENV_SETTINGS				""
+
+
+
+#define CONFIG_USB_GADGET_SC8800G
+#define CONFIG_USB_DWC
+#define CONFIG_USB_GADGET_DUALSPEED
+
+#define CONFIG_MODEM_CALIBERATE
+
+#define CONFIG_LCD
+#ifdef  CONFIG_LCD
+#define CONFIG_DSIH_VERSION_1P21A
+#define CONFIG_SPLASH_SCREEN
+#define LCD_BPP LCD_COLOR16
+//#define CONFIG_LCD_FWVGA
+#define CONFIG_LCD_720P
+#define CONFIG_CMD_BMP
+
+//#define CONFIG_FB_LCD_OTM8019A_MIPI
+//#define CONFIG_FB_LCD_HX8394A_MIPI
+#define CONFIG_FB_LCD_ILI9881C_1_MIPI
+#ifdef  CONFIG_FB_LOW_RES_SIMU
+#define LCD_DISPLAY_WIDTH 480
+#define LCD_DISPLAY_HEIGHT 854
+#endif
+#define CONFIG_SYS_WHITE_ON_BLACK
+#ifdef  LCD_TEST_PATTERN
+#define CONSOLE_COLOR_RED 0xf800
+#define CONSOLE_COLOR_GREEN 0x07e0
+#define CONSOLE_COLOR_YELLOW 0x07e0
+#define CONSOLE_COLOR_BLUE 0x001f
+#define CONSOLE_COLOR_MAGENTA 0x001f
+#define CONSOLE_COLOR_CYAN 0x001f
+#endif
+#endif // CONFIG_LCD
+
+/*for sysdump*/
+#define CONFIG_FS_FAT
+#define CONFIG_SPRD_SYSDUMP
+#define CONFIG_RAMDUMP_NO_SPLIT 1	/* Don't split sysdump file */
+#define REAL_SDRAM_SIZE 0x40000000	/*dump 1G */
+
+
+#define CALIBRATE_ENUM_MS 3000
+#define CALIBRATE_IO_MS 2000
+
+//#define LOW_BAT_ADC_LEVEL 782 /*phone battery adc value low than this value will not boot up*/
+#define LOW_BAT_VOL            3400 /*phone battery voltage low than this value will not boot up*/
+#define LOW_BAT_VOL_CHG        3300    //3.3V charger connect
+
+#define PWR_KEY_DETECT_CNT 2 /*this should match the count of boot_pwr_check() function */
+#define ALARM_LEAD_SET_MS 0 /* time set for alarm boot in advancd */
+
+
+/*rf board id */
+#define RF_BAND_INFO
+#ifdef RF_BAND_INFO
+#define LB_GPIO_NUM   134
+#define MB_GPIO_NUM   135
+//#define HB_GPIO_NUM  0
+#define ADC_CHANNEL_FOR_NV  1
+#endif
+
+/* 32K LESS SUPPORT */
+#define CONFIG_32K_SPRD
+#ifdef CONFIG_32K_SPRD
+#define CONFIG_32K
+#endif
+
+
+/* #define CONFIG_SPRD_AUDIO_DEBUG */
+
+
+#define CONFIG_PBINT_7S_RESET_V1
+/*7S reset config*/
+#define CONFIG_7S_RST_MODULE_EN		1	//0:disable module; 1:enable module
+
+#define CONFIG_7S_RST_SW_MODE		1	//0:hw reset,1:arm reset,power keep on
+#define CONFIG_7S_RST_SHORT_MODE	1	//0:long press then release key to trigger;1:press key some time to trigger
+#define CONFIG_7S_RST_2KEY_MODE		0	//0:1Key--Normal mode; 1:2KEY
+#define CONFIG_7S_RST_THRESHOLD		7	//7S, hold key down for this time to trigger
+
+#define DT_ADR          0x85400000
+#define KERNEL_ADR      0x80008000
+#define VLX_TAG_ADDR    0x82000100
+#define RAMDISK_ADR     0x85500000
+#define CONFIG_SPRD_VBAT_CHEK
+#define CONFIG_USB_DOWNLOAD
+#define CONFIG_DWC_OTG
+#define CONFIG_ARM32
+#define CONFIG_ARCH_SHARK
+#define CONFIG_PREBOOT "role"
+#define CONFIG_BOARD_LATE_INIT
+
+
+
+/*rf board id */
+
+#define RF_BAND_INFO
+
+#ifdef RF_BAND_INFO
+#define LB_GPIO_NUM 			134
+#define MB_GPIO_NUM 			135
+//#define HB_GPIO_NUM 			0
+//#define ADC_CHANNEL_FOR_NV		0
+#endif
+
+
+/* Chip Driver Macro Definitions Start*/
+/*sprd adc*/
+#define CONFIG_SPRD_ADC
+
+/*sprd adi*/
+#define CONFIG_SPRD_ADI
+
+/*sprd gpio*/
+#define CONFIG_SPRD_GPIO
+
+/*sprd rtc*/
+#define CONFIG_RTC_SPRD
+
+/*sprd watchdog*/
+#define CONFIG_HW_WATCHDOG
+#define CONFIG_SPRD_WATCHDOG
+
+ /*Serial Info*/
+#define CONFIG_SPRD_UART		1
+#define CONFIG_SYS_SC8800X_UART1	1
+#define CONFIG_CONS_INDEX	1	/* use UART0 for console */
+#define CONFIG_BAUDRATE		115200	/* Default baud rate */
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+#define CONFIG_SPRD_UART_PORTS	{ (void *) (CONFIG_SYS_SERIAL0), (void *) (CONFIG_SYS_SERIAL1) }
+#define CONFIG_SYS_SERIAL0		0x70000000
+#define CONFIG_SYS_SERIAL1		0x70100000
+
+/* Chip Driver Macro Definitions End*/
+/*active arm7 ram before access to it*/
+#define CONFIG_ARM7_RAM_ACTIVE
+
+#define CONFIG_SPRD_EXT_IC_POWER
+#define CONFIG_FAN54015_CHARGE_IC
+#define CONFIG_SYS_I2C
+#define CONFIG_SPRD_I2C
+
+#endif /* __CONFIG_H */
+
Index: u-boot64/include/configs/sp9832a_2h12_volte.h
===================================================================
--- u-boot64/include/configs/sp9832a_2h12_volte.h	(revision 0)
+++ u-boot64/include/configs/sp9832a_2h12_volte.h	(revision 182160)
@@ -0,0 +1,422 @@
+/*
+ * (C) Copyright 2009 DENX Software Engineering
+ * Author: John Rigby <jrigby@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include "sprd_sharkl_modem_volte.h"
+
+//#define CONFIG_SECURE_BOOT
+//#define CONFIG_ROM_VERIFY_SPL
+
+#define PRIMPUKPATH "/dev/block/mmcblk0boot0"
+#define PRIMPUKSTART 512
+#define PRIMPUKLEN   260
+/* Flat Device Tree Definitions */
+#define CONFIG_OF_LIBFDT
+
+
+#define DT_PLATFROM_ID 8830
+#define DT_HARDWARE_ID 1
+#define DT_SOC_VER     0x20000
+
+//only used in fdl2 .in uart download, the debug infors  from  serial will break the download process.
+
+#define BOOT_NATIVE_LINUX_MODEM  1
+#define CONFIG_SILENT_CONSOLE
+#define CONFIG_SRAM_REPAIR
+
+#define SECURE_TOS_SIZE 0x00100000
+#ifdef CONFIG_WITH_VMM
+#define SECURE_TOS_ADDR 0xFD800000
+#else
+#define SECURE_TOS_ADDR 0x96000000
+#endif
+
+/* It's defined in config.mk when required */
+#ifdef CONFIG_WITH_VMM
+#define VMM_SIZE 0x100000
+#define VMM_ADDR 0xFF800000
+#define VMM_SIZE_RT 0x5D0000    /* VMM runtime memory size */
+#define VMM_ADDR_RT 0xFF830000  /* VMM runtime memory base */
+#endif
+/*
+ * SPREADTRUM BIGPHONE board - SoC Configuration
+ */
+#define CONFIG_AUTODLOADER
+#define CONFIG_SP9830I
+#define CONFIG_SP9832A_2H11_VOLTE
+#define CONFIG_SC9630
+#define CONFIG_ADIE_SC2723
+//#define CONFIG_ARCH_SCX35L
+#define CONFIG_SPL_32K
+
+
+#define CONFIG_PMIC_ARM7_BOOT
+#define CONFIG_CP1_BOOT
+#define CHIP_ENDIAN_LITTLE
+#define _LITTLE_ENDIAN 1
+
+#define CONFIG_RAM512M
+
+#define CONFIG_EMMC_BOOT
+#define CONFIG_ARCH_SCX35L
+#define CONFIG_SPRD_MMC
+#define CONFIG_SUPPORT_EMMC_BOOT
+
+#ifdef  CONFIG_EMMC_BOOT
+#define EMMC_SECTOR_SIZE 512
+
+#define CONFIG_FS_EXT4
+#define CONFIG_EXT4_WRITE
+#define CONFIG_CMD_EXT4
+#define CONFIG_CMD_EXT4_WRITE
+
+#define CONFIG_FS_FAT
+#define CONFIG_UEFI_PARTITION
+#define CONFIG_EFI_PARTITION
+#define CONFIG_EXT4_SPARSE_DOWNLOAD
+#endif
+
+/*
+ * MMC definition
+ */
+#define CONFIG_CMD_MMC
+#ifdef  CONFIG_CMD_MMC
+#define CONFIG_CMD_FAT			1
+#define CONFIG_FAT_WRITE		1
+#define CONFIG_MMC			1
+#define CONFIG_GENERIC_MMC		1
+#define CONFIG_SDHCI			1
+#define CONFIG_SDHCI_CTRL_NO_HISPD 	1 /* disable high speed control */
+#define CONFIG_SYS_MMC_MAX_BLK_COUNT	0x1000
+#define CONFIG_MMC_SDMA			1
+#define CONFIG_MV_SDHCI			1
+#define CONFIG_DOS_PARTITION		1
+#define CONFIG_EFI_PARTITION		1
+#define CONFIG_SYS_MMC_NUM		1
+#endif
+
+
+
+#define CONFIG_SYS_HZ			1000
+#define CONFIG_SPRD_TIMER_CLK		1000 /*32768*/
+
+#define CP0_ZERO_MAP_ADR    0x50000000
+#define CP0_ARM0_EXEC_ADR        0x88400000
+
+#define CP1_ZERO_MAP_ADR    0x50001000
+#define CP1_EXEC_ADR        LTE_MODEM_ADDR
+
+
+#define MODEM_SIZE		(0x800000)
+#define DSP_SIZE		(0x2E0000)
+#define RUNTIMENV_SIZE		(3*128 * 1024)
+
+#ifdef CONFIG_ROM_VERIFY_SPL
+#define CONFIG_SPL_LOAD_LEN (0x8000)
+#define CONFIG_BOOTINFO_LENGTH (0x200)
+#define PUBKEY_BSC_BLOCK_INDEX (CONFIG_SPL_LOAD_LEN - CONFIG_BOOTINFO_LENGTH * 2) / EMMC_SECTOR_SIZE
+#define PUBKEY_VLR_BLOCK_INDEX 2
+#define PUBKEY_READ_BLOCK_NUMS 1
+#define CONFIG_SPL_HASH_LEN (0x400)
+#else
+#define CONFIG_SPL_LOAD_LEN	(0x6000)
+#endif
+
+
+//The macro deffined in config.mk of uboot 
+#ifdef SP9832A_2H11_32V4_VOLTE_LCD
+#define  CONFIG_FB_LOW_RES_SIMU
+#endif
+
+/*#define CMDLINE_NEED_CONV */
+
+
+#define CONFIG_SYS_SDRAM_BASE 0x80000000
+#define CONFIG_SYS_SDRAM_END (CONFIG_SYS_SDRAM_BASE + PHYS_SDRAM_1_SIZE)
+
+#define CONFIG_SYS_INIT_SP_ADDR     \
+	(CONFIG_SYS_SDRAM_END - 0x10000 - GENERATED_GBL_DATA_SIZE)
+
+#define CONFIG_SKIP_LOWLEVEL_INIT
+
+
+
+
+
+#define CONFIG_CMDLINE_TAG		1	/* enable passing of ATAGs */
+#define CONFIG_SETUP_MEMORY_TAGS	1
+#define CONFIG_INITRD_TAG		1
+
+/*
+ * Memory Info
+ */
+/* malloc() len */
+#define CONFIG_SYS_MALLOC_LEN           (CONFIG_ENV_SIZE + 5 * 1024 * 1024)
+/*
+ * Board has 2 32MB banks of DRAM but there is a bug when using
+ * both so only the first is configured
+ */
+#define CONFIG_NR_DRAM_BANKS	1
+
+#define PHYS_SDRAM_1		0x80000000
+#define PHYS_SDRAM_1_SIZE	0x20000000
+#if (CONFIG_NR_DRAM_BANKS == 2)
+#define PHYS_SDRAM_2		0x90000000
+#define PHYS_SDRAM_2_SIZE	0x10000000
+#endif
+/* 8MB DRAM test */
+#define CONFIG_SYS_MEMTEST_START	PHYS_SDRAM_1
+#define CONFIG_SYS_MEMTEST_END		(PHYS_SDRAM_1+0x0800000)
+#define CONFIG_STACKSIZE	(256 * 1024)	/* regular stack */
+
+/*
+ * Flash & Environment
+ */
+/* No NOR flash present */
+#define CONFIG_SYS_NO_FLASH	1
+#define CONFIG_ENV_IS_NOWHERE
+#define CONFIG_ENV_SIZE		(128 * 1024)
+/*
+#define	CONFIG_ENV_IS_IN_NAND
+#define	CONFIG_ENV_OFFSET	CONFIG_SYS_MONITOR_LEN
+#define CONFIG_ENV_OFFSET_REDUND	(CONFIG_ENV_OFFSET + CONFIG_ENV_SIZE)
+*/
+
+/* DDR */
+//#define DDR_CLK 464
+//---these three macro below,only one can be open
+//#define DDR_LPDDR1
+//#define DDR_LPDDR2
+//#define DDR_DDR3
+
+#define CONFIG_DDR_AUTO_DETECT
+#define CONFIG_NR_DRAM_BANKS_ADDR_IN_IRAM    0x1C00   /* IRAM store ddr info */
+
+//#define DDR_TYPE DRAM_LPDDR2_2CS_8G_X32
+//#define DDR_TYPE DRAM_LPDDR2_1CS_4G_X32
+//#define DDR_TYPE DRAM_LPDDR2_1CS_8G_X32
+//#define DDR_TYPE DRAM_LPDDR2_2CS_16G_X32
+//#define DDR_TYPE DRAM_DDR3_1CS_2G_X8_4P
+//#define DDR_TYPE DRAM_DDR3_1CS_4G_X16_2P
+
+//#define DDR3_DLL_ON TRUE
+//#define DLL_BYPASS
+//#define DDR_APB_CLK 128
+//#define DDR_DFS_SUPPORT
+//#define DDR_DFS_VAL_BASE 0X1c00
+
+//#define DDR_SCAN_SUPPORT
+//#define MEM_IO_DS LPDDR2_DS_40R
+
+//#define PUBL_LPDDR1_DS PUBL_LPDDR1_DS_48OHM
+//#define PUBL_LPDDR2_DS PUBL_LPDDR2_DS_40OHM
+//#define PUBL_DDR3_DS   PUBL_DDR3_DS_34OHM
+
+/* NAND */
+#define CONFIG_NAND_SC9630
+//#define CONFIG_SPRD_NAND_REGS_BASE	(0x21100000)
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define CONFIG_SYS_NAND_BASE		(0x21100000)
+
+
+#define CONFIG_CMD_MTDPARTS
+#define CONFIG_MTD_PARTITIONS
+#define CONFIG_MTD_DEVICE
+#define CONFIG_CMD_UBI
+#define CONFIG_RBTREE
+
+/* U-Boot general configuration */
+#define CONFIG_SYS_PROMPT	"=> "	/* Monitor Command Prompt */
+#define CONFIG_SYS_CBSIZE	1024	/* Console I/O Buffer Size  */
+/* Print buffer sz */
+#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + \
+		sizeof(CONFIG_SYS_PROMPT) + 16)
+#define CONFIG_SYS_MAXARGS	32	/* max number of command args */
+/* Boot Argument Buffer Size */
+#define CONFIG_SYS_BARGSIZE	CONFIG_SYS_CBSIZE
+#define CONFIG_SYS_LONGHELP
+
+
+
+
+#define CONFIG_BOOTDELAY	0
+
+
+#define CONFIG_LOADADDR		(CONFIG_SYS_TEXT_BASE - CONFIG_SYS_MALLOC_LEN - 4*1024*1024)	/* loadaddr env var */
+#define CONFIG_SYS_LOAD_ADDR	CONFIG_LOADADDR
+
+
+#define MTDIDS_DEFAULT "nand0=sprd-nand"
+#define MTDPARTS_DEFAULT "mtdparts=sprd-nand:256k(spl),512k(2ndbl),256k(params),512k(vmjaluna),10m(modem),3840k(fixnv),3840k(backupfixnv),5120k(dsp),3840k(runtimenv),10m(boot),10m(recovery),250m(system),180m(userdata),20m(cache),256k(misc),1m(boot_logo),1m(fastboot_logo),3840k(productinfo),512k(kpanic)"
+#define CONFIG_BOOTARGS "mem=512M loglevel=1 console=ttyS1,115200n8 init=/init " MTDPARTS_DEFAULT
+
+#define COPY_LINUX_KERNEL_SIZE	(0x600000)
+
+#define CONFIG_BOOTCOMMAND "cboot normal"
+#define	CONFIG_EXTRA_ENV_SETTINGS				""
+
+
+
+#define CONFIG_USB_GADGET_SC8800G
+#define CONFIG_USB_DWC
+#define CONFIG_USB_GADGET_DUALSPEED
+
+#define CONFIG_MODEM_CALIBERATE
+
+#define CONFIG_LCD
+#ifdef  CONFIG_LCD
+#define CONFIG_DSIH_VERSION_1P21A
+#define CONFIG_SPLASH_SCREEN
+#define LCD_BPP LCD_COLOR16
+//#define CONFIG_LCD_FWVGA
+#define CONFIG_LCD_720P
+#define CONFIG_CMD_BMP
+
+//#define CONFIG_FB_LCD_OTM8019A_MIPI
+#define CONFIG_FB_LCD_HX8394A_MIPI
+#define CONFIG_FB_LCD_ILI9881C_MIPI
+#ifdef  CONFIG_FB_LOW_RES_SIMU
+#define LCD_DISPLAY_WIDTH 480
+#define LCD_DISPLAY_HEIGHT 854
+#endif
+#define CONFIG_SYS_WHITE_ON_BLACK
+#ifdef  LCD_TEST_PATTERN
+#define CONSOLE_COLOR_RED 0xf800
+#define CONSOLE_COLOR_GREEN 0x07e0
+#define CONSOLE_COLOR_YELLOW 0x07e0
+#define CONSOLE_COLOR_BLUE 0x001f
+#define CONSOLE_COLOR_MAGENTA 0x001f
+#define CONSOLE_COLOR_CYAN 0x001f
+#endif
+#endif // CONFIG_LCD
+
+/*for sysdump*/
+#define CONFIG_FS_FAT
+#define CONFIG_SPRD_SYSDUMP
+#define CONFIG_RAMDUMP_NO_SPLIT 1	/* Don't split sysdump file */
+#define REAL_SDRAM_SIZE 0x40000000	/*dump 1G */
+
+
+#define CALIBRATE_ENUM_MS 3000
+#define CALIBRATE_IO_MS 2000
+
+//#define LOW_BAT_ADC_LEVEL 782 /*phone battery adc value low than this value will not boot up*/
+#define LOW_BAT_VOL            3400 /*phone battery voltage low than this value will not boot up*/
+#define LOW_BAT_VOL_CHG        3300    //3.3V charger connect
+
+#define PWR_KEY_DETECT_CNT 2 /*this should match the count of boot_pwr_check() function */
+#define ALARM_LEAD_SET_MS 0 /* time set for alarm boot in advancd */
+
+
+/*rf board id */
+#define RF_BAND_INFO
+#ifdef RF_BAND_INFO
+#define LB_GPIO_NUM   134
+#define MB_GPIO_NUM   135
+//#define HB_GPIO_NUM  0
+#define ADC_CHANNEL_FOR_NV  1
+#endif
+
+/* 32K LESS SUPPORT */
+#define CONFIG_32K_SPRD
+#ifdef CONFIG_32K_SPRD
+#define CONFIG_32K
+#endif
+
+
+/* #define CONFIG_SPRD_AUDIO_DEBUG */
+
+
+#define CONFIG_PBINT_7S_RESET_V1
+/*7S reset config*/
+#define CONFIG_7S_RST_MODULE_EN		1	//0:disable module; 1:enable module
+
+#define CONFIG_7S_RST_SW_MODE		1	//0:hw reset,1:arm reset,power keep on
+#define CONFIG_7S_RST_SHORT_MODE	1	//0:long press then release key to trigger;1:press key some time to trigger
+#define CONFIG_7S_RST_2KEY_MODE		0	//0:1Key--Normal mode; 1:2KEY
+#define CONFIG_7S_RST_THRESHOLD		7	//7S, hold key down for this time to trigger
+
+#define DT_ADR          0x85400000
+#define KERNEL_ADR      0x80008000
+#define VLX_TAG_ADDR    0x82000100
+#define RAMDISK_ADR     0x85500000
+#define CONFIG_SPRD_VBAT_CHEK
+#define CONFIG_USB_DOWNLOAD
+#define CONFIG_DWC_OTG
+#define CONFIG_ARM32
+#define CONFIG_ARCH_SHARK
+#define CONFIG_PREBOOT "role"
+#define CONFIG_BOARD_LATE_INIT
+
+
+
+/*rf board id */
+
+#define RF_BAND_INFO
+
+#ifdef RF_BAND_INFO
+#define LB_GPIO_NUM 			134
+#define MB_GPIO_NUM 			135
+//#define HB_GPIO_NUM 			0
+//#define ADC_CHANNEL_FOR_NV		0
+#endif
+
+
+/* Chip Driver Macro Definitions Start*/
+/*sprd adc*/
+#define CONFIG_SPRD_ADC
+
+/*sprd adi*/
+#define CONFIG_SPRD_ADI
+
+/*sprd gpio*/
+#define CONFIG_SPRD_GPIO
+
+/*sprd rtc*/
+#define CONFIG_RTC_SPRD
+
+/*sprd watchdog*/
+#define CONFIG_HW_WATCHDOG
+#define CONFIG_SPRD_WATCHDOG
+
+ /*Serial Info*/
+#define CONFIG_SPRD_UART		1
+#define CONFIG_SYS_SC8800X_UART1	1
+#define CONFIG_CONS_INDEX	1	/* use UART0 for console */
+#define CONFIG_BAUDRATE		115200	/* Default baud rate */
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+#define CONFIG_SPRD_UART_PORTS	{ (void *) (CONFIG_SYS_SERIAL0), (void *) (CONFIG_SYS_SERIAL1) }
+#define CONFIG_SYS_SERIAL0		0x70000000
+#define CONFIG_SYS_SERIAL1		0x70100000
+
+/* Chip Driver Macro Definitions End*/
+/*active arm7 ram before access to it*/
+#define CONFIG_ARM7_RAM_ACTIVE
+
+#define CONFIG_SPRD_EXT_IC_POWER
+#define CONFIG_FAN54015_CHARGE_IC
+#define CONFIG_SYS_I2C
+#define CONFIG_SPRD_I2C
+
+#endif /* __CONFIG_H */
+
Index: u-boot64/include/secureboot/sec_common.h
===================================================================
--- u-boot64/include/secureboot/sec_common.h	(revision 182159)
+++ u-boot64/include/secureboot/sec_common.h	(revision 182160)
@@ -21,7 +21,7 @@
 #if defined (CONFIG_WHALE)
 #define IRAM_BEGIN 0x00009e00
 #endif
-#if defined (CONFIG_SP7730SW) || defined (CONFIG_SP9832A_2H11_VOLTE)
+#if defined (CONFIG_SP7730SW) || defined (CONFIG_SP9832A_2H11_VOLTE) || defined (CONFIG_SP9832A_2H12_VOLTE)  || defined (CONFIG_SP9832A_7C10_VOLTE) || defined (CONFIG_SP9832A_7C20_VOLTE)
 #define IRAM_BEGIN 0x50000000
 #endif
 
