Index: packages/apps/Launcher3/Android.mk
===================================================================
--- packages/apps/Launcher3/Android.mk	(revision 175395)
+++ packages/apps/Launcher3/Android.mk	(revision 175396)
@@ -17,6 +17,14 @@
 LOCAL_PATH := $(call my-dir)
 
 #
+# Prebuilt Launcher client library Libraries
+#
+include $(CLEAR_VARS)
+LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES := \
+    libLauncherClient:libs/launcher_client.jar
+include $(BUILD_MULTI_PREBUILT)
+
+#
 # Build app code.
 #
 include $(CLEAR_VARS)
@@ -25,7 +33,8 @@
 
 LOCAL_STATIC_JAVA_LIBRARIES := \
     android-support-v4 \
-    android-support-v7-recyclerview
+    android-support-v7-recyclerview \
+    libLauncherClient
 
 LOCAL_SRC_FILES := $(call all-java-files-under, src) \
     $(call all-java-files-under, WallpaperPicker/src) \
Index: packages/apps/Launcher3/src/com/android/launcher3/Launcher.java
===================================================================
--- packages/apps/Launcher3/src/com/android/launcher3/Launcher.java	(revision 175395)
+++ packages/apps/Launcher3/src/com/android/launcher3/Launcher.java	(revision 175396)
@@ -119,9 +119,9 @@
 import com.android.launcher3.widget.PendingAddWidgetInfo;
 import com.android.launcher3.widget.WidgetHostViewLoader;
 import com.android.launcher3.widget.WidgetsContainerView;
+import com.android.searchlauncher.SearchLauncherCallbacks;
 import com.sprd.PlatformHelper;
 import com.sprd.ext.FeatureOption;
-import com.sprd.ext.LauncherExtCallbacks;
 import com.sprd.ext.LogUtils;
 import com.sprd.ext.ShakeSensorDetector;
 import com.sprd.ext.SprdSettingsActivity;
@@ -360,7 +360,7 @@
 
     private final ArrayList<Integer> mSynchronouslyBoundPages = new ArrayList<Integer>();
     private static final boolean DISABLE_SYNCHRONOUS_BINDING_CURRENT_PAGE = false;
-    private static final boolean FAST_LOADER = false;//true
+    private static final boolean FAST_LOADER = true;
 
     static final ArrayList<String> sDumpLogs = new ArrayList<String>();
     static Date sDateStamp = new Date();
@@ -457,7 +457,6 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        setLauncherCallbacks(new LauncherExtCallbacks(this));
         if (DEBUG_STRICT_MODE) {
             StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                     .detectDiskReads()
@@ -485,6 +484,7 @@
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
                 int currentScreen = mSharedPrefs.getInt(RUNTIME_STATE_CURRENT_SCREEN, 0);
+                mModel.resetLoadedState(true, true);
                 mModel.startLoader(currentScreen);
             }
         }
@@ -534,6 +534,10 @@
 
         setContentView(R.layout.launcher);
 
+        if (FeatureOption.SPRD_CUSTOM_CONTENT_SUPPORT) {
+            setLauncherCallbacks(new SearchLauncherCallbacks(this));
+        }
+
         app.getInvariantDeviceProfile().landscapeProfile.setSearchBarHeight(getSearchBarHeight());
         app.getInvariantDeviceProfile().portraitProfile.setSearchBarHeight(getSearchBarHeight());
         setupViews();
@@ -986,7 +990,7 @@
     /** @Override for MNC */
     public void onRequestPermissionsResult(int requestCode, String[] permissions,
             int[] grantResults) {
-        UnreadInfoManager.getInstance(this).handleRequestPermissionResult(
+        UnreadInfoManager.getInstance(this).handleRequestPermissionResult(requestCode,
                 permissions, grantResults);
 
         if (requestCode == REQUEST_PERMISSION_CALL_PHONE && sPendingAddItem != null
@@ -1245,10 +1249,6 @@
             mLauncherCallbacks.onResume();
         }
 
-        if (!isWorkspaceVisible()){
-            mPageIndicators.setVisibility(View.INVISIBLE);
-        }
-
         if (FeatureOption.SPRD_BGTRANSPARENT_SUPPORT) {
             if (isAllAppsVisible()) {
                 hideWorkspaceSearchAndHotseat();
@@ -3127,6 +3127,12 @@
      */
     protected void onClickSettingsButton(View v) {
         if (LOGD) Log.d(TAG, "onClickSettingsButton");
+        if(FeatureOption.SPRD_SETTINGS_ACTIVITY_SUPPORT){
+            startActivity(new Intent(this, SprdSettingsActivity.class));
+        }else{
+            startActivity(new Intent(Settings.ACTION_SETTINGS));
+            return;
+        }
         if (mLauncherCallbacks != null) {
             mLauncherCallbacks.onClickSettingsButton(v);
         }
@@ -3741,6 +3747,8 @@
         // Change the state *after* we've called all the transition code
         mState = State.WORKSPACE;
 
+        mPageIndicators.setVisibility(View.VISIBLE);
+
         // Resume the auto-advance of widgets
         mUserPresent = true;
         updateAutoAdvanceState();
@@ -3844,6 +3852,8 @@
             mStateTransitionAnimation.startAnimationToWidgets(mWorkspace.getState(), animated);
         }
 
+        mPageIndicators.setVisibility(View.INVISIBLE);
+
         // Change the state *after* we've called all the transition code
         mState = toState;
 
@@ -3930,6 +3940,13 @@
      * resumed.
      */
     private void tryAndUpdatePredictedApps() {
+        if (mPredictedAppController != null) {
+            List<ComponentKey> apps = mPredictedAppController.getCurrentPredictedList();
+            if (apps != null) {
+                mAppsView.setPredictedApps(apps);
+            }
+            return;
+        }
         if (mLauncherCallbacks != null) {
             List<ComponentKey> apps = mLauncherCallbacks.getPredictedApps();
             if (apps != null) {
@@ -4179,7 +4196,10 @@
 
         // Create the custom content page (this call updates mDefaultScreen which calls
         // setCurrentPage() so ensure that all pages are added before calling this).
-        //move to Callback.finishBindingItems()
+        if (hasCustomContentToLeft()) {
+            mWorkspace.createCustomContentContainer();
+            populateCustomContentContainer();
+        }
     }
 
     @Override
@@ -4567,7 +4587,9 @@
             mWorkspace.post(new Runnable() {
                 @Override
                 public void run() {
-                    mWorkspace.snapToScreenId(screenId);
+                    if (mWorkspace != null) {
+                        mWorkspace.snapToScreenId(screenId);
+                    }
                 }
             });
             sPendingAddItem = null;
@@ -5411,7 +5433,9 @@
                             + ", start = " + start);
                 }
 
-                mDynamicIconUtils.updateComponentDynamicIconChanged(component);
+                if (mDynamicIconUtils != null) {
+                    mDynamicIconUtils.updateComponentDynamicIconChanged(component);
+                }
 
                 if (LogUtils.DEBUG_PERFORMANCE) {
                     LogUtils.d(TAG, "bindComponentDynamicIconChanged end: current time = "
@@ -5444,7 +5468,9 @@
                     LogUtils.d(TAG, "bindWorkspaceDynamicInfo begin: start = " + start);
                 }
 
-                mDynamicIconUtils.updateShortcutsAndFoldersDynamicIcon();
+                if (mDynamicIconUtils != null) {
+                    mDynamicIconUtils.updateShortcutsAndFoldersDynamicIcon();
+                }
 
                 if (LogUtils.DEBUG_PERFORMANCE) {
                     LogUtils.d(TAG, "bindWorkspaceDynamicInfo end: current time = "
Index: packages/apps/Launcher3/src/com/android/launcher3/util/ComponentKey.java
===================================================================
--- packages/apps/Launcher3/src/com/android/launcher3/util/ComponentKey.java	(revision 175395)
+++ packages/apps/Launcher3/src/com/android/launcher3/util/ComponentKey.java	(revision 175396)
@@ -81,4 +81,12 @@
         ComponentKey other = (ComponentKey) o;
         return other.componentName.equals(componentName) && other.user.equals(user);
     }
+
+    /**
+     * Encodes a component key as a string of the form [flattenedComponentString#userId].
+     */
+    @Override
+    public String toString() {
+        return componentName.flattenToShortString() + "#" + user;
+    }
 }
\ No newline at end of file
Index: packages/apps/Launcher3/src/com/android/launcher3/PagedView.java
===================================================================
--- packages/apps/Launcher3/src/com/android/launcher3/PagedView.java	(revision 175395)
+++ packages/apps/Launcher3/src/com/android/launcher3/PagedView.java	(revision 175396)
@@ -1859,6 +1859,7 @@
             if (mTouchState == TOUCH_STATE_SCROLLING) {
                 final int activePointerId = mActivePointerId;
                 final int pointerIndex = ev.findPointerIndex(activePointerId);
+                if (pointerIndex == -1) return true;
                 final float x = ev.getX(pointerIndex);
                 final VelocityTracker velocityTracker = mVelocityTracker;
                 velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
Index: packages/apps/Launcher3/src/com/android/searchlauncher/OverlayCallbackImpl.java
===================================================================
--- packages/apps/Launcher3/src/com/android/searchlauncher/OverlayCallbackImpl.java	(revision 0)
+++ packages/apps/Launcher3/src/com/android/searchlauncher/OverlayCallbackImpl.java	(revision 175396)
@@ -0,0 +1,82 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.searchlauncher;
+
+import com.android.launcher3.Launcher;
+import com.android.launcher3.Launcher.LauncherOverlay;
+import com.android.launcher3.Launcher.LauncherOverlayCallbacks;
+import com.google.android.libraries.launcherclient.LauncherClient;
+import com.google.android.libraries.launcherclient.LauncherClientCallbacks;
+
+/**
+ * Implements {@link LauncherOverlay} and passes all the corresponding events to {@link
+ * LauncherClient}. {@see setClient}
+ *
+ * <p>Implements {@link LauncherClientCallbacks} and sends all the corresponding callbacks to {@link
+ * Launcher}.
+ */
+public class OverlayCallbackImpl implements LauncherOverlay, LauncherClientCallbacks {
+
+    private final Launcher mLauncher;
+
+    private LauncherClient mClient;
+    private LauncherOverlayCallbacks mLauncherOverlayCallbacks;
+    private boolean mWasOverlayAttached = false;
+
+    public OverlayCallbackImpl(Launcher launcher) {
+        mLauncher = launcher;
+    }
+
+    public void setClient(LauncherClient client) {
+        mClient = client;
+    }
+
+    @Override
+    public void onServiceStateChanged(boolean overlayAttached, boolean hotwordActive) {
+        if (overlayAttached != mWasOverlayAttached) {
+            mWasOverlayAttached = overlayAttached;
+            mLauncher.setLauncherOverlay(overlayAttached ? this : null);
+        }
+    }
+
+    @Override
+    public void onOverlayScrollChanged(float progress) {
+        if (mLauncherOverlayCallbacks != null) {
+            mLauncherOverlayCallbacks.onScrollChanged(progress);
+        }
+    }
+
+    @Override
+    public void onScrollInteractionBegin() {
+        mClient.startMove();
+    }
+
+    @Override
+    public void onScrollInteractionEnd() {
+        mClient.endMove();
+    }
+
+    @Override
+    public void onScrollChange(float progress, boolean rtl) {
+        mClient.updateMove(progress);
+    }
+
+    @Override
+    public void setOverlayCallbacks(LauncherOverlayCallbacks callbacks) {
+        mLauncherOverlayCallbacks = callbacks;
+    }
+}
\ No newline at end of file
Index: packages/apps/Launcher3/src/com/android/searchlauncher/SearchLauncherCallbacks.java
===================================================================
--- packages/apps/Launcher3/src/com/android/searchlauncher/SearchLauncherCallbacks.java	(revision 0)
+++ packages/apps/Launcher3/src/com/android/searchlauncher/SearchLauncherCallbacks.java	(revision 175396)
@@ -0,0 +1,307 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.searchlauncher;
+
+import android.appwidget.AppWidgetProviderInfo;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
+import android.graphics.Rect;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.view.Menu;
+import android.view.View;
+
+import com.android.launcher3.AppInfo;
+import com.android.launcher3.Launcher;
+import com.android.launcher3.LauncherCallbacks;
+import com.android.launcher3.SettingsActivity;
+import com.android.launcher3.allapps.AllAppsSearchBarController;
+import com.android.launcher3.util.ComponentKey;
+import com.google.android.libraries.launcherclient.LauncherClient;
+
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Implementation of {@link LauncherCallbacks} which integrates the Google -1 screen
+ * with launcher
+ */
+public class SearchLauncherCallbacks implements LauncherCallbacks, OnSharedPreferenceChangeListener {
+
+    private static final String KEY_ENABLE_MINUS_ONE = "pref_enable_minus_one";
+
+    private final Launcher mLauncher;
+
+    private OverlayCallbackImpl mOverlayCallbacks;
+    private LauncherClient mLauncherClient;
+
+    private boolean mStarted;
+    private boolean mResumed;
+    private boolean mAlreadyOnHome;
+
+    public SearchLauncherCallbacks(Launcher launcher) {
+        mLauncher = launcher;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mLauncher);
+        mOverlayCallbacks = new OverlayCallbackImpl(mLauncher);
+        mLauncherClient = new LauncherClient(mLauncher, mOverlayCallbacks,
+                preferences.getBoolean(KEY_ENABLE_MINUS_ONE, true));
+        mOverlayCallbacks.setClient(mLauncherClient);
+        preferences.registerOnSharedPreferenceChangeListener(this);
+    }
+
+    @Override
+    public void onDetachedFromWindow() {
+        mLauncherClient.onDetachedFromWindow();
+    }
+
+    @Override
+    public void onAttachedToWindow() {
+        mLauncherClient.onAttachedToWindow();
+    }
+
+    @Override
+    public void onHomeIntent() {
+        mLauncherClient.hideOverlay(mAlreadyOnHome);
+    }
+
+    @Override
+    public void onResume() {
+        mResumed = true;
+        if (mStarted) {
+            mAlreadyOnHome = true;
+        }
+        mLauncherClient.onResume();
+    }
+
+    @Override
+    public void onPause() {
+        mResumed = false;
+        mLauncherClient.onPause();
+    }
+
+    @Override
+    public void onStart() {
+        mStarted = true;
+    }
+
+    @Override
+    public void onStop() {
+        mStarted = false;
+        if (!mResumed) {
+            mAlreadyOnHome = false;
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        mLauncherClient.onDestroy();
+        PreferenceManager.getDefaultSharedPreferences(mLauncher)
+                .unregisterOnSharedPreferenceChangeListener(this);
+    }
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
+        if (KEY_ENABLE_MINUS_ONE.equals(key)) {
+            mLauncherClient.setOverlayEnabled(prefs.getBoolean(KEY_ENABLE_MINUS_ONE, true));
+        }
+    }
+
+    @Override
+    public void preOnCreate() { }
+
+    @Override
+    public void preOnResume() { }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) { }
+
+    @Override
+    public void onPostCreate(Bundle savedInstanceState) { }
+
+    @Override
+    public void onNewIntent(Intent intent) { }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) { }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) { }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasFocus) { }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        return false;
+    }
+
+    @Override
+    public void dump(String prefix, FileDescriptor fd, PrintWriter w, String[] args) { }
+
+    @Override
+    public boolean handleBackPressed() {
+        return false;
+    }
+
+    @Override
+    public void onTrimMemory(int level) { }
+
+    @Override
+    public void onLauncherProviderChange() { }
+
+    @Override
+    public void finishBindingItems(boolean upgradePath) { }
+
+    @Override
+    public void onClickAllAppsButton(View v) { }
+
+    @Override
+    public void bindAllApplications(ArrayList<AppInfo> apps) { }
+
+    @Override
+    public void onClickFolderIcon(View v) { }
+
+    @Override
+    public void onClickAppShortcut(View v) { }
+
+    @Override
+    public void onClickPagedViewIcon(View v) { }
+
+    @Override
+    public void onClickWallpaperPicker(View v) { }
+
+    @Override
+    public void onClickSettingsButton(View v) {
+        mLauncher.startActivity(new Intent(mLauncher, SettingsActivity.class));
+    }
+
+    @Override
+    public void onClickAddWidgetButton(View v) { }
+
+    @Override
+    public void onPageSwitch(View newPage, int newPageIndex) { }
+
+    @Override
+    public void onWorkspaceLockedChanged() { }
+
+    @Override
+    public void onDragStarted(View view) { }
+
+    @Override
+    public void onInteractionBegin() { }
+
+    @Override
+    public void onInteractionEnd() { }
+
+    @Override
+    public boolean providesSearch() {
+        return false;
+    }
+
+    @Override
+    public boolean startSearch(String initialQuery, boolean selectInitialQuery, Bundle appSearchData, Rect sourceBounds) {
+        return false;
+    }
+
+    @Override
+    public boolean startSearchFromAllApps(String query) {
+        return false;
+    }
+
+    @Override
+    public boolean hasCustomContentToLeft() {
+        return false;
+    }
+
+    @Override
+    public void populateCustomContentContainer() { }
+
+    @Override
+    public View getQsbBar() {
+        return null;
+    }
+
+    @Override
+    public Bundle getAdditionalSearchWidgetOptions() {
+        return new Bundle();
+    }
+
+    @Override
+    public Intent getFirstRunActivity() {
+        return null;
+    }
+
+    @Override
+    public boolean hasFirstRunActivity() {
+        return false;
+    }
+
+    @Override
+    public boolean hasDismissableIntroScreen() {
+        return false;
+    }
+
+    @Override
+    public View getIntroScreen() {
+        return null;
+    }
+
+    @Override
+    public boolean shouldMoveToDefaultScreenOnHomeIntent() {
+        return false;
+    }
+
+    @Override
+    public boolean hasSettings() {
+        return true;
+    }
+
+    @Override
+    public boolean overrideWallpaperDimensions() {
+        return false;
+    }
+
+    @Override
+    public boolean isLauncherPreinstalled() {
+        return false;
+    }
+
+    @Override
+    public AllAppsSearchBarController getAllAppsSearchBarController() {
+        return null;
+    }
+
+    @Override
+    public List<ComponentKey> getPredictedApps() {
+        return null;
+    }
+
+    @Override
+    public int getSearchBarHeight() {
+        return SEARCH_BAR_HEIGHT_NORMAL;
+    }
+
+    @Override
+    public void setLauncherSearchCallback(Object callbacks) { }
+}
Index: packages/apps/Launcher3/libs/launcher_client.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Launcher3/libs/launcher_client.jar
===================================================================
--- packages/apps/Launcher3/libs/launcher_client.jar	(revision 0)
+++ packages/apps/Launcher3/libs/launcher_client.jar	(revision 175396)

Property changes on: packages/apps/Launcher3/libs/launcher_client.jar
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Launcher3/build.gradle
===================================================================
--- packages/apps/Launcher3/build.gradle	(revision 175395)
+++ packages/apps/Launcher3/build.gradle	(revision 175396)
@@ -60,6 +60,7 @@
     compile 'com.android.support:support-v4:24.+'
     compile 'com.android.support:recyclerview-v7:24.+'
     compile 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-2'
+    compile files('libs/launcher_client.jar')
 
     testCompile 'junit:junit:4.12'
     androidTestCompile 'com.android.support.test:runner:0.5'
Index: packages/apps/Launcher3/ext/src/com/sprd/ext/LauncherExtCallbacks.java
===================================================================
--- packages/apps/Launcher3/ext/src/com/sprd/ext/LauncherExtCallbacks.java	(revision 175395)
+++ packages/apps/Launcher3/ext/src/com/sprd/ext/LauncherExtCallbacks.java	(revision 175396)
@@ -1,361 +0,0 @@
-package com.sprd.ext;
-
-import android.content.Intent;
-import android.graphics.Rect;
-import android.os.Bundle;
-import android.provider.Settings;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.View;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.FrameLayout;
-
-import com.android.launcher3.AppInfo;
-import com.android.launcher3.Launcher;
-import com.android.launcher3.Launcher.CustomContentCallbacks;
-import com.android.launcher3.LauncherCallbacks;
-import com.android.launcher3.R;
-import com.android.launcher3.allapps.AllAppsSearchBarController;
-import com.android.launcher3.util.ComponentKey;
-
-import java.io.FileDescriptor;
-import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * This class represents a very trivial LauncherExt. It primarily serves as a simple
- * class to exercise the LauncherOverlay interface.
- */
-public class LauncherExtCallbacks implements LauncherCallbacks {
-    private Launcher mLauncher;
-    private WebView mWebView;
-
-    public LauncherExtCallbacks(Launcher launcher) {
-        mLauncher = launcher;
-    }
-
-    @Override
-    public void preOnCreate() {
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-    }
-
-    @Override
-    public void preOnResume() {
-    }
-
-    @Override
-    public void onResume() {
-    }
-
-    @Override
-    public void onStart() {
-    }
-
-    @Override
-    public void onStop() {
-    }
-
-    @Override
-    public void onPause() {
-    }
-
-    @Override
-    public void onDestroy() {
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-    }
-
-    @Override
-    public void onPostCreate(Bundle savedInstanceState) {
-    }
-
-    @Override
-    public void onNewIntent(Intent intent) {
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-    }
-
-    @Override
-    public void onRequestPermissionsResult(int requestCode, String[] permissions,
-            int[] grantResults) {
-    }
-
-    @Override
-    public void onWindowFocusChanged(boolean hasFocus) {
-    }
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        return false;
-    }
-
-    @Override
-    public void dump(String prefix, FileDescriptor fd, PrintWriter w, String[] args) {
-    }
-
-    @Override
-    public void onHomeIntent() {
-    }
-
-    @Override
-    public boolean handleBackPressed() {
-
-        if(FeatureOption.SPRD_CUSTOM_CONTENT_SUPPORT
-                && mLauncher.getWorkspace().isCustomContentShowing()){
-            updateWebView(true);
-        }
-
-        return false;
-    }
-
-    @Override
-    public void onTrimMemory(int level) {
-    }
-
-    @Override
-    public void onLauncherProviderChange() {
-    }
-
-    @Override
-    public void finishBindingItems(boolean upgradePath) {
-        if (hasCustomContentToLeft()) {
-            mLauncher.getWorkspace().createCustomContentContainer();
-            populateCustomContentContainer();
-        }
-    }
-
-    @Override
-    public void onClickAllAppsButton(View v) {
-    }
-
-    @Override
-    public void bindAllApplications(ArrayList<AppInfo> apps) {
-    }
-
-    @Override
-    public void onClickFolderIcon(View v) {
-    }
-
-    @Override
-    public void onClickAppShortcut(View v) {
-    }
-
-    @Override
-    public void onClickPagedViewIcon(View v) {
-    }
-
-    @Override
-    public void onClickWallpaperPicker(View v) {
-    }
-
-    @Override
-    public void onClickSettingsButton(View v) {
-        if(FeatureOption.SPRD_SETTINGS_ACTIVITY_SUPPORT){
-            mLauncher.startActivity(new Intent(mLauncher, SprdSettingsActivity.class));
-        }else{
-            mLauncher.startActivity(new Intent(Settings.ACTION_SETTINGS));
-        }
-    }
-
-    @Override
-    public void onClickAddWidgetButton(View v) {
-    }
-
-    @Override
-    public void onPageSwitch(View newPage, int newPageIndex) {
-    }
-
-    @Override
-    public void onWorkspaceLockedChanged() {
-    }
-
-    @Override
-    public void onDragStarted(View view) {
-    }
-
-    @Override
-    public void onInteractionBegin() {
-    }
-
-    @Override
-    public void onInteractionEnd() {
-    }
-
-    @Override
-    public boolean providesSearch() {
-        return false;
-    }
-
-    @Override
-    public boolean startSearch(String initialQuery, boolean selectInitialQuery,
-            Bundle appSearchData, Rect sourceBounds) {
-        return false;
-    }
-
-    @Override
-    public boolean startSearchFromAllApps(String query) {
-        return false;
-    }
-
-    Launcher.CustomContentCallbacks mCustomContentCallbacks = new CustomContentCallbacks() {
-
-        // Custom content is completely shown. {@code fromResume} indicates whether this was caused
-        // by a onResume or by scrolling otherwise.
-        public void onShow(boolean fromResume) {
-            updateWebView(false);
-        }
-
-        // Custom content is completely hidden
-        public void onHide() {
-        }
-
-        // Custom content scroll progress changed. From 0 (not showing) to 1 (fully showing).
-        public void onScrollProgressChanged(float progress) {
-            if (mLauncher.getSearchDropTargetBar() != null) {
-                mLauncher.getSearchDropTargetBar().setX(mLauncher.getSearchBarBounds().width() * progress + 5);
-                mLauncher.getSearchDropTargetBar().setAlpha(1 - progress);
-            }
-        }
-
-        // Indicates whether the user is allowed to scroll away from the custom content.
-        public boolean isScrollingAllowed() {
-            return true;
-        }
-
-    };
-
-    @Override
-    public boolean hasCustomContentToLeft() {
-        return FeatureOption.SPRD_CUSTOM_CONTENT_SUPPORT;
-    }
-
-    @Override
-    public void populateCustomContentContainer() {
-        FrameLayout customContent = null;
-        try {
-            LayoutInflater inflater = LayoutInflater.from(mLauncher);
-            customContent = (FrameLayout) inflater.inflate(R.layout.custom_content, null);
-            if(customContent == null) return;
-            mWebView = (WebView) customContent.findViewById(R.id.web_view);
-            updateWebView(false);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        if (customContent != null) {
-            mLauncher.addToCustomContentPage(customContent, mCustomContentCallbacks, "");
-        }
-    }
-
-    @Override
-    public View getQsbBar() {
-        return null;
-    }
-
-    @Override
-    public Bundle getAdditionalSearchWidgetOptions() {
-        return new Bundle();
-    }
-
-    @Override
-    public Intent getFirstRunActivity() {
-        return null;
-    }
-
-    @Override
-    public boolean hasFirstRunActivity() {
-        return false;
-    }
-
-    @Override
-    public boolean hasDismissableIntroScreen() {
-        return false;
-    }
-
-    @Override
-    public View getIntroScreen() {
-        return null;
-    }
-
-    @Override
-    public boolean shouldMoveToDefaultScreenOnHomeIntent() {
-        return true;
-    }
-
-    @Override
-    public boolean hasSettings() {
-        return true;
-    }
-
-    @Override
-    public boolean overrideWallpaperDimensions() {
-        return false;
-    }
-
-    @Override
-    public AllAppsSearchBarController getAllAppsSearchBarController() {
-        return null;
-    }
-
-    @Override
-    public List<ComponentKey> getPredictedApps() {
-        if (mLauncher.mPredictedAppController != null) {
-            return mLauncher.mPredictedAppController.getCurrentPredictedList();
-        }
-        return new ArrayList<>();
-    }
-
-    @Override
-    public int getSearchBarHeight() {
-        return SEARCH_BAR_HEIGHT_NORMAL;
-    }
-
-    @Override
-    public boolean isLauncherPreinstalled() {
-        return true;
-    }
-
-    @Override
-    public void setLauncherSearchCallback(Object callbacks) {
-        // Do nothing
-    }
-
-    @Override
-    public void onAttachedToWindow() {
-    }
-
-    @Override
-    public void onDetachedFromWindow() {
-    };
-
-    private void updateWebView(boolean isBack){
-        if(mWebView == null) return;
-        if(mWebView.getUrl() != null && !mWebView.getUrl().isEmpty()){
-            if(isBack){
-                if(mWebView.canGoBack()) {
-                    mWebView.goBack();
-                }
-            }else {
-                mWebView.stopLoading();
-                mWebView.reload();
-            }
-        } else {
-            mWebView.loadUrl("https://www.google.com");
-            mWebView.setWebViewClient(new WebViewClient() {
-                @Override
-                public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                    view.loadUrl(url);
-                    return true;
-                }
-            });
-        }
-    }
-}
Index: packages/apps/Launcher3/ext/src/com/sprd/ext/customizeappsort/CustomizeAppSort.java
===================================================================
--- packages/apps/Launcher3/ext/src/com/sprd/ext/customizeappsort/CustomizeAppSort.java	(revision 175395)
+++ packages/apps/Launcher3/ext/src/com/sprd/ext/customizeappsort/CustomizeAppSort.java	(revision 175396)
@@ -98,6 +98,10 @@
             }
         }
 
+        if (sortedMaps.isEmpty()) {
+            return;
+        }
+
         LogUtils.d(TAG, "onSortApps, sortedMaps keys:" + sortedMaps.keySet().toString());
         if (LogUtils.DEBUG_ALL) {
             LogUtils.d(TAG, "onSortApps, sortedMaps:" + maps2String(sortedMaps));
Index: packages/apps/Launcher3/ext/src/com/sprd/ext/unreadnotifier/UnreadInfoManager.java
===================================================================
--- packages/apps/Launcher3/ext/src/com/sprd/ext/unreadnotifier/UnreadInfoManager.java	(revision 175395)
+++ packages/apps/Launcher3/ext/src/com/sprd/ext/unreadnotifier/UnreadInfoManager.java	(revision 175396)
@@ -178,30 +178,49 @@
         return null;
     }
 
-    public void handleRequestPermissionResult(String[] permissions,
+    public void handleRequestPermissionResult(int requestCode, String[] permissions,
                                               int[] grantResults) {
         if(LogUtils.DEBUG_UNREAD) {
             LogUtils.d(TAG, "handleRequestPermissionResult, onPermissionsResult counts: " + permissions.length + ":" + grantResults.length);
         }
 
-        for (int i = 0; i < ALL_DENIEDPERMISSION_ITEMS.size(); i++) {
-            UnreadBaseItem item = ALL_DENIEDPERMISSION_ITEMS.get(i);
-            if(grantResults.length > 0 && permissions.length >0 && item.mPermission.equals(permissions[i])) {
-                if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
+        ArrayList<UnreadBaseItem> grantedList = new ArrayList<>();
+        if(requestCode == PERMISSIONS_REQUEST_CODE) {
+            for (int i = 0; i < grantResults.length; i++) {
+                for(UnreadBaseItem item : ALL_DENIEDPERMISSION_ITEMS) {
+                    if(item.mPermission.equals(permissions[i])) {
+                        if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
+                            if(LogUtils.DEBUG_UNREAD) {
+                                LogUtils.d(TAG, "handleRequestPermissionResult, permission granted:" + item.mPermission);
+                            }
+                            item.mContentObserver.registerContentObserver();
+                            item.updateUIFromDatabase();
+                            grantedList.add(item);
+                        } else if (grantResults[i] == PackageManager.PERMISSION_DENIED){
+                            Toast.makeText(mContext, item.getUnreadHintString(), Toast.LENGTH_LONG).show();
+                            if(LogUtils.DEBUG_UNREAD) {
+                                LogUtils.d(TAG, "handleRequestPermissionResult, permission denied:" + item.mPermission);
+                            }
+                        }
+                    }
+                }
+            }
+        } else {
+            for(UnreadBaseItem item : ALL_DENIEDPERMISSION_ITEMS) {
+                if(item.checkPermission()) {
                     if(LogUtils.DEBUG_UNREAD) {
-                        LogUtils.d(TAG, "handleRequestPermissionResult, permission granted:" + item.mPermission);
+                        LogUtils.d(TAG, "handleRequestPermissionResult, permission granted for other requestCode:" + item.mPermission);
                     }
                     item.mContentObserver.registerContentObserver();
                     item.updateUIFromDatabase();
-                } else if (grantResults[i] == PackageManager.PERMISSION_DENIED){
-                    Toast.makeText(mContext, item.getUnreadHintString(), Toast.LENGTH_LONG).show();
-                    if(LogUtils.DEBUG_UNREAD) {
-                        LogUtils.d(TAG, "handleRequestPermissionResult, permission denied:" + item.mPermission);
-                    }
+                    grantedList.add(item);
                 }
             }
         }
-
+        //update all granted items
+        for (UnreadBaseItem item : grantedList) {
+            ALL_DENIEDPERMISSION_ITEMS.remove(item);
+        }
     }
 
     static void updateUI(final Context context, final String desComponentName) {
Index: packages/apps/Launcher3/AndroidManifest.xml
===================================================================
--- packages/apps/Launcher3/AndroidManifest.xml	(revision 175395)
+++ packages/apps/Launcher3/AndroidManifest.xml	(revision 175396)
@@ -94,7 +94,7 @@
             android:theme="@style/Theme"
             android:windowSoftInputMode="adjustPan"
             android:screenOrientation="nosensor"
-            android:configChanges="keyboard|keyboardHidden|navigation|screenSize|mcc|mnc"
+            android:configChanges="keyboard|keyboardHidden|navigation"
             android:resumeWhilePausing="true"
             android:taskAffinity=""
             android:enabled="true"
