Index: bootable/recovery/minui/graphics_fbdev.cpp
===================================================================
--- bootable/recovery/minui/graphics_fbdev.cpp	(revision 167742)
+++ bootable/recovery/minui/graphics_fbdev.cpp	(revision 167743)
@@ -33,13 +33,20 @@
 #include "minui.h"
 #include "graphics.h"
 
+/* SPRD: add for support rotate @{ */
+#include <utils/Log.h>
+//#include <cutils/properties.h>
+#include "cutils/properties.h"
+/* @} */
+
 static GRSurface* fbdev_init(minui_backend*);
 static GRSurface* fbdev_flip(minui_backend*);
 static void fbdev_blank(minui_backend*, bool);
 static void fbdev_exit(minui_backend*);
 
-static GRSurface gr_framebuffer[2];
+static GRSurface gr_framebuffer[3];
 static bool double_buffered;
+static bool three_buffered;
 static GRSurface* gr_draw = NULL;
 static int displayed_buffer;
 
@@ -53,6 +60,11 @@
     .exit = fbdev_exit,
 };
 
+/* SPRD: add for support rotate @{ */
+static int rotation = FB_ROTATE_UR;
+static GRSurface *gr_temp;
+/* @} */
+
 minui_backend* open_fbdev() {
     return &my_backend;
 }
@@ -68,8 +80,14 @@
 
 static void set_displayed_framebuffer(unsigned n)
 {
-    if (n > 1 || !double_buffered) return;
 
+    if (n > 2 || !(three_buffered || double_buffered))
+		return;
+
+    if (n > 1 && !three_buffered ) 
+		return;
+
+
 //    vi.yres_virtual = gr_framebuffer[0].height * 2;
     vi.yoffset = n * gr_framebuffer[0].height;
     vi.bits_per_pixel = gr_framebuffer[0].pixel_bytes * 8;
@@ -77,6 +95,7 @@
         perror("active fb swap failed");
     }
     displayed_buffer = n;
+		printf("set_displayed_framebuffer: %d\n", displayed_buffer);
 }
 
 static GRSurface* fbdev_init(minui_backend* backend) {
@@ -129,6 +148,20 @@
 
     memset(bits, 0, fi.smem_len);
 
+    /* SPRD: add for support rotate @{ */
+    //char rotate_str[PROPERTY_VALUE_MAX+1];
+	char rotate_str[60+1];
+    property_get("ro.sf.hwrotation", rotate_str, "0");
+
+    if (!strcmp(rotate_str, "90")) {
+        rotation = FB_ROTATE_CW;
+    } else if (!strcmp(rotate_str, "180")) {
+        rotation = FB_ROTATE_UD;
+    } else if (!strcmp(rotate_str, "270")) {
+        rotation = FB_ROTATE_CCW;
+    }
+    /* @} */
+
     gr_framebuffer[0].width = vi.xres;
     gr_framebuffer[0].height = vi.yres;
     gr_framebuffer[0].row_bytes = fi.line_length;
@@ -138,17 +171,46 @@
 
     /* check if we can use double buffering */
     if (vi.yres * fi.line_length * 2 <= fi.smem_len) {
+
         double_buffered = true;
-
+        three_buffered = false;
         memcpy(gr_framebuffer+1, gr_framebuffer, sizeof(GRSurface));
         gr_framebuffer[1].data = gr_framebuffer[0].data +
             gr_framebuffer[0].height * gr_framebuffer[0].row_bytes;
-
+        if (vi.yres * fi.line_length * 3 <= fi.smem_len) {
+            double_buffered = false;
+            three_buffered = true;
+            memcpy(gr_framebuffer+2, gr_framebuffer, sizeof(GRSurface));
+            gr_framebuffer[2].data = gr_framebuffer[0].data +
+                2 * gr_framebuffer[0].height * gr_framebuffer[0].row_bytes;
+        }
+        /* SPRD: add for support rotate @{
+         * @orig
         gr_draw = gr_framebuffer+1;
+         */
+        if (rotation == FB_ROTATE_UR) {
 
+            gr_draw = gr_framebuffer+( double_buffered ? 1 : 2 );
+        } else {
+            gr_temp = (GRSurface *) malloc(sizeof( GRSurface));
+            if((vi.rotate ^ rotation) & 1) {
+                gr_temp->width = vi.yres;
+                gr_temp->height = vi.xres;
+                gr_temp->row_bytes = vi.yres * vi.bits_per_pixel / 8;
+            } else {
+                gr_temp->width = vi.xres;
+                gr_temp->height = vi.yres;
+                gr_temp->row_bytes = fi.line_length;
+            }
+            gr_temp->pixel_bytes = vi.bits_per_pixel / 8;
+            gr_temp->data = (unsigned char*) malloc(gr_temp->height * gr_temp->row_bytes);
+            gr_draw = gr_temp;
+        }
+        /* @} */
+
     } else {
         double_buffered = false;
-
+   	 three_buffered = false;
         // Without double-buffering, we allocate RAM for a buffer to
         // draw in, and then "flipping" the buffer consists of a
         // memcpy from the buffer we allocated to the framebuffer.
@@ -161,7 +223,6 @@
             return NULL;
         }
     }
-
     memset(gr_draw->data, 0, gr_draw->height * gr_draw->row_bytes);
     fb_fd = fd;
     set_displayed_framebuffer(0);
@@ -174,14 +235,91 @@
     return gr_draw;
 }
 
+/* SPRD: add for support rotate @{ */
+void gr_rotate(GRSurface *dst_surface, GRSurface *src_surface)
+{
+    unsigned int  i,j;
+    unsigned int width, height;
+    /* copy data from the in-memory surface to the buffer we're about
+     * to make active. */
+    i = vi.xres * vi.yres;
+
+    //printf("entry %s:rotation=%d\n",__func__,rotation);
+    width = src_surface->width;
+    height = src_surface->height;
+
+    if (vi.bits_per_pixel == 16) {
+        unsigned short *out, *in;
+
+        out = (unsigned short *)dst_surface->data;
+        in = (unsigned short *)src_surface->data;
+
+        if (rotation == FB_ROTATE_UD) { //180
+            unsigned int size = width * height;
+            out += size - 1;
+
+            for (i = size; i--; )
+                *out-- = *in++;
+        } else if (rotation == FB_ROTATE_CW) { //90
+            unsigned int h = height - 1;
+            for (i = 0; i < height; i++)
+                for (j = 0; j < width; j++)
+                    out[height * j + h - i] = *in++;
+        } else if (rotation == FB_ROTATE_CCW) { //270
+            int w = width - 1;
+            for (i = 0; i < height; i++)
+                for (j = 0; j < width; j++)
+                    out[height * (w - j) + i] = *in++;
+        } else if (rotation == FB_ROTATE_UR) {
+            memcpy(out, in, width * height * 2);
+        }
+
+    } else {
+        unsigned int *out, *in;
+
+        out = (unsigned int *)dst_surface->data;
+        in = (unsigned int *)src_surface->data;
+
+        if (rotation == FB_ROTATE_UD) { //180
+            unsigned int size = width * height;
+            out += size - 1;
+
+            for (i = size; i--; )
+                *out-- = *in++;
+        } else if (rotation == FB_ROTATE_CW) { //90
+            unsigned int h = height - 1;
+            for (i = 0; i < height; i++)
+                for (j = 0; j < width; j++)
+                    out[height * j + h - i] = *in++;
+        } else if (rotation == FB_ROTATE_CCW) { //270
+            int w = width - 1;
+            for (i = 0; i < height; i++)
+                for (j = 0; j < width; j++)
+                    out[height * (w - j) + i] = *in++;
+        } else if (rotation == FB_ROTATE_UR) {
+            memcpy(out, in, width * height * 4);
+        }
+    }
+}
+/* @} */
+
 static GRSurface* fbdev_flip(minui_backend* backend __unused) {
-    if (double_buffered) {
+ if (double_buffered || three_buffered) {
+
         // Change gr_draw to point to the buffer currently displayed,
         // then flip the driver so we're displaying the other buffer
         // instead.
-        gr_draw = gr_framebuffer + displayed_buffer;
-        set_displayed_framebuffer(1-displayed_buffer);
+        if (rotation == FB_ROTATE_UR) {
+
+            gr_draw = gr_framebuffer + (double_buffered ? displayed_buffer : (displayed_buffer + 1) % 3 );
+        } else {
+
+            gr_rotate(&gr_framebuffer[double_buffered ? (1 - displayed_buffer) : (displayed_buffer + 1) % 3], gr_temp);
+        }
+        /* @} */
+        set_displayed_framebuffer( double_buffered ? (1 - displayed_buffer) : (displayed_buffer + 2) % 3);
     } else {
+
         // Copy from the in-memory surface to the framebuffer.
         memcpy(gr_framebuffer[0].data, gr_draw->data,
                gr_draw->height * gr_draw->row_bytes);
@@ -193,9 +331,15 @@
     close(fb_fd);
     fb_fd = -1;
 
-    if (!double_buffered && gr_draw) {
+    if (!(double_buffered || three_buffered) && gr_draw) {
+
         free(gr_draw->data);
         free(gr_draw);
     }
+	    if (rotation != FB_ROTATE_UR && (double_buffered || three_buffered )) {
+
+        free(gr_temp->data);
+        free(gr_temp);
+    }
     gr_draw = NULL;
 }
Index: bootable/recovery/minui/graphics.cpp
===================================================================
--- bootable/recovery/minui/graphics.cpp	(revision 167742)
+++ bootable/recovery/minui/graphics.cpp	(revision 167743)
@@ -394,6 +394,7 @@
 
     gr_flip();
     gr_flip();
+    gr_flip();
 
     return 0;
 }
