Index: packages/apps/FactoryMode/jni/engfetch.cpp
===================================================================
--- packages/apps/FactoryMode/jni/engfetch.cpp	(revision 0)
+++ packages/apps/FactoryMode/jni/engfetch.cpp	(revision 166460)
@@ -0,0 +1,520 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "factorymodeljni"
+#include <utils/Log.h>
+
+#include <stdio.h>
+
+#include<stdlib.h>
+
+#include "jni.h"
+
+//#include "engapi.h"
+
+#include <sys/stat.h>
+
+#define MAX_STRING_LEN 512
+#define MAX_INT_LEN 33
+#define PATIENCE 10000
+
+#define INPUT_PATH "/sys/class/input/input"
+#define NUMBER_OF_INPUTS_TO_SCAN 20
+
+#define DATA_FILENAME "f54/report_data"
+#define DO_PREPARATION_FILENAME "f54/do_preparation"
+#define RESUME_TOUCH_FILENAME "f54/resume_touch"
+#define REPORT_TYPE_FILENAME "f54/report_type"
+#define GET_REPORT_FILENAME "f54/get_report"
+#define REPORT_SIZE_FILENAME "f54/report_size"
+#define STATUS_FILENAME "f54/status"
+#define RX_ELECTRODES_FILENAME "f54/num_of_mapped_rx"
+#define TX_ELECTRODES_FILENAME "f54/num_of_mapped_tx"
+#define RESET_FILENAME "reset"
+#define DETECT_FILENAME "buildid"
+
+char mySensor[MAX_STRING_LEN];
+char input_detect[MAX_STRING_LEN];
+
+
+enum report_types {
+	F54_Full_Raw_Capacitance_Test = 20,
+	F54_TRx_TRx_and_TRx_Vdd_Short_Test = 37,
+	F54_Bonding_Pad_Active_Guard_Open_Test = 48,
+};
+
+
+static jint tp_init(JNIEnv* env, jobject clazz){
+	int ii;
+	struct stat st;
+	int retval;
+	int found = 0;
+	for (ii = 0; ii < NUMBER_OF_INPUTS_TO_SCAN; ii++) {
+		memset(input_detect, 0x00, MAX_STRING_LEN);
+		snprintf(input_detect, MAX_STRING_LEN, "%s%d/%s", INPUT_PATH,
+				(unsigned int)ii, DETECT_FILENAME);
+		retval = stat(input_detect, &st);
+		if (retval == 0) {
+			snprintf(mySensor, MAX_STRING_LEN, "%s%d", INPUT_PATH,
+					(unsigned int)ii);
+			found = 1;
+			ALOGE("find driver mySensor=%s ", mySensor);
+			break;
+		}
+	}
+
+	if (!found) {
+		ALOGE("ERROR: input driver not found\n ");
+		return -1;
+	}
+	return 0;
+}
+
+
+static void ReadBinData(char *fname, unsigned char *buf, int len)
+{
+	int numBytesRead;
+	FILE *fp;
+
+	fp = fopen(fname, "r");
+	if (!fp) {
+		ALOGE("ERROR: failed to open %s for reading data\n", fname);
+		return ;
+	}
+
+	numBytesRead = fread(buf, 1, len, fp);
+
+	if (numBytesRead != len) {
+		ALOGE("ERROR: failed to read all data from bin file\n");
+		fclose(fp);
+		return ;
+	}
+
+	fclose(fp);
+
+	return;
+}
+
+static void WriteValueToFp(FILE *fp, unsigned int value)
+{
+	int numBytesWritten;
+	char buf[MAX_INT_LEN];
+
+	snprintf(buf, MAX_INT_LEN, "%u", value);
+
+	fseek(fp, 0, 0);
+
+	numBytesWritten = fwrite(buf, 1, strlen(buf) + 1, fp);
+	if (numBytesWritten != ((int)(strlen(buf) + 1))) {
+		ALOGE("ERROR: failed to write value to file pointer\n");
+		fclose(fp);
+		return;
+	}
+
+	return;
+}
+
+static void WriteValueToSysfsFile(char *fname, unsigned int value)
+{
+	FILE *fp;
+
+	fp = fopen(fname, "w");
+	if (!fp) {
+		ALOGE("ERROR: failed to open %s for writing value\n", fname);
+		fclose(fp);
+		return;
+	}
+
+	WriteValueToFp(fp, value);
+
+	fclose(fp);
+
+	return;
+}
+
+static void ReadValueFromFp(FILE *fp, unsigned int *value)
+{
+	int retVal;
+	char buf[MAX_INT_LEN];
+
+	fseek(fp, 0, 0);
+
+	retVal = fread(buf, 1, sizeof(buf), fp);
+	if (retVal == -1) {
+		ALOGE("ERROR: failed to read value from file pointer\n");
+		return;
+	}
+
+	*value = strtoul(buf, NULL, 0);
+
+	return;
+}
+
+
+static void ReadBlockData(char *buf, int len)
+{
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, DATA_FILENAME);
+
+	ReadBinData(tmpfname, (unsigned char *)buf, len);
+
+	return;
+}
+
+static void DoPreparation(int value)
+{
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, DO_PREPARATION_FILENAME);
+
+	WriteValueToSysfsFile(tmpfname, value);
+
+	return;
+}
+
+static void ResumeTouch(int value)
+{
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, RESUME_TOUCH_FILENAME);
+
+	WriteValueToSysfsFile(tmpfname, value);
+
+	return;
+}
+
+static void SetReportType(int value)
+{
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, REPORT_TYPE_FILENAME);
+
+	WriteValueToSysfsFile(tmpfname, value);
+
+	return;
+}
+
+static void GetReport(int value)
+{
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, GET_REPORT_FILENAME);
+
+	WriteValueToSysfsFile(tmpfname, value);
+
+	return;
+}
+
+static void ReadValueFromSysfsFile(char *fname, unsigned int *value)
+{
+	FILE *fp;
+
+	fp = fopen(fname, "r");
+	if (!fp) {
+		ALOGE("ERROR: failed to open %s for reading value\n", fname);
+		fclose(fp);
+		return ;
+	}
+
+	ReadValueFromFp(fp, value);
+
+	fclose(fp);
+
+	return;
+}
+
+static int ReadReportSize(void)
+{
+	unsigned int reportSize;
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, REPORT_SIZE_FILENAME);
+
+	ReadValueFromSysfsFile(tmpfname, &reportSize);
+
+	return reportSize;
+}
+
+static int GetStatus(void)
+{
+	unsigned int status;
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, STATUS_FILENAME);
+
+	ReadValueFromSysfsFile(tmpfname, &status);
+
+	return status;
+}
+
+static int GetRxElectrodes(void)
+{
+	unsigned int rx_electrodes;
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, RX_ELECTRODES_FILENAME);
+
+	ReadValueFromSysfsFile(tmpfname, &rx_electrodes);
+
+	return rx_electrodes;
+}
+
+static int GetTxElectrodes(void)
+{
+	unsigned int tx_electrodes;
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, TX_ELECTRODES_FILENAME);
+
+	ReadValueFromSysfsFile(tmpfname, &tx_electrodes);
+
+	return tx_electrodes;
+}
+
+static void DoReset(int value)
+{
+	char tmpfname[MAX_STRING_LEN];
+
+	snprintf(tmpfname, MAX_STRING_LEN, "%s/%s", mySensor, RESET_FILENAME);
+
+	WriteValueToSysfsFile(tmpfname, value);
+
+	return;
+}
+
+static jint lets_test(JNIEnv* env, jobject clazz, jbyteArray data,jintArray order,int type){
+
+	int patience = PATIENCE;
+	int report_size = 0;
+	int* orders = env->GetIntArrayElements(order,NULL);
+	if(orders==NULL){
+		ALOGE("ERROR: unable to get int byte array.\n");
+		return -1;
+	}
+	orders[0] = GetRxElectrodes();
+	orders[1] = GetTxElectrodes();
+	ALOGE("rx:%d,tx:%d \n",orders[0],orders[1]);
+	
+
+    char* dataBytes = (char*)env->GetByteArrayElements(data, NULL);
+    if (dataBytes == NULL) {
+		ALOGE("ERROR: unable to get java byte array.\n");
+        return -1;
+    }
+	ALOGE("type:%d \n",type);
+	DoPreparation(1);
+	SetReportType(type);
+	GetReport(1);
+	ALOGE("start to wait the report\n");
+	do {
+		if (GetStatus() == 0)
+			break;
+		} while (--patience > 0);
+	report_size = ReadReportSize();
+	if (report_size == 0) {
+		ALOGE("ERROR: unable to read report\n");
+		DoReset(1);
+		return -1;
+	}
+
+
+	ReadBlockData((char *)&dataBytes[0], report_size);
+	//ResumeTouch(1);
+	DoReset(1);
+	return report_size;
+}
+
+/*
+static jint
+add(JNIEnv *env, jobject thiz, jint a, jint b) {
+int result = a + b;
+    LOGI("%d + %d = %d", a, b, result);
+    return result;
+}
+*/
+
+/*
+static jint engf_open(JNIEnv* env, jobject obj, int type)
+{
+	int s = engapi_open(type);
+	ALOGE("engf_open = %d, type = %d", s, type);	
+	return s;
+}
+
+static void engf_close(JNIEnv* env, jobject obj, jint fd)
+{
+	engapi_close(fd);
+}
+
+static jint
+engf_write(JNIEnv* env, jobject clazz, int w, jbyteArray data, int size)//writeEntityData_native
+{
+    int err=0;
+
+    if (env->GetArrayLength(data) < size) {
+        // size mismatch
+        return -1;
+    }
+
+    jbyte* dataBytes = env->GetByteArrayElements(data, NULL);
+    if (dataBytes == NULL) {
+        return -1;
+    }
+
+    //err = writer->WriteEntityData(dataBytes, size);
+	err = engapi_write(w,dataBytes,size);
+	ALOGE("engf_write ret=%d,size=%d", err,size);
+	
+    env->ReleaseByteArrayElements(data, dataBytes, JNI_ABORT);
+
+    return err;
+}
+
+static jint
+engf_read(JNIEnv* env, jobject clazz, int r, jbyteArray data, int size)//readEntityData_native
+{
+    int err=0;
+
+    if (env->GetArrayLength(data) < (size)) {
+        // size mismatch
+        return -1;
+    }
+
+    jbyte* dataBytes = env->GetByteArrayElements(data, NULL);
+    if (dataBytes == NULL) {
+        return -2;
+    }
+
+    //err = reader->ReadEntityData(dataBytes+offset, size);
+	//err = eng_read(r,dataBytes,size);
+	err = engapi_read(r,dataBytes,size);
+	ALOGE("engf_read err=%d,size=%d,%s", err,size,dataBytes);
+    env->ReleaseByteArrayElements(data, dataBytes, 0);
+
+    return err;
+}
+
+static jint
+engf_getphasecheck(JNIEnv* env, jobject clazz, jbyteArray data, int size)
+{
+    int ret = 0;
+
+    if (env->GetArrayLength(data) < (size)) {
+        ALOGE("engf_getphasecheck size error");
+        return 0;
+    }
+
+    jbyte* dataBytes = env->GetByteArrayElements(data, NULL);
+    if (dataBytes == NULL) {
+        ALOGE("engf_getphasecheck dataBytes is NULL");
+        return 0;
+    }
+
+    ret = engapi_getphasecheck(dataBytes, size);
+    ALOGE("engf_getphasecheck:%d", ret);
+    env->ReleaseByteArrayElements(data, dataBytes, 0);
+
+
+    return ret;
+}
+*/
+static const char *classPathName = "com/mediatek/factorymode/engfetch";
+
+static JNINativeMethod methods[] = {
+  //{"add", "(II)I", (void*)add },
+  {"tp_init","()I",(void*)tp_init},
+  {"lets_test","([B[II)I",(void*)lets_test},
+  //{ "engf_open", "(I)I", (void*)engf_open },
+  //{ "engf_close", "(I)I", (void*)engf_close },
+  //{ "engf_write", "(I[BI)I", (void*)engf_write },
+  //{ "engf_read", "(I[BI)I", (void*)engf_read }, 
+  //{ "engf_getphasecheck", "([BI)I", (void*)engf_getphasecheck}, 
+};
+
+/*
+ * Register several native methods for one class.
+ */
+static int registerNativeMethods(JNIEnv* env, const char* className,
+    JNINativeMethod* gMethods, int numMethods)
+{
+    jclass clazz;
+
+    clazz = env->FindClass(className);
+    if (clazz == NULL) {
+        ALOGE("Native registration unable to find class '%s'", className);
+        return JNI_FALSE;
+    }
+    if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
+        ALOGE("RegisterNatives failed for '%s'", className);
+        return JNI_FALSE;
+    }
+
+    return JNI_TRUE;
+}
+
+/*
+ * Register native methods for all classes we know about.
+ *
+ * returns JNI_TRUE on success.
+ */
+static int registerNatives(JNIEnv* env)
+{
+  if (!registerNativeMethods(env, classPathName,
+                 methods, sizeof(methods) / sizeof(methods[0]))) {
+    return JNI_FALSE;
+  }
+
+  return JNI_TRUE;
+}
+
+
+// ----------------------------------------------------------------------------
+
+/*
+ * This is called by the VM when the shared library is first loaded.
+ */
+ 
+typedef union {
+    JNIEnv* env;
+    void* venv;
+} UnionJNIEnvToVoid;
+
+jint JNI_OnLoad(JavaVM* vm, void* reserved)
+{
+    UnionJNIEnvToVoid uenv;
+    uenv.venv = NULL;
+    jint result = -1;
+    JNIEnv* env = NULL;
+    
+    ALOGI("JNI_OnLoad");
+
+    if (vm->GetEnv(&uenv.venv, JNI_VERSION_1_4) != JNI_OK) {
+        ALOGE("ERROR: GetEnv failed");
+        goto bail;
+    }
+    env = uenv.env;
+
+    if (registerNatives(env) != JNI_TRUE) {
+        ALOGE("ERROR: registerNatives failed");
+        goto bail;
+    }
+    
+    result = JNI_VERSION_1_4;
+    
+bail:
+    return result;
+}
Index: packages/apps/FactoryMode/jni/Android.mk
===================================================================
--- packages/apps/FactoryMode/jni/Android.mk	(revision 0)
+++ packages/apps/FactoryMode/jni/Android.mk	(revision 166460)
@@ -0,0 +1,57 @@
+#
+# Copyright (C) 2008 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# This makefile supplies the rules for building a library of JNI code for
+# use by our example of how to bundle a shared library with an APK.
+
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+# This is the target being built.
+LOCAL_MODULE:= libfactorymodeljni
+
+
+# All of the source files that we will compile.
+#LOCAL_SRC_FILES:= \
+  engfetch.cpp
+
+# All of the shared libraries we link against.
+LOCAL_SHARED_LIBRARIES := \
+	libutils
+
+LOCAL_LDFLAGS := -llog
+
+# No static libraries.
+LOCAL_STATIC_LIBRARIES :=
+
+# Also need the JNI headers.
+LOCAL_C_INCLUDES += \
+	$(JNI_H_INCLUDE) \
+	$(TOP)/device/sprd/common/apps/engineeringmodel/engcs
+
+# No special compiler flags.
+LOCAL_CFLAGS +=
+
+# Don't prelink this library.  For more efficient code, you may want
+# to add this library to the prelink map and set this to true. However,
+# it's difficult to do this for applications that are not supplied as
+# part of a system image.
+
+LOCAL_PRELINK_MODULE := false
+
+include $(BUILD_SHARED_LIBRARY)
Index: packages/apps/FactoryMode/CleanSpec.mk
===================================================================
--- packages/apps/FactoryMode/CleanSpec.mk	(revision 0)
+++ packages/apps/FactoryMode/CleanSpec.mk	(revision 166460)
@@ -0,0 +1,4 @@
+$(call add-clean-step, rm -rf $(OUT_DIR)/target/product/sp8830ec/obj/SHARED_LIBRARIES/libfactorymodeljni_intermediates)
+$(call add-clean-step, rm -rf $(OUT_DIR)/target/product/sp8830ec/symbols/system/lib/libfactorymodeljni.so)
+$(call add-clean-step, rm -rf $(OUT_DIR)/target/common/obj/APPS/FactoryMode_intermediates)
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/system/app/FactoryMode.apk)
\ No newline at end of file
Index: packages/apps/FactoryMode/Android.mk
===================================================================
--- packages/apps/FactoryMode/Android.mk	(revision 0)
+++ packages/apps/FactoryMode/Android.mk	(revision 166460)
@@ -0,0 +1,53 @@
+# Copyright Statement:
+#
+# This software/firmware and related documentation ("MediaTek Software") are
+# protected under relevant copyright laws. The information contained herein
+# is confidential and proprietary to MediaTek Inc. and/or its licensors.
+# Without the prior written permission of MediaTek inc. and/or its licensors,
+# any reproduction, modification, use or disclosure of MediaTek Software,
+# and information contained herein, in whole or in part, shall be strictly prohibited.
+#
+# MediaTek Inc. (C) 2010. All rights reserved.
+#
+# BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+# THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+# RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+# AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+# NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+# SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+# SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+# THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+# THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+# CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+# SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+# STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+# CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+# AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+# OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+# MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+#
+# The following software/firmware and/or related documentation ("MediaTek Software")
+# have been modified by MediaTek Inc. All revisions are subject to any receiver's
+# applicable license agreements with MediaTek Inc.
+
+
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_JAVA_LIBRARIES := telephony-common
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-subdir-java-files) 
+
+LOCAL_PACKAGE_NAME := FactoryMode
+
+LOCAL_CERTIFICATE := platform
+
+LOCAL_JNI_SHARED_LIBRARIES := libfactorymodeljni
+LOCAL_REQUIRED_MODULES := libfactorymodeljni
+
+include $(BUILD_PACKAGE)
+include $(call all-makefiles-under,$(LOCAL_PATH))
Index: packages/apps/FactoryMode/AndroidManifest.xml
===================================================================
--- packages/apps/FactoryMode/AndroidManifest.xml	(revision 0)
+++ packages/apps/FactoryMode/AndroidManifest.xml	(revision 166460)
@@ -0,0 +1,244 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mediatek.factorymode"
+    android:versionCode="1"
+    android:versionName="1.0" 
+    android:sharedUserId="android.uid.system">
+
+    <uses-sdk android:minSdkVersion="10" />
+
+    <uses-permission android:name="android.permission.WRITE_SETTINGS" />
+    <uses-permission android:name="android.permission.READ_SETTINGS" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.CALL_PHONE" />
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
+    <uses-permission android:name="android.permission.MODIFY_PHONE_STATE" />
+    <uses-permission android:name="android.permission.DIAGNOSTIC" />
+    <uses-permission android:name="android.permission.HARDWARE_TEST" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_BLUETOOTH_SHARE" />
+    <uses-permission android:name="android.permission.BLUETOOTH" />
+    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
+    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION" />
+    <uses-permission android:name="android.permission.UPDATE_DEVICE_STATS" />
+    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
+    <uses-permission android:name="android.permission.RESTART_PACKAGES" />
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
+    <uses-permission android:name="android.permission.VIBRATE"/>
+    <uses-permission android:name="android.permission.WRITE_SECURE_SETTINGS"/>
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" /> 
+	
+    <application
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name" >
+        <activity
+            android:name=".FactoryMode"
+            android:label="@string/app_name"
+			android:theme="@android:style/Theme"
+            android:screenOrientation="portrait" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+
+        <service android:name=".wifi.wifiStateListener" />
+        <service android:name=".BatteryLogService" />
+        <receiver
+            android:name=".FactoryModeReceiver"
+            android:enabled="true"
+            android:exported="false"
+            android:process="com.android.phone"
+            android:label="LocationLoggerServiceManager">
+            <intent-filter>
+                <action
+                    android:name="android.intent.action.BOOT_COMPLETED" />
+            </intent-filter>
+        </receiver>
+		
+		<service android:name=".errorService">
+        	<intent-filter >
+                <action android:name="com.mediatek.factorymode.errorService"/>
+          </intent-filter>
+        </service>
+
+        <activity
+            android:name=".AutoTest"
+            android:label="@string/AutoTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".AllTest"
+            android:label="@string/AllTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".headset.HeadSet"
+            android:label="@string/HeadSet"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".gps.GPS"
+            android:label="@string/GPS"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".gps.YGPS"
+            android:label="@string/GPS"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".vibratortest.Vibratortest"
+            android:label="@string/Vibrator"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".signal.Signal"
+            android:label="@string/Signal"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".BatteryLog"
+            android:label="@string/BatteryLog"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".touchscreen.TouchScreenHandWriting"
+            android:label="@string/TouchScreen"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".touchscreen.PointTest"
+            android:label="@string/PointTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".touchscreen.LineTest"
+            android:label="@string/LineTest"
+            android:screenOrientation="portrait" />
+		<activity
+            android:name=".touchscreen.BlockTest"
+            android:label="@string/LineTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".backlight.BackLight"
+            android:label="@string/BackLight"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".memory.Memory"
+            android:label="@string/Memory"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".micophone.MicRecorder"
+            android:label="@string/Microphone"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".audio.AudioTest"
+            android:label="@string/Audio"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".camera.CameraTest"
+            android:label="@string/Camera"
+            android:screenOrientation="portrait" 
+            android:configChanges="orientation|screenSize|keyboardHidden"/>
+        <activity
+            android:name=".camera.SubCamera"
+            android:label="@string/Camera"
+            android:screenOrientation="portrait"
+            android:stateNotNeeded="true" />
+        <activity
+            android:name=".wifi.WiFiTest"
+            android:label="@string/WiFi"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".bluetooth.Bluetooth"
+            android:label="@string/Bluetooth"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.GSensor"
+            android:label="@string/GSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.MSensor"
+            android:label="@string/MSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.LSensor"
+            android:label="@string/LSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".hall.Hall"
+            android:label="@string/Hall"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.LSensorCali"
+            android:label="@string/LSensorCali"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.PSensor"
+            android:label="@string/psensor_app_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".earphone.Earphone"
+            android:label="@string/Earphone"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".Speaker"
+            android:label="@string/speaker_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sdcard.SDCard"
+            android:label="@string/sdcard"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".KeyCode"
+            android:label="@string/KeyCode"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lcd.LCD"
+            android:label="@string/LCD"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".simcard.SimCard"
+            android:label="@string/SimCard"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".fmradio.FMRadio"
+            android:label="@string/FMRadio"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".version.Version"
+            android:label="@string/version_info"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".rfcali.RFCali"
+            android:label="@string/rf_cali"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".Report"
+            android:label="@string/Report"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".tprawdata.TPrawdata"
+            android:label="@string/tp_raw_data"
+            android:screenOrientation="portrait"/>
+        <activity
+            android:name=".led.Led"
+            android:label="@string/Led"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".flashlight.FlashLight"
+            android:label="@string/flashlight"
+            android:screenOrientation="portrait" /> 
+        <activity
+            android:name=".ChargeAlertDialog"
+            android:theme="@android:style/Theme.Dialog" />
+		<activity
+            android:name=".Check_Flag"
+            android:label="@string/Check_Flag"
+            android:screenOrientation="portrait" />
+		<receiver
+            android:name=".ResetFactorySettingFlag"
+            android:exported="true">
+			<intent-filter android:priority="1000">
+                <action android:name="com.android.restore.factory.setting"/>
+            </intent-filter>
+        </receiver>
+    </application>
+
+</manifest>
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/fmradio/FMRadio.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/fmradio/FMRadio.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/fmradio/FMRadio.java	(revision 166460)
@@ -0,0 +1,106 @@
+package com.mediatek.factorymode.fmradio;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.media.AudioManager;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.headset.HeadSet;
+import com.mediatek.factorymode.R;
+
+public class FMRadio extends Activity{
+	
+	private Button successbutton;
+	private Button failbuttonButton;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.fmradio);
+		
+		successbutton = (Button)this.findViewById(R.id.fm_bt_ok);
+		failbuttonButton = (Button)this.findViewById(R.id.fm_bt_failed);
+		successbutton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent broadcastIntent = new Intent("FactoryModeSendFmStop");
+				sendBroadcast(broadcastIntent);
+				Intent intent = new Intent(FMRadio.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failbuttonButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent broadcastIntent = new Intent("FactoryModeSendFmStop");
+				sendBroadcast(broadcastIntent);
+				Intent intent = new Intent(FMRadio.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+	/*	AudioManager manger = (AudioManager) getSystemService(AUDIO_SERVICE);
+		boolean isPlugIn = manger.isWiredHeadsetOn(); 
+		
+		if(HeadSet.getHeadsetState()== 0){*/
+			//successbutton.setEnabled(false);
+			
+	/*	}else {
+			successbutton.setEnabled(true);
+			
+		}*/
+
+		Intent intent = new Intent();
+		intent.setClassName("com.android.fmradio", "com.android.fmradio.FmMainActivity");
+		startActivity(intent);
+	}
+	@Override
+	protected void onRestart() {
+		// TODO Auto-generated method stub
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+	
+	@Override
+	protected void onDestroy() {
+		Intent intent = new Intent("com.android.fmradio.FmService.SOUND_POWER_DOWN_MSG");
+		sendBroadcast(intent);
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(FMRadio.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/ChargeAlertDialog.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/ChargeAlertDialog.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/ChargeAlertDialog.java	(revision 166460)
@@ -0,0 +1,44 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.widget.TextView;
+
+public class ChargeAlertDialog extends Activity{
+  static Activity ChargeAlertDialog;
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    // TODO Auto-generated method stub
+    super.onCreate(savedInstanceState);
+    requestWindowFeature(Window.FEATURE_NO_TITLE);
+    setContentView(R.layout.chargealertdialog);
+    ChargeAlertDialog = this;
+    this.setFinishOnTouchOutside(false);
+  }
+  @Override
+  public boolean onKeyUp(int keyCode, KeyEvent event) {
+    switch (keyCode) {
+     case KeyEvent.KEYCODE_MENU:
+       return true;
+    
+     case KeyEvent.KEYCODE_APP_SWITCH:
+       return true;
+      
+     case KeyEvent.KEYCODE_BACK:
+       return true;
+    }
+    return super.onKeyUp(keyCode, event);
+  }
+  @Override
+  public boolean onKeyDown(int keyCode, KeyEvent event) {
+    switch (keyCode) {
+      case KeyEvent.KEYCODE_APP_SWITCH:
+      break;
+    }
+    return super.onKeyDown(keyCode, event);
+  }
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeReceiver.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeReceiver.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeReceiver.java	(revision 166460)
@@ -0,0 +1,124 @@
+package com.mediatek.factorymode;
+
+
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Environment;
+import android.os.storage.StorageManager;
+import android.util.Log;
+
+import android.app.ActivityManager;
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.content.IntentFilter;
+import android.os.Binder;
+import android.os.StatFs;
+import android.os.SystemClock;
+import android.os.Handler;
+import android.os.Message;
+import android.os.Environment;
+import android.telephony.SmsManager;
+import android.telephony.TelephonyManager;
+import android.text.format.Time;
+
+import java.io.File;
+import java.io.FileDescriptor;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.FileNotFoundException;
+
+import com.mediatek.factorymode.PhaseCheckParse;
+
+public class FactoryModeReceiver extends BroadcastReceiver {
+    private final static String TAG = "FactoryModeReceiver";
+    private static StorageManager mStorageManagerHandle = null;
+    private Context mContext;
+    private String mSDCard2;
+    
+    
+    @Override
+    public void onReceive(Context context,Intent intent){
+        mContext = context;
+
+        String action = intent.getAction();
+        mStorageManagerHandle = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);
+        if ("android.intent.action.BOOT_COMPLETED".equals(action)) {  
+            if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
+                Log.i(TAG, "external SD is not mounted");
+                mSDCard2 = "";
+            } else {
+                mSDCard2 = Environment.getExternalStorageDirectory().getPath();
+                if ("*#*#73#*#*".equals(readSDFile("/factorymode.txt"))) {
+                    Intent i = new Intent(Intent.ACTION_MAIN);
+				    int result = phaseCheckCFT();
+				    Log.i("xxxxxxx", "result:"+result);
+				    //if(result == 0){
+					    i.setComponent(new ComponentName("com.mediatek.factorymode", "com.mediatek.factorymode.FactoryMode"));
+                        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                        context.startActivity(i);
+				    /*}else{
+					    i.setComponent(new ComponentName("com.mediatek.factorymode", "com.mediatek.factorymode.errorService"));
+					    i.putExtra("code", result);
+					    context.startService(i);
+				    }*/
+				}
+			}
+        }
+
+    }
+	
+	
+	private int phaseCheckCFT(){
+       int i = -1;
+       PhaseCheckParse parse = new PhaseCheckParse();
+       Log.i("xxxxxxx", "PhaseCheckParse "+parse.getPhaseCheck());
+       boolean isGmsPass = isPass(parse.getStationPhaseCheck(2));
+       boolean isLtePass = isPass(parse.getStationPhaseCheck(3));
+       if(isGmsPass && isLtePass){
+          i = 0;
+       }else if(!isGmsPass && isLtePass){
+          i = 1;
+       }else if(isGmsPass && !isLtePass){
+          i = 2;
+       }else{
+          i = 3;
+       }
+       return i;
+    }
+    
+    private boolean isPass(String st){
+    	if("PASS".equals(st.substring(st.length()-4,st.length()))){
+			return true;
+		}
+		return false;
+    }
+
+
+    public String readSDFile(String filesname) {    
+        String allpath=mSDCard2+filesname;
+        StringBuffer sb = new StringBuffer();
+        File file = new File(allpath);   
+        BufferedReader br = null;           
+        try {
+            br = new BufferedReader(new FileReader(file));
+            String line = "";
+            while((line = br.readLine())!=null){
+               sb.append(line);
+            }
+            br.close();
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return sb.toString(); 
+    }
+
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/MicRecorder.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/MicRecorder.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/MicRecorder.java	(revision 166460)
@@ -0,0 +1,268 @@
+package com.mediatek.factorymode.micophone;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Locale;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.MediaPlayer;
+import android.media.MediaRecorder;
+import android.os.Bundle;
+import android.os.Environment;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.VUMeter;
+import android.media.AudioSystem;
+
+import android.os.Handler;
+import android.os.Message;
+
+public class MicRecorder extends Activity {
+
+	private Button micsuccesButton ;
+	private Button micfailButton ;
+	private Button spesuccesButton ;
+	private Button spefailButton ;
+	private Button testheadbButton;
+	
+	private MediaRecorder mRecorder = null;
+	private MediaPlayer mPlayer = null;
+	private String  curPath = null ;
+	private VUMeter mVUMeter;
+	
+	private static final int TEST_IDLE = 0;
+	private static final int TEST_RECORDERING = 1;
+	private static final int TEST_PLAYYING =2;
+	private int curTestState = TEST_IDLE; 
+	//private static final String INTERNAL_MEMORY_DIR = "/data/data/com.mediatek.factorymode/files/"; 
+	private static final String INTERNAL_MEMORY_DIR = "/sdcard/temp/";
+	private static final String TEST_FILE_NAME = "testingMicRecorder.amr";
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.micrecorder);
+		testheadbButton =(Button)this.findViewById(R.id.mic_bt_start);
+	
+		micsuccesButton = (Button)this.findViewById(R.id.mic_bt_ok);
+		micfailButton = (Button)this.findViewById(R.id.mic_bt_failed);
+		
+		mVUMeter = (VUMeter)this.findViewById(R.id.uvMeter);
+		mVUMeter.setVisibility(View.GONE);
+		micsuccesButton.setEnabled(false);
+		micsuccesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(MicRecorder.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		micfailButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(MicRecorder.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		testheadbButton.setOnClickListener(new View.OnClickListener() {
+			@Override
+			public void onClick(View v) {	
+//				if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
+//				{
+					if(curTestState == TEST_IDLE){
+						AudioSystem.setParameters("ForceUseSpecificMic=1");
+						startRecorder();
+						testheadbButton.setText(getString(R.string.Mic_stop));
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_IDLE , 1000);
+					}else if(curTestState == TEST_RECORDERING){
+						stopRecorder();
+						AudioSystem.setParameters("ForceUseSpecificMic=0");
+						playRecordfile();
+						testheadbButton.setText(getString(R.string.stopplayer));
+						micsuccesButton.setEnabled(true);
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_RECORDERING , 1000);
+					}else if(curTestState == TEST_PLAYYING) {
+						stopplay();
+						testheadbButton.setText(getString(R.string.Mic_start));
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_PLAYYING , 1000);
+					}
+//				}else{
+//					testheadbButton.setText(R.string.sdcard_tips_failed);
+//					testheadbButton.setEnabled(false);
+//				}
+			}
+		});
+		testheadbButton.setText(getString(R.string.Mic_start));
+	}
+	private static final String HEADSET_STATE_PATH = "/sys/class/switch/h2w/state";
+	public static int getHeadsetState() {
+        try {
+            FileReader file = new FileReader(HEADSET_STATE_PATH);
+            char[] buffer = new char[1024];
+            int len = file.read(buffer, 0, 1024);
+            int headsetState = Integer.valueOf((new String(buffer, 0, len)).trim());
+            Log.v("MicRecorder", "---------------" + headsetState);
+            return headsetState;
+
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    
+    private Handler mHandler = new Handler(){
+    	@Override
+			public void handleMessage(Message msg) {
+				super.handleMessage(msg);
+				if (msg.what == TEST_IDLE) {
+             curTestState = TEST_RECORDERING;
+				}else if (msg.what == TEST_RECORDERING) {
+             curTestState = TEST_PLAYYING;
+				}else if (msg.what == TEST_PLAYYING) {
+             curTestState = TEST_IDLE;
+				}
+				testheadbButton.setClickable(true);
+			}
+		};
+    
+	void startRecorder(){
+		//File file = new File("/sdcard/"+ "YY"+ new DateFormat().format("yyyyMMdd_hhmmss",Calendar.getInstance(Locale.CHINA)) + ".amr");
+		String path = INTERNAL_MEMORY_DIR + TEST_FILE_NAME;
+		boolean bRet = isFolderExists(INTERNAL_MEMORY_DIR);
+		Log.v("MicRecorder", "bRet---------------" + bRet + ", path = " + path);
+		File file = new File(path);
+		if(file.exists()) {
+			file.delete();
+		}
+		
+		curPath = file.getPath();
+		mRecorder = new MediaRecorder();
+		mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
+		mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
+		mRecorder.setOutputFile(file.getAbsolutePath());
+		try {
+			file.createNewFile();
+			file.setReadable(true, false);
+			file.setWritable(true, false);
+			mRecorder.prepare();
+			mRecorder.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		mVUMeter.setRecorder(mRecorder);
+	}
+	private void stopRecorder(){
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+	}
+	private void playRecordfile(){
+		mPlayer = new MediaPlayer();
+		mPlayer.reset();
+		try{
+			mPlayer.setDataSource(curPath);
+			mPlayer.prepare();
+			mPlayer.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		testheadbButton.setText(getString(R.string.stopplayer));
+	}
+	private void stopplay(){
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+			testheadbButton.setText(getString(R.string.Mic_start));
+		}
+	}
+	
+	@Override
+	public void onStop() {
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+		
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+		}
+		String path = INTERNAL_MEMORY_DIR + TEST_FILE_NAME;
+		File file = new File(path);
+		if(file.exists()) {
+			file.delete();
+		}
+		
+		super.onStop();
+		
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		AudioSystem.setParameters("ForceUseSpecificMic=0");
+		Log.v("MicRecorder", "---------MicRecorder------");
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(MicRecorder.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+    public static boolean isFolderExists(String strFolder) {        
+		 File file = new File(strFolder);                
+		 if (!file.exists()) {            
+			 if (file.mkdirs()) {                                
+				 return true;            
+			 } else {                
+				 return false;            
+			}        
+		}
+		return true;
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java	(revision 166460)
@@ -0,0 +1,160 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ *
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+/*
+ * This file is auto-generated.  DO NOT MODIFY.
+ * Original file: NvRAMAgent.aidl
+ */
+
+package com.mediatek.factorymode;
+
+
+//import java.lang.String;
+//import android.os.RemoteException;
+import android.os.IBinder;
+//import android.os.IInterface;
+//import android.os.Binder;
+//import android.os.Parcel;
+
+public interface NvRAMAgent extends android.os.IInterface {   
+    /** Local-side IPC implementation stub class. */
+    public abstract static class Stub extends android.os.Binder implements NvRAMAgent
+    {
+        private static final java.lang.String DESCRIPTOR = "NvRAMAgent";
+        /** Construct the stub at attach it to the interface. */
+        public Stub() {
+            this.attachInterface(this, DESCRIPTOR);
+        }
+        /**
+         * Cast an IBinder object into an NvRAMAgent interface,
+         * generating a proxy if needed.
+         */
+        public static NvRAMAgent asInterface(android.os.IBinder obj) {
+            if ((obj == null)) {
+                return null;
+            }
+            android.os.IInterface iin = (android.os.IInterface)obj.queryLocalInterface(DESCRIPTOR);
+            if (((iin != null) && (iin instanceof NvRAMAgent))) {
+                return ((NvRAMAgent)iin);
+            }
+            return new NvRAMAgent.Stub.Proxy(obj);
+        }
+        public android.os.IBinder asBinder() {
+            return this;
+        }
+        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)
+                throws android.os.RemoteException {
+            switch (code) {
+                case INTERFACE_TRANSACTION:
+                    reply.writeString(DESCRIPTOR);
+                    return true;
+                case TRANSACTION_READFILE:
+                    data.enforceInterface(DESCRIPTOR);
+                    int myArg0;
+                    myArg0 = data.readInt();
+                    byte[] myResult = this.readFile(myArg0);
+                    reply.writeNoException();
+                    reply.writeByteArray(myResult);
+                    return true;
+                case TRANSACTION_WRITEFILE:
+                    data.enforceInterface(DESCRIPTOR);
+                    int myArg01;
+                    myArg01 = data.readInt();
+                    byte[] arg1;
+                    arg1 = data.createByteArray();
+                    int myResult2 = this.writeFile(myArg01, arg1);
+                    reply.writeNoException();
+                    reply.writeInt(myResult2);
+                    return true;
+                default:
+                    break;
+            }
+            return super.onTransact(code, data, reply, flags);
+        }
+        private static class Proxy implements NvRAMAgent {
+            private android.os.IBinder mRemote;
+            Proxy(android.os.IBinder remote) {
+                mRemote = remote;
+            }
+            public android.os.IBinder asBinder() {
+                return mRemote;
+            }
+            public java.lang.String getInterfaceDescriptor() {
+                return DESCRIPTOR;
+            }
+            public byte[] readFile(int fileLid) throws android.os.RemoteException
+            {
+                android.os.Parcel data = android.os.Parcel.obtain();
+                android.os.Parcel reply = android.os.Parcel.obtain();
+                byte[] result;
+                try {
+                    data.writeInterfaceToken(DESCRIPTOR);
+                    data.writeInt(fileLid);
+                    mRemote.transact(Stub.TRANSACTION_READFILE, data, reply, 0);
+                    reply.readException();
+                    result = reply.createByteArray();
+                } finally {
+                    reply.recycle();
+                    data.recycle();
+                }
+                return result;
+            }
+            public int writeFile(int fileLid, byte[] buff) throws android.os.RemoteException
+            {
+                android.os.Parcel data = android.os.Parcel.obtain();
+                android.os.Parcel reply = android.os.Parcel.obtain();
+                int result;
+                try {
+                    data.writeInterfaceToken(DESCRIPTOR);
+                    data.writeInt(fileLid);
+                    data.writeByteArray(buff);
+                    mRemote.transact(Stub.TRANSACTION_WRITEFILE, data, reply, 0);
+                    reply.readException();
+                    result = reply.readInt();
+                } finally {
+                    reply.recycle();
+                    data.recycle();
+                }
+                return result;
+            }
+        }
+        static final int TRANSACTION_READFILE = (IBinder.FIRST_CALL_TRANSACTION + 0);
+        static final int TRANSACTION_WRITEFILE = (IBinder.FIRST_CALL_TRANSACTION + 1);
+    }
+    byte[] readFile(int fileLid) throws android.os.RemoteException;
+    int writeFile(int fileLid, byte[] buff) throws android.os.RemoteException;
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/ResetFactorySettingFlag.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/ResetFactorySettingFlag.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/ResetFactorySettingFlag.java	(revision 166460)
@@ -0,0 +1,44 @@
+package com.mediatek.factorymode;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.IBinder;
+import android.os.ServiceManager;
+import android.util.Log;
+
+import com.mediatek.factorymode.PhaseCheckParse;
+
+/* [issue 35900] Begin, by liulele, 2015-11-17*/
+public class ResetFactorySettingFlag extends BroadcastReceiver {
+	private static final String TAG = "ResetFactorySettingFlag";
+	private static final int RESET_STATION = 13;
+	PhaseCheckParse parse = new PhaseCheckParse();
+	@Override
+	public void onReceive(Context context, Intent intent) {
+		Log.d(TAG,"= ResetFactorySettingFlag");
+		// TODO Auto-generated method stub
+		if(intent == null){
+			Log.d(TAG,"intent is null");
+			return ;
+		}
+		if(intent.getAction()==null){
+			Log.d(TAG,"getAction is null");
+			return ;
+		}
+		String factoryResetString = intent.getStringExtra("factoryreset");
+		Log.d(TAG,"onReceive="+intent.getAction() + "factoryreset = " + factoryResetString);
+		if(intent.getAction().equals("com.android.restore.factory.setting") && "1".equals(factoryResetString)){
+			parse.writeStationTested(RESET_STATION-1);
+            parse.writeStationPass(RESET_STATION-1);
+			Log.d(TAG,"ACTION_RESTORE_FACTORY_SETTING = "+ parse.getPhaseCheck());
+		}else if(intent.getAction().equals("com.android.restore.factory.setting") && "0".equals(factoryResetString)){
+			parse.writeStationTested(RESET_STATION-1);
+            parse.writeStationFail(RESET_STATION-1);
+			Log.d(TAG,"ACTION_START_LONGPRESS_INFO = "+ parse.getPhaseCheck());
+		}
+
+	}
+}
+
+
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/backlight/BackLight.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/backlight/BackLight.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/backlight/BackLight.java	(revision 166460)
@@ -0,0 +1,101 @@
+package com.mediatek.factorymode.backlight;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class BackLight extends Activity {
+	private Button succesButton ;
+	private Button failButton ;
+	private boolean  lcd_off_flag = false;
+	private boolean  lcd_on_flag = false;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.backlight);
+		Button display_lcd_on = (Button)this.findViewById(R.id.Display_lcd_on);
+		display_lcd_on.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				WindowManager.LayoutParams lp = getWindow().getAttributes();
+				lp.screenBrightness = 1.0f;
+				getWindow().setAttributes(lp);
+				lcd_on_flag  = true;
+				if(lcd_off_flag == true && lcd_on_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		Button display_lcd_off = (Button)this.findViewById(R.id.Display_lcd_off);
+		display_lcd_off.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				WindowManager.LayoutParams lp = getWindow().getAttributes();
+
+				lp.screenBrightness = 0.05f;
+
+				getWindow().setAttributes(lp);
+				lcd_off_flag = true;
+				if(lcd_off_flag == true && lcd_on_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		succesButton = (Button)this.findViewById(R.id.display_bt_ok);
+		failButton = (Button)this.findViewById(R.id.display_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(BackLight.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(BackLight.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(BackLight.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/AllTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/AllTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/AllTest.java	(revision 166460)
@@ -0,0 +1,15 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class AllTest extends Activity {
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.alltest);
+	}
+
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/vibratortest/Vibratortest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/vibratortest/Vibratortest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/vibratortest/Vibratortest.java	(revision 166460)
@@ -0,0 +1,98 @@
+package com.mediatek.factorymode.vibratortest;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Vibrator;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class Vibratortest extends Activity {
+	Vibrator vibrator;
+	Button succesButton ;
+	Button failButton ;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.vibrator);
+		vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);
+		long[] pattern = { 2000, 2000, 2000, 2000}; // OFF/ON/OFF/ON...
+		vibrator.vibrate(pattern, 2);
+		//vibrator.vibrate(30000);
+		succesButton = (Button)this.findViewById(R.id.vibrator_bt_ok);
+		failButton = (Button)this.findViewById(R.id.vibrator_bt_failed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Vibratortest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Vibratortest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		if (null != vibrator) {
+			vibrator.cancel();
+		}
+		super.onPause();
+	}
+
+	@Override
+	protected void onStop() {
+		if (null != vibrator) {
+			vibrator.cancel();
+		}
+		super.onStop();
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		if (null != vibrator) {
+			vibrator.cancel();
+		}
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Vibratortest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/YGPS.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/YGPS.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/YGPS.java	(revision 166460)
@@ -0,0 +1,25 @@
+package com.mediatek.factorymode.gps;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+
+public class YGPS extends Activity{
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);	
+		setContentView(R.layout.ygps);
+	}
+	
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/GPS.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/GPS.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/GPS.java	(revision 166460)
@@ -0,0 +1,259 @@
+package com.mediatek.factorymode.gps;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.app.PendingIntent.CanceledException;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.location.GpsSatellite;
+import android.location.GpsStatus;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.net.Uri;
+import android.util.Log;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.Chronometer;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.KeyCode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.R.string;
+
+public class GPS extends Activity {
+    static final String TAG = "FactoryMode/GPS";
+	private TextView gps_state_id;
+	private TextView gps_satellite_id;
+	private TextView gps_signal_id;
+	private TextView gps_result_id;
+	private Chronometer gps_time_id;
+	private Button succesButton ;
+	private Button failButton ;
+    private LocationManager mLocationManager;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	    getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.gps);
+		gps_state_id = (TextView) this.findViewById(R.id.gps_state_id);
+		gps_satellite_id = (TextView) this.findViewById(R.id.gps_satellite_id);
+		gps_signal_id = (TextView) this.findViewById(R.id.gps_signal_id);
+		gps_result_id = (TextView) this.findViewById(R.id.gps_result_id);
+		
+		succesButton = (Button)this.findViewById(R.id.gps_bt_ok);
+		failButton = (Button)this.findViewById(R.id.gps_bt_failed);
+		succesButton.setEnabled(false);
+		
+		gps_time_id = (Chronometer) this.findViewById(R.id.gps_time_id);
+		gps_time_id.setFormat(getString(R.string.GPS_time));
+		gps_time_id.start();
+		
+		gps_satellite_id.setText(getString(R.string.GPS_satelliteNum)+0);
+		gps_signal_id.setText(getString(R.string.GPS_Signal)+"nosignal");
+        mLocationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
+		openGPSSettings();
+		getLocation(); 
+		
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GPS.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GPS.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		/*Intent gpsIntent = new Intent();
+		gpsIntent.setClassName("com.android.settings","com.android.settings.widget.SettingsAppWidgetProvider");
+		gpsIntent.addCategory("android.intent.category.ALTERNATIVE");
+		gpsIntent.setData(Uri.parse("custom:3"));
+		try {
+			PendingIntent.getBroadcast(this, 0, gpsIntent, 0).send();
+		}
+		catch (CanceledException e) {
+			e.printStackTrace();
+		}*/
+        mLocationManager.removeUpdates(locationListener);
+		mLocationManager.removeGpsStatusListener(statusListener);
+		super.onDestroy();
+	}
+
+	private void openGPSSettings() {
+        /*
+		LocationManager alm = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
+		if (alm.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER)) {
+			gps_state_id.setText(getString(R.string.GPS_connect));
+			return;
+		}
+		Intent gpsIntent = new Intent();
+		gpsIntent.setClassName("com.android.settings","com.android.settings.widget.SettingsAppWidgetProvider");
+		gpsIntent.addCategory("android.intent.category.ALTERNATIVE");
+		gpsIntent.setData(Uri.parse("custom:3"));
+		try {
+			gps_state_id.setText(getString(R.string.GPS_connect));
+			PendingIntent.getBroadcast(this, 0, gpsIntent, 0).send();
+		}
+		catch (CanceledException e) {
+			e.printStackTrace();
+		}
+		//ContentResolver resolver = this.getContentResolver();
+        //Settings.Secure.setLocationProviderEnabled(resolver, LocationManager.GPS_PROVIDER,true);
+        */
+        int currentMode = Settings.Secure.getInt(getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF);
+		Log.d(TAG, "openGPSSettings: currentMode = " + currentMode);
+		if(currentMode != Settings.Secure.LOCATION_MODE_SENSORS_ONLY) {
+			int newMode = Settings.Secure.LOCATION_MODE_SENSORS_ONLY;
+			Intent intent = new Intent("com.android.settings.location.MODE_CHANGING");
+			intent.putExtra("CURRENT_MODE", currentMode);
+			intent.putExtra("NEW_MODE", newMode);
+			sendBroadcast(intent, android.Manifest.permission.WRITE_SECURE_SETTINGS);
+			Settings.Secure.putInt(getContentResolver(), Settings.Secure.LOCATION_MODE, newMode);
+		}
+	}
+
+	 private static boolean getGpsState(Context context) {
+	        ContentResolver resolver = context.getContentResolver();
+	        boolean open = Settings.Secure.isLocationProviderEnabled(resolver, LocationManager.GPS_PROVIDER);
+	        System.out.println("getGpsState:"+open);
+	        return open;
+	    }        
+	private void getLocation() {
+		// Criteria criteria = new Criteria();
+		// criteria.setAccuracy(Criteria.ACCURACY_FINE);
+
+		// criteria.setAltitudeRequired(false);
+		// criteria.setBearingRequired(false);
+		// criteria.setCostAllowed(true);
+		// criteria.setPowerRequirement(Criteria.POWER_LOW);
+
+		// String provider = locationManager.getBestProvider(criteria, true);
+
+		String provider = LocationManager.GPS_PROVIDER;
+		Location location = mLocationManager.getLastKnownLocation(provider);
+		if (location == null)
+			location = mLocationManager
+					.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
+		updateToNewLocation(location);
+		
+		mLocationManager.requestLocationUpdates(provider, 1000, 0,
+				locationListener);
+		mLocationManager.addGpsStatusListener(statusListener); 
+	}
+
+	private List<GpsSatellite> numSatelliteList = new ArrayList<GpsSatellite>(); 
+
+	private final GpsStatus.Listener statusListener = new GpsStatus.Listener() {
+		public void onGpsStatusChanged(int event) { 
+			GpsStatus status = mLocationManager.getGpsStatus(null); 
+			updateGpsStatus(event, status);
+		}
+	};
+
+	private void updateGpsStatus(int event, GpsStatus status) {
+		if (event == GpsStatus.GPS_EVENT_SATELLITE_STATUS) {
+			int maxSatellites = status.getMaxSatellites();
+			Iterator<GpsSatellite> it = status.getSatellites().iterator();
+			numSatelliteList.clear();
+			int count = 0;
+			while (it.hasNext() && count <= maxSatellites) {
+				GpsSatellite s = it.next();
+				numSatelliteList.add(s);
+				count++;
+			}
+		}
+		gps_satellite_id.setText(getString(R.string.GPS_satelliteNum)+numSatelliteList.size() );
+		if(numSatelliteList.size()==0){
+			gps_signal_id.setText(getString(R.string.GPS_Signal)+numSatelliteList.size());
+		}else if (numSatelliteList.size()>3){
+			gps_signal_id.setText(getString(R.string.GPS_Signal)+getString(R.string.GPS_normal));
+            succesButton.setEnabled(true);
+			Intent intent = new Intent(GPS.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_OK,intent);
+			finish();
+		    succesButton.setEnabled(true);
+		}else{
+			gps_signal_id.setText(getString(R.string.GPS_Signal)+numSatelliteList.size());
+		}
+	}
+
+	private void updateToNewLocation(Location location) {
+		TextView tv1;
+		// tv1 = (TextView) this.findViewById(R.id.tv1);
+		if (location != null) {
+			} else {
+
+		}
+	}
+
+	private final LocationListener locationListener = new LocationListener() {
+		public void onLocationChanged(Location location) {
+			
+			if (location != null) {
+				updateToNewLocation(location);
+				
+			}
+		}
+
+		public void onProviderDisabled(String provider) {
+			
+			updateToNewLocation(null);
+			
+		}
+
+		public void onProviderEnabled(String provider) {
+			
+		}
+
+		public void onStatusChanged(String provider, int status, Bundle extras) {
+			
+		}
+	};
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(GPS.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/errorService.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/errorService.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/errorService.java	(revision 166460)
@@ -0,0 +1,73 @@
+package com.mediatek.factorymode;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.Service;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.IBinder;
+import android.util.Log;
+import android.view.WindowManager;
+
+public class errorService extends Service {
+	private final static String TAG = "errorService";
+
+	@Override
+	public IBinder onBind(Intent intent) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public void onCreate() {
+		// TODO Auto-generated method stub
+		super.onCreate();
+	}
+	
+	@Override
+  public int onStartCommand(Intent intent, int flags, int startId) {
+	// TODO Auto-generated method stub
+	  super.onStartCommand(intent, flags, startId);
+	  if(intent != null){
+	    int error = intent.getIntExtra("code", 0);
+	    Log.i(TAG, "show Error Dialog :" + error);
+	    buildDialog(getApplicationContext(), error);
+	  }
+	  return startId;
+  }
+
+	private void buildDialog(Context context, int error) {
+		AlertDialog.Builder builder = new AlertDialog.Builder(context,android.R.style.Theme_Material_Light_Dialog);
+		// if (mTitleResId != 0) {
+		builder.setTitle("Error");
+		// }
+		String errorInfo = null;
+		switch (error) {
+		case 1:
+			errorInfo = "Please check GMS calibration";
+			break;
+		case 2:
+			errorInfo = "Please check LTE calibration";
+			break;
+		case 3:
+			errorInfo = "Please check GMS and LTE calibration";
+			break;
+		}
+		// if (mMessageResId != 0) {
+		builder.setMessage(errorInfo);
+		// }
+		builder.setPositiveButton(android.R.string.ok,
+				new DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						dialog.dismiss();
+					}
+				});
+		Dialog mDialog = builder.create();
+		Log.i(TAG, "show Error Dialog");
+		mDialog.getWindow().setType(
+				WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
+		mDialog.show();
+	}
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/Report.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/Report.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/Report.java	(revision 166460)
@@ -0,0 +1,140 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.widget.TextView;
+public class Report extends Activity{
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		if(!FactoryMode.isAutoTest){
+			setTitle(R.string.SingleTestReport);
+		}else{
+			setTitle(R.string.AutoTestReport);
+		}
+		setContentView(R.layout.report);
+		TextView report_success = (TextView)this.findViewById(R.id.report_success);
+		TextView report_fail =(TextView)this.findViewById(R.id.report_failed);
+		TextView report_default =(TextView)this.findViewById(R.id.report_default);
+		String testsuccess = new String();
+		String testfail = new String();
+		String testdefault= new String();
+		
+		for(int i = 0;i<FactoryMode.testitem.length;i++ ) {
+			String string = getStringbyitemid(FactoryMode.testitem[i]);
+			if((FactoryMode.isAutoTest ? FactoryMode.autotestResult[i]:FactoryMode.testResult[i])== FactoryMode.TEST_OK) {
+				testsuccess = testsuccess + "|"+string;
+			}else if((FactoryMode.isAutoTest ? FactoryMode.autotestResult[i]:FactoryMode.testResult[i])== FactoryMode.TEST_FAIL) {
+				testfail = testfail + "|" +string;
+			}else {
+				testdefault = testdefault + "|"+string;
+			}
+		}
+		report_success.setText(getString(R.string.report_ok)+testsuccess);
+		report_fail.setText(getString(R.string.report_failed)+testfail);
+		report_default.setText(getString(R.string.report_notest)+testdefault);
+		FactoryMode.isAutoTest = false;
+	}
+	private String getStringbyitemid(int item_id) {
+		String str = null;
+		switch (item_id) {
+		case FactoryMode.TESTITEM_VERSION:
+			str = getString(R.string.version_info);
+			break;
+			
+		//case FactoryMode.TESTITEM_RF_CALI:
+		//	str = getString(R.string.rf_cali);
+		//	break;
+			
+		case FactoryMode.TESTITEM_TOUCH:
+			str = getString(R.string.touchscreen_name);
+			break;
+		case FactoryMode.TESTITEM_LCD:
+			str = getString(R.string.lcd_name);
+			break;
+		case FactoryMode.TESTITEM_GPS:
+			str = getString(R.string.gps_name);
+			break;
+		case FactoryMode.TESTITEM_POWER:
+			str = getString(R.string.battery_name);
+			break;
+		case FactoryMode.TESTITEM_KEY:
+			str = getString(R.string.KeyCode_name);
+			break;
+		case FactoryMode.TESTITEM_SPEAKER:
+			str = getString(R.string.speaker_name);
+			break;
+		case FactoryMode.TESTITEM_HEADSET:
+			str = getString(R.string.headset_name);
+			break;
+		case FactoryMode.TESTITEM_MIC:
+			str = getString(R.string.microphone_name);
+			break;
+		case FactoryMode.TESTITEM_LSENSORCALI:
+			str = getString(R.string.lsensor_cali_name);
+			break;
+		//case FactoryMode.TESTITEM_RECEIVER:
+		//	str = getString(R.string.earphone_name);
+		//	break;
+		case FactoryMode.TESTITEM_WIFI:
+			str = getString(R.string.wifi_name);
+			break;
+		case FactoryMode.TESTITEM_BT:
+			str = getString(R.string.bluetooth_name);
+			break;
+		case FactoryMode.TESTITEM_SHAKE:
+			str = getString(R.string.vibrator_name);
+			break;
+		case FactoryMode.TESTITEM_CALL:
+			str = getString(R.string.telephone_name);
+			break;
+		case FactoryMode.TESTITEM_BL:
+			str = getString(R.string.backlight_name);
+			break;
+		case FactoryMode.TESTITEM_MEMORY:
+			str = getString(R.string.memory_name);
+			break;
+		case FactoryMode.TESTITEM_GSENSOR:
+			str = getString(R.string.gsensor_name);
+			break;
+	//	case FactoryMode.TESTITEM_MSENSOR:
+	//		str = getString(R.string.msensor_name);
+	//		break;
+	    case FactoryMode.TESTITEM_LSENSOR:
+			str = getString(R.string.lsensor_name);
+			break;
+		case FactoryMode.TESTITEM_DSENSOR:
+			str = getString(R.string.psensor_name);
+			break;
+		case FactoryMode.TESTITEM_TCARD:
+			str = getString(R.string.sdcard_name);
+			break;
+		case FactoryMode.TESTITEM_BCAMERA:
+			str = getString(R.string.camera_name);
+			break;
+		case FactoryMode.TESTITEM_FCAMERA:
+			str = getString(R.string.subcamera_name);
+			break;
+		case FactoryMode.TESTITEM_FM:
+			str = getString(R.string.FMRadio);
+			break;
+		case FactoryMode.TESTITEM_SIM:
+			str = getString(R.string.SimCard);
+			break;
+		//case FactoryMode.TESTITEM_LED:
+		//	str = getString(R.string.Led);
+		//	break;			
+		/*case FactoryMode.TESTITEM_HALL:
+			str = getString(R.string.Hall);
+			break;*/
+		case FactoryMode.TESTITEM_FLASHLIGHT:
+			str = getString(R.string.flashlight);
+			break;
+		default:
+			break;
+		}
+		return str;
+	}
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLog.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLog.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLog.java	(revision 166460)
@@ -0,0 +1,356 @@
+package com.mediatek.factorymode;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.SimpleTimeZone;
+
+import java.io.FileReader;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.os.SystemClock;
+import android.text.format.Time;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.graphics.Color;
+import android.os.Handler;
+import android.os.Message;
+
+import com.mediatek.factorymode.BatteryLogService;
+import com.mediatek.factorymode.FactoryMode;
+
+public class BatteryLog extends Activity {
+
+	private static final String TAG = "BatteryLog";
+	private static final int TEST_RESULT_OK = 0;
+	private static final int TEST_RESULT_FAIL = 1;
+	private static final int TEST_RESULT_FULL_TIPS = 2;
+	private static final int TEST_RESULT_TESTING = 3;
+	private static final int TEST_RESULT_CHARGE_TIPS = 4;
+	private static final int TEST_RESULT_FIRST = 5;
+	private static final int TEST_RESULT_TEMPERATURE_ERROR = 6;
+	private static final int EVENT_COUNT_DOWN = 42;
+	private static int result = TEST_RESULT_FAIL;
+	private static int electronic = 0;
+	private static int counter = 0;
+	private static long countdown = 0;
+	private IntentFilter mIntentFilter;
+	private TextView mstatus;
+	private TextView mlevel;
+	private TextView mscale;
+	private TextView mhealth;
+	private TextView mvoltage;
+	private TextView mtemperature;
+	private TextView mtechnology;
+	private TextView muptime;
+	private TextView melectronic;
+	private TextView mcharger_type;
+	private TextView mcharger_result;
+	private Button successButton;
+	private Button failButton;
+	private int mVoltage;
+	private Long mChargetime = null;
+	private long exitTime = 0;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		// getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.battery_info);
+		if (FactoryMode.isAutoTest) {
+			FactoryMode.shouldCharge = false;
+		}
+		IntentFilter filter = new IntentFilter();
+
+		mstatus = (TextView) this.findViewById(R.id.status);
+		mlevel = (TextView) this.findViewById(R.id.level);
+		mscale = (TextView) this.findViewById(R.id.scale);
+		mhealth = (TextView) this.findViewById(R.id.health);
+		mvoltage = (TextView) this.findViewById(R.id.voltage);
+		mtemperature = (TextView) this.findViewById(R.id.temperature);
+		mtechnology = (TextView) this.findViewById(R.id.technology);
+		muptime = (TextView) this.findViewById(R.id.uptime);
+		melectronic = (TextView) this.findViewById(R.id.electronic);
+		mcharger_type = (TextView) this.findViewById(R.id.charger_type);
+		mcharger_result = (TextView) this.findViewById(R.id.charger_result);
+
+		successButton = (Button) this.findViewById(R.id.battery_bt_ok);
+		failButton = (Button) this.findViewById(R.id.battery_bt_failed);
+		successButton.setEnabled(false);
+		Long timeLong = SystemClock.elapsedRealtime();
+		timeLong = timeLong / 1000;
+		long hour = timeLong / 3600;
+		long minute = (timeLong % 3600) / 60;
+		long second = (timeLong % 3600) % 60;
+		muptime.setText(hour + getString(R.string.hour) + minute
+				+ getString(R.string.minute) + second
+				+ getString(R.string.second));
+
+		successButton.setOnClickListener(new Button.OnClickListener() {
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(BatteryLog.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK, intent);
+				finish();
+			}
+		});
+
+		failButton.setOnClickListener(new Button.OnClickListener() {
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(BatteryLog.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL, intent);
+				finish();
+			}
+		});
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		result = BatteryLogService.result;
+		electronic = BatteryLogService.electronic;
+		Log.d(TAG, "electronic=" + electronic + "   result" + result + "   BB");
+		if (BatteryLogService.result != TEST_RESULT_TESTING) {
+			setResultText(result, electronic, counter, countdown);
+		}
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		filter.addAction("techain.intent.action.BTRB");
+		registerReceiver(mIntentReceiver, filter);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		unregisterReceiver(mIntentReceiver);
+	}
+
+	@Override
+	protected void onDestroy() {
+		// getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			Log.d(TAG, "onReceive: Action = " + intent.getAction());
+			String action = intent.getAction();
+			int plugged = intent.getIntExtra("plugged", 0);
+			if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+				int status = intent.getIntExtra("status", 0);
+				int health = intent.getIntExtra("health", 0);
+				boolean present = intent.getBooleanExtra("present", false);
+				int level = intent.getIntExtra("level", 0);
+				int scale = intent.getIntExtra("scale", 0);
+				int icon_small = intent.getIntExtra("icon-small", 0);
+				int voltage = intent.getIntExtra("voltage", 0);
+				mVoltage = voltage;
+				int temperature = intent.getIntExtra("temperature", 0);
+				String technology = intent.getStringExtra("technology");
+
+				String statusString = "";
+				switch (status) {
+				case BatteryManager.BATTERY_STATUS_UNKNOWN:
+					statusString = getResources().getString(
+							R.string.charger_unknown);// "unknown";
+					break;
+				case BatteryManager.BATTERY_STATUS_CHARGING:
+					statusString = getResources().getString(
+							R.string.charger_charging);// "charging";
+					// battery_image.setImageResource(R.drawable.stat_sys_battery_charge);
+					// battery_image.getDrawable().setLevel(level);
+					// successButton.setEnabled(true);
+					break;
+				case BatteryManager.BATTERY_STATUS_DISCHARGING:
+					statusString = getResources().getString(
+							R.string.charger_discharging);
+					// battery_image.setImageResource(R.drawable.stat_sys_battery);
+					// battery_image.getDrawable().setLevel(level);
+					break;
+				case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
+					statusString = getResources().getString(
+							R.string.charger_not_charging);
+					break;
+				case BatteryManager.BATTERY_STATUS_FULL:
+					statusString = getResources().getString(
+							R.string.charger_full);
+					// successButton.setEnabled(true);
+					break;
+				}
+
+				String healthString = "";
+				switch (health) {
+				case BatteryManager.BATTERY_HEALTH_UNKNOWN:
+					healthString = "unknown";
+					break;
+				case BatteryManager.BATTERY_HEALTH_GOOD:
+					healthString = "good";
+					break;
+				case BatteryManager.BATTERY_HEALTH_OVERHEAT:
+					healthString = "overheat";
+					break;
+				case BatteryManager.BATTERY_HEALTH_DEAD:
+					healthString = "dead";
+					break;
+				case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
+					healthString = "voltage";
+					break;
+				case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
+					healthString = "unspecified failure";
+					break;
+				}
+
+				String acString = "";
+				switch (plugged) {
+				case BatteryManager.BATTERY_PLUGGED_AC:
+					acString = "    "
+							+ getResources().getString(
+									R.string.charger_connected) + " & " + "AC";// "plugged ac";
+					break;
+				case BatteryManager.BATTERY_PLUGGED_USB:
+					acString = "    "
+							+ getResources().getString(
+									R.string.charger_connected) + " & " + "USB";// "plugged usb";
+					break;
+				default:
+					acString = "    "
+							+ getResources().getString(
+									R.string.charger_disconnected);
+					break;
+				}
+
+				BatteryLog.this.mstatus.setText(statusString);
+				BatteryLog.this.mhealth.setText(healthString);
+				BatteryLog.this.mlevel.setText("" + level + "%");
+				BatteryLog.this.mscale.setText("" + scale);
+				BatteryLog.this.mvoltage.setText("" + voltage
+						+ getString(R.string.battery_info_voltage_units));
+				BatteryLog.this.mtemperature.setText(""
+						+ tenthsToFixedString(temperature)
+						+ getResources().getString(
+								R.string.battery_info_temperature_units));
+				BatteryLog.this.mtechnology.setText(technology);
+				// BatteryLog.this.melectronic.setText(getBatteryElectronic() +
+				// "mA");
+				BatteryLog.this.mcharger_type.setText(acString);
+
+				Log.d("Battery", "" + intent.getIntExtra("level", 0));
+				Log.d("Battery", "" + intent.getIntExtra("scale", 0));
+				Log.d("Battery", "" + intent.getIntExtra("voltage", 0));
+				Log.d("Battery", "" + intent.getIntExtra("temperature", 0));
+				Log.d("Battery",
+						"ss"
+								+ intent.getIntExtra("status",
+										BatteryManager.BATTERY_STATUS_CHARGING));
+				Log.d("Battery", "" + intent.getIntExtra("plugged", 0));
+				Log.d("Battery",
+						""
+								+ intent.getIntExtra("health",
+										BatteryManager.BATTERY_HEALTH_UNKNOWN));
+			}
+			if (action.equals("techain.intent.action.BTRB")) {
+				result = intent.getIntExtra("result", 0);
+				Log.d(TAG, "result=" + result);
+				electronic = intent.getIntExtra("electronic", 0);
+				counter = intent.getIntExtra("counter", 0);
+				countdown = intent.getLongExtra("countdown", 0);
+				BatteryLog.this.melectronic.setText(electronic + "mA");
+				setResultText(result, electronic, counter, countdown);
+				Log.d(TAG, "electronic=" + electronic + "   result" + result
+						+ "   AA");
+			}
+		}
+	};
+
+  private final String tenthsToFixedString(int x) {
+    float tens = (float)x / 10;
+    return String.valueOf(tens);
+  }
+
+	private void setResultText(int result, int electronic, int counter,
+			long countdown) {
+		String resultString = "";
+		switch (result) {
+		case TEST_RESULT_OK:
+			successButton.setEnabled(true);
+			resultString = getResources().getString(R.string.charger_success);
+			mcharger_result.setTextColor(Color.GREEN);
+			break;
+		case TEST_RESULT_FAIL:
+			successButton.setEnabled(false);
+			resultString = getResources().getString(R.string.charger_failed);
+			mcharger_result.setTextColor(Color.RED);
+			break;
+		case TEST_RESULT_FULL_TIPS:
+			successButton.setEnabled(false);
+			resultString = getResources().getString(R.string.charger_tips);
+			mcharger_result.setTextColor(Color.RED);
+			break;
+		case TEST_RESULT_TESTING:
+			successButton.setEnabled(false);
+			resultString = getResources().getString(
+					R.string.charger_retry_tips, countdown, 4 - counter);
+			mcharger_result.setTextColor(Color.WHITE);
+			break;
+		case TEST_RESULT_CHARGE_TIPS:
+			successButton.setEnabled(false);
+			resultString = getResources().getString(R.string.charge_message);
+			mcharger_result.setTextColor(Color.RED);
+			break;
+		case TEST_RESULT_FIRST:
+			successButton.setEnabled(false);
+			resultString = getResources()
+					.getString(R.string.charger_start_tips);
+			mcharger_result.setTextColor(Color.WHITE);
+			break;
+		case TEST_RESULT_TEMPERATURE_ERROR:
+			successButton.setEnabled(false);
+			resultString = getResources().getString(R.string.charger_temperature_error);
+			mcharger_result.setTextColor(Color.RED);
+			break;	
+			
+		}
+		if((electronic >= 400 && BatteryLogService.mVoltage < 4100) || (electronic >= 100 && BatteryLogService.mVoltage >= 4100)) {
+			melectronic.setText(electronic + "mA");
+			melectronic.setTextColor(Color.GREEN);
+		} else if (electronic < 400 && BatteryLogService.mVoltage < 4100) {
+			melectronic.setText(electronic + "mA" + " < 400mA");
+			melectronic.setTextColor(Color.RED);
+		} else if (electronic < 100 && BatteryLogService.mVoltage >= 4100) {
+            melectronic.setText(electronic + "mA" + " < 100mA");
+            melectronic.setTextColor(Color.RED);
+		}
+		mcharger_result.setText(resultString);
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(BatteryLog.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL, intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryMode.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryMode.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryMode.java	(revision 166460)
@@ -0,0 +1,850 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.SpannableStringBuilder;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.GridView;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.backlight.BackLight;
+import com.mediatek.factorymode.bluetooth.Bluetooth;
+import com.mediatek.factorymode.camera.CameraTest;
+import com.mediatek.factorymode.camera.SubCamera;
+import com.mediatek.factorymode.earphone.Earphone;
+import com.mediatek.factorymode.fmradio.FMRadio;
+import com.mediatek.factorymode.gps.GPS;
+import com.mediatek.factorymode.headset.HeadSet;
+import com.mediatek.factorymode.lcd.LCD;
+import com.mediatek.factorymode.memory.Memory;
+import com.mediatek.factorymode.micophone.MicRecorder;
+import com.mediatek.factorymode.rfcali.RFCali;
+import com.mediatek.factorymode.sdcard.SDCard;
+import com.mediatek.factorymode.sensor.GSensor;
+import com.mediatek.factorymode.sensor.LSensor;
+import com.mediatek.factorymode.sensor.MSensor;
+import com.mediatek.factorymode.sensor.PSensor;
+import com.mediatek.factorymode.signal.Signal;
+import com.mediatek.factorymode.simcard.SimCard;
+import com.mediatek.factorymode.touchscreen.BlockTest;
+import com.mediatek.factorymode.touchscreen.TouchScreenHandWriting;
+import com.mediatek.factorymode.vibratortest.Vibratortest;
+import com.mediatek.factorymode.touchscreen.PointTest;
+import com.mediatek.factorymode.tprawdata.TPrawdata;
+import com.mediatek.factorymode.version.Version;
+import com.mediatek.factorymode.wifi.WiFiTest;
+import com.mediatek.factorymode.led.Led;
+import com.mediatek.factorymode.sensor.LSensorCali;
+import com.mediatek.factorymode.hall.Hall;
+import com.mediatek.factorymode.flashlight.FlashLight;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.lang.Integer;
+
+public class FactoryMode extends Activity {
+  public static final String TAG = "FactoryMode";
+  private static final String NV_DB_PATH = "/productinfo/testReport.db";
+  
+  public static final int TESTITEM_START = 0;
+  public static final int TESTITEM_VERSION = TESTITEM_START;
+  public static final int TESTITEM_TOUCH = 1;
+//public static final int TESTITEM_RF_CALI = 2;
+  public static final int TESTITEM_LCD = 2;
+  public static final int TESTITEM_GPS = 3;
+  public static final int TESTITEM_POWER = 4;
+  public static final int TESTITEM_KEY = 5;
+	public static final int TESTITEM_SPEAKER = 6;
+	public static final int TESTITEM_HEADSET = 7;
+    public static final int TESTITEM_FM = 8;
+//public static final int TESTITEM_RECEIVER = 9;
+  public static final int TESTITEM_WIFI = 9;
+  public static final int TESTITEM_BT = 10;
+  public static final int TESTITEM_SHAKE = 11;
+  public static final int TESTITEM_CALL = 12;
+  public static final int TESTITEM_BL = 13;
+  public static final int TESTITEM_MEMORY = 14;
+  public static final int TESTITEM_GSENSOR = 15;
+//  public static final int TESTITEM_MSENSOR = 18;
+  public static final int TESTITEM_LSENSOR = 16;
+  public static final int TESTITEM_DSENSOR = 17;
+	public static final int TESTITEM_TCARD = 18;
+	public static final int TESTITEM_BCAMERA = 19;
+    public static final int TESTITEM_FCAMERA = 20;
+	public static final int TESTITEM_MIC = 21;
+	public static final int TESTITEM_SIM = 22;
+	public static final int TESTITEM_FLASHLIGHT = 23;
+	//public static final int TESTITEM_LED = 25;
+	public static final int TESTITEM_LSENSORCALI = 24;
+	public static final int TESTITEM_TATOL = 25;
+	//public static final int TESTITEM_TPRAWDATA=19;
+	//private static int currentTestMode = 0;
+	public static int currenttestitem = TESTITEM_START;
+  public static boolean isAutoTest = false;
+  public static boolean isinit = true;
+  public static boolean shouldCharge = false;
+  public static boolean isCharging = false;
+  
+  public static int testResult[];
+  public static int autotestResult[];
+  public static int LTResult[];
+  
+  public static final int TEST_OK = 1;
+  public static final int TEST_FAIL = 2;
+  public static final int TEST_CANCEL = 3;
+  public static final int UNTESTED = 0;
+  public static final String UNTESTED_UNTESTED_UNTESTED = "UUU";//SingleTest UNTESTED,AutoTest UNTESTED,LastTest UNTESTED
+  public static final String UNTESTED_FAIL_FAIL = "UFF";//SingleTest UNTESTED,AutoTest Fail,LastTest Fail
+  public static final String FAIL_UNTESTED_FAIL = "FUF";//SingleTest FAIL,AutoTest UNTESTED,LastTest FAIL
+  public static final String FAIL_FAIL_FAIL = "FFF";//SingleTest Fail,AutoTest Fail,LastTest Fail
+  public static final String UNTESTED_PASS_PASS = "UPP";//SingleTest UNTESTED,AutoTest Pass,LastTest Pass
+  public static final String PASS_UNTESTED_PASS = "PUP";//SingleTest Pass,AutoTest UNTESTED,LastTest Pass
+  public static final String PASS_PASS_PASS = "PPP";//SingleTest Pass,AutoTest Pass,LastTest Pass
+  public static final String PASS_FAIL_PASS = "PFP";//SingleTest Pass,AutoTest Fail,LastTest Pass
+  public static final String PASS_FAIL_FAIL = "PFF";//SingleTest Pass,AutoTest Fail,LastTest Fail
+  public static final String FAIL_PASS_PASS = "FPP";//SingleTest Fail,AutoTest Pass,LastTest Pass
+  public static final String FAIL_PASS_FAIL = "FPF";//SingleTest Fail,AutoTest Pass,LastTest Fail
+  
+  private static final int MMI_STATION = 10;
+  
+  private GridView gridview;
+  ArrayAdapter<String> adapter;
+  private Button autotestButton = null;
+  private Button reportButton = null;
+  private Button autoreportButton = null;
+  public int ATPC = 0;//Auto Test Passed Count
+  public int AutoTested = 0;//if AutoTest was tested,then set value 1
+  private String mBit;
+  
+  public static final int testitem[] = {
+    TESTITEM_VERSION ,
+  //TESTITEM_RF_CALI ,
+    TESTITEM_TOUCH ,
+    TESTITEM_LCD ,
+    TESTITEM_GPS ,
+    TESTITEM_KEY ,
+    TESTITEM_SPEAKER ,
+    TESTITEM_HEADSET ,
+    TESTITEM_FM ,
+    
+  //TESTITEM_RECEIVER ,
+    TESTITEM_WIFI ,
+    TESTITEM_BT ,
+    TESTITEM_MEMORY ,
+    TESTITEM_TCARD ,
+    TESTITEM_SIM ,
+    TESTITEM_POWER ,
+    TESTITEM_SHAKE ,
+    TESTITEM_LSENSORCALI ,
+    TESTITEM_CALL ,
+    TESTITEM_BL ,
+    TESTITEM_GSENSOR ,
+  //TESTITEM_MSENSOR ,
+    TESTITEM_LSENSOR ,
+    TESTITEM_DSENSOR ,
+
+    TESTITEM_BCAMERA ,
+    TESTITEM_FCAMERA ,
+    
+    TESTITEM_MIC ,
+  //TESTITEM_LED ,
+    TESTITEM_FLASHLIGHT ,
+  //TESTITEM_TPRAWDATA
+  };
+  
+
+  @Override
+  public void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    requestWindowFeature(Window.FEATURE_NO_TITLE);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+    getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+    boolean autotest = (boolean) getIntent().getBooleanExtra("factorymode.autotest", false);
+    
+    setContentView(R.layout.main);
+    
+    gridview = (GridView) findViewById(R.id.main_grid);
+    
+    adapter = new ArrayAdapter<String>(this, R.layout.main_grid);
+    gridview.setAdapter(adapter);
+    
+    testResult = new int[TESTITEM_TATOL];
+    autotestResult = new int[TESTITEM_TATOL];
+    LTResult = new int[TESTITEM_TATOL];
+    Intent serviceintent = new Intent(this,BatteryLogService.class);
+	startService(serviceintent);
+    getTestReport();
+    
+    autotestButton = (Button)this.findViewById(R.id.main_bt_autotest);
+    reportButton  = (Button)this.findViewById(R.id.main_bt_report);
+    autoreportButton = (Button)this.findViewById(R.id.main_auto_report);
+    autoreportButton.setText(getReportText());
+    autotestButton.setOnClickListener(new Button.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        // TODO Auto-generated method stub
+        isAutoTest = true;
+        currenttestitem = 0;
+        TestSelectedItem(testitem[currenttestitem]);
+      }
+    });
+    reportButton.setOnClickListener(new Button.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        Intent intent2 = new Intent();
+        intent2.setClass(FactoryMode.this, Report.class);
+        startActivity(intent2);		
+      }
+    });
+    autoreportButton.setOnClickListener(new Button.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        isAutoTest = true;
+        Intent intent2 = new Intent();
+        intent2.setClass(FactoryMode.this, Report.class);
+        startActivity(intent2);		
+      }
+    });
+    for (int i = TESTITEM_START; i < testitem.length; i++) {
+      adapter.add(getStringbyitemid(testitem[i]));
+    }
+    gridview.setOnItemClickListener(new ItemClickListener());
+    isinit = true;
+  }
+  
+  @Override
+  protected void onDestroy(){
+    Intent serviceintent = new Intent(this,BatteryLogService.class);
+	stopService(serviceintent);
+    shouldCharge = false;
+    super.onDestroy();
+  }
+  
+  @Override
+  public void onWindowFocusChanged(boolean hasFocus) {
+    // TODO Auto-generated method stub	
+    if(isinit){
+      initTestView();
+      isinit = false;
+    }
+    super.onWindowFocusChanged(hasFocus);
+  }
+
+  private void initTestView(){
+    for(int index = 0 ; index < testitem.length ; index++ ){
+      TextView tView = (TextView)gridview.getChildAt(index);
+      Log.v(TAG, "initTestView:tView = " + tView);
+      if(tView != null){
+        if(LTResult[index] == FactoryMode.TEST_OK){
+          tView.setTextColor(Color.BLUE);
+        }else if(LTResult[index] == FactoryMode.TEST_FAIL){
+          tView.setTextColor(Color.RED);
+        }else if(LTResult[index] == FactoryMode.UNTESTED){
+          tView.setTextColor(Color.BLACK);
+        }
+      }
+    }
+  }
+
+  class ItemClickListener implements OnItemClickListener {
+    public void onItemClick(AdapterView<?> arg0,// The AdapterView where the click happened
+                                      View arg1,// The view within the AdapterView that was clicked
+                                       int arg2,// The position of the view in the adapter
+                                      long arg3// The row id of the item that was clicked
+                                                ){
+      isAutoTest = false;
+      TestSelectedItem(testitem[arg2]);
+    }
+  }
+  
+  private int getIndex(int testCode) {
+    int index = 0;
+    for(int i=0;i<testitem.length;i++) {
+      if(testCode == testitem[i]){
+        index = i;
+        break;
+      }
+    }
+    return index;
+  }
+  
+  public void onActivityResult(int requestCode, int resultCode, Intent intent){
+    Log.v("requestCode = " + requestCode,"resultCode = " + resultCode);
+    if(requestCode < 0 || requestCode >= TESTITEM_TATOL) {
+      return;
+    }
+    int index = getIndex(requestCode);
+    TextView tView = (TextView)gridview.getChildAt(index);
+    Log.v(TAG, "onActivityResult: tView = " + tView);
+    switch (resultCode) {
+      case TEST_OK:
+        if(tView != null){
+          tView.setTextColor(Color.BLUE);
+        }
+        if(isAutoTest){
+          autotestResult[index]= FactoryMode.TEST_OK;
+        }else{
+          testResult[index]= FactoryMode.TEST_OK;
+        }
+        LTResult[index]= FactoryMode.TEST_OK;
+        break;
+      case TEST_FAIL:
+        if(tView != null){
+          tView.setTextColor(Color.RED);
+        }
+        if(isAutoTest){
+          autotestResult[index]= FactoryMode.TEST_FAIL;
+        }else{
+          testResult[index]= FactoryMode.TEST_FAIL;
+        }
+        LTResult[index]= FactoryMode.TEST_FAIL;
+        break;
+      case TEST_CANCEL:
+        if(tView != null){
+          tView.setTextColor(Color.RED);
+        }
+        if(isAutoTest){
+          autotestResult[index]= FactoryMode.TEST_FAIL;
+          isAutoTest = false;
+          shouldCharge = false;
+        }else{
+          testResult[index]= FactoryMode.TEST_FAIL;
+        }
+        LTResult[index]= FactoryMode.TEST_FAIL;
+        break;
+    }
+    Log.v(TAG, "isAutoTest:" + isAutoTest);
+
+    if(isAutoTest){
+      currenttestitem = currenttestitem + 1;
+      if(currenttestitem == testitem.length){
+        Intent intent2 = new Intent();
+        intent2.setClass(this, Report.class);
+        if(AutoTested == 0){
+          AutoTested = 1;
+        }
+        boolean pass = true;
+        for(int i=0 ; i < testitem.length; i++){
+          if(autotestResult[i] != FactoryMode.TEST_OK){
+            pass = false;
+          }
+        }
+        if(pass){
+          ATPC++;
+        }
+        saveTestReport(true);
+        autoreportButton.setText(getReportText());
+        startActivity(intent2);
+      } else {
+        saveTestReport(true);
+        TestSelectedItem(testitem[currenttestitem]);
+      }
+    }else{
+      saveTestReport(false);
+    }
+  }
+  
+  private String getReportText() {
+    String text = this.getString(R.string.AutoTestReport); 
+    if(AutoTested == 0){
+      text = text + " : \n UNTESTED";
+      return text;
+    }
+    boolean pass = true;
+    for(int i = 0; i < testitem.length ; i++){
+      if(autotestResult[i] != FactoryMode.TEST_OK){
+        pass = false;
+        break;
+      }
+    }
+    if(pass && ATPC > 0){
+      text = text + " : \n PASS : " + ATPC;
+    } else if(ATPC == 0 || !pass){
+      text = text + " : \n NOT PASS ";
+    }
+    return text;
+  }
+  
+  public void saveTestResult(boolean bPass){
+    String str = IATUtils.sendATCmd("AT+SGMR=0,0,4","atchannel0");
+    Log.d(TAG, "=========setSuccess get result str = " + str);
+    if(str.contains(IATUtils.AT_OK)){
+      String[] paser = str.split("\n");
+      String[] paser1 = paser[0].split(":");
+      mBit = getBitStr(paser1[1].trim());
+      Log.d(TAG, "========mBit: " + mBit);
+      long cc = 0L;
+      if(bPass) {
+        cc = Long.parseLong(mBit, 16) | Long.parseLong("08000000", 16);
+        str = IATUtils.sendATCmd("AT+SGMR=0,1,4,\"" + get8Bit("" + Long.toHexString(cc)) + "\"","atchannel0");
+        Log.d(TAG, "=========setSuccess set result cc = "+ Long.toHexString(cc) + ", str = " + str);
+      } else {
+        cc = Long.parseLong(mBit, 16) & Long.parseLong("F7FFFFFF", 16);
+        str = IATUtils.sendATCmd("AT+SGMR=0,1,4,\"" + get8Bit_fail("" + Long.toHexString(cc)) + "\"","atchannel0");
+        Log.d(TAG, "******setSuccess set result cc = " + Long.toHexString(cc) + ", str = " + str);
+      }
+    }	
+  }
+  
+  public void saveTestReport(boolean bSaveResult){
+    File targetFile = new File(NV_DB_PATH);
+    if (!targetFile.exists()) {
+      Log.w(TAG, "saveTestReport: file not exist!");
+      try {
+        if (!targetFile.createNewFile()) {
+          Log.w(TAG, "createNewFile Failed!");
+          return;
+        }
+      }catch (IOException e) {
+        e.printStackTrace();
+      }
+    }
+    PrintWriter out = null;
+    String resultStr = "" + ATPC + ":" + AutoTested;
+    boolean pass = true;
+    for(int i = 0 ; i < testitem.length ; i++){
+      StringBuilder resultBuilder = new StringBuilder(3);
+      switch (testResult[i]) {
+        case TEST_OK:
+        resultBuilder.append("P");
+        break;
+        case TEST_FAIL:
+        resultBuilder.append("F");
+        break;
+        case UNTESTED:
+        resultBuilder.append("U");
+        break;
+      }
+      switch (autotestResult[i]) {
+        case TEST_OK:
+        resultBuilder.append("P");
+        break;
+        case TEST_FAIL:
+        resultBuilder.append("F");
+        break;
+        case UNTESTED:
+        resultBuilder.append("U");
+        break;
+      }
+      switch (LTResult[i]) {
+        case TEST_OK:
+        resultBuilder.append("P");
+        break;
+        case TEST_FAIL:
+        resultBuilder.append("F");
+        break;
+        case UNTESTED:
+        resultBuilder.append("U");
+        break;
+      }
+      resultStr = resultStr + ":" + resultBuilder.toString();
+      if(autotestResult[i] != FactoryMode.TEST_OK){
+        pass = false;
+      }
+    }
+    if(bSaveResult) {
+      saveTestResult(pass);
+      Log.i("ttttttttttttttttttttttttttt","MMI_STATION =" + MMI_STATION);
+      saveFlag(pass,MMI_STATION);
+    }
+    
+    try {
+      out = new PrintWriter(new BufferedWriter(new FileWriter(NV_DB_PATH)));
+      out.println(resultStr);
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    
+    if(out != null) {
+      out.close();
+    }	
+  }
+  
+  private void saveFlag(boolean bPass,int station){
+    PhaseCheckParse parse = new PhaseCheckParse();
+    if(bPass){
+      parse.writeStationTested(station-1);
+      parse.writeStationPass(station-1);
+    }else{
+      parse.writeStationTested(station-1);
+      parse.writeStationFail(station-1);
+    }
+  }
+
+  public void getTestReport() {
+    File targetFile = new File(NV_DB_PATH);
+    if (!targetFile.exists()) {
+      Log.e(TAG, "getTestReport: file not exist!");
+      AutoTested= 0;
+      for(int i = 0; i < testitem.length ; i++){
+        testResult[i] = 0;
+        autotestResult[i] = 0;
+        LTResult[i] = 0;
+      }
+      return ;
+    }
+    BufferedReader in = null;
+    String resultStr = null;
+    try {
+      in = new BufferedReader(new FileReader(NV_DB_PATH));
+      try {
+        resultStr = in.readLine();
+      } catch (IOException e) {
+        // TODO Auto-generated catch block
+        e.printStackTrace();
+      }
+    } catch (FileNotFoundException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    if(in != null) {
+      try {
+        in.close();
+      } catch (IOException e) {
+        // TODO Auto-generated catch block
+        e.printStackTrace();
+      }
+    }
+    Log.v(TAG, "getTestReport = " + resultStr);
+    if(resultStr == null || resultStr.isEmpty()) {
+      return ;
+    }
+    String[] result = resultStr.split(":");
+    ATPC = Integer.parseInt(result[0]);
+    AutoTested= Integer.parseInt(result[1]);
+    for(int i = 0 ; i < result.length && i+2 < result.length ; i++) {
+      switch(result[i+2]){
+        case UNTESTED_UNTESTED_UNTESTED:
+          testResult[i] = UNTESTED;
+          autotestResult[i] = UNTESTED;
+          LTResult[i] = UNTESTED;
+          break;
+        case UNTESTED_FAIL_FAIL:
+          testResult[i] = UNTESTED;
+          autotestResult[i] = TEST_FAIL;
+          LTResult[i] = TEST_FAIL;
+          break;
+        case FAIL_UNTESTED_FAIL:
+          testResult[i] = TEST_FAIL;
+          autotestResult[i] = UNTESTED;
+          LTResult[i] = TEST_FAIL;
+          break;
+        case FAIL_FAIL_FAIL:
+          testResult[i] = TEST_FAIL;
+          autotestResult[i] = TEST_FAIL;
+          LTResult[i] = TEST_FAIL;
+          break;
+        case UNTESTED_PASS_PASS:
+          testResult[i] = UNTESTED;
+          autotestResult[i] = TEST_OK;
+          LTResult[i] = TEST_OK;
+          break;
+        case PASS_UNTESTED_PASS:
+          testResult[i] = TEST_OK;
+          autotestResult[i] = UNTESTED;
+          LTResult[i] = TEST_OK;
+          break;
+        case PASS_PASS_PASS:
+          testResult[i] = TEST_OK;
+          autotestResult[i] = TEST_OK;
+          LTResult[i] = TEST_OK;
+          break;
+        case PASS_FAIL_PASS:
+          testResult[i] = TEST_OK;
+          autotestResult[i] = TEST_FAIL;
+          LTResult[i] = TEST_OK;
+          break;
+        case PASS_FAIL_FAIL:
+          testResult[i] = TEST_OK;
+          autotestResult[i] = TEST_FAIL;
+          LTResult[i] = TEST_FAIL;
+          break;
+        case FAIL_PASS_PASS:
+          testResult[i] = TEST_FAIL;
+          autotestResult[i] = TEST_OK;
+          LTResult[i] = TEST_OK;
+          break;
+        case FAIL_PASS_FAIL:
+          testResult[i] = TEST_FAIL;
+          autotestResult[i] = TEST_OK;
+          LTResult[i] = TEST_FAIL;
+          break;
+      }
+    }
+  }
+  
+  public void TestSelectedItem(int selectedItem) {
+    Intent intent = new Intent();
+    Log.d(TAG, "TestSelectedItem,selectedItem:" + selectedItem);
+    if(selectedItem >= TESTITEM_START && selectedItem < TESTITEM_TATOL) {
+      currenttestitem = getIndex(selectedItem);
+    }
+    switch (selectedItem) {
+      case TESTITEM_VERSION:
+        intent.setClass(this, Version.class);
+        startActivityForResult(intent,TESTITEM_VERSION); 
+        break;
+    //case TESTITEM_RF_CALI:
+    //  intent.setClass(this, RFCali.class);
+    //  startActivityForResult(intent,TESTITEM_RF_CALI);
+    //  break;
+      case TESTITEM_TOUCH:
+        intent.setClass(this, BlockTest.class);
+        startActivityForResult(intent,TESTITEM_TOUCH); 
+        break;
+      case TESTITEM_LCD:
+        intent.setClass(this, LCD.class);
+        startActivityForResult(intent,TESTITEM_LCD); 
+        break;
+      case TESTITEM_GPS:
+        intent.setClass(this, GPS.class);
+        startActivityForResult(intent,TESTITEM_GPS); 
+        break;
+      case TESTITEM_POWER:
+        intent.setClass(this, BatteryLog.class);
+        startActivityForResult(intent,TESTITEM_POWER); 
+        break;
+      case TESTITEM_KEY:
+        intent.setClass(this, KeyCode.class);
+        startActivityForResult(intent,TESTITEM_KEY); 
+        break;
+      case TESTITEM_SPEAKER:
+        intent.setClass(this, Speaker.class);
+        startActivityForResult(intent,TESTITEM_SPEAKER); 
+        break;
+      case TESTITEM_HEADSET:
+        intent.setClass(this, HeadSet.class);
+        startActivityForResult(intent,TESTITEM_HEADSET); 
+        break;
+      case TESTITEM_MIC:
+        intent.setClass(this,MicRecorder.class);
+        startActivityForResult(intent, TESTITEM_MIC);
+        break;
+      case TESTITEM_LSENSORCALI:
+        intent.setClass(this, LSensorCali.class);
+        startActivityForResult(intent, TESTITEM_LSENSORCALI);
+        break;
+    //case TESTITEM_RECEIVER:
+    //  intent.setClass(this, Earphone.class);
+    //  startActivityForResult(intent, TESTITEM_RECEIVER);
+    //  break;
+      case TESTITEM_WIFI:
+        intent.setClass(this, WiFiTest.class);
+        startActivityForResult(intent, TESTITEM_WIFI);
+        break;
+      case TESTITEM_BT:
+        intent.setClass(this, Bluetooth.class);
+        startActivityForResult(intent, TESTITEM_BT);
+        break;
+      case TESTITEM_SHAKE:
+        intent.setClass(this, Vibratortest.class);
+        startActivityForResult(intent, TESTITEM_SHAKE);
+        break;
+      case TESTITEM_CALL:
+        intent.setClass(this, Signal.class);
+        startActivityForResult(intent, TESTITEM_CALL);
+        break;
+      case TESTITEM_BL:
+        intent.setClass(this, BackLight.class);
+        startActivityForResult(intent, TESTITEM_BL);
+        break;
+      case TESTITEM_MEMORY:
+        intent.setClass(this, Memory.class);
+        startActivityForResult(intent, TESTITEM_MEMORY);
+        break;
+      case TESTITEM_GSENSOR:
+        intent.setClass(this, GSensor.class);
+        startActivityForResult(intent, TESTITEM_GSENSOR);
+        break;
+    /*  case TESTITEM_MSENSOR:
+        intent.setClass(this, MSensor.class);
+        startActivityForResult(intent, TESTITEM_MSENSOR);
+        break;*/
+      case TESTITEM_LSENSOR:
+        intent.setClass(this, LSensor.class);
+        startActivityForResult(intent, TESTITEM_LSENSOR);
+        break;
+      case TESTITEM_DSENSOR:
+        intent.setClass(this, PSensor.class);
+        startActivityForResult(intent, TESTITEM_DSENSOR);
+        break;
+      case TESTITEM_TCARD:
+        intent.setClass(this, SDCard.class);
+        startActivityForResult(intent, TESTITEM_TCARD);
+        break;
+      case TESTITEM_BCAMERA:
+        intent.setClass(this, CameraTest.class);
+        startActivityForResult(intent, TESTITEM_BCAMERA);
+        break;
+      case TESTITEM_FCAMERA:
+        intent.setClass(this, SubCamera.class);
+        startActivityForResult(intent, TESTITEM_FCAMERA);
+        break;
+      case TESTITEM_FM:
+        intent.setClass(this, FMRadio.class);
+        startActivityForResult(intent, TESTITEM_FM);
+        break;
+      case TESTITEM_SIM:
+        intent.setClass(this, SimCard.class);
+        startActivityForResult(intent, TESTITEM_SIM);
+        break;
+  /*  case TESTITEM_HALL:
+      intent.setClass(this,Hall.class);
+      startActivityForResult(intent, TESTITEM_HALL);
+      break;*/
+    //case TESTITEM_TPRAWDATA:
+    //  intent.setClass(this, TPrawdata.class);
+    //  startActivityForResult(intent, TESTITEM_TPRAWDATA);
+    //case TESTITEM_LED:
+    //  intent.setClass(this, Led.class);
+    //  startActivityForResult(intent, TESTITEM_LED);
+    //  break;
+      case TESTITEM_FLASHLIGHT:
+        intent.setClass(this, FlashLight.class);
+        startActivityForResult(intent, TESTITEM_FLASHLIGHT);
+        break;
+      default:
+        break;
+    }
+  }
+
+	public String getStringbyitemid(int item_id) {
+		String str = null;
+		switch (item_id) {
+		case TESTITEM_VERSION:
+			str = getString(R.string.version_info);
+			break;			
+		//case TESTITEM_RF_CALI:
+		//	str = getString(R.string.rf_cali);
+		//	break;	
+		case TESTITEM_TOUCH:
+			str = getString(R.string.touchscreen_name);
+			break;
+		case TESTITEM_LCD:
+			str = getString(R.string.lcd_name);
+			break;
+		case TESTITEM_GPS:
+			str = getString(R.string.gps_name);
+			break;
+		case TESTITEM_POWER:
+			str = getString(R.string.battery_name);
+			break;
+		case TESTITEM_KEY:
+			str = getString(R.string.KeyCode_name);
+			break;
+		case TESTITEM_SPEAKER:
+			str = getString(R.string.speaker_name);
+			break;
+		case TESTITEM_HEADSET:
+			str = getString(R.string.headset_name);
+			break;
+		case TESTITEM_MIC:
+			str = getString(R.string.microphone_name);
+			break;
+		case TESTITEM_LSENSORCALI:
+			str = getString(R.string.lsensor_cali_name);
+			break;
+		//case TESTITEM_RECEIVER:
+		//	str = getString(R.string.earphone_name);
+		//	break;
+		case TESTITEM_WIFI:
+			str = getString(R.string.wifi_name);
+			break;
+		case TESTITEM_BT:
+			str = getString(R.string.bluetooth_name);
+			break;
+		case TESTITEM_SHAKE:
+			str = getString(R.string.vibrator_name);
+			break;
+		case TESTITEM_CALL:
+			str = getString(R.string.telephone_name);
+			break;
+		case TESTITEM_BL:
+			str = getString(R.string.backlight_name);
+			break;
+		case TESTITEM_MEMORY:
+			str = getString(R.string.memory_name);
+			break;
+		case TESTITEM_GSENSOR:
+			str = getString(R.string.gsensor_name);
+			break;
+	//	case TESTITEM_MSENSOR:
+	//		str = getString(R.string.msensor_name);
+	//		break;
+		case TESTITEM_LSENSOR:
+			str = getString(R.string.lsensor_name);
+			break;
+		case TESTITEM_DSENSOR:
+			str = getString(R.string.psensor_name);
+			break;
+		case TESTITEM_TCARD:
+			str = getString(R.string.sdcard_name);
+			break;
+		case TESTITEM_BCAMERA:
+			str = getString(R.string.camera_name);
+			break;
+		case TESTITEM_FCAMERA:
+			str = getString(R.string.subcamera_name);
+			break;
+		case TESTITEM_FM:
+			str = getString(R.string.FMRadio);
+			break;
+		case TESTITEM_SIM:
+			str = getString(R.string.SimCard);
+			break;
+		/*case TESTITEM_HALL:
+			str = getString(R.string.Hall);
+			break;*/
+		/*case TESTITEM_TPRAWDATA:
+		    str = getString(R.string.tp_raw_data_text);
+		    break;*/
+		//case TESTITEM_LED:
+		//	str = getString(R.string.Led);
+		//	break;
+		case TESTITEM_FLASHLIGHT:
+			str = getString(R.string.flashlight);
+			break;
+		default:
+			break;
+		}
+		return str;
+	}
+  
+  private String getBitStr(String str) {
+    String result = null;
+    int ind = str.indexOf("0x");
+    result = str.substring(ind + 2);
+    return result.trim();
+  }
+  
+  private String get8Bit(String src) {
+    return (src.length() < 8) ? "0" + src : src;
+  }
+  
+  private String get8Bit_fail(String src) {
+    while(src.length() < 8) {
+      src = "0" + src;
+    }
+    return src;
+  }
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/TouchView.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/TouchView.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/TouchView.java	(revision 166460)
@@ -0,0 +1,142 @@
+package com.mediatek.factorymode;
+
+import java.util.ArrayList;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.FontMetricsInt;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+public class TouchView extends View{
+
+
+	private final Paint mPaint;
+	private final Paint mTargetPaint;
+	private final FontMetricsInt mTextMetrics = new FontMetricsInt();
+	public ArrayList< ArrayList<PT> > mLines = new ArrayList< ArrayList<PT> >();
+	ArrayList<PT> curLine;	
+	public ArrayList<VelocityTracker> mVelocityList	= new ArrayList<VelocityTracker>();
+	private int mHeaderBottom;
+	private boolean mCurDown;
+	private int mCurX;
+	private int mCurY;
+	private float mCurPressure;
+	private int mCurWidth;
+	private VelocityTracker mVelocity;
+
+	public TouchView(Context context) {
+		super(context);
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		mPaint.setARGB(255,0,255, 0);
+		mPaint.setStyle(Paint.Style.STROKE);
+		mPaint.setStrokeWidth(3);
+		
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(false);
+		mTargetPaint.setARGB(255, 0, 255, 0);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(3);
+	}
+	public TouchView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		mPaint.setARGB(255,0, 255, 0);
+		mPaint.setStyle(Paint.Style.STROKE);
+		mPaint.setStrokeWidth(3);
+		
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(false);
+		mTargetPaint.setARGB(255, 0, 255, 0);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(3);
+	}
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		int w = getWidth() / 5;
+		int base = -mTextMetrics.ascent + 1;
+		int bottom = mHeaderBottom;
+		
+		int lineSz = mLines.size();
+		int k = 0;
+		for(k=0; k<lineSz; k++)	
+		{
+			ArrayList<PT> m = mLines.get(k);
+			
+			float lastX = 0, lastY = 0;
+			//mPaint.setARGB(255, 255, 0, 0);
+			int sz = m.size();
+			int i = 0;
+			for(i=0; i<sz; i++)
+			{	
+				PT n = m.get(i);			
+				if(i>0)
+				{
+				  canvas.drawLine(lastX, lastY, n.x, n.y, mTargetPaint);
+				  canvas.drawPoint(lastX, lastY, mTargetPaint);
+				}					
+				lastX = n.x;
+				lastY = n.y;
+			}	
+		}
+	}
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		int action = event.getAction();
+		if (action == MotionEvent.ACTION_DOWN) {
+			
+			mVelocity = VelocityTracker.obtain();
+			mVelocityList.add(mVelocity);
+			
+			curLine = new ArrayList<PT>() ;			
+			mLines.add(curLine);				
+		}
+		mVelocity.addMovement(event);
+		mVelocity.computeCurrentVelocity(1);
+		final int N = event.getHistorySize();
+		for (int i = 0; i < N; i++) {
+			curLine.add(new PT(event.getHistoricalX(i), event.getHistoricalY(i)));
+		}
+		curLine.add(new PT(event.getX(), event.getY()));
+		mCurDown = action == MotionEvent.ACTION_DOWN
+				|| action == MotionEvent.ACTION_MOVE;
+		mCurX = (int) event.getX();
+		mCurY = (int) event.getY();
+		mCurPressure = event.getPressure();
+		mCurWidth = (int) (event.getSize() * (getWidth()/3));
+
+		invalidate();
+		return true;
+	}
+	public class PT
+	{
+		public Float x;
+		public Float y;
+		public PT(Float x, Float y)
+		{
+			this.x = x;
+			this.y = y;
+		}
+	};
+	public void Clear() {
+		for(ArrayList<PT> m: mLines)
+		{
+			m.clear();
+		}			
+		mLines.clear();		
+		mVelocityList.clear();
+		invalidate();
+	}
+
+
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/wifi/WiFiTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/wifi/WiFiTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/wifi/WiFiTest.java	(revision 166460)
@@ -0,0 +1,272 @@
+package com.mediatek.factorymode.wifi;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.bluetooth.BluetoothDevice;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.wifi.ScanResult;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.ChargeAlertDialog;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.bluetooth.Bluetooth;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class WiFiTest extends Activity{
+	private TextView wifistate;
+	private TextView wifiresult;
+	private WifiManager mWifiManager;
+	private WifiStateReceiver mWifiStateReceiver;
+	
+	private final int SET_WIFI_ADDRESS=1;
+	
+	List<ScanResult> currentWifiList;
+	Button succesButton ;
+	Button failButton ;
+	public boolean wifiFlag = false;
+	Handler handlerWiFi;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.wifi_test);
+		wifistate = (TextView)this.findViewById(R.id.wifi_state_id);
+		wifiresult = (TextView)this.findViewById(R.id.wifi_result_id);
+
+		
+		succesButton = (Button)this.findViewById(R.id.wifi_bt_ok);
+		failButton = (Button)this.findViewById(R.id.wifi_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		if(FactoryMode.isAutoTest) {
+		  FactoryMode.shouldCharge = true;
+		  if(!FactoryMode.isCharging) {
+			  Intent intent = new Intent();
+			  intent.setClass(WiFiTest.this, ChargeAlertDialog.class);
+			  startActivity(intent); 
+		  }
+		}
+	}
+	
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		mWifiManager.setWifiEnabled(false);
+		super.onDestroy();
+	}
+
+	@Override
+	protected void onStop() {
+		if(mWifiStateReceiver != null) {
+			this.unregisterReceiver(mWifiStateReceiver);
+			mWifiStateReceiver = null;
+		}
+		
+		if(currentWifiList != null) {
+			currentWifiList.clear();
+			currentWifiList = null;
+		}
+		
+		if(mWifiManager != null) {
+			mWifiManager.setWifiEnabled(false);
+		}
+		
+		super.onStop();
+	}
+	
+	class WifiStateReceiver extends BroadcastReceiver {     
+		   public void onReceive(Context c, Intent intent) {
+			  String action = intent.getAction();
+			  Log.d("wifi>>>>>>>>>>>>>action", action);
+			  
+			  if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(action)) {
+				  Bundle bundle = intent.getExtras();
+				  int oldInt = bundle.getInt("previous_wifi_state");
+				  int newInt = bundle.getInt("wifi_state");
+				  
+				  if(newInt==WifiManager.WIFI_STATE_DISABLED) {
+					  //onWifiStateChange();
+					  wifistate.setText(getString(R.string.WiFi_info_close));
+				  }else if (newInt == WifiManager.WIFI_STATE_ENABLED){
+					 // wifistate.setText(getString(R.string.WiFi_info_open));
+					 mHandler.sendEmptyMessageDelayed(SET_WIFI_ADDRESS, 1000);
+				  }else if (newInt == WifiManager.WIFI_STATE_ENABLING){
+					  wifistate.setText(getString(R.string.WiFi_info_opening));
+				  }else if(newInt==WifiManager.WIFI_STATE_DISABLING){
+					  wifistate.setText(R.string.WiFi_info_closeing);
+				  }else {
+		       
+				  }
+			  }else if (WifiManager.SCAN_RESULTS_AVAILABLE_ACTION.equals(action)){
+				  currentWifiList = mWifiManager.getScanResults();  
+				  Log.d("wifi>>>>>>>>>>>>>action", "size="+currentWifiList.size());
+				  if((currentWifiList == null) || (currentWifiList.size() == 0)) {
+					  return;
+				  }
+				  String listview = " ";
+				  Log.d("wifi>>>>>>>>>>>>>action", "listview = "+listview);
+				  Log.i("wifi","currentWifiList.get(i).SSID="+currentWifiList.get(0).SSID);
+				  //Log.i("wifi","currentWifiList.get(i).SSID="+currentWifiList.get(1).SSID);
+				  for (int i = currentWifiList.size() - 1; i > 0; i--)
+				  {
+					  //currentWifiList.get(i).BSSID;
+					  Log.i("wifi","currentWifiList.get(i).SSID="+currentWifiList.get(i).SSID);
+					  if((currentWifiList.get(i).SSID).equals("NVRAM WARNING: Err = 0x10")){
+						listview = " ";
+					  }else{
+						listview = currentWifiList.get(i).SSID+"\n" +listview;
+					  }
+					  
+					  Log.v("wwwwwwww", listview);
+				  }
+                  if(null == listview || " ".equals(listview)){
+						Log.d("wifi>>>>>>>>>>>>>action", "listview = 11111");
+						return;
+					}
+				  wifiresult.setText(listview +"");
+// yaoming, If WIFI is tested jumps to next item, 20130426	
+				  succesButton.setEnabled(true);
+				  if(FactoryMode.isAutoTest){
+				  Message msg = new Message();
+				  msg.what = 0x1231;
+				  handlerWiFi.sendMessage(msg);
+				  }
+			  }
+		}
+	}
+	public static String StringizeIp(int ip) {
+		  int ip4 = (ip>>24) & 0x000000FF;
+		  int ip3 = (ip>>16) & 0x000000FF;
+		  int ip2 = (ip>> 8 )& 0x000000FF;
+		  int ip1 = ip       & 0x000000FF;
+		  return Integer.toString(ip1) + "." + ip2 + "." + ip3 + "." + ip4;
+		}
+	private void onWifiStateChange() {
+        String ip_str = "";
+        WifiInfo info = mWifiManager.getConnectionInfo();
+        if(info != null) {
+         int ipaddr = info.getIpAddress();
+         String wifissid = info.getSSID();
+         ip_str = " (ip="+StringizeIp(ipaddr)+")";
+        }
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+	
+	private Handler mHandler = new Handler(){
+
+		@Override
+		public void handleMessage(Message msg) {
+			switch(msg.what){
+			case SET_WIFI_ADDRESS:
+		     WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
+		     WifiInfo wifiInfo = wifiManager.getConnectionInfo();
+		     String  macAddress = wifiInfo == null ? null : wifiInfo.getMacAddress();
+		     if( macAddress==null )
+		     {
+			    macAddress  = "unavailable";
+		     }
+		
+			   wifistate.setText(getString(R.string.WiFi_info_open)+"\nWIFI MAC: " + macAddress);
+					
+				break;
+			default:
+				break;
+			
+			}
+			super.handleMessage(msg);
+		}
+		
+	};
+	
+	@Override
+	protected void onResume(){
+		if((FactoryMode.isAutoTest && FactoryMode.isCharging) || !FactoryMode.isAutoTest) {
+			mWifiManager= (WifiManager)this.getSystemService(this.WIFI_SERVICE);
+			if(mWifiManager.isWifiEnabled())
+			{
+				//wifistate.setText(getString(R.string.WiFi_info_open));
+				
+				mHandler.sendEmptyMessageDelayed(SET_WIFI_ADDRESS, 1000);
+				
+			}else{
+				wifistate.setText(getString(R.string.WiFi_info_opening));
+			}
+			mWifiManager.setWifiEnabled(true);
+			IntentFilter intentFilter = new IntentFilter();
+			intentFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
+			intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
+
+			
+			mWifiStateReceiver = new WifiStateReceiver();
+			registerReceiver(mWifiStateReceiver, intentFilter);
+			mWifiManager.startScan();
+			wifiresult.setText(getString(R.string.WiFi_scaning));
+			handlerWiFi = new Handler() {
+				@Override
+				public void handleMessage(Message msg) {
+					super.handleMessage(msg);
+					if (msg.what == 0x1231) {
+							Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+							setResult(FactoryMode.TEST_OK,intent);
+							finish();	
+					}
+				}
+			};
+		}
+		super.onResume();
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/rfcali/RFCali.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/rfcali/RFCali.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/rfcali/RFCali.java	(revision 166460)
@@ -0,0 +1,149 @@
+package com.mediatek.factorymode.rfcali;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.content.Intent;
+
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.engconstents;
+import com.mediatek.factorymode.IATUtils;
+
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.telephony.TelephonyManager;
+
+public class RFCali extends Activity {
+	private static final String TAG = "RFCali";
+	
+	private TextView mRF_Cali;
+	private Button mSuccessButton;
+	private Button mFailButton;
+	
+	private int mSocketId = 0;
+	private String mATline = null;
+	private ByteArrayOutputStream outputBuffer;
+    private DataOutputStream outputBufferStream;
+    private String str = null;
+    private String atResponse = null;
+    private Handler mUiHandler = new Handler();
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.rfcali);
+		
+		mRF_Cali = (TextView)findViewById(R.id.rf_cali);
+		mSuccessButton = (Button)findViewById(R.id.rf_bt_ok);
+		mFailButton = (Button)findViewById(R.id.rf_bt_failed);
+		
+		mSuccessButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(RFCali.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		
+		mFailButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(RFCali.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		        
+        displayRFCali();
+	}
+
+    private void displayRFCali() {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+ /*               int modemType = TelephonyManager.getDefault().getModemType();
+
+                if (modemType == TelephonyManager.MODEM_TYPE_TDSCDMA) {
+                    str = "GSM/TD ";
+                } else {
+                    str = "GSM ";
+                }
+                atResponse = IATUtils.sendATCmd("AT+SGMR=0,0,3,0", "atchannel0");
+                str += atResponse;
+
+                if (modemType == TelephonyManager.MODEM_TYPE_WCDMA) {
+                    str += "WCDMA ";
+                    atResponse = IATUtils.sendATCmd("AT+SGMR=0,0,3,1", "atchannel0");
+                    str += atResponse;
+                }
+                mUiHandler.post(new Runnable() {
+                    public void run() {
+                        if(atResponse != null && atResponse.length() > 0) {
+                            mRF_Cali.setText(atResponse);
+                    		Intent intent = new Intent(RFCali.this, FactoryMode.class);
+    				setResult(FactoryMode.TEST_OK,intent);
+    				finish();
+                        } else {
+            			Intent intent = new Intent(RFCali.this, FactoryMode.class);
+    				setResult(FactoryMode.TEST_CANCEL,intent);
+    				finish();
+                        }
+                    }
+                });*/
+            }
+        }).start();
+    }
+		
+	private boolean isMyInfo(String info) {
+		boolean ret = false;
+		
+		if(info == null) {
+			return false;
+		}
+		
+		if(!info.contains("850AGC") && 
+				!info.contains("850APC") && 
+				!info.contains("Final test") && 
+				!info.contains("Final Test") && 
+				!info.contains("CMMB Test") && 
+				!info.contains("MMI Test") &&
+				!info.contains("ANT Test")) {
+			ret = true;
+		}
+		
+		return ret;
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(RFCali.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/audio/AudioTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/audio/AudioTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/audio/AudioTest.java	(revision 166460)
@@ -0,0 +1,5 @@
+package com.mediatek.factorymode.audio;
+
+public class AudioTest {
+
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/lcd/LCD.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/lcd/LCD.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/lcd/LCD.java	(revision 166460)
@@ -0,0 +1,197 @@
+package com.mediatek.factorymode.lcd;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import android.R.bool;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import android.util.Log;
+public class LCD extends Activity {
+
+	private int colorindex = 1;
+	private static final int COLORRED = 1;
+	private static final int COLORGREEN = 2;
+	private static final int COLORBLUE = 3;
+	private static final int COLORWHITE = 4;
+	private static final int COLORGRAY = 5;
+	private static final int COLOR_MAX = 6;
+	
+	private TextView lcdtextview;
+	private Button succesButton ;
+	private Button failButton ;
+	private Toast mToast;
+
+	Timer timer = new Timer();
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);   
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND); 
+		setContentView(R.layout.lcd);
+		lcdtextview = (TextView)this.findViewById(R.id.test_color_text1);
+		succesButton = (Button)findViewById(R.id.lcd_bt_ok);
+		failButton = (Button)findViewById(R.id.lcd_bt_failed);
+		succesButton.setVisibility(View.GONE);
+		failButton.setVisibility(View.GONE);
+		colorindex = 1;
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LCD.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LCD.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+		mToast = Toast.makeText(this, getString(R.string.lcd_hint), Toast.LENGTH_LONG);
+		mToast.show();
+		Message message = new Message();
+		message.what= colorindex;
+		handler.sendMessage(message);
+		/*
+		timer.scheduleAtFixedRate(new TimerTask() {
+			public void run()
+			{
+				colorindex++;
+				Message message = new Message();
+				message.what= colorindex;
+				handler.sendMessage(message);
+			}
+		}, 0, 1000);
+		*/
+	}
+
+	@Override
+	protected void onDestroy() {
+		if(timer != null) {
+			timer.cancel();
+		}
+		
+		if(mToast != null) {
+			mToast.cancel();
+		}
+		
+		super.onDestroy();
+	}
+	private Handler handler = new Handler() {
+
+		@Override
+		public void handleMessage(Message msg) {
+			// TODO Auto-generated method stub
+
+			if (colorindex >= COLOR_MAX) {
+				/*
+				colorindex = 1;
+				timer.cancel();
+				AlertDialog.Builder dialog=new AlertDialog.Builder(LCD.this);
+				dialog.setTitle(getString(R.string.Report)).setMessage(getString(R.string.Report)).setPositiveButton(getString(R.string.Success), new DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						goback(FactoryMode.TEST_OK);
+					}
+				}).setNegativeButton(getString(R.string.Failed), new DialogInterface.OnClickListener() {
+					public void onClick(DialogInterface dialog, int which) {
+						goback(FactoryMode.TEST_CANCELED);
+					}
+				}).create().show();
+			 */
+				lcdtextview.setVisibility(View.GONE);
+				succesButton.setVisibility(View.VISIBLE);
+				failButton.setVisibility(View.VISIBLE);
+			}
+			
+			switch (colorindex) {
+			case COLORRED:
+				lcdtextview.setBackgroundColor(Color.RED);
+				break;
+			case COLORGREEN:
+				lcdtextview.setBackgroundColor(Color.GREEN);
+				break;
+			case COLORBLUE:
+				lcdtextview.setBackgroundColor(Color.BLUE);
+				break;
+				
+			case COLORWHITE:
+				lcdtextview.setBackgroundColor(Color.WHITE);
+				break;
+				
+			case COLORGRAY:
+				lcdtextview.setBackgroundColor(Color.GRAY);
+				break;
+				
+			default:
+				break;
+			}
+			super.handleMessage(msg);
+		}
+	};
+	private void goback(int flag) {
+		// TODO Auto-generated method stub
+		Intent intent=new Intent();  
+	    intent.setClass(LCD.this, FactoryMode.class);  
+	    setResult(flag,intent);
+	    finish();
+	}
+	
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_HOME:
+			colorindex++;
+			Message message = new Message();
+			message.what= colorindex;
+			handler.sendMessage(message);
+			break;
+		}
+		return super.onKeyDown(keyCode, event);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		// TODO Auto-generated method stub
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(LCD.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/engfetch.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/engfetch.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/engfetch.java	(revision 166460)
@@ -0,0 +1,142 @@
+package com.mediatek.factorymode;
+
+//import android.preference.PreferenceActivity;
+import android.util.Log;
+
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class engfetch  {
+    
+    private static final String TAG = "engfetch";
+    
+    static {
+    	// The runtime will add "lib" on the front and ".o" on the end of
+    	// the name supplied to loadLibrary.
+        System.loadLibrary("factorymodeljni");
+    }
+/*    
+    public int engopen() throws IOException {
+    	int result = engf_open();
+    	if (result >=0){
+    		return result;
+    	} else {
+    		throw new IOException("engopen result=0x" + Integer.toHexString(result));
+    	}
+    }
+    public void engclose(int fd){
+    	engf_close(fd);
+    }
+    //get from writeEntityData function
+    public int engwrite(int fd, byte[] data, int dataSize) throws IOException {
+        int result = engf_write(fd, data, dataSize);
+        if (result >= 0) {
+            return result;
+        } else {
+            throw new IOException("engwrite result=0x" + Integer.toHexString(result));
+        }
+    }
+    
+    //get from readEntityData function
+    public int engread(int fd, byte[] data, int size) throws IOException {
+        if (true) {
+            int result = engf_read(fd, data, size);
+            if (result >= 0) {
+                return result;
+            } else {
+                throw new IOException("result=0x" + Integer.toHexString(result));
+            }
+        } else {
+            throw new IllegalStateException("engread not read");
+        }
+    }    
+    */
+    /**
+     * write cmd
+     * by wangxiaobin
+     */
+    public void writeCmd(String cmd){
+        int sockid;
+        
+        sockid = engopen();
+        
+        ByteArrayOutputStream outputBuffer = new ByteArrayOutputStream();
+        DataOutputStream outputBufferStream = new DataOutputStream(outputBuffer);
+
+
+        String str=String.format("CMD:%s",cmd);
+        try {
+            outputBufferStream.writeBytes(str);
+        } catch (IOException e) {
+            Log.e(TAG, "writebytes error");
+           return;
+        }
+        engwrite(sockid,outputBuffer.toByteArray(),outputBuffer.toByteArray().length);
+        Log.d(TAG, "write cmd '"+str+"'");
+        engclose(sockid);
+    }
+    
+    public int engopen() {
+    	return engopen(0);
+    }
+
+    public int engopen(int type) {
+    	int result = engf_open(type);
+    	if (result >=0){
+    		return result;
+    	} else {
+    		return 0;
+    	}
+    }
+    
+    public void engclose(int fd){
+    	engf_close(fd);
+    }
+    //get from writeEntityData function
+    public int engwrite(int fd, byte[] data, int dataSize) {
+        int result = engf_write(fd, data, dataSize);
+        if (result >= 0) {
+            return result;
+        } else {
+            return 0;
+        }
+    }
+    
+    //get from readEntityData function
+    public int engread(int fd, byte[] data, int size) {
+        int result = engf_read(fd, data, size);
+        if (result >= 0) {
+            return result;
+        } else {
+            return 0;
+        }
+    }
+    public int enggetphasecheck(byte[] data, int size){
+        return  engf_getphasecheck(data, size);
+    }
+      
+	public boolean tp_init_driver(){
+		if(tp_init()==-1){
+			return false;
+		}
+		return true;
+		
+	}
+
+	public int tp_test(byte[] data,int[] order,int type){
+		int result = lets_test(data,order,type);
+		Log.d(TAG,"lets_test----->result:"+result);
+		return result;
+	}
+
+    //public native int add(int a, int b);
+	private native static int tp_init();
+	private native static int lets_test(byte[] data,int[] order,int type);
+    private native static int engf_open(int type);
+    private native static void engf_close(int sfd);
+    private native static int engf_write(int sfd, byte[] data, int size);    
+    private native static int engf_read(int sfd, byte[] data, int size);
+    private native static int engf_getphasecheck(byte[] data, int size);
+}
+
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/led/Led.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/led/Led.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/led/Led.java	(revision 166460)
@@ -0,0 +1,133 @@
+package com.mediatek.factorymode.led;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.app.NotificationManager;
+import android.app.Notification;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class Led extends Activity {
+	private Button succesButton ;
+	private Button failButton ;
+	private boolean  led_blue_flag = false;
+	private boolean  led_red_flag = false;
+	private boolean  led_green_flag = false;
+	NotificationManager gNotMgr = null;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.led);
+		gNotMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+		Button display_led_red = (Button)this.findViewById(R.id.Display_led_red);
+		display_led_red.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				Notification tBNot = new Notification();
+				tBNot.ledARGB = 0xffff0000;
+				tBNot.ledOnMS = 5000; 
+				//tBNot.ledOffMS = 1000;
+				tBNot.flags |= Notification.FLAG_SHOW_LIGHTS;
+				gNotMgr.notify(10086,tBNot);
+				led_red_flag = true;
+				if(led_blue_flag == true && led_red_flag == true && led_green_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		Button display_led_green = (Button)this.findViewById(R.id.Display_led_green);
+		display_led_green.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				Notification tBNot = new Notification();
+				tBNot.ledARGB = 0xff00ff00;
+				tBNot.ledOnMS = 5000; 
+				//tBNot.ledOffMS = 1000;
+				tBNot.flags |= Notification.FLAG_SHOW_LIGHTS;
+				gNotMgr.notify(10086,tBNot);
+
+				led_green_flag = true;
+				if(led_blue_flag == true && led_red_flag == true && led_green_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		Button display_led_blue = (Button)this.findViewById(R.id.Display_led_blue);
+		display_led_blue.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				Notification tBNot = new Notification();
+				tBNot.ledARGB = 0xff0000ff;
+				tBNot.ledOnMS = 5000; 
+				//tBNot.ledOffMS = 1000;
+				tBNot.flags |= Notification.FLAG_SHOW_LIGHTS;
+				gNotMgr.notify(10086,tBNot);
+
+				led_blue_flag = true;
+				if(led_blue_flag == true && led_red_flag == true && led_green_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		succesButton = (Button)this.findViewById(R.id.display_bt_ok);
+		failButton = (Button)this.findViewById(R.id.display_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Led.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Led.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		}
+	
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		gNotMgr.cancel(10086);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Led.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/bluetooth/Bluetooth.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/bluetooth/Bluetooth.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/bluetooth/Bluetooth.java	(revision 166460)
@@ -0,0 +1,183 @@
+package com.mediatek.factorymode.bluetooth;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import android.app.Activity;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.SimpleAdapter;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.vibratortest.Vibratortest;
+
+public class Bluetooth extends Activity {
+	private TextView btstate;
+	private ListView btlistview;
+	private BluetoothAdapter btadapter;
+	private ArrayAdapter<String> adapter;
+	private Button succesButton ;
+	private Button failButton ;
+	Handler handlerBluetooth;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.btlist);
+		btstate = (TextView) this.findViewById(R.id.bt_state_id);
+		btlistview = (ListView) this.findViewById(R.id.listView1); 
+		adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1);
+
+		btlistview.setAdapter(adapter);
+		btadapter = BluetoothAdapter.getDefaultAdapter();
+		
+		if (btadapter == null) {
+			btstate.setText("not support bluetooth");
+		} else {
+			if (!btadapter.isEnabled()) {
+				btstate.setText(getString(R.string.Bluetooth_opening));
+				btadapter.enable();
+			} else {
+				btstate.setText(getString(R.string.Bluetooth_open));
+			}
+			IntentFilter intentFilter = new IntentFilter();
+			intentFilter.addAction(BluetoothDevice.ACTION_FOUND);
+			intentFilter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
+			this.registerReceiver(receiver, intentFilter);
+			btadapter.startDiscovery();
+			
+		}
+		succesButton = (Button)this.findViewById(R.id.bttest_ok);
+		failButton = (Button)this.findViewById(R.id.bttest_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+// yaoming, If bluetooth is tested jumps to next item, 20130426		
+		handlerBluetooth = new Handler() {
+			@Override
+			public void handleMessage(Message msg) {
+				super.handleMessage(msg);
+				if (msg.what == 0x1232) {
+						Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+						setResult(FactoryMode.TEST_OK,intent);
+						finish();
+				}
+			}
+		};
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		if(btadapter !=null)
+		{
+			btadapter.disable();
+		}
+		super.onDestroy();
+	}
+
+	private BroadcastReceiver receiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			Log.d("BT>>>>>>>>>>>>>action", action);
+			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
+				//
+				
+				BluetoothDevice device = intent
+						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
+				Log.d("BT>>>>>>>>>>>>>"+device.getName(), "22222:"+device.getAddress());
+			
+				adapter.add("device name:" + device.getName() + "\ndevice addr:"
+						+ device.getAddress());
+				btlistview.setAdapter(adapter);
+				succesButton.setEnabled(true);
+//yaoming, If bluetooth is tested jumps to next item, 20130426	
+				 succesButton.setEnabled(true);
+				 Message msg = new Message();
+				 msg.what = 0x1232;
+				 handlerBluetooth.sendMessage(msg);
+			} else if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {
+				
+				String stateExtra = BluetoothAdapter.EXTRA_STATE;  
+                int  btstates = intent.getIntExtra(stateExtra, -1);  
+				if ((btstates == BluetoothAdapter.STATE_TURNING_ON)
+						|| (btstates == BluetoothAdapter.STATE_ON)) {
+					btstate.setText(getString(R.string.Bluetooth_open));
+					btadapter.startDiscovery();
+				} else if ((btstates == BluetoothAdapter.STATE_TURNING_OFF)
+						|| (btstates == BluetoothAdapter.STATE_OFF)) {
+					btstate.setText(getString(R.string.Bluetooth_closed));
+				}
+			}else if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) {
+				//
+				BluetoothDevice device = intent
+						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
+			}else if((BluetoothAdapter.ACTION_DISCOVERY_FINISHED).equals(action))
+			{
+				//btadapter.cancelDiscovery();
+			}
+		}
+	};
+	
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/VUMeter.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/VUMeter.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/VUMeter.java	(revision 166460)
@@ -0,0 +1,89 @@
+package com.mediatek.factorymode;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.media.AudioRecord;
+import android.media.MediaRecorder;
+import android.util.AttributeSet;
+import android.view.View;
+
+public class VUMeter extends View {
+
+	static final float PIVOT_RADIUS = 3.5f;
+
+	static final float PIVOT_Y_OFFSET = 10f;
+	static final float SHADOW_OFFSET = 2.0f;
+
+	static final float DROPOFF_STEP = 0.18f;
+
+	static final float SURGE_STEP = 0.35f;
+
+	static final long ANIMATION_INTERVAL = 70;
+
+	Paint mPaint, mShadow;
+
+	float mCurrentAngle;
+
+	MediaRecorder mRecorder; 
+
+	public VUMeter(Context context) {
+
+		super(context);
+		init(context);
+	}
+	public VUMeter(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		init(context);
+	}
+	void init(Context context) {
+
+		Drawable background = context.getResources().getDrawable(
+				R.drawable.vumeter);
+		setBackgroundDrawable(background);
+		mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+		mPaint.setColor(Color.WHITE);
+		mShadow = new Paint(Paint.ANTI_ALIAS_FLAG);
+		mShadow.setColor(Color.argb(60, 0, 0, 0));
+		mRecorder = null;
+		mCurrentAngle = 0;
+	}
+	public void setRecorder(MediaRecorder recorder) {
+		mRecorder = recorder;
+		invalidate();
+	}
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		final float minAngle = (float) Math.PI / 8;
+		final float maxAngle = (float) Math.PI * 7 / 8;
+		float angle = minAngle;
+		if (mRecorder != null)
+			angle += (float) (maxAngle - minAngle)
+					* mRecorder.getMaxAmplitude() / 32768;
+		if (angle > mCurrentAngle)
+			mCurrentAngle = angle;
+		else
+			mCurrentAngle = Math.max(angle, mCurrentAngle - DROPOFF_STEP);
+		mCurrentAngle = Math.min(maxAngle, mCurrentAngle);
+		float w = getWidth();
+		float h = getHeight();
+		float pivotX = w / 2;
+		float pivotY = h - PIVOT_RADIUS - PIVOT_Y_OFFSET;
+		float l = h * 4 / 5;
+		float sin = (float) Math.sin(mCurrentAngle);
+		float cos = (float) Math.cos(mCurrentAngle);
+		float x0 = pivotX - l * cos;
+		float y0 = pivotY - l * sin;
+		canvas.drawLine(x0 + SHADOW_OFFSET, y0 + SHADOW_OFFSET, pivotX
+				+ SHADOW_OFFSET, pivotY + SHADOW_OFFSET, mShadow);
+		canvas.drawCircle(pivotX + SHADOW_OFFSET, pivotY + SHADOW_OFFSET,
+				PIVOT_RADIUS, mShadow);
+		canvas.drawLine(x0, y0, pivotX, pivotY, mPaint);
+		canvas.drawCircle(pivotX, pivotY, PIVOT_RADIUS, mPaint);
+		//if (mRecorder != null)
+		//	postInvalidateDelayed(ANIMATION_INTERVAL);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/memory/Memory.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/memory/Memory.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/memory/Memory.java	(revision 166460)
@@ -0,0 +1,130 @@
+package com.mediatek.factorymode.memory;
+
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.ActivityManager.MemoryInfo;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.format.Formatter;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.R.string;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class Memory extends Activity {
+	
+	private ActivityManager activityManager;
+	private TextView memoryinfo;
+	private Button succesButton ;
+	private Button failButton ;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.memory);
+		activityManager = (ActivityManager)this.getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE);
+		long Avaimemsize = getSystemAvaialbeMemorySize();
+		String totalmemsize = getTotalMemory();
+		memoryinfo = (TextView)this.findViewById(R.id.comm_info);
+		memoryinfo.setText(getString(R.string.memorytotal)+totalmemsize+ "\n"+
+		getString(R.string.memoryfree)+ Avaimemsize+"MB");
+		succesButton = (Button)this.findViewById(R.id.memory_bt_ok);
+		failButton = (Button)this.findViewById(R.id.memory_bt_failed);
+		succesButton.setEnabled(false);
+	if(!"".equals(Avaimemsize)){
+		succesButton.setEnabled(true);
+		if(FactoryMode.isAutoTest){
+			Intent intent = new Intent(Memory.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_OK,intent);
+			finish();
+		}
+	}
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Memory.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Memory.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+	}
+	
+	public long getSystemAvaialbeMemorySize(){
+		  MemoryInfo memoryInfo = new MemoryInfo();
+		  activityManager.getMemoryInfo(memoryInfo);
+		  long memSize = memoryInfo.availMem;
+		  
+		  System.out.println("getSystemAvaialbeMemorySize()...memory size: " + memSize);
+		  
+		return memSize/1024/1024;
+		  
+		  //return Formatter.formatFileSize(context, memSize);
+		 }
+	private String getTotalMemory() {	
+		String str1 = "/proc/meminfo";
+		String str2;        
+		String[] arrayOfString;
+		long initial_memory = 0;
+		try{  
+			FileReader localFileReader = new FileReader(str1);  
+			BufferedReader localBufferedReader = new BufferedReader(localFileReader, 8192);
+			str2 = localBufferedReader.readLine();// 
+			arrayOfString = str2.split("\\s+");
+  
+			for(String num : arrayOfString) {
+				Log.i(str2, num + "\t");
+			}
+			initial_memory = Integer.valueOf(arrayOfString[1]).intValue() * 1024;
+			localBufferedReader.close();
+		} 
+		catch(IOException e){
+		
+		}
+		return Formatter.formatFileSize(getBaseContext(), initial_memory);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Memory.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/PhaseCheckParse.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/PhaseCheckParse.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/PhaseCheckParse.java	(revision 166460)
@@ -0,0 +1,655 @@
+
+package com.mediatek.factorymode;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import android.util.Log;
+import android.os.SystemProperties;
+
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.Parcel;
+import android.os.ParcelFileDescriptor;
+
+/*Parse the phasecheck as the little endian*/
+public class PhaseCheckParse {
+    private static String TAG = "PhaseCheckParse";
+    private static int MAX_SN_LEN = 24;
+    private static int SP09_MAX_SN_LEN = MAX_SN_LEN;
+    private static int SP09_MAX_STATION_NUM = 15;
+    private static int SP09_MAX_STATION_NAME_LEN = 10;
+    private static int SP09_SPPH_MAGIC_NUMBER = 0x53503039;
+    private static int SP05_SPPH_MAGIC_NUMBER = 0x53503035;
+    private static int SP09_MAX_LAST_DESCRIPTION_LEN = 32;
+
+    private static int SN1_START_INDEX = 4;
+    private static int SN2_START_INDEX = SN1_START_INDEX + SP09_MAX_SN_LEN;
+
+    private static int STATION_START_INDEX = 56;
+    private static int TESTFLAG_START_INDEX = 252;
+    private static int RESULT_START_INDEX = 254;
+	
+	private static int TYPE_GET_SN1 = 0;
+    private static int TYPE_GET_SN2 = 1;
+	private static int TYPE_WRITE_STATION_TESTED = 2;
+    private static int TYPE_WRITE_STATION_PASS = 3;
+    private static int TYPE_WRITE_STATION_FAIL = 4;
+    private static int TYPE_GET_PHASECHECK = 5;
+
+    private static String PHASE_CHECKE_FILE = "miscdata";
+
+    private byte[] stream = new byte[300];
+    private IBinder binder;
+
+    public PhaseCheckParse() {
+
+        FileInputStream in = null;
+        String filePath = SystemProperties.get("ro.product.partitionpath") + PHASE_CHECKE_FILE;
+        File fp = new File(filePath);
+        if (!fp.exists()) {
+            Log.d(TAG, filePath + "not exist!");
+            stream = null;
+            return;
+        }
+
+        try {
+            in = new FileInputStream(fp);
+            if (in != null) {
+                in.read(stream, 0, stream.length);
+                Log.d(TAG, " ");
+            }
+        } catch (Exception e) {
+
+        } finally {
+            try {
+                if (in != null) {
+                    in.close();
+                    in = null;
+                }
+            } catch (IOException io) {
+                Log.e(TAG, "close in err");
+            }
+        }
+
+        if(!checkPhaseCheck()){
+            stream = null;
+        }
+
+        binder = ServiceManager.getService("phasechecknative");
+
+        if(binder != null)
+            Log.e(TAG, "Get The service connect!");
+        else
+            Log.e(TAG, "connect Error!!");
+    }
+
+    private boolean hasDigit(String content) {
+        boolean flag = false;
+        Pattern p = Pattern.compile(".*\\d+.*");
+        Matcher m = p.matcher(content);
+        if (m.matches())
+            flag = true;
+        return flag;
+    }
+
+    private String StationTested(char testSign, char item) {
+        if(testSign=='0' && item=='0') return "PASS";
+        if(testSign=='0' && item=='1') return "FAIL";
+        return "UnTested";
+    }
+
+    private boolean checkPhaseCheck() {
+        Log.d(TAG, " " + stream[0] + stream[1] + stream[2] + stream[3]);
+        if ((stream[0] == '9' || stream[0] == '5')
+                && stream[1] == '0'
+                && stream[2] == 'P'
+                && stream[3] == 'S') {
+            return true;
+        }
+        
+        return false;
+    }
+
+	public String getSn() {
+        String result = null;
+        try{
+            Parcel data = Parcel.obtain();
+            Parcel reply = Parcel.obtain();
+            binder.transact(0, data, reply, 0);
+            Log.e(TAG, "transact end");
+            String sn1 = reply.readString();
+            for(int i = 0; i < 5; i++) {
+                if(hasDigit(sn1)) {
+                    break;
+                }
+                binder.transact(TYPE_GET_SN1, data, reply, 0);
+                sn1 = reply.readString();
+            }
+            /*binder.transact(TYPE_GET_SN2, data, reply, 0);
+            String sn2 = reply.readString();
+            for(int i = 0; i < 5; i++) {
+                if(hasDigit(sn2)) {
+                    break;
+                }
+                binder.transact(1, data, reply, 0);
+                sn2 = reply.readString();
+            }
+            result = "SN1:" + sn1 + "\n" + "SN2:" + sn2;
+            Log.e(TAG, "SN1 = " +  sn1 + " SN2=" + sn2);*/
+            result = sn1;
+            data.recycle();
+            reply.recycle();
+        }catch (Exception ex) {
+            Log.e(TAG, "Exception " + ex.getMessage());
+            result = "get SN fail:" + ex.getMessage();
+        }
+        return result;
+    }
+
+    public boolean writeStationTested(int station) {
+        try{
+            Parcel data = Parcel.obtain();
+            data.writeInt(station);
+            binder.transact(TYPE_WRITE_STATION_TESTED, data, null, 0);
+            Log.e(TAG, "data = " + data.readString() + " SUCESS!!");
+            data.recycle();
+            return true;
+        }catch (Exception ex) {
+            Log.e(TAG, "Exception " + ex.getMessage());
+            return false;
+        }
+    }
+
+    public boolean writeStationPass(int station) {
+        try{
+            Parcel data = Parcel.obtain();
+            data.writeInt(station);
+            binder.transact(TYPE_WRITE_STATION_PASS, data, null, 0);
+            Log.e(TAG, "data = " + data.readString() + " SUCESS!!");
+            data.recycle();
+            return true;
+        }catch (Exception ex) {
+            Log.e(TAG, "Exception " + ex.getMessage());
+            return false;
+        }
+    }
+
+    public boolean writeStationFail(int station) {
+        try{
+            Parcel data = Parcel.obtain();
+            data.writeInt(station);
+            binder.transact(TYPE_WRITE_STATION_FAIL, data, null, 0);
+            Log.e(TAG, "data = " + data.readString() + " SUCESS!!");
+            data.recycle();
+            return true;
+        }catch (Exception ex) {
+            Log.e(TAG, "Exception " + ex.getMessage());
+            return false;
+        }
+    }
+
+    public String getPhaseCheck() {
+        String result = null;
+        try{
+            Parcel data = Parcel.obtain();
+            Parcel reply = Parcel.obtain();
+            binder.transact(TYPE_GET_PHASECHECK, data, reply, 0);
+            Log.e(TAG, "transact SUCESS!!");
+            int testSign = reply.readInt();
+            int item = reply.readInt();
+            String stationName = reply.readString();
+            String []str = stationName.split(Pattern.quote("|"));
+            String strTestSign = Integer.toBinaryString(testSign);
+            String strItem = Integer.toBinaryString(item);
+            char[] charSign = strTestSign.toCharArray();
+            char[] charItem = strItem.toCharArray();
+            StringBuffer sb = new StringBuffer();
+            Log.e(TAG, "strTestSign = " + strTestSign + " strItem = " + strItem);
+            for(int i=0; i<str.length; i++) {
+                sb.append(str[i]+":"+StationTested(charSign[charSign.length-i-1], charItem[charItem.length-i-1])+"\n");
+            }
+            result = sb.toString();
+            data.recycle();
+            reply.recycle();
+        }catch (Exception ex) {
+            Log.e(TAG, "huasong Exception " + ex.getMessage());
+            result = "get phasecheck fail:" + ex.getMessage();
+        }
+        return result;
+    }
+    
+    public String getStationPhaseCheck(int station) {
+        IBinder binder = ServiceManager.getService("phasechecknative");
+        String result = null;
+        try{
+            Parcel data = Parcel.obtain();
+            Parcel reply = Parcel.obtain();
+            binder.transact(TYPE_GET_PHASECHECK, data, reply, 0);
+            Log.e(TAG, "transact SUCESS!!");
+            int testSign = reply.readInt();
+            int item = reply.readInt();
+            String stationName = reply.readString();
+            String []str = stationName.split(Pattern.quote("|"));
+            String strTestSign = Integer.toBinaryString(testSign);
+            String strItem = Integer.toBinaryString(item);
+            char[] charSign = strTestSign.toCharArray();
+            char[] charItem = strItem.toCharArray();
+            StringBuffer sb = new StringBuffer();
+            Log.e(TAG, "strTestSign = " + strTestSign + " strItem = " + strItem);
+            /*for(int i=0; i<str.length; i++) {
+                sb.append(str[i]+":"+StationTested(charSign[charSign.length-i-1], charItem[charItem.length-i-1])+"\n");
+            }*/
+            sb.append(str[station]+":"+StationTested(charSign[charSign.length-station-1], charItem[charItem.length-station-1]));
+            result = sb.toString();
+            data.recycle();
+            reply.recycle();
+        }catch (Exception ex) {
+            Log.e(TAG, "huasong Exception " + ex.getMessage());
+            result = "get phasecheck fail:" + ex.getMessage();
+        }
+        return result;
+    }
+
+    public String getSn1() {
+        if (stream == null) {
+            return "Invalid Sn1!";
+        }
+        if (!isAscii(stream[SN1_START_INDEX])) {
+            Log.d(TAG, "Invalid Sn1!");
+            return "Invalid Sn1!";
+        }
+
+        String sn1 = new String(stream, SN1_START_INDEX, SP09_MAX_SN_LEN);
+        Log.d(TAG, sn1);
+        return sn1;
+    }
+
+    public String getSn2() {
+        if (stream == null) {
+            return "Invalid Sn2!";
+        }
+        if (!isAscii(stream[SN2_START_INDEX])) {
+            Log.d(TAG, "Invalid Sn2!");
+            return "Invalid Sn2!";
+        }
+        String sn2 = new String(stream, SN2_START_INDEX, SP09_MAX_SN_LEN);
+        Log.d(TAG, sn2);
+        return sn2;
+    }
+
+    private boolean isAscii(byte b) {
+        if (b >= 0 && b <= 127) {
+            return true;
+        }
+        return false;
+    }
+
+    public String getCFTresult() {
+        if (stream == null) {
+            return "Invalid Phase check!";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "Invalid Phase check!";
+        }
+        String testResult = "CFT: Not Yet";
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getCFTresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+
+        	if(testResult.contains("CFT")) {
+                if (!isStationTest(i)) {
+                    testResult += ": Not Yet";
+                } else if (isStationPass(i)) {
+                    testResult += ": Pass";
+                } else {
+                    testResult += ": Failed";
+                }
+                break;
+        	}
+        }
+        Log.d(TAG, "getCFTresult testResult: " + testResult);
+        return testResult;
+    }
+    
+    public String getCFT_2G3Gresult() {
+        if (stream == null) {
+            return "Invalid Phase check!";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "Invalid Phase check!";
+        }
+        String testResult = "CFT_2G3G: Not Yet";
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getCFT_2G3Gresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+
+        	if(testResult.contains("CFT_2G3G")) {
+                if (!isStationTest(i)) {
+                    testResult += ": Not Yet";
+                } else if (isStationPass(i)) {
+                    testResult += ": Pass";
+                } else {
+                    testResult += ": Failed";
+                }
+                break;
+        	}
+        }
+        Log.d(TAG, "getCFT_2G3Gresult testResult: " + testResult);
+        return testResult;
+    }
+    
+    public String getCFT_4Gresult() {
+        if (stream == null) {
+            return "Invalid Phase check!";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "Invalid Phase check!";
+        }
+        String testResult = "CFT_4G: Not Yet";
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getCFT_4Gresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+
+        	if(testResult.contains("CFT_4G")) {
+                if (!isStationTest(i)) {
+                    testResult += ": Not Yet";
+                } else if (isStationPass(i)) {
+                    testResult += ": Pass";
+                } else {
+                    testResult += ": Failed";
+                }
+                break;
+        	}
+        }
+        Log.d(TAG, "getCFT_4Gresult testResult: " + testResult);
+        return testResult;
+    }
+    
+    public String getWIFIANTresult() {
+        if (stream == null) {
+            return "WIFIGPS: Failed";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "WIFIGPS: Failed";
+        }
+        String testResult = null;
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getWIFIANTresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+
+        	if(testResult.contains("WIFIANT")) {
+                    if (!isStationTest(i)) {
+                        testResult += ": Not Yet";
+                    } else if (isStationPass(i)) {
+                        testResult += ": Pass";
+                    } else {
+                        testResult += ": Failed";
+                    }
+                    return testResult.replace("WIFIANT", "WIFIGPS");
+        	}
+        }
+        Log.d(TAG, "getWIFIANTresult testResult: " + testResult);
+        return "WIFIGPS: Failed";
+    }
+    public String getNewWIFIANTresult() {
+        if (stream == null) {
+            return "WIFIANT: Failed";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "WIFIANT: Failed";
+        }
+        String testResult = null;
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getNewWIFIANTresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+            Log.d(TAG, "getNewWIFIANTresult testResult: " + testResult);
+        	if(testResult.contains("CheckX")) {
+        		        if (!isStationTest(i)) {
+                        testResult += ": Not Yet";
+                    } else if (isStationPass(i)) {
+                        testResult += ": Pass";
+                    } else {
+                        testResult += ": Failed";
+                    }
+                    
+                    return testResult.replace("CheckX", "WIFIANT");
+        	}
+        }
+        Log.d(TAG, "getNewWIFIANTresult testResult: " + testResult);
+        return "WIFIANT: Failed";
+    }
+     public String getANTresult() {
+        if (stream == null) {
+            return "ANTENNA: Failed";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "ANTENNA: Failed";
+        }
+        String testResult = null;
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getANTresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+
+        	if(testResult.contains("ANT")) {
+                    if (!isStationTest(i)) {
+                        testResult += ": Not Yet";
+                    } else if (isStationPass(i)) {
+                        testResult += ": Pass";
+                    } else {
+                        testResult += ": Failed";
+                    }
+                    break;
+        	}
+        }
+        Log.d(TAG, "getANTresult testResult: " + testResult);
+        return testResult;
+    }
+
+     public String getDOWNLOADresult() {
+        if (stream == null) {
+            return "DOWNLOAD: Failed";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "DOWNLOAD: Failed";
+        }
+        String testResult = null;
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getDOWNLOADresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+
+        	if(testResult.contains("DOWNLOAD")) {
+                    if (!isStationTest(i)) {
+                        testResult += ": Not Yet";
+                    } else if (isStationPass(i)) {
+                        testResult += ": Pass";
+                    } else {
+                        testResult += ": Failed";
+                    }
+                    break;
+        	}
+        }
+        Log.d(TAG, "getDOWNLOADresult testResult: " + testResult);
+        return testResult;
+    }
+
+     public String getWRITESNresult() {
+        if (stream == null) {
+            return "WRITESN: Failed";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "WRITESN: Failed";
+        }
+        String testResult = null;
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getDOWNLOADresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+
+        	if(testResult.contains("WRITESN")) {
+                    if (!isStationTest(i)) {
+                        testResult += ": Not Yet";
+                    } else if (isStationPass(i)) {
+                        testResult += ": Pass";
+                    } else {
+                        testResult += ": Failed";
+                    }
+                    break;
+        	}
+        }
+        Log.d(TAG, "getDOWNLOADresult testResult: " + testResult);
+        return testResult;
+    }
+
+     public String getCHECKXresult() {
+        if (stream == null) {
+            return "CHECKX: Failed";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "CHECKX: Failed";
+        }
+        String testResult = null;
+
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "getCHECKXresult break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+ 
+        	if(testResult.contains("CHECKX")) {
+                    if (!isStationTest(i)) {
+                        testResult += ": Not Yet";
+                    } else if (isStationPass(i)) {
+                        testResult += ": Pass";
+                    } else {
+                        testResult += ": Failed";
+                    }
+                    break;
+        	}
+        }
+        Log.d(TAG, "getCHECKXresult testResult: " + testResult);
+        return testResult;
+    }
+
+    public String getTestsAndResult() {
+        if (stream == null) {
+            return "Invalid Phase check!";
+        }
+
+        if (!isAscii(stream[STATION_START_INDEX])) {
+            Log.d(TAG, "Invalid Phase check!");
+            return "Invalid Phase check!";
+        }
+        String testResult = null;
+        String allResult = "";
+
+        int flag = 1;
+        for (int i = 0; i < SP09_MAX_STATION_NUM; i++) {
+            if (0 == stream[STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN]) {
+                Log.d(TAG, "break " + i);
+                break;
+            }
+            testResult = new String(stream, STATION_START_INDEX + i * SP09_MAX_STATION_NAME_LEN,
+                    SP09_MAX_STATION_NAME_LEN);
+            if (!isStationTest(i)) {
+                testResult += " Not test";
+            } else if (isStationPass(i)) {
+                testResult += " Pass";
+            } else {
+                testResult += " Failed";
+            }
+            flag = flag << 1;
+            Log.d(TAG, i + " " + testResult);
+            allResult += testResult + "\n";
+        }
+        return allResult;
+    }
+
+    private boolean isStationTest(int station) {
+        byte flag = 1;
+        if (station < 8) {
+            return (0 == ((flag << station) & stream[TESTFLAG_START_INDEX]));
+        } else if (station >= 8 && station < 16) {
+            return (0 == ((flag << (station - 8)) & stream[TESTFLAG_START_INDEX + 1]));
+        }
+        return false;
+    }
+
+    private boolean isStationPass(int station) {
+        byte flag = 1;
+        if (station < 8) {
+            return (0 == ((flag << station) & stream[RESULT_START_INDEX]));
+        } else if (station >= 8 && station < 16) {
+            return (0 == ((flag << (station - 8)) & stream[RESULT_START_INDEX + 1]));
+        }
+        return false;
+    }
+    /* SPRD: 435125 The serial number shows invalid in ValidationTools @{*/
+    public static String getSerialNumber(){
+        return android.os.Build.SERIAL;
+    }
+    /* @}*/
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensor.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensor.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensor.java	(revision 166460)
@@ -0,0 +1,137 @@
+package com.mediatek.factorymode.sensor;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class LSensor extends Activity implements SensorEventListener{
+	private SensorManager sensorManager = null;
+	private Sensor lightSensor = null;
+	private TextView accuracy_view= null;
+	private TextView value_0 = null;
+	private TextView value_1 = null;
+	private TextView value_2 = null;
+	private Button succesButton ;
+	private Button failButton ;
+	private float sensorValue = 0;
+	private boolean sensorFlag = false;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.lsensor);
+
+		sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+
+		lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
+		//accuracy_view = (TextView)this.findViewById(R.id.lsensor_accuracy);
+		value_0 = (TextView)this.findViewById(R.id.lsensor_value);
+		
+		succesButton = (Button)this.findViewById(R.id.lsensor_bt_ok);
+		failButton = (Button)this.findViewById(R.id.lsensor_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+		if(sensor.getType() == Sensor.TYPE_LIGHT){
+
+			//accuracy_view.setText("accuracy:"+accuracy);
+			}
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+		sensorManager.unregisterListener(this, lightSensor);
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		sensorManager.registerListener(this,lightSensor, SensorManager.SENSOR_DELAY_NORMAL);
+	}
+
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType() == Sensor.TYPE_LIGHT){
+
+			float[] values = event.values;
+			if(sensorFlag == false){
+				
+					sensorValue = values[0];
+					sensorFlag = true;
+				}
+				
+				value_0.setText(" "+values[0]);
+				if(sensorValue != values[0] && values[0]<=4.0 && sensorValue != 0){
+				succesButton.setEnabled(true);
+				if(FactoryMode.isAutoTest){
+				Intent intent = new Intent(LSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+				}
+					
+				}
+
+		
+			
+			
+			
+			}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(LSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/MSensor.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/MSensor.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/MSensor.java	(revision 166460)
@@ -0,0 +1,138 @@
+package com.mediatek.factorymode.sensor;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class MSensor extends Activity implements SensorEventListener{
+    SensorManager sensorManager = null;
+    Sensor magneticSensor = null;
+    TextView magnetic_view= null;
+    TextView value_0 = null;
+    TextView value_1 = null;
+    TextView value_2 = null;
+    Button successButton;
+    Button failButton;
+    
+    private boolean            mRegisteredSensor;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        // TODO Auto-generated method stub
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.msensor);
+    
+        mRegisteredSensor = false;
+        sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+    
+    
+        magneticSensor = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
+        magnetic_view = (TextView)this.findViewById(R.id.msensor_tv_info);
+        value_0 = (TextView)this.findViewById(R.id.msensor_xyz);
+        
+        magnetic_view.setText(getString(R.string.MSensor_tips));
+        value_0.setText("X:\nY:\nZ");
+        successButton = (Button)this.findViewById(R.id.msensor_bt_ok);
+        failButton = (Button)this.findViewById(R.id.msensor_bt_failed);
+        successButton.setOnClickListener(new Button.OnClickListener(){
+
+            @Override
+            public void onClick(View v) {
+                // TODO Auto-generated method stub
+                Intent intent = new Intent(MSensor.this, FactoryMode.class);
+                setResult(FactoryMode.TEST_OK,intent);
+                finish();
+            }
+            
+        });
+        failButton.setOnClickListener(new Button.OnClickListener(){
+
+            @Override
+            public void onClick(View v) {
+                // TODO Auto-generated method stub
+                Intent intent = new Intent(MSensor.this, FactoryMode.class);
+                setResult(RESULT_CANCELED,intent);
+                finish();
+            }
+            
+        });
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+        // TODO Auto-generated method stub
+        if(sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD){
+            
+            }
+    }
+
+    @Override
+    protected void onPause() {
+        // TODO Auto-generated method stub
+        
+        if (mRegisteredSensor)
+        {
+            sensorManager.unregisterListener(this);
+            mRegisteredSensor = false;
+        }
+        super.onPause();
+    }
+
+    @Override
+    protected void onResume() {
+        // TODO Auto-generated method stub
+        super.onResume();
+        //sensorManager.registerListener(this,magneticSensor, SensorManager.SENSOR_DELAY_NORMAL);
+        List<Sensor> sensors = sensorManager.getSensorList(Sensor.TYPE_MAGNETIC_FIELD);
+
+        if (sensors.size() > 0)
+        {
+            Sensor sensor = sensors.get(0);
+
+            mRegisteredSensor = sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);
+        }
+    }
+
+
+    @Override
+    public void onSensorChanged(SensorEvent event) {
+        // TODO Auto-generated method stub
+        if(event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD){
+            float[] values = event.values;
+            value_0.setText("X:"+values[0]+"\nY:"+values[1]+"\nZ:"+values[2]);
+            }
+    }
+
+    @Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(MSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+
+//	public void onAttachedToWindow() {
+//		this.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD);
+//		super.onAttachedToWindow();
+//	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/PSensor.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/PSensor.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/PSensor.java	(revision 166460)
@@ -0,0 +1,132 @@
+package com.mediatek.factorymode.sensor;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class PSensor extends Activity implements SensorEventListener{
+	private SensorManager sensorManager = null;
+	private Sensor PSensor = null;
+	private TextView accuracy_view= null;
+	private TextView value_0 = null;
+	private TextView value_1 = null;
+	private TextView value_2 = null;
+	private Button succesButton ;
+	private Button failButton ;
+	private boolean psensorFlag = false;
+	private float psensorValue = 0;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.psensor);
+	
+		sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+
+		PSensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
+		//accuracy_view = (TextView)this.findViewById(R.id.proximity);
+		value_0 = (TextView)this.findViewById(R.id.proximity);
+		
+		succesButton = (Button)this.findViewById(R.id.psensor_bt_ok);
+		failButton = (Button)this.findViewById(R.id.psensor_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(PSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(PSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+		if(sensor.getType() == Sensor.TYPE_PROXIMITY){
+			
+			}
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+		sensorManager.unregisterListener(this, PSensor);
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		sensorManager.registerListener(this,PSensor, SensorManager.SENSOR_DELAY_NORMAL);
+	}
+
+
+	
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType() == Sensor.TYPE_PROXIMITY){
+
+			float[] values = event.values;
+
+			if(psensorFlag == false  && values[0] != psensorValue){
+				psensorValue = values[0];
+				psensorFlag = true;
+				}
+
+			value_0.setText(getString(R.string.proximity)+values[0]);
+			if(psensorValue != values[0] && psensorValue != 0){
+				succesButton.setEnabled(true);
+				if(FactoryMode.isAutoTest){
+				Intent intent = new Intent(PSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+				}
+				}
+			}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(PSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensorCali.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensorCali.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensorCali.java	(revision 166460)
@@ -0,0 +1,148 @@
+package com.mediatek.factorymode.sensor;
+
+import android.app.Activity;
+import android.content.Intent;
+import java.io.FileOutputStream;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.BufferedInputStream;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.util.Log;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class LSensorCali extends Activity{
+	private static final String TAG = "LSensorCali"; 
+	private Button succesButton ;
+	private Button failButton ;
+    private Button startButton ;
+	private TextView mCaliValView = null;
+	private Timer mTimer = null;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.lsensorcali);
+
+        startButton = (Button)this.findViewById(R.id.lsensor_cali_start);
+		succesButton = (Button)this.findViewById(R.id.lsensor_cali_ok);
+		failButton = (Button)this.findViewById(R.id.lsensor_cali_failed);
+		succesButton.setEnabled(false);
+		mCaliValView = (TextView)findViewById(R.id.lsensor_cali_showCaliVal);
+		mCaliValView.setText(null);
+		
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+		startButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				String fileName = "/dev/alsps_cali";
+				 int value = -1;
+				 byte[] bInput = new byte[12];
+				 int []valArry = {0, 0, 0}; 
+				 boolean bIsSuc = false;  
+				try{   
+						try{   
+				  FileOutputStream fout = new FileOutputStream(fileName);   
+							fout.write("1".getBytes());
+				  fout.close(); 
+				  bIsSuc = true;  
+				}catch(Exception e){  
+							Log.d(TAG, "LSensorCali: write fail"  );
+				  bIsSuc = false; 
+						  e.printStackTrace();
+						} 
+					BufferedInputStream in = new BufferedInputStream(new FileInputStream(fileName));
+					value = in.read(bInput);
+					in.close();
+				} catch(java.io.IOException e) {  
+				  e.printStackTrace();
+				} 
+
+				valArry[0] = ((((int)bInput[3] << 24) & 0xff000000) |(((int)bInput[2] << 16)  & 0xff0000) |(((int)bInput[1] << 8)  & 0xff00) |((int)bInput[0]   & 0xff));
+				valArry[1] = ((((int)bInput[7] << 24) & 0xff000000) |(((int)bInput[6] << 16)  & 0xff0000) |(((int)bInput[5] << 8)  & 0xff00) |((int)bInput[4]   & 0xff));
+				valArry[2] = ((((int)bInput[11] << 24) & 0xff000000) |(((int)bInput[10] << 16)  & 0xff0000) |(((int)bInput[9] << 8)  & 0xff00) |((int)bInput[8]   & 0xff));
+				String showStr = String.format("C: %d;    ", valArry[0])  + String.format("H: %d;    ", valArry[1]) + String.format("L: %d", valArry[2]);
+				mCaliValView.setText(showStr);
+				if(valArry[0] == 0 && valArry[1] == 0 && valArry[2] == 0){
+					bIsSuc = false;
+				}
+				mTimer = new Timer();
+				if (bIsSuc == true) {
+				  succesButton.setEnabled(true);
+				  if(FactoryMode.isAutoTest){
+				  	Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+					setResult(FactoryMode.TEST_OK,intent);
+					mTimer.schedule(new MyTask(), 2500);
+					}
+					//finish();
+				}else{
+				  /*Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+				  setResult(FactoryMode.TEST_CANCEL,intent);
+					mTimer.schedule(new MyTask(), 2500);*/
+				}
+			}
+			class MyTask extends TimerTask {
+				public void run() {
+					mTimer.cancel();
+				  finish();
+				}
+			}			
+		});
+
+	}
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		super.onDestroy();
+	}
+	
+	@Override
+	protected void onStop() {
+		super.onStop();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/GSensor.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/GSensor.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/GSensor.java	(revision 166460)
@@ -0,0 +1,214 @@
+package com.mediatek.factorymode.sensor;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.os.Handler;
+import android.os.Message;
+import android.widget.ImageView;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.bluetooth.Bluetooth;
+
+public class GSensor extends Activity implements SensorEventListener{
+	final String TAG = "GSensor";
+	SensorManager sensorManager = null;
+	Sensor orientationSensor = null;
+	TextView accuracy_view= null;
+	TextView value_0 = null;
+	TextView value_1 = null;
+	TextView value_2 = null;
+	Button successButton;
+	Button failButton;
+	ImageView  mImage;
+	final float F_ZERO = 0.2f;
+	final int MIN_SUCCESS_COUNT = 3;
+	float[] mOldValues = new float[3];
+	int[] mSuccessCount = new int[3];
+	int mCount=0;
+	private boolean			mRegisteredSensor;
+	private static final int EVENT_CHECK_RESULT = 100;
+	private static final int CHECK_RESULT_DELAY_TIME = 3000;
+	private Handler mHandler = new Handler() {
+		@Override
+		public void handleMessage(Message msg) {
+			switch(msg.what) {
+				case EVENT_CHECK_RESULT:
+					Intent intent = new Intent(GSensor.this, FactoryMode.class);
+					setResult(FactoryMode.TEST_OK,intent);
+					finish();
+					break;
+			}
+			super.handleMessage(msg);
+		}
+	};
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.gsensor);
+	
+		mRegisteredSensor = false;
+		sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+	
+	
+		orientationSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+		//accuracy_view = (TextView)this.findViewById(R.id.gsensor_tv_info);
+		value_0 = (TextView)this.findViewById(R.id.gsensor_xyz);
+		
+		//accuracy_view.setText(getString(R.string.GSensor_tips));
+		value_0.setText("X:\nY:\nZ");
+		mImage=(ImageView) findViewById(R.id.arrow_view);
+		successButton = (Button)this.findViewById(R.id.gsensor_bt_ok);
+		failButton = (Button)this.findViewById(R.id.gsensor_bt_failed);
+		successButton.setEnabled(false);
+		successButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+		if(sensor.getType() == Sensor.TYPE_ACCELEROMETER){
+			
+			}
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		
+		if (mRegisteredSensor)
+		{
+			sensorManager.unregisterListener(this);
+			mRegisteredSensor = false;
+		}
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		//sensorManager.registerListener(this,orientationSensor, SensorManager.SENSOR_DELAY_NORMAL);
+		List<Sensor> sensors = sensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER);
+
+		if (sensors.size() > 0)
+		{
+			Sensor sensor = sensors.get(0);
+
+			mRegisteredSensor = sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);
+		}
+	}
+	
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType() == Sensor.TYPE_ACCELEROMETER){
+			float[] values = event.values;
+			value_0.setText("X:"+values[0]+"\nY:"+values[1]+"\nZ:"+values[2]);
+			ArrowOritation(values);
+			if(checkSeonsorState(values) && mCount>=4 ) {
+			successButton.setEnabled(true);
+			mHandler.sendEmptyMessageDelayed(EVENT_CHECK_RESULT, CHECK_RESULT_DELAY_TIME);
+			}
+		}
+	}
+	private void ArrowOritation(float values[]){
+		if(values[0]>=5 ){
+			mImage.setImageResource(R.drawable.arrow_left);
+			mCount++;
+			Log.i(TAG,"mCount"+mCount);
+		}else if(values[0]<-5 ){
+			mImage.setImageResource(R.drawable.arrow_right);
+			mCount++;
+			Log.i(TAG,"mCount"+mCount);
+		}else if(values[1]>=5 ){
+			mImage.setImageResource(R.drawable.arrow_bottom);
+			mCount++;
+			Log.i(TAG,"mCount"+mCount);
+		}else if(values[1]<-5){
+			mImage.setImageResource(R.drawable.arrow_top);
+			mCount++;
+			Log.i(TAG,"mCount"+mCount);
+		}
+	}
+	
+	private boolean checkSeonsorState(float[] values) {
+		boolean ret = false;
+			
+		if(Math.abs(mOldValues[0] - values[0]) > F_ZERO) {
+			mSuccessCount[0]++;
+		}
+		
+		if(Math.abs(mOldValues[1] - values[1]) > F_ZERO) {
+			mSuccessCount[1]++;
+		}
+		
+		if(Math.abs(mOldValues[2] - values[2]) > F_ZERO) {
+			mSuccessCount[2]++;
+		}
+		
+		mOldValues[0] = values[0];
+		mOldValues[1] = values[1];
+		mOldValues[2] = values[2];
+		
+		if((mSuccessCount[0] >= MIN_SUCCESS_COUNT) && 
+			(mSuccessCount[1] >= MIN_SUCCESS_COUNT) && 
+			(mSuccessCount[2] >= MIN_SUCCESS_COUNT)) {
+			ret = true;
+		}
+		
+		return ret;
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(GSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/headset/HeadSet.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/headset/HeadSet.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/headset/HeadSet.java	(revision 166460)
@@ -0,0 +1,301 @@
+package com.mediatek.factorymode.headset;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Locale;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.MediaPlayer;
+import android.media.MediaRecorder;
+import android.os.Bundle;
+import android.os.Environment;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.VUMeter;
+import android.os.Handler;
+import android.os.Message;
+
+public class HeadSet  extends Activity {
+
+	private Button succesButton ;
+	private Button failButton ;
+	private Button testheadbButton;
+	
+	private MediaRecorder mRecorder = null;
+	private MediaPlayer mPlayer = null;
+	private String  curPath = null ;
+	private VUMeter mVUMeter;
+	
+	private static final int TEST_IDLE = 0;
+	private static final int TEST_RECORDERING = 1;
+	private static final int TEST_PLAYYING =2;
+	private int curTestState = TEST_IDLE; 
+	
+	private static final String INTERNAL_MEMORY_DIR = "/data/";
+	private static final String TEST_FILE_NAME = "testingHeadSetRecorder.amr";
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.headset);
+		testheadbButton =(Button)this.findViewById(R.id.mic_bt_start);
+	
+		succesButton = (Button)this.findViewById(R.id.bt_ok);
+		failButton = (Button)this.findViewById(R.id.bt_failed);
+		mVUMeter = (VUMeter)this.findViewById(R.id.uvMeter);
+		mVUMeter.setVisibility(View.GONE);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(HeadSet.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(HeadSet.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		testheadbButton.setOnClickListener(new View.OnClickListener() {
+			@Override
+			public void onClick(View v) {	
+//				if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
+//				{
+					if(curTestState == TEST_IDLE){
+						//curTestState = TEST_RECORDERING;
+						//testheadbButton.setEnabled(false);
+						startRecorder();
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_IDLE , 1000);
+					}else if(curTestState == TEST_RECORDERING){
+						stopRecorder();
+						playRecordfile();
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_RECORDERING , 1000);
+					}else if(curTestState == TEST_PLAYYING) {
+						stopplay();
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_PLAYYING , 1000);
+					}
+//				}else{
+//					testheadbButton.setText(getString(R.string.sdcard_tips_failed));
+//					testheadbButton.setEnabled(false);
+//				}
+			}
+		});
+		
+		if(getHeadsetState()== 0)
+		{
+			testheadbButton.setEnabled(false);
+			testheadbButton.setText(getString(R.string.HeadSet_tips));
+		}else {
+			testheadbButton.setEnabled(true);
+			testheadbButton.setText(getString(R.string.Mic_start));
+		}
+		IntentFilter filter = new IntentFilter(); 
+        filter.addAction(Intent.ACTION_TIME_TICK); 
+        filter.addAction(Intent.ACTION_HEADSET_PLUG); 
+        this.registerReceiver(mIntentReceiver, filter);
+	}
+	private static final String HEADSET_STATE_PATH = "/sys/class/switch/h2w/state";
+	public static int getHeadsetState() {
+        try {
+            FileReader file = new FileReader(HEADSET_STATE_PATH);
+            char[] buffer = new char[1024];
+            int len = file.read(buffer, 0, 1024);
+            int headsetState = Integer.valueOf((new String(buffer, 0, len)).trim());
+            Log.v("HeadSet", "---------------" + headsetState);
+            return headsetState;
+
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    
+    private Handler mHandler = new Handler(){
+    	@Override
+			public void handleMessage(Message msg) {
+				super.handleMessage(msg);
+				if (msg.what == TEST_IDLE) {
+             curTestState = TEST_RECORDERING;
+				}else if (msg.what == TEST_RECORDERING) {
+             curTestState = TEST_PLAYYING;
+				}else if (msg.what == TEST_PLAYYING) {
+             curTestState = TEST_IDLE;
+				}
+				testheadbButton.setClickable(true);
+			}
+		};
+		
+	void startRecorder(){
+		//File file = new File("/sdcard/"+ "YY"+ new DateFormat().format("yyyyMMdd_hhmmss",Calendar.getInstance(Locale.CHINA)) + ".amr");
+		File folder;
+		if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){  
+        	File dirPath = Environment.getExternalStorageDirectory();
+			Log.v("HeadSet", "----------dirPath" +dirPath.getPath());
+			folder=new File(dirPath.getAbsolutePath()+"//Test");
+			folder.mkdirs();
+		}else{
+			return;
+		}  
+		String path = folder.getAbsolutePath()+ File.separator+TEST_FILE_NAME;
+		File file = new File(path);
+		/*File file = new File(INTERNAL_MEMORY_DIR + TEST_FILE_NAME);
+		if(file.exists()) {
+			file.delete();
+		}*/
+		/*boolean bRet = isFolderExists(INTERNAL_MEMORY_DIR);
+		Log.v("MicRecorder", "bRet---------------" + bRet);*/
+		
+		curPath = file.getPath();
+		mRecorder = new MediaRecorder();
+		mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
+		mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
+		mRecorder.setOutputFile(file.getAbsolutePath());
+		try {
+			file.createNewFile();
+			file.setReadable(true, false);
+			file.setWritable(true, false);
+			mRecorder.prepare();
+			mRecorder.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		testheadbButton.setText(getString(R.string.Mic_stop));
+		mVUMeter.setRecorder(mRecorder);
+	}
+	private void stopRecorder(){
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+	}
+	private void playRecordfile(){
+		mPlayer = new MediaPlayer();
+		mPlayer.reset();
+		try{
+			mPlayer.setDataSource(curPath);
+			mPlayer.prepare();
+			mPlayer.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		testheadbButton.setText(getString(R.string.stopplayer));
+		succesButton.setEnabled(true);
+	}
+	private void stopplay(){
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+			testheadbButton.setText(getString(R.string.Mic_start));
+		}
+	}
+	
+	@Override
+	public void onStop() {
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+		
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+		}
+		
+		File file = new File(INTERNAL_MEMORY_DIR + TEST_FILE_NAME);
+		if(file.exists()) {
+			file.delete();
+		}
+		
+		super.onStop();
+		
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+        @Override 
+        public void onReceive(Context context, Intent intent) { 
+            String action = intent.getAction(); 
+            if (action.equals(Intent.ACTION_HEADSET_PLUG)) {
+               int curheatset = intent.getIntExtra("state", 0);
+               if(curheatset == 0) {
+                  /*if(curTestState == TEST_IDLE){
+                     startRecorder();
+                     testheadbButton.setClickable(false);
+                     mHandler.sendEmptyMessageDelayed(TEST_IDLE , 1000);
+                  }else if(curTestState == TEST_RECORDERING){
+                     stopRecorder();
+                     playRecordfile();
+                     testheadbButton.setClickable(false);
+                     mHandler.sendEmptyMessageDelayed(TEST_RECORDERING , 1000);
+                  }else if(curTestState == TEST_PLAYYING) {
+                     stopplay();
+                     testheadbButton.setClickable(false);
+                     mHandler.sendEmptyMessageDelayed(TEST_PLAYYING , 1000);
+                  }*/
+                  testheadbButton.setEnabled(false);
+                  testheadbButton.setText(getString(R.string.HeadSet_tips));
+               } else if(curheatset == 1) {
+                  testheadbButton.setEnabled(true);
+                  testheadbButton.setText(getString(R.string.Mic_start));
+               }
+            } 
+        }
+     }; 
+     
+     @Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(HeadSet.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLogService.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLogService.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLogService.java	(revision 166460)
@@ -0,0 +1,226 @@
+package com.mediatek.factorymode;
+
+import android.app.AlertDialog;
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.BatteryManager;
+import android.os.Environment;
+import android.os.storage.StorageManager;
+import android.util.Log;
+
+import android.app.ActivityManager;
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.content.IntentFilter;
+import android.os.Binder;
+import android.os.CountDownTimer;
+import android.os.IBinder;
+import android.os.StatFs;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.Handler;
+import android.os.Message;
+import android.telephony.TelephonyManager;
+import android.text.format.Time;
+import android.widget.Toast;
+import com.mediatek.factorymode.BatteryLog;
+import com.mediatek.factorymode.ChargeAlertDialog;
+import com.mediatek.factorymode.FactoryMode;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.SimpleTimeZone;
+import java.io.FileReader;
+import java.io.IOException;
+
+public class BatteryLogService extends Service {
+	private final IBinder mBinder = new ServiceBinder();
+
+	private static final String TAG = "BatteryLogService";
+	private static final int EVENT_CHECK_RESULT = 100;
+	private static final int TEST_RESULT_OK = 0;
+	private static final int TEST_RESULT_FAIL = 1;
+	private static final int TEST_RESULT_FULL_TIPS = 2;
+	private static final int TEST_RESULT_TESTING = 3;
+	private static final int TEST_RESULT_CHARGE_TIPS = 4;
+	private static final int TEST_RESULT_FIRST = 5;
+	private static final int TEST_RESULT_TEMPERATURE_ERROR = 6;
+	private static final long COUNT_DOWN = 10900;
+	// private static long countdown= 0;
+	public static int result = TEST_RESULT_FAIL;
+	public static int electronic = 0;
+	public static int mVoltage;
+	private static int mStatus;
+	private static int mTemperature;
+	public static double mVoltagePercent;
+	private long CRSDT = 2000;// CHECK_RESULT_START_DELAY_TIME
+	private Toast mToast;
+	public static int counter = 0;
+	private static final String BATTERY_ELECTRONIC = "/sys/class/power_supply/battery/real_time_current";
+
+	@Override
+	public void onCreate() {
+		super.onCreate();
+		Log.d(TAG, " onCreate");
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		registerReceiver(mIntentReceiver, filter);
+	}
+
+	@Override
+	public void onDestroy() {
+		super.onDestroy();
+		unregisterReceiver(mIntentReceiver);
+	}
+
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			int plugged = intent.getIntExtra("plugged", 0);
+			mVoltage = intent.getIntExtra("voltage", 0);
+			int level = intent.getIntExtra("level", 0);
+			int scale = intent.getIntExtra("scale", 100);
+			mStatus = intent.getIntExtra("status", 0);
+			mTemperature = intent.getIntExtra("temperature", 0);
+			Log.d(TAG,"mTemperature = " + mTemperature);
+			mVoltagePercent = (double) level / scale;
+			if (plugged == BatteryManager.BATTERY_PLUGGED_AC
+					|| plugged == BatteryManager.BATTERY_PLUGGED_USB) {
+				if (!FactoryMode.isCharging) {
+					result = TEST_RESULT_FIRST;
+					sendResult(result, 0, 0, 0);
+					if (FactoryMode.isAutoTest && FactoryMode.shouldCharge) {
+						ChargeAlertDialog.ChargeAlertDialog.finish();
+					}
+					FactoryMode.isCharging = true;
+					mHandler.sendEmptyMessageDelayed(EVENT_CHECK_RESULT, CRSDT);// delay
+																				// 2s
+																				// to
+																				// check
+																				// result
+				}
+			} else {
+				if (FactoryMode.isCharging) {
+					result = TEST_RESULT_CHARGE_TIPS;
+					electronic = 0;
+					sendResult(result, 0, 0, 0);
+					counter = 0;
+					FactoryMode.isCharging = false;
+					mHandler.removeMessages(EVENT_CHECK_RESULT);
+					if (FactoryMode.isAutoTest && FactoryMode.shouldCharge) {
+						intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+						intent.setClass(context, ChargeAlertDialog.class);
+						context.startActivity(intent);
+					}
+				}
+			}
+		}
+	};
+
+	private void checkChargingResult() {
+		Log.d(TAG, "voltage=" + mVoltage + "mA");
+		if (FactoryMode.isCharging) {
+			if (mStatus == BatteryManager.BATTERY_STATUS_FULL) {
+				result = TEST_RESULT_FULL_TIPS;
+				sendResult(result, electronic, 0, 0);
+				return;
+			}
+			if(mTemperature < 0 || mTemperature > 500){
+				result = TEST_RESULT_TEMPERATURE_ERROR;
+				sendResult(result,electronic,0,0);
+				return;
+      }
+			electronic = getBatteryElectronic();
+			if (electronic >= 0
+					&& ((electronic < 400 && mVoltage < 4100) || (electronic < 100 && mVoltage >= 4100))
+					&& counter < 3) {
+				result = TEST_RESULT_TESTING;
+				timer.start();
+				counter++;
+				return;
+			}
+			if ((electronic >= 400 && mVoltage < 4100)
+					|| (electronic >= 100 && mVoltage >= 4100)) {
+				result = TEST_RESULT_OK;
+			} else {
+				result = TEST_RESULT_FAIL;
+			}
+			sendResult(result, electronic, counter, 0);
+		}
+	}
+
+	private Handler mHandler = new Handler() {
+		@Override
+		public void handleMessage(Message msg) {
+			switch (msg.what) {
+			case EVENT_CHECK_RESULT:
+				checkChargingResult();
+				break;
+			}
+			super.handleMessage(msg);
+		}
+	};
+
+	private int getBatteryElectronic() {
+		char[] buffer = new char[1024];
+		float batteryElectronic = 0;
+		FileReader file = null;
+		try {
+			file = new FileReader(BATTERY_ELECTRONIC);
+			int len = file.read(buffer, 0, 1024);
+			batteryElectronic = Float.valueOf((new String(buffer, 0, len)));
+			if (file != null) {
+				file.close();
+				file = null;
+			}
+		} catch (Exception e) {
+			try {
+				if (file != null) {
+					file.close();
+					file = null;
+				}
+			} catch (IOException io) {
+				Log.e(TAG, "getBatteryElectronic fail");
+			}
+		}
+		return (int) batteryElectronic;
+	};
+
+	private void sendResult(int result, int electronic, int counter,
+			long countdown) {
+		Intent intent = new Intent("techain.intent.action.BTRB");
+		intent.putExtra("result", result);
+		intent.putExtra("electronic", electronic);
+		intent.putExtra("counter", counter);
+		intent.putExtra("countdown", countdown);
+		this.sendBroadcast(intent);
+	}
+
+	@Override
+	public IBinder onBind(Intent intent) {
+		return mBinder;
+	}
+
+	public class ServiceBinder extends Binder {
+		BatteryLogService getService() {
+			return BatteryLogService.this;
+		}
+	}
+
+	private CountDownTimer timer = new CountDownTimer(COUNT_DOWN, 1000) {
+		@Override
+		public void onTick(long countdown) {
+			sendResult(result, electronic, counter, countdown / 1000);
+		}
+
+		@Override
+		public void onFinish() {
+			checkChargingResult();// delay 10s to check again if failed.
+		}
+	};
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/signal/Signal.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/signal/Signal.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/signal/Signal.java	(revision 166460)
@@ -0,0 +1,87 @@
+package com.mediatek.factorymode.signal;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import android.content.ComponentName;
+
+public class Signal extends Activity{
+	
+	private Button successbutton;
+	private Button failbuttonButton;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.signal);
+		
+		successbutton = (Button)this.findViewById(R.id.signal_bt_ok);
+		failbuttonButton = (Button)this.findViewById(R.id.signal_bt_failed);
+		successbutton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Signal.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failbuttonButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Signal.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		Intent callIntent = new Intent(Intent.ACTION_DIAL,Uri.parse("tel:"+112));
+		ComponentName componentName = new ComponentName("com.android.dialer","com.android.dialer.DialtactsActivity");
+        callIntent.setComponent(componentName);
+		startActivity(callIntent);
+	}
+	@Override
+	protected void onRestart() {
+		// TODO Auto-generated method stub
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Signal.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+
+//	public void onAttachedToWindow() {
+//		this.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD);
+//		super.onAttachedToWindow();
+//	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/hall/Hall.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/hall/Hall.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/hall/Hall.java	(revision 166460)
@@ -0,0 +1,119 @@
+package com.mediatek.factorymode.hall;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+import android.view.Window;
+import android.view.WindowManager;
+
+public class Hall extends Activity{
+	private Button succesButton ;
+	private Button failButton ;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.hall);
+
+
+		
+		succesButton = (Button)this.findViewById(R.id.hall_bt_ok);
+		failButton = (Button)this.findViewById(R.id.hall_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Hall.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Hall.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+		
+		  IntentFilter mfilter = new IntentFilter();
+      mfilter.addAction("intent.action.HALL_FACTORY_MODE_TEST");
+      registerReceiver(new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent) {
+				Log.v("HALL", "HALL_FACTORY_MODE_TEST");
+				testFiniah();
+			}
+        }, mfilter);
+	}
+	
+	
+	public void testFiniah() {
+				succesButton.setEnabled(true);
+				Intent intentResult = new Intent(Hall.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intentResult);
+				finish();
+	}
+
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+	
+
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Hall.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/simcard/SimCard.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/simcard/SimCard.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/simcard/SimCard.java	(revision 166460)
@@ -0,0 +1,185 @@
+package com.mediatek.factorymode.simcard;
+
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.engconstents;
+import android.util.Log;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.telephony.TelephonyManager;
+
+public class SimCard extends Activity{
+
+	public static final String TAG = "SimCard test";
+	
+	private static final String ENG_SIMTYPE = "persist.msms.phone_count";
+	
+	private TextView sim1TextView;
+	private TextView sim2TextView;
+	private Button successButton;
+	private Button failButton;
+	private int mSimCount = 0;
+	
+	private boolean Sim1Exist = false;
+    private boolean Sim2Exist = false;
+	private TelephonyManager telMgr;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	    getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+        setContentView(R.layout.simcard);
+	
+		sim1TextView = (TextView)this.findViewById(R.id.simcard_sim1_info);
+		sim2TextView = (TextView)this.findViewById(R.id.simcard_sim2_info);
+		successButton = (Button)this.findViewById(R.id.simcard_bt_ok);
+		failButton = (Button)this.findViewById(R.id.simcard_bt_failed);
+		successButton.setEnabled(false);
+		
+		String simCount = SystemProperties.get(ENG_SIMTYPE, "1");
+		mSimCount = Integer.parseInt(simCount);
+		Log.i(TAG, "onCreate: mSimCount = " + mSimCount);
+
+		successButton = (Button)this.findViewById(R.id.simcard_bt_ok);
+		failButton = (Button)this.findViewById(R.id.simcard_bt_failed);
+		successButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SimCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SimCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+				
+		getSimStateInfo();
+	}
+	
+	
+	void getSimStateInfo() {
+		int sim_in;
+		
+		if(mSimCount == 1) {
+			sim_in = checkSimState(0);
+			if(sim_in == 1) {
+				sim1TextView.setText("sim exist");
+				successButton.setEnabled(true);
+			Intent intent = new Intent(SimCard.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_OK,intent);
+			finish();
+			} else {
+				sim1TextView.setText("sim not exist");
+			}
+		} else if(mSimCount == 2) {
+			/* Get sim1 status */
+			sim_in = checkSimState(0);
+			if(sim_in == 1) {
+				sim1TextView.setText("sim1 exist");
+				Sim1Exist = true;
+			} else {
+				sim1TextView.setText("sim1 not exist");
+			}
+			
+			/* Get sim2 status */
+			sim_in = checkSimState(1);
+			if(sim_in == 1) {
+				sim2TextView.setText("sim2 exist");
+				Sim2Exist = true;
+			} else {
+				sim2TextView.setText("sim2 not exist");
+			}
+			
+			if(Sim1Exist && Sim2Exist){
+			   successButton.setEnabled(true);
+			   Intent intent = new Intent(SimCard.this, FactoryMode.class);
+			   setResult(FactoryMode.TEST_OK,intent);
+			   finish();
+			}
+		}
+		
+	}
+	
+	int checkSimState(int simId) {
+		int ret = 0;
+
+		telMgr = TelephonyManager.getDefault();
+		if (telMgr == null) {
+		    Log.e(TAG, "telMgr == null" );
+			return 0;
+		}
+
+		int state = telMgr.getSimState(simId);
+		Log.d(TAG, "getSimState ["+simId+"]=" + state);
+		if (state != TelephonyManager.SIM_STATE_ABSENT && state != TelephonyManager.SIM_STATE_UNKNOWN 
+		      && state != TelephonyManager.SIM_STATE_CARD_IO_ERROR && state !=TelephonyManager.SIM_STATE_NOT_READY) {
+        	ret = 1;
+		}
+		
+		return ret;
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(SimCard.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+
+//	public void onAttachedToWindow() {
+//		this.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD);
+//		super.onAttachedToWindow();
+//	}
+	
+	 @Override
+    public boolean dispatchKeyEvent(KeyEvent event) {
+		Log.e(TAG, "dispatchKeyEvent: action = " + event.getAction());
+        if (event.getAction() == KeyEvent.ACTION_DOWN) {
+            switch (event.getKeyCode()) {
+                case KeyEvent.KEYCODE_HOME:
+                    return true;
+            }
+        } else if (event.getAction() == KeyEvent.ACTION_UP) {
+            switch (event.getKeyCode()) {
+                case KeyEvent.KEYCODE_HOME:
+                    return true;
+            }
+        }
+
+        return super.dispatchKeyEvent(event);
+    }
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/LineTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/LineTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/LineTest.java	(revision 166460)
@@ -0,0 +1,403 @@
+package com.mediatek.factorymode.touchscreen;
+
+
+import java.util.ArrayList;
+import java.util.Timer;
+import java.util.TimerTask;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+import android.view.MotionEvent;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.AbsoluteLayout;
+import android.widget.Button;
+import android.widget.RelativeLayout;
+import android.widget.Toast;
+
+public class LineTest extends Activity {
+	static final String TAG = "LineTest";
+	
+	static final int EDGE_GAP = 50;
+	static final int BLOCK_WIDTH = 80;
+	static final int RADIUS_2 = EDGE_GAP  * EDGE_GAP / 2;
+	static final float MAX_VELOCITY = 13;
+	
+	static final int LEFT_TOP    = 0;
+	static final int RIGHT_TOP   = 1;
+	static final int RIGHT_BOTTOM = 2;
+	static final int LEFT_BOTTOM = 3;
+	
+	private View mLineView;
+	static int mStartPoint = -1;
+	static float mLine_K;
+	
+	private boolean[] state_referenceLine = {false, false};
+	
+	private ArrayList<PT> mPoints = new ArrayList<PT>();
+	private Paint mPaint;
+	private Paint mCornerPaint;
+	private Paint mTargetPaint;
+	private int mScreenWidth;
+	private int mScreenHeigh;
+	private float mGradient;
+	private float mPoint2Line;
+	
+	private Toast mToast;
+	
+	private VelocityTracker mVelocity;
+
+	
+	@Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+        requestWindowFeature(Window.FEATURE_NO_TITLE); 
+	    getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+      	setContentView(R.layout.touchscreen_line);
+      	
+      	mLineView = new LineView(this);
+      	RelativeLayout.LayoutParams param  = new RelativeLayout.LayoutParams(
+                LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+      	addContentView(mLineView, param);
+      	
+      	initView();
+    }
+	
+	private void initView() {
+		WindowManager dpy = (WindowManager)getSystemService(Context.WINDOW_SERVICE);
+        mScreenWidth = dpy.getDefaultDisplay().getWidth();
+        mScreenHeigh = dpy.getDefaultDisplay().getHeight();
+        mGradient = (float)mScreenHeigh / mScreenWidth;
+        Log.v(TAG, "initView: mGradient = " + mGradient);
+        
+        mPoint2Line = (float) (EDGE_GAP / Math.sqrt(1 + mGradient * mGradient));
+        Log.v(TAG, "initView: mPoint2Line = " + mPoint2Line);
+        
+        mLine_K = (float) Math.sqrt(mGradient * mGradient + 1);
+		
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		
+		mCornerPaint = new Paint();
+		mCornerPaint.setAntiAlias(true);
+		mCornerPaint.setColor(Color.YELLOW);
+		mCornerPaint.setStyle(Paint.Style.STROKE);
+		mCornerPaint.setStrokeWidth(3);
+		
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(true);
+		mTargetPaint.setColor(Color.GREEN);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(1);
+		
+		mToast = Toast.makeText(this, getString(R.string.tp_line_hint), Toast.LENGTH_LONG);
+		mToast.show();
+	}
+    private void goback(int flag) {
+		// TODO Auto-generated method stub
+		Intent intent=new Intent();  
+	    intent.setClass(LineTest.this, FactoryMode.class);  
+	    setResult(flag,intent);
+	    finish();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(LineTest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+    
+    public class LineView extends View {
+
+		public LineView(Context context) {
+			super(context);
+		}
+    	
+		@Override
+		protected void onDraw(Canvas canvas) {
+			/* Draw diagonal line */
+			if(state_referenceLine[0]) {
+				mPaint.setColor(Color.GREEN);
+				mPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+				mPaint.setStrokeWidth(BLOCK_WIDTH);
+				canvas.drawLine(0, 0, mScreenWidth, mScreenHeigh, mPaint);
+			} else {
+				mPaint.setColor(Color.RED);
+				mPaint.setStyle(Paint.Style.STROKE);
+				mPaint.setStrokeWidth(3);
+				canvas.drawLine(0, EDGE_GAP, mScreenWidth - EDGE_GAP, mScreenHeigh, mPaint);
+				canvas.drawLine(EDGE_GAP, 0, mScreenWidth, mScreenHeigh - EDGE_GAP, mPaint);
+			}
+			
+			if(state_referenceLine[1]) {
+				mPaint.setColor(Color.GREEN);
+				mPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+				mPaint.setStrokeWidth(BLOCK_WIDTH);
+				canvas.drawLine(0, mScreenHeigh, mScreenWidth, 0, mPaint);
+			} else {
+				mPaint.setColor(Color.RED);
+				mPaint.setStyle(Paint.Style.STROKE);
+				mPaint.setStrokeWidth(3);
+				canvas.drawLine(0, mScreenHeigh - EDGE_GAP, mScreenWidth - EDGE_GAP, 0, mPaint);
+				canvas.drawLine(EDGE_GAP, mScreenHeigh, mScreenWidth, EDGE_GAP, mPaint);
+			}
+			
+			/* Draw circle */
+			if(!state_referenceLine[0]) {
+			    canvas.drawCircle(0, 0, EDGE_GAP, mCornerPaint);
+				canvas.drawCircle(mScreenWidth, mScreenHeigh, EDGE_GAP , mCornerPaint);
+			}
+			
+			if(!state_referenceLine[1]) {
+				canvas.drawCircle(mScreenWidth, 0, EDGE_GAP, mCornerPaint);
+				canvas.drawCircle(0, mScreenHeigh, EDGE_GAP, mCornerPaint);
+			}
+			
+			if(mPoints != null && mPoints.size() > 0) {
+				int size = mPoints.size();
+				float lastX = 0, lastY = 0;
+				
+				for(int i = 0; i < size; i++) {
+					PT n = mPoints.get(i);
+					
+					if(i > 0) {
+						canvas.drawLine(lastX, lastY, n.x, n.y, mTargetPaint);
+						canvas.drawPoint(lastX, lastY, mTargetPaint);
+					}
+					
+					lastX = n.x;
+					lastY = n.y;
+				}
+			}
+		}
+		
+		public boolean onTouchEvent(MotionEvent event) {
+			float x = event.getX();
+			float y = event.getY();
+			
+			switch(event.getAction()) {
+			case MotionEvent.ACTION_DOWN:
+				if(mToast != null) {
+					mToast.cancel();
+				}
+
+				if(checkStartPoint(x, y)) {
+					clear();
+					mVelocity = VelocityTracker.obtain();
+					if(mPoints != null) {
+						mPoints.add(new PT(x, y));
+					}
+					invalidate();
+				}
+				break;
+				
+			case MotionEvent.ACTION_MOVE:
+				if((mStartPoint != -1) && (isOnLine1(x, y) || isOnLine2(x, y))) {
+					mVelocity.addMovement(event);
+					mVelocity.computeCurrentVelocity(10);
+					
+					float xV = mVelocity.getXVelocity();
+					float yV = mVelocity.getYVelocity();
+					Log.v(TAG, "onTouchEvent: xV = " + xV);
+					Log.v(TAG, "onTouchEvent: yV = " + yV);
+					if((Math.abs(xV) > MAX_VELOCITY) || (Math.abs(yV) > MAX_VELOCITY)) {
+						if(mToast != null) {
+							//mToast.cancel();
+							mToast.setText(getString(R.string.tp_slide_too_quick));
+							mToast.show();
+						}
+						mStartPoint = -1;
+						clear();
+					} else {
+						if(mPoints != null) {
+							mPoints.add(new PT(x, y));
+							
+							if((int)y - mPoints.get(0).y > (mScreenHeigh - BLOCK_WIDTH)) {
+								checkLastPoint(false, x, y);
+							}
+						}
+					}
+				} else {
+					if(((mStartPoint == LEFT_TOP || mStartPoint == RIGHT_BOTTOM) && !state_referenceLine[0]) || 
+							((mStartPoint == RIGHT_TOP || mStartPoint == LEFT_BOTTOM) && !state_referenceLine[1])) {
+						if(mToast != null) {
+							//mToast.cancel();
+							mToast.setText(getString(R.string.tp_line_area_hint));
+							mToast.show();
+						}
+					}
+					mStartPoint = -1;
+					clear();
+				}
+				invalidate();
+				break;
+				
+			case MotionEvent.ACTION_UP:
+				if(checkLastPoint(true, x, y)) {
+					invalidate();
+				}
+				mStartPoint = -1;
+				clear();
+				break;
+				
+			default:
+				mStartPoint = -1;
+				clear();
+				break;
+			}
+			
+			return true;
+		}
+		
+		boolean checkStartPoint(float x, float y) {
+			boolean ret = false;
+			mStartPoint = -1;
+			
+			if(x * x + y * y <= RADIUS_2) {
+				mStartPoint = LEFT_TOP;
+				ret = true;
+			} else if((mScreenWidth - x) * (mScreenWidth - x) + y * y <= RADIUS_2) {
+				mStartPoint = RIGHT_TOP;
+				ret = true;
+			} else if((mScreenWidth - x) * (mScreenWidth - x) + (mScreenHeigh - y) * (mScreenHeigh - y) < RADIUS_2) {
+				mStartPoint = RIGHT_BOTTOM;
+				ret = true;
+			} else if(x * x + (mScreenHeigh - y) * (mScreenHeigh - y) <= RADIUS_2) {
+				mStartPoint = LEFT_BOTTOM;
+				ret = true;
+			} else {
+				if(!state_referenceLine[0] || !state_referenceLine[1]) {
+					if(mToast != null) {
+						mToast.setText(getString(R.string.tp_line_start_hint));
+						mToast.show();
+					}
+				}
+			}
+			
+			return ret;
+		}
+		
+		boolean checkLastPoint(boolean isUp, float x, float y) {
+			boolean ret = false;
+			
+			if((mStartPoint == LEFT_TOP) && ((mScreenWidth - x) * (mScreenWidth - x) + (mScreenHeigh - y) * (mScreenHeigh - y) < RADIUS_2)) {
+				state_referenceLine[0] = true;
+				ret = true;
+			} else if((mStartPoint == RIGHT_BOTTOM) && (x * x + y * y <= RADIUS_2)) {
+				state_referenceLine[0] = true;
+				ret = true;
+			} else if((mStartPoint == RIGHT_TOP) && (x * x + (mScreenHeigh - y) * (mScreenHeigh - y) <= RADIUS_2)) {
+				state_referenceLine[1] = true;
+				ret = true;
+			} else if((mStartPoint == LEFT_BOTTOM) && ((mScreenWidth - x) * (mScreenWidth - x) + y * y <= RADIUS_2)) {
+				state_referenceLine[1] = true;
+				ret = true;
+			} else {
+				if(isUp && (mStartPoint != -1) && ((isOnLine1(x, y) && !state_referenceLine[0]) || (isOnLine2(x, y) && !state_referenceLine[1]))) {
+					if(mToast != null) {
+						mToast.setText(getString(R.string.tp_line_stop_hint));
+						mToast.show();
+					}
+				}
+			}
+			
+			if(state_referenceLine[0] && state_referenceLine[1]) {
+				if(mToast != null) {
+					mToast.setText(getString(R.string.tp_success_hint));
+					mToast.show();
+				}
+				
+				Timer timer = new Timer();
+				timer.schedule(new TimerTask() {
+
+					@Override
+					public void run() {
+						Intent intent = new Intent(LineTest.this, FactoryMode.class);
+						setResult(FactoryMode.TEST_OK,intent);
+						finish();
+					}
+					
+				}, 1500);
+			}
+			
+			return ret;
+		}
+		
+		boolean isOnLine1(float x, float y) {
+			boolean ret = false;
+			float interval = Math.abs(mGradient * x - y) / mLine_K;
+			if(interval <= mPoint2Line) {
+				ret = true;
+			}
+			
+			return ret;
+		}
+		
+		boolean isOnLine2(float x, float y) {
+			boolean ret = false;
+			float interval = Math.abs(-mGradient * x - y + mScreenHeigh) / mLine_K;
+			if(interval <= mPoint2Line) {
+				ret = true;
+			}
+			
+			return ret;		
+		}
+    }
+    
+    @Override
+	protected void onStop() {
+    	super.onStop();
+    	if(mToast != null) {
+			mToast.cancel();
+		}
+		
+		if(mPoints != null) {
+			mPoints.clear();
+		}
+    }
+    
+    public class PT {
+		public float x;
+		public float y;
+		public PT(float x, float y)
+		{
+			this.x = x;
+			this.y = y;
+		}
+	};
+    
+	void clear() {
+		if(mPoints != null) {
+			mPoints.clear();
+		}
+		
+		if(mVelocity != null) {
+			mVelocity.clear();
+		}
+	}
+    
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/PointTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/PointTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/PointTest.java	(revision 166460)
@@ -0,0 +1,5 @@
+package com.mediatek.factorymode.touchscreen;
+
+public class PointTest {
+
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/BlockTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/BlockTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/BlockTest.java	(revision 166460)
@@ -0,0 +1,693 @@
+
+package com.mediatek.factorymode.touchscreen;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Point;
+import android.graphics.RectF;
+import android.graphics.Region;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Toast;
+import android.view.VelocityTracker;
+import com.mediatek.factorymode.FactoryMode;
+import android.app.StatusBarManager;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.R.string;
+
+/**
+ * @author Demo.zeng E-mail: Demo_yolk@163.com
+ * @version 创建时间：2013-12-24 上午11:07:56
+ */
+public class BlockTest extends Activity {
+	
+		private StatusBarManager mStatusBarManager;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+        getWindow().requestFeature(Window.FEATURE_NO_TITLE);
+	getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+        BlockView bv = new BlockView(this,getWindowManager().getDefaultDisplay().getHeight(),getWindowManager().getDefaultDisplay().getWidth());
+        setContentView(bv);
+        if (mStatusBarManager == null) {
+            mStatusBarManager = (StatusBarManager)this.getSystemService(Context.STATUS_BAR_SERVICE);
+        }
+        if (mStatusBarManager == null) {
+            Log.w("BlockTest", "Could not get status bar manager");
+        } else {
+            int flags = StatusBarManager.DISABLE_EXPAND;
+            mStatusBarManager.disable(flags);
+        }
+    }
+
+		 @Override
+    protected void onPause() {
+        super.onPause();
+        if(null == mStatusBarManager){ 
+            mStatusBarManager = (StatusBarManager)this.getSystemService(Context.STATUS_BAR_SERVICE);
+        } 
+        mStatusBarManager.disable(StatusBarManager.DISABLE_NONE);
+    }
+
+    @Override
+    public boolean onKeyUp(int keyCode, KeyEvent event) {
+        switch (keyCode) {
+        case KeyEvent.KEYCODE_HOME:
+            Toast.makeText(this, "The whole test process, home and back keys shielding", Toast.LENGTH_SHORT).show();
+            return true;
+            
+        case KeyEvent.KEYCODE_BACK:
+            Toast.makeText(this, "The whole test process, home and back keys shielding", Toast.LENGTH_SHORT).show();
+            return true;
+        }
+        return super.onKeyUp(keyCode, event);
+    }
+    
+    private void successGoBack(){
+            Intent intent = new Intent(BlockTest.this, FactoryMode.class);
+            setResult(FactoryMode.TEST_OK,intent);
+            finish();
+    }
+    
+    
+    /**
+     * @author Demo.zeng E-mail: Demo_yolk@163.com
+     * @version 创建时间：2013-12-24 上午11:09:20
+     */
+    public class BlockView extends View {
+
+        private static final String TAG = "BlockView";
+
+        private List<Quadrangle> crossLayout = new ArrayList<Quadrangle>();
+        private List<List<Quadrangle>> cellLayout = new ArrayList<List<Quadrangle>>();
+		static final float MAX_VELOCITY = 8;
+        private int crossLine = 22;
+        private int crossVeticalLine = 9;
+
+        private int cellLine = 17;
+        private int cellVeticalLine = 9;
+
+        private int screenHeight;
+        private int screenWidth;
+
+        private Point crossLeftLineLTPoint = new Point();
+        private Point crossLeftLineRTPoint = new Point();
+        private Point crossLeftLineLBPoint = new Point();
+        private Point crossLeftLineRBPoint = new Point();
+        private Path leftLine = new Path();
+
+        private Point crossRightLineLTPoint = new Point();
+        private Point crossRightLineRTPoint = new Point();
+        private Point crossRightLineLBPoint = new Point();
+        private Point crossRightLineRBPoint = new Point();
+        private Path rightLine = new Path();
+
+        private Paint redPaint = new Paint();
+        private Paint whitePaint = new Paint();
+        private Paint bluePaint = new Paint();
+        private Paint greenPaint = new Paint();
+
+		private Toast mToast ;
+		private VelocityTracker vt ;
+        /**
+         * @param context
+         */
+        public BlockView(Context context, int screenHeight, int screenWidth) {
+            super(context);
+            this.screenHeight = screenHeight;
+            this.screenWidth = screenWidth;
+            Log.d(TAG, "screenHeight:" + screenHeight + ",screenWidth:" + screenWidth);
+
+            initData();
+            initPaint();
+        }
+
+        private void initPaint() {
+            // 边线画笔
+            redPaint.setAntiAlias(true);
+            redPaint.setColor(Color.RED);
+            redPaint.setStrokeWidth(1);
+            redPaint.setStyle(Paint.Style.STROKE);
+            // 白色填充画笔
+            whitePaint.setAntiAlias(true);
+            whitePaint.setColor(Color.WHITE);
+            whitePaint.setStyle(Paint.Style.FILL_AND_STROKE);
+            // 绿色点画笔
+        bluePaint.setAntiAlias(true);
+        bluePaint.setStrokeWidth(3);
+        bluePaint.setColor(Color.BLUE);
+        bluePaint.setStyle(Paint.Style.STROKE);
+            // 绿色轨迹画笔
+            greenPaint.setAntiAlias(true);
+            greenPaint.setColor(Color.GREEN);
+            greenPaint.setStyle(Paint.Style.STROKE);
+        }
+
+        private void initData() {
+            int crossCellWidth = screenWidth / crossVeticalLine;
+            int crossCellHeight = screenHeight / crossLine;
+            // 左斜线的顶部 左边点和右边点
+            crossLeftLineLTPoint.x = 0;
+            crossLeftLineLTPoint.y = crossCellHeight;
+            crossLeftLineRTPoint.x = crossCellWidth / 2;
+            crossLeftLineRTPoint.y = 0;
+            // 左斜线的底部 左边点和右边点
+            crossLeftLineLBPoint.x = screenWidth - crossCellWidth / 2;
+            crossLeftLineLBPoint.y = screenHeight;
+            crossLeftLineRBPoint.x = screenWidth;
+            crossLeftLineRBPoint.y = screenHeight - crossCellHeight;
+            // 左斜线
+            leftLine.moveTo(crossLeftLineLTPoint.x, crossLeftLineLTPoint.y);
+            leftLine.lineTo(0, 0);
+            leftLine.lineTo(crossLeftLineRTPoint.x, crossLeftLineRTPoint.y);
+            leftLine.lineTo(crossLeftLineRBPoint.x, crossLeftLineRBPoint.y);
+            leftLine.lineTo(screenWidth, screenHeight);
+            leftLine.lineTo(crossLeftLineLBPoint.x, crossLeftLineLBPoint.y);
+            leftLine.lineTo(crossLeftLineLTPoint.x, crossLeftLineLTPoint.y);
+
+            // 右斜线的顶部 左边点和右边点
+            crossRightLineLTPoint.x = screenWidth - crossCellWidth / 2;
+            crossRightLineLTPoint.y = 0;
+            crossRightLineRTPoint.x = screenWidth;
+            crossRightLineRTPoint.y = crossCellHeight;
+            // 右斜线的顶部 左边点和右边点
+            crossRightLineLBPoint.x = 0;
+            crossRightLineLBPoint.y = screenHeight - crossCellHeight;
+            crossRightLineRBPoint.x = crossCellWidth / 2;
+            crossRightLineRBPoint.y = screenHeight;
+
+            // 右斜线
+            rightLine.moveTo(crossRightLineLTPoint.x, crossRightLineLTPoint.y);
+            rightLine.lineTo(screenWidth, 0);
+            rightLine.lineTo(crossRightLineRTPoint.x, crossRightLineRTPoint.y);
+            rightLine.lineTo(crossRightLineRBPoint.x, crossRightLineRBPoint.y);
+            rightLine.lineTo(0, screenHeight);
+            rightLine.lineTo(crossRightLineLBPoint.x, crossRightLineLBPoint.y);
+            rightLine.lineTo(crossRightLineLTPoint.x, crossRightLineLTPoint.y);
+
+            getCrossLayoutNodePoint(crossCellHeight);
+
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            canvas.drawARGB(255, 0, 0, 0);
+
+            if (cellIsShow) {
+                int size = cellLayout.size();
+                for (int i = 0; i < size; i++) {
+                    List<Quadrangle> line = cellLayout.get(i);
+                    for (int j = 0; j < line.size(); j++) {
+                        if (checkCellIsRemoved(i, j)) {
+                            continue;
+                        }
+                        Quadrangle q = line.get(j);
+                        p.reset();
+                        p.moveTo(q.left_top.x, q.left_top.y);
+                        p.lineTo(q.top_right.x, q.top_right.y);
+                        p.lineTo(q.right_bottom.x, q.right_bottom.y);
+                        p.lineTo(q.bottom_left.x, q.bottom_left.y);
+                        p.close();
+                        canvas.drawPath(p, whitePaint);
+                        canvas.drawPath(p, redPaint);
+                    }
+                }
+            } else {
+                int size = crossLayout.size();
+                for (int i = 0; i < size; i++) {
+                    if (checkQuadIsRemoved(i)) {
+                        continue;
+                    }
+                    Quadrangle q = crossLayout.get(i);
+                    p.reset();
+                    p.moveTo(q.left_top.x, q.left_top.y);
+                    p.lineTo(q.top_right.x, q.top_right.y);
+                    p.lineTo(q.right_bottom.x, q.right_bottom.y);
+                    p.lineTo(q.bottom_left.x, q.bottom_left.y);
+                    p.close();
+                    canvas.drawPath(p, whitePaint);
+                    canvas.drawPath(p, redPaint);
+                }
+
+            }
+            int touchLastX = 0;
+            int touchLastY = 0;
+
+            Iterator<Integer> keys = touchPoints.keySet().iterator();
+            while (keys.hasNext()) {
+                List<Point> list = touchPoints.get(keys.next());
+                int touchSize = list.size();
+                for (int i = 0; i < touchSize; i++) {
+                    trackPoint = list.get(i);
+                    if (i == 0) {
+                        canvas.drawPoint(trackPoint.x, trackPoint.y, greenPaint);
+                    } else {
+                        canvas.drawLine(touchLastX, touchLastY, trackPoint.x, trackPoint.y, greenPaint);
+                    }
+					canvas.drawPoint(trackPoint.x,trackPoint.y,bluePaint);
+                    touchLastX = trackPoint.x;
+                    touchLastY = trackPoint.y;
+                }
+            }
+
+        }
+
+        private void toNextTest() {
+            touchPoints.clear();
+            int cellHeight = screenHeight / cellLine;
+            int cellWidth = screenWidth / cellVeticalLine;
+            getCellLayoutNodePoint(cellWidth, cellHeight);
+            cellIsShow = true;
+            invalidate();
+        }
+
+        boolean eliminateMode = false;
+        boolean cellIsShow = false;
+        Map<Integer, List<Point>> touchPoints = new HashMap<Integer, List<Point>>();
+
+        @Override
+        public boolean onTouchEvent(MotionEvent event) {
+            int x = (int) event.getX();
+            int y = (int) event.getY();
+            int action = event.getAction();
+            switch (action) {
+                case MotionEvent.ACTION_DOWN:
+
+                    eliminateMode = true;
+                    if (cellIsShow) {
+                        checkPointInCell(x, y);
+                    } else {
+                        checkPointInQuad(x, y);
+                    }
+
+                    List<Point> newPoints = new ArrayList<Point>();
+                    int key = touchPoints.size();
+                    touchPoints.put(key, newPoints);
+                    newPoints.add(new Point(x, y));
+					vt = VelocityTracker.obtain();
+					vt.addMovement(event);
+                    invalidate();
+                    break;
+                case MotionEvent.ACTION_MOVE:
+					vt.addMovement(event);
+					vt.computeCurrentVelocity(10);
+					int xVe = (int) vt.getXVelocity();
+					int yVe = (int) vt.getYVelocity();
+					if(xVe>MAX_VELOCITY||yVe>MAX_VELOCITY){
+						if(mToast!=null){
+                        mToast.cancel();
+						}
+                        mToast = Toast.makeText(getContext(), getString(R.string.tp_block_too_quick), Toast.LENGTH_SHORT);
+                        mToast.show();
+					}
+                    if (cellIsShow) {
+                        checkPointInCell(x, y);
+                    } else {
+                        checkPointInQuad(x, y);
+                    }
+
+                    touchPoints.get(touchPoints.size() - 1).add(new Point(x, y));
+                    invalidate();
+                    break;
+
+                case MotionEvent.ACTION_UP:
+                case MotionEvent.ACTION_CANCEL:
+                    eliminateMode = false;
+                    touchPoints.get(touchPoints.size() - 1).add(new Point(x, y));
+                    invalidate();
+                    if (!cellIsShow) {
+                        
+                        if (touchedQuad.size() == crossLayout.size()) {
+                            toNextTest();
+                        }
+                    } else {
+                        if(checkCellRemovedOver()){
+                            successGoBack();
+                        }
+                    }
+					logOutData();
+					vt.addMovement(event);
+					vt.computeCurrentVelocity(10);
+					int xVe2 = (int) vt.getXVelocity();
+					int yVe2 = (int) vt.getYVelocity();
+					if(xVe2>MAX_VELOCITY||yVe2>MAX_VELOCITY){
+                    if(mToast!=null){
+                        mToast.cancel();
+                    }
+                        mToast = Toast.makeText(getContext(), getString(R.string.tp_block_too_quick), Toast.LENGTH_SHORT);
+                        mToast.show();
+					}
+                    break;
+                default:
+                    break;
+            }
+
+            return true;
+        }
+
+        private boolean checkCellRemovedOver(){
+            int touchedCellSize = touchedCell.size();
+            int cellSize=0;
+            for (int i = 0; i < cellLayout.size(); i++) {
+                cellSize+=cellLayout.get(i).size();
+            }
+            
+            if(touchedCellSize==cellSize){
+                return true;
+            }
+            return false;
+        }
+        
+        Path p = new Path();
+        Region pRe = new Region();
+        RectF pBounds = new RectF();
+        Region standRe = new Region();
+        Point trackPoint = new Point();
+        List<Integer> touchedQuad = new ArrayList<Integer>();
+        List<Cell> touchedCell = new ArrayList<Cell>();
+
+        private boolean checkQuadIsRemoved(int position) {
+            for (int i = 0; i < touchedQuad.size(); i++) {
+                if (position == touchedQuad.get(i)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        private boolean checkCellIsRemoved(int i, int j) {
+            for (int h = 0; h < touchedCell.size(); h++) {
+                Cell c = touchedCell.get(h);
+                if (c.i == i && c.j == j) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        private void checkPointInQuad(int x, int y) {
+            int size = crossLayout.size() / 2;
+            for (int i = 0; i < size; i++) {
+                Quadrangle lq = crossLayout.get(i);
+                if (y < lq.bottom_left.y) {
+                    Quadrangle rq = crossLayout.get(size + i);
+					if (!checkIsExitInMovedQuad(i)) {
+                    if (checkPointInGiveRegion(x, y, lq.left_top, lq.top_right, lq.right_bottom,
+                            lq.bottom_left)) {
+                        addPositionForQuad(i);
+                    }
+					}
+					if (!checkIsExitInMovedQuad(size + i)) {
+                    if (checkPointInGiveRegion(x, y, rq.left_top, rq.top_right, rq.right_bottom,
+                            rq.bottom_left)) {
+                        addPositionForQuad(size + i);
+                    }
+					}
+                    return;
+                }
+            }
+        }
+
+        private void addPositionForQuad(int position) {
+            for (int i = 0; i < touchedQuad.size(); i++) {
+                if (position == touchedQuad.get(i)) {
+                    return;
+                }
+            }
+            touchedQuad.add(position);
+        }
+
+        private void checkPointInCell(int x, int y) {
+            int size = cellLayout.size();
+            for (int i = 0; i < size; i++) {
+                if (y < cellLayout.get(i).get(0).bottom_left.y) {
+                    List<Quadrangle> yContainList = cellLayout.get(i);
+                    for (int j = 0; j < yContainList.size(); j++) {
+						if (isExitInMovedCell(i, j)) {
+                        continue;
+                    }
+                        Quadrangle q = yContainList.get(j);
+                        if (checkPointInGiveRegion(x, y, q.left_top, q.top_right, q.right_bottom,
+                                q.bottom_left)) {
+                            addTouchedCell(i, j);
+                        }
+                    }
+                    return;
+                }
+            }
+        }
+private boolean isExitInMovedCell(int i, int j) {
+        for (int h = 0; h < touchedCell.size(); h++) {
+            Cell c = touchedCell.get(h);
+            if (c.i == i && c.j == j) {
+                return true;
+            }
+        }
+        return false;
+    }
+        private void addTouchedCell(int i,int j){
+            for (int h = 0; h < touchedCell.size(); h++) {
+                if(touchedCell.get(h).i==i&&touchedCell.get(h).j==j){
+                    return ;
+                }
+            }
+            touchedCell.add(new Cell(i, j));
+        }
+        
+        private boolean checkPointInGiveRegion(int x, int y, Point tl, Point tr, Point br, Point bl) {
+            p.reset();
+            p.moveTo(tl.x, tl.y);
+            p.lineTo(tr.x, tr.y);
+            p.lineTo(br.x, br.y);
+            p.lineTo(bl.x, bl.y);
+            p.close();
+            pBounds.setEmpty();
+            p.computeBounds(pBounds, true);
+            pRe.setEmpty();
+            standRe.setEmpty();
+            standRe.set((int) pBounds.left, (int) pBounds.top, (int) pBounds.right,
+                    (int) pBounds.bottom);
+            pRe.setPath(p, standRe);
+
+            return pRe.contains(x, y);
+        }
+
+	private boolean checkIsExitInMovedQuad(int position) {
+        for (int i = 0; i < touchedQuad.size(); i++) {
+            if (position == touchedQuad.get(i)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+        private void getCellLayoutNodePoint(int cellWidth, int cellHeight) {
+            List<Point> nodeTList = new ArrayList<Point>();
+            List<Point> nodeBList = new ArrayList<Point>();
+            for (int i = 0; i <= cellLine; i++) {
+
+                for (int j = 0; j <= cellVeticalLine; j++) {
+                    Point p = new Point(cellWidth * j, cellHeight * i);
+                    if (i == 0) {
+                        nodeTList.add(p);
+                    } else {
+                        nodeBList.add(p);
+                    }
+                }
+                if (i > 0) {
+                    List<Quadrangle> list = new ArrayList<Quadrangle>();
+                    for (int j = 0; j < (nodeBList.size() - 1); j++) {
+                        if (i == 2 || i == 3 || i == 4 || i == 6 || i == 7 || i == 8 || i == 10
+                                || i == 11 || i == 12 || i == 14 || i == 15 || i == 16) {
+                            if(j==1||j==3||j==5||j==7){
+                                
+                                continue;
+                            }
+                        }
+                        Quadrangle q = new Quadrangle();
+                        q.left_top = nodeTList.get(j);
+                        q.top_right = nodeTList.get(j + 1);
+                        q.right_bottom = nodeBList.get(j + 1);
+                        q.bottom_left = nodeBList.get(j);
+              
+                        list.add(q);
+                    }
+                    for (int j = 0; j < nodeBList.size(); j++) {
+                        nodeTList.set(j, nodeBList.get(j));
+                    }
+                    nodeBList.clear();
+                    cellLayout.add(list);
+                }
+
+            }
+
+        }
+
+        private void getCrossLayoutNodePoint(int cellHeight) {
+            int mHeight = 0;
+            Point[] listP = new Point[4];
+            for (int i = 0; i <= crossLine; i++) {
+                // 左斜线 交点
+                if (i != 0 && i != 2 && i != 22 && i != 21) {
+                    mHeight += cellHeight + 1;
+                } else if (i != 0) {
+                    mHeight += cellHeight;
+                }
+                Point leftLeftLinePoint = calcLineNode(mHeight, crossLeftLineLTPoint.x,
+                        crossLeftLineLTPoint.y, crossLeftLineLBPoint.x, crossLeftLineLBPoint.y);
+                fixOutOfBoundPoint(leftLeftLinePoint);
+                Point rightLeftLinePoint = calcLineNode(mHeight, crossLeftLineRTPoint.x,
+                        crossLeftLineRTPoint.y, crossLeftLineRBPoint.x, crossLeftLineRBPoint.y);
+                fixOutOfBoundPoint(rightLeftLinePoint);
+
+                if (i == 0) {
+                    listP[0] = leftLeftLinePoint;
+                    listP[1] = rightLeftLinePoint;
+                } else if (i == 1) {
+                    listP[2] = leftLeftLinePoint;
+                    listP[3] = rightLeftLinePoint;
+                    Quadrangle leftQ = new Quadrangle();
+                    leftQ.left_top = listP[0];
+                    leftQ.top_right = listP[1];
+                    leftQ.right_bottom = listP[3];
+                    leftQ.bottom_left = listP[2];
+                    
+                    crossLayout.add(leftQ);
+                } else {
+                    listP[0] = listP[2];
+                    listP[1] = listP[3];
+                    listP[2] = leftLeftLinePoint;
+                    listP[3] = rightLeftLinePoint;
+                    Quadrangle leftQ = new Quadrangle();
+                    leftQ.left_top = listP[0];
+                    leftQ.top_right = listP[1];
+                    leftQ.right_bottom = listP[3];
+                    leftQ.bottom_left = listP[2];
+                    
+                    crossLayout.add(leftQ);
+                }
+            }
+            mHeight = 0;
+            for (int i = 0; i <= crossLine; i++) {
+                // 右斜线交点
+                if (i != 0 && i != 2 && i != 22 && i != 21) {
+                    mHeight += cellHeight + 1;
+                } else if (i != 0) {
+                    mHeight += cellHeight;
+                }
+                Point leftRightLinePoint = calcLineNode(mHeight, crossRightLineLTPoint.x,
+                        crossRightLineLTPoint.y, crossRightLineLBPoint.x, crossRightLineLBPoint.y);
+                fixOutOfBoundPoint(leftRightLinePoint);
+                Point rightRightLinePoint = calcLineNode(mHeight, crossRightLineRTPoint.x,
+                        crossRightLineRTPoint.y, crossRightLineRBPoint.x, crossRightLineRBPoint.y);
+                fixOutOfBoundPoint(rightRightLinePoint);
+
+                if (i == 0) {
+                    listP[0] = leftRightLinePoint;
+                    listP[1] = rightRightLinePoint;
+                } else if (i == 1) {
+                    listP[2] = leftRightLinePoint;
+                    listP[3] = rightRightLinePoint;
+                    Quadrangle rightQ = new Quadrangle();
+                    rightQ.left_top = listP[0];
+                    rightQ.top_right = listP[1];
+                    rightQ.right_bottom = listP[3];
+                    rightQ.bottom_left = listP[2];
+                    
+                    crossLayout.add(rightQ);
+                } else {
+                    listP[0] = listP[2];
+                    listP[1] = listP[3];
+                    listP[2] = leftRightLinePoint;
+                    listP[3] = rightRightLinePoint;
+                    Quadrangle rightQ = new Quadrangle();
+                    rightQ.left_top = listP[0];
+                    rightQ.top_right = listP[1];
+                    rightQ.right_bottom = listP[3];
+                    rightQ.bottom_left = listP[2];
+                    
+                    crossLayout.add(rightQ);
+                }
+            }
+        }
+
+        private void fixOutOfBoundPoint(Point p) {
+            if (p.x < 0) {
+                p.x = 0;
+            }
+            if (p.x > screenWidth) {
+                p.x = screenWidth;
+            }
+        }
+
+        private Point calcLineNode(int height, int x1, int y1, int x2, int y2) {
+            Point node = new Point();
+            node.y = height;
+            node.x = ((x2 - x1) * (height - y1) + (y2 - y1) * x1) / (y2 - y1);
+            int k = (y2 - y1) / (x2 - x1);
+            int b = y1 - k * x1;
+            
+            return node;
+        }
+
+        public class Quadrangle {
+            public Point left_top;
+            public Point top_right;
+            public Point right_bottom;
+            public Point bottom_left;
+
+            @Override
+            public String toString() {
+                return "(" + left_top + "," + top_right + ","
+                    + right_bottom + "," + bottom_left+")";
+            }
+        }
+
+        public class Cell {
+            public int i;
+            public int j;
+
+            public Cell(int i, int j) {
+                this.i = i;
+                this.j = j;
+            }
+			 @Override
+        public String toString() {
+            return "("+i+","+j+")";
+        }
+        }
+		 private void logOutData(){
+        
+        for (int i = 0; i < touchPoints.size(); i++) {
+            Log.d(TAG, "i:"+i+"--->point:"+touchPoints.get(i));
+        }
+        
+        for (int i = 0; i < touchedCell.size(); i++) {
+            Log.d(TAG, "i:"+i+"--->touchedCell:"+touchedCell.get(i));
+        }
+        for (int i = 0; i < touchedQuad.size(); i++) {
+            Log.d(TAG, "i:"+i+"--->touchedQuad:"+touchedQuad.get(i));
+        }
+    }
+    }
+   
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/TouchScreenHandWriting.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/TouchScreenHandWriting.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/TouchScreenHandWriting.java	(revision 166460)
@@ -0,0 +1,94 @@
+package com.mediatek.factorymode.touchscreen;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.KeyCode;
+import com.mediatek.factorymode.TouchView;
+import com.mediatek.factorymode.R;
+
+public class TouchScreenHandWriting extends Activity {
+	
+	private String TAG = "TouchScreenHandWriting";
+	private TouchView myview = null;
+	private Button successButton = null;
+	private Button failButton = null;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		// setContentView(new MyView(this));
+
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		requestWindowFeature(Window.FEATURE_NO_TITLE); 
+		getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+	    //setContentView(myview = new TouchView(this));
+		setContentView(R.layout.touchscreen_handwriting);
+		myview = (TouchView)this.findViewById(R.id.toucheview);
+		successButton =(Button)this.findViewById(R.id.touchscreen_bt_ok);
+		failButton =(Button)this.findViewById(R.id.touchscreen_bt_failed);
+		successButton.setVisibility(View.GONE);
+		failButton.setVisibility(View.GONE);
+
+		successButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(TouchScreenHandWriting.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(TouchScreenHandWriting.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_CANCEL,intent);
+				finish();
+			}
+			
+		});
+		
+		Toast.makeText(this, getString(R.string.tp_hw_hint), Toast.LENGTH_LONG).show();
+	}
+	
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_SEARCH:
+			successButton.setVisibility(View.VISIBLE);
+			failButton.setVisibility(View.VISIBLE);
+			break;
+		}
+		return super.onKeyDown(keyCode, event);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(TouchScreenHandWriting.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/flashlight/FlashLight.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/flashlight/FlashLight.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/flashlight/FlashLight.java	(revision 166460)
@@ -0,0 +1,200 @@
+package com.mediatek.factorymode.flashlight;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.hardware.Camera;
+import android.hardware.Camera.Parameters;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import java.util.List;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.TextureView;
+import android.graphics.SurfaceTexture;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+public class FlashLight extends Activity implements TextureView.SurfaceTextureListener{
+	private Button succesButton ;
+	private Button failButton ;
+	private Camera camera;
+	private boolean isOpen = true;
+	public final static int OPEN_CAMERA = 1011;
+	public final static int OPEN_LIGHT = 1012;
+	public final static int CLOSE_LIGHT = 1013;	
+	private Parameters mParams ;
+	private TextureView mTextureView = null;
+    private SurfaceTexture mSurfaceTexture = null;
+	
+	private int count;
+
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	    getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);	
+		setContentView(R.layout.flashlight);
+
+
+		mTextureView = (TextureView) findViewById(R.id.preview_content);
+		mTextureView.setSurfaceTextureListener(this);
+		
+		succesButton = (Button)this.findViewById(R.id.flashlight_bt_ok);
+		failButton = (Button)this.findViewById(R.id.flashlight_bt_failed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(FlashLight.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(FlashLight.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+				
+		//handler.sendEmptyMessage(OPEN_CAMERA);
+		//handler.sendEmptyMessage(OPEN_LIGHT);
+
+	}
+	
+
+	Handler handler = new Handler(Looper.getMainLooper()) {
+		@Override
+		public void handleMessage(Message msg) {
+			switch (msg.what) {
+			case OPEN_CAMERA:
+				camera = Camera.open();
+				mParams = camera.getParameters();
+				
+				List<String> list = mParams.getSupportedFlashModes();
+				if (list.contains(Parameters.FLASH_MODE_TORCH)) {
+					mParams.setFlashMode(Parameters.FLASH_MODE_TORCH);
+				} else {
+					Intent intent = new Intent(FlashLight.this, FactoryMode.class);
+					setResult(FactoryMode.TEST_CANCEL,intent);
+					finish();
+				}
+				camera.setParameters(mParams);
+				try {
+				    camera.setPreviewTexture(mSurfaceTexture);
+				} catch (Exception e) {}
+				camera.startPreview();
+				isOpen = true;
+				count++;
+                handler.sendEmptyMessageDelayed(CLOSE_LIGHT , 400);
+				break;
+			case OPEN_LIGHT:
+				mParams.setFlashMode(Parameters.FLASH_MODE_TORCH);
+				camera.setParameters(mParams);
+				camera.startPreview();
+				isOpen = true;
+				break;
+			case CLOSE_LIGHT:
+				if (isOpen) {
+					mParams.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
+					camera.setParameters(mParams);
+					camera.stopPreview();
+					// camera.release();
+					isOpen = false;
+					// sendEmptyMessage(OPEN_CAMERA);
+					if(0 < count && count < 6){
+                       handler.sendEmptyMessageDelayed(OPEN_CAMERA , 600);  
+                    }
+				}
+				break;
+			default:
+				break;
+			}
+		}
+	};
+	
+	@Override
+	public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
+		mSurfaceTexture = surface;
+		handler.sendEmptyMessage(OPEN_CAMERA);
+	}
+
+    @Override
+    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width,
+            int height) {
+    }
+
+    @Override
+    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
+        return false;
+    }
+
+
+    @Override
+    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
+    }
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		count = 0;
+        handler.removeMessages(1011);
+        handler.removeMessages(1013);
+        handler.sendEmptyMessage(CLOSE_LIGHT);
+		super.onDestroy();
+	}
+	
+
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(FlashLight.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/version/Version.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/version/Version.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/version/Version.java	(revision 166460)
@@ -0,0 +1,488 @@
+package com.mediatek.factorymode.version;
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+import android.app.Activity;
+import com.mediatek.factorymode.FactoryModeReceiver;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.AsyncResult;
+import android.os.Bundle;
+import android.os.Environment;
+import android.os.Handler;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.storage.StorageManager;
+//import com.sprd.internal.telephony.IAtChannel;
+import android.telephony.TelephonyManager;
+//import android.net.wifi.WifiInfo;
+//import android.net.wifi.WifiManager;
+//import android.bluetooth.BluetoothAdapter;
+
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneFactory;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.NvRAMAgent;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.os.IBinder;
+import com.mediatek.factorymode.PhaseCheckParse;
+import com.mediatek.factorymode.IATUtils;
+import android.widget.Toast;
+import android.text.TextUtils;
+
+public class Version extends Activity {
+	private static final String TAG = "Version";
+	private static final String LINUX_VER = "/proc/version";
+	private static final String ANDROID_VER = "ro.build.version.release";
+	private static final String BUILD_NUMBER = "ro.build.display.id";
+	//private static final String BUILD_NUMBER = "ro.build.version.custintid";
+	private static final String TP_FIRMWARE_VER = "/proc/tp_ver";
+	
+	private static final int EVENT_MODEM_VERSION = 1;
+	private static final int CFT_2G3G_STATION = 3;
+	private static final int CFT_4G_STATION = 4;
+	private static final int ANTENNA_STATION = 6;
+	private static final int MMI_STATION = 10;
+	
+	private TextView mAndroidVersion;
+	private TextView mBuildNumber;
+	private TextView mIMEI1;
+	private TextView mIMEI2;
+	private TextView mBarcode;
+	private TextView mPncode;
+	private TextView mCFTState;
+	private TextView mANTState;
+	private TextView mMMIState;
+	//private TextView mWIFIANTState;
+	private TextView mWifiAddress;
+	private TextView mBTAddress;
+	private TextView mLteState;
+	private TextView mCFT2G3G;
+	private TextView mGsmState;
+	private TextView mTdState;
+	private TextView mLinuxVersion;
+	private TextView mModemVersion;
+	private TextView mTPFWVersion;
+	private Button mSuccessButton;
+	private Button mFailButton;
+	private boolean barcodeFlag = false;
+	private boolean pncodeFlag = false;
+	private boolean lteFlag = false;
+	private boolean CFT_2G3GFlag = false;
+	private boolean gsmFlag = false;
+	private boolean tdFlag = false;
+	private boolean buildNUMFlag = false;
+	private boolean CFTFlag = false;
+	private boolean ANTENNAFlag = false;
+	//private boolean WIFIANTFlag = false;
+	private boolean tpFlag = false;
+	private static final int PRODUCT_INFO_NVRAM_LID = 36;
+	private static final int PN_REPORT_NV_POS = 200;
+	private static final int Pn_Num_Len = 23;
+	private static final String SD_CARD = Environment.getExternalStorageDirectory().getPath();
+	private StorageManager mStorageManager;
+	private static int getPNResult[];
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.version);
+
+		mAndroidVersion = (TextView)findViewById(R.id.android_version);
+		mBuildNumber = (TextView)findViewById(R.id.build_number);
+		mIMEI1 = (TextView)findViewById(R.id.imei1);
+		mIMEI2 = (TextView)findViewById(R.id.imei2);
+		
+		//mBarcode = (TextView)findViewById(R.id.barcode);
+		mPncode = (TextView)findViewById(R.id.pncode);
+		//mCFTState = (TextView)findViewById(R.id.cft_state);
+		mANTState = (TextView)findViewById(R.id.ant_state);
+		//mMMIState = (TextView)findViewById(R.id.mmi_state);
+		//mWIFIANTState = (TextView)findViewById(R.id.wifi_ant_state);
+		//mWifiAddress = (TextView)findViewById(R.id.wifi_address);
+		//mBTAddress = (TextView)findViewById(R.id.BT_address);
+		mCFT2G3G = (TextView)findViewById(R.id.cft2g3g_state);
+		mLteState = (TextView)findViewById(R.id.lte_state);
+		//mTdState = (TextView)findViewById(R.id.td_state);
+		mLinuxVersion = (TextView)findViewById(R.id.linux_version);
+		mModemVersion = (TextView)findViewById(R.id.modem_version);
+		mTPFWVersion = (TextView)findViewById(R.id.tp_firmware_version);
+		
+		mSuccessButton = (Button)findViewById(R.id.version_bt_ok);
+		mFailButton = (Button)findViewById(R.id.version_bt_failed);
+		
+		mSuccessButton.setEnabled(false);
+	
+		mSuccessButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Version.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		
+		mFailButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Version.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+        
+		mStorageManager = (StorageManager)this.getSystemService(Context.STORAGE_SERVICE);
+		getVersionInfo();
+		Log.i("cj","CFT_2G3GFlag:"+CFT_2G3GFlag+" buildNUMFlag:"+buildNUMFlag+" tpFlag:"+tpFlag+" lteFlag:"+lteFlag);
+		if(buildNUMFlag == true && tpFlag == true /*&& lteFlag==true */&& CFT_2G3GFlag==true){
+			mSuccessButton.setEnabled(true);
+		}
+	}
+	
+    public String readSDFile(String filesname) {    
+        String allpath=SD_CARD+filesname;
+          StringBuffer sb = new StringBuffer();
+               File file = new File(allpath);   
+               BufferedReader br = null;           
+        try {
+         br = new BufferedReader(new FileReader(file));
+          String line = "";
+               while((line = br.readLine())!=null)
+               {
+               sb.append(line);
+               }
+               br.close();
+        } catch (FileNotFoundException e) {
+        e.printStackTrace();
+        } catch (IOException e) {
+        e.printStackTrace();
+        }
+        return sb.toString(); 
+        }
+
+    private String getSn() {
+        PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getSn(); /*+ "\n" + parse.getSn2();*/
+    }
+
+    private String getCFT() {
+        PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getCFTresult();
+    }
+    
+    /*private String getCFT_4G() {
+    	PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getStationPhaseCheck(CFT_4G_STATION);
+    }
+	
+	private String getCFT_2G3G() {
+		PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getStationPhaseCheck(CFT_2G3G_STATION);
+	} */
+    
+   // private String getAntFlag() {
+    	
+ /*   String 	antFlag = IATUtils.sendATCmd("AT+SGMR=0,0,3","atchannel0");
+	  if(antFlag.contains(IATUtils.AT_OK)){
+       String[] paser = antFlag.split("\n");
+       for(int i=0;i<paser.length;i++){
+    		 if(paser[i].contains("BIT18")){
+    			  String[] paser1 = paser[i].split(":");
+    			  return paser1[1].trim();
+    		}
+    	 }             
+    }
+    	
+    	
+    		return null;*/
+    private String getFlag(int station) {
+				PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getStationPhaseCheck(station-1);
+	  }
+    
+	private String getWifiAntFlag(){
+		
+	    PhaseCheckParse parse = new PhaseCheckParse();
+		return parse.getWIFIANTresult();
+		
+	}
+   	
+    private String getNewWifiAntFlag(){
+   	
+   	     PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getNewWIFIANTresult();
+   	
+   	}
+   	
+   	
+	
+	private void getVersionInfo() {
+		//Android version
+		String androidVer = SystemProperties.get(ANDROID_VER, getResources().getString(R.string.default_version));
+		androidVer = "Android version: " + androidVer;
+		mAndroidVersion.setText(androidVer);
+		
+		//build number
+		String buildNumber = SystemProperties.get(BUILD_NUMBER, getResources().getString(R.string.default_version));
+		buildNumber = "Build number: " + buildNumber;
+		mBuildNumber.setText(buildNumber);
+		if(readSDFile("/versionNUM.txt").equals(buildNumber)){
+			
+			buildNUMFlag = true;
+		}
+		//imei
+		String[] imeis = new String[2];
+		TelephonyManager telephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+        int phoneCnt = telephonyManager.getPhoneCount();
+
+        if(phoneCnt == 2) {
+			for (int slot = 0; slot < telephonyManager.getPhoneCount(); slot++) {
+				String deviceId = telephonyManager.getDeviceId(slot);
+				imeis[slot] = TextUtils.isEmpty(deviceId) ? "unknow" : deviceId;
+			}
+            mIMEI1.setText("IMEI1: " + imeis[0]);
+			mIMEI2.setText("IMEI2: " + imeis[1]);
+        }else{
+            String imei1 = ((TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
+            if(imei1 == null || imei1.length() == 0) {
+                imei1 = "unknow";
+            }
+            imei1 = "IMEI: " + imei1;
+            mIMEI1.setText(imei1);
+        }
+		
+		//(SN)
+/*		String pncode="";
+		getPNResult = new int[Pn_Num_Len+1];
+		getPnNum();
+		
+		if(getPNResult[0] < 48) {
+			pncode = "unknow";
+		}else{
+			pncodeFlag = true;
+			for (int i = 0; i < Pn_Num_Len; i++) 
+			{  
+				if(getPNResult[i]<48)
+				{
+					break;
+				}
+				else
+				{
+					pncode+=(char)getPNResult[i];
+				}
+			}
+		}*/
+		mPncode.setText("Barcode(SN): " + getSn());
+
+		//barcode(PN) 
+/*		String barcode = SystemProperties.get("gsm.serial");//((TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE)).getSN();
+		Log.v(TAG, "barcode = " + barcode);
+		if(barcode == null || barcode.length() == 0) {
+			barcode = "unknow";
+			
+		}else{
+			barcodeFlag = true;
+		}
+		mBarcode.setText("Barcode(PN): " + barcode);*/
+		//wifiAddress
+		/*WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
+		WifiInfo wifiInfo = wifiManager.getConnectionInfo();
+		String  macAddress = wifiInfo == null ? null : wifiInfo.getMacAddress();
+		if( macAddress==null )
+		{
+			macAddress  = "unavailable";
+		}
+		mWifiAddress.setText("WIFI MAC: " + macAddress);
+
+		//BTAddress
+		BluetoothAdapter bluetooth = BluetoothAdapter.getDefaultAdapter();
+		String BTAddress = bluetooth.isEnabled() ? bluetooth.getAddress() : null;
+
+		if (BTAddress == null) 
+		{
+		    // device not BT capable 
+		    BTAddress  = "unavailable";
+		} 
+		mBTAddress.setText("BlueTooth Address: " + BTAddress);
+
+		*/
+		
+		//BT FT
+/*		int len = barcode.length();
+		Log.v(TAG, "len = " + len);
+		
+		String lte = "Not Yet";
+		String gsm = "Not Yet";
+		String td = "Not Yet";
+		if(len >= 62 && barcode.charAt(58) == 'L') {
+			lte = "Pass";
+			lteFlag = true;
+		}
+		if(len >= 62 && barcode.charAt(60) == '1' && barcode.charAt(61) == '0') {
+			gsm = "Pass";
+			gsmFlag = true;
+		}
+		if(len >= 62 && barcode.charAt(62) == 'P') {
+			td = "Pass";
+			tdFlag = true;
+		}
+        lte = "LTE: " + lte;
+        gsm = "GSM: " + gsm;
+		td = "TD: " + td;
+        
+        mLteState.setText(lte);
+        mGsmState.setText(gsm);
+		mTdState.setText(td);*/
+		/*mCFTState.setText(getCFT());
+		if("Pass".equals(getCFT().substring(getCFT().length()-4, getCFT().length())))
+		{
+			CFTFlag = true;
+		}*/
+		String lteResult = getFlag(CFT_4G_STATION);
+		mLteState.setText(lteResult);
+		if("PASS".equals(lteResult.substring(lteResult.length()-4,lteResult.length()))){
+			lteFlag=true;
+		}
+		String gmsResult = getFlag(CFT_2G3G_STATION);
+		mCFT2G3G.setText(gmsResult);
+		if("PASS".equals(gmsResult.substring(gmsResult.length()-4,gmsResult.length()))){
+			CFT_2G3GFlag=true;
+		}
+		
+		String antResult = getFlag(ANTENNA_STATION);
+	     
+    if(antResult == null || antResult.length() == 0) {
+			 antResult = "ANTENNA: Not Yet";
+			}
+	 	mANTState.setText(antResult);
+		if("PASS".equals(antResult.substring(antResult.length()-4, antResult.length())))
+		{
+			ANTENNAFlag = true;
+		}
+	 	//mMMIState.setText(getFlag(MMI_STATION));
+	 	/*String wifiANTFlag = getWifiAntFlag();
+	     
+    if(wifiANTFlag == null || wifiANTFlag.length() == 0) {
+    	 = getNewWifiAntFlag();
+			}
+	 	mWIFIANTState.setText(wifiANTFlag);
+
+		if("Pass".equals(wifiANTFlag.substring(wifiANTFlag.length()-4, wifiANTFlag.length())))
+		{
+			WIFIANTFlag = true;
+		}
+		Log.v(TAG, "buildNumberwifiANTFlag = " + getCFT()+antFlag+wifiANTFlag);*/
+		//linux version
+        String linuxVersion = "unknow";
+		try {
+			BufferedReader reader = new BufferedReader(new FileReader(LINUX_VER), 256);
+			if(reader != null) {
+				try {
+					linuxVersion = reader.readLine();
+					Log.v(TAG, "linuxVersion = " + linuxVersion);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					Log.e(TAG, "readLine failed!");
+				}
+			}
+		} catch (FileNotFoundException e) {
+			// TODO Auto-generated catch block
+			Log.e(TAG, "new BufferedReader failed!");
+		}
+		int head = linuxVersion.indexOf("(");
+		int tail = linuxVersion.indexOf(")");
+		String substr = linuxVersion.substring(head, tail+1);
+		linuxVersion = linuxVersion.replace(substr, "");
+		head = linuxVersion.indexOf("#");
+		tail = linuxVersion.length();
+		substr = linuxVersion.substring(head, tail);
+		linuxVersion = linuxVersion.replace(substr, "");
+		linuxVersion = linuxVersion.replace("Linux version ", "Linux version: ");
+		mLinuxVersion.setText("Linux version:3.10.65 (gcc version 4.8(GCC))");
+
+		//Modem version
+		getModemVersion();
+
+
+		//TP firmware version
+        String tpFwVersion = "unknow";
+		try {
+			BufferedReader reader = new BufferedReader(new FileReader(TP_FIRMWARE_VER), 256);
+			if (reader != null) {
+				try {
+					//tpFwVersion = reader.readLine();
+					int version = reader.read();
+					tpFwVersion = "0x" + Integer.toHexString(version);
+					Log.v(TAG, "tpFwVersion = " + tpFwVersion);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					Log.e(TAG, "tpFwVersion readLine failed!");
+				}
+			}
+		} catch (FileNotFoundException e) {
+			// TODO Auto-generated catch block
+			Log.e(TAG, e.getMessage());
+			Log.e(TAG, "tpFwVersion new BufferedReader failed!");
+		}
+		mTPFWVersion.setText("TP Firmware Version: " + tpFwVersion);
+		//Log.v(TAG, "[getVersionInfo] tp=" + readSDFile("/tp.txt"));
+		if (readSDFile("/tp.txt").equals(tpFwVersion)){
+			tpFlag = true;
+		}
+
+	}
+	
+	void getModemVersion() {
+		String modemVer = SystemProperties.get("gsm.version.baseband", getResources().getString(R.string.default_version));
+		Log.d(TAG, "Modem Version: " + modemVer);
+		String list[] = modemVer.split("\\|");
+		modemVer = list[0];
+		modemVer = "Modem Version: " + modemVer;
+		mModemVersion.setText(modemVer);
+	}
+	
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Version.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/Check_Flag.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/Check_Flag.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/Check_Flag.java	(revision 166460)
@@ -0,0 +1,382 @@
+package com.mediatek.factorymode;
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+import android.app.Activity;
+import com.mediatek.factorymode.FactoryModeReceiver;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.AsyncResult;
+import android.os.Bundle;
+import android.os.Environment;
+import android.os.Handler;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.storage.StorageManager;
+import android.telephony.TelephonyManager;
+
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneFactory;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.NvRAMAgent;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.os.IBinder;
+import com.mediatek.factorymode.PhaseCheckParse;
+import com.mediatek.factorymode.IATUtils;
+import android.widget.Toast;
+import android.text.TextUtils;
+
+public class Check_Flag extends Activity {
+	private static final String TAG = "Check_Flag";
+	private static final String LINUX_VER = "/proc/version";
+	private static final String ANDROID_VER = "ro.build.version.release";
+	private static final String BUILD_NUMBER = "ro.build.display.id";
+	//private static final String BUILD_NUMBER = "ro.build.version.custintid";
+	private static final String TP_FIRMWARE_VER = "/proc/tp_ver";
+	
+	private static final int EVENT_MODEM_VERSION = 1;
+	private static final int CFT_2G3G_STATION = 3;
+	private static final int CFT_4G_STATION = 4;
+	private static final int ANTENNA_STATION = 6;
+	private static final int MMI_STATION = 10;
+	private static final int QC_STATION = 11;
+	private static final int RESET_STATION = 13;
+	
+	private TextView mAndroidVersion;
+	private TextView mBuildNumber;
+	private TextView mIMEI1;
+	private TextView mIMEI2;
+	private TextView mBarcode;
+	private TextView mPncode;
+	private TextView mCFTState;
+	private TextView mANTState;
+	private TextView mMMIState;
+	private TextView mQC1State;
+	//private TextView mNVState;
+	//private TextView mWIFIANTState;
+	private TextView mWifiAddress;
+	private TextView mBTAddress;
+	private TextView mLteState;
+	private TextView mCFT2G3G;
+	private TextView mGsmState;
+	private TextView mTdState;
+	private TextView mLinuxVersion;
+	private TextView mModemVersion;
+	private TextView mTPFWVersion;
+	private Button mSuccessButton;
+	private Button mFailButton;
+	private boolean barcodeFlag = false;
+	private boolean pncodeFlag = false;
+	private boolean lteFlag = false;
+	private boolean CFT_2G3GFlag = false;
+	private boolean gsmFlag = false;
+	private boolean tdFlag = false;
+	private boolean buildNUMFlag = false;
+	private boolean CFTFlag = false;
+	private boolean ANTENNAFlag = false;
+	//private boolean WIFIANTFlag = false;
+	private boolean tpFlag = false;
+	private static final int PRODUCT_INFO_NVRAM_LID = 36;
+	private static final int PN_REPORT_NV_POS = 200;
+	private static final int Pn_Num_Len = 23;
+	private static final String SD_CARD = Environment.getExternalStorageDirectory().getPath();
+	
+	private StorageManager mStorageManager;
+	private static int getPNResult[];
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.check_flag);
+
+		mAndroidVersion = (TextView)findViewById(R.id.android_version);
+		mBuildNumber = (TextView)findViewById(R.id.build_number);
+		mIMEI1 = (TextView)findViewById(R.id.imei1);
+		mIMEI2 = (TextView)findViewById(R.id.imei2);
+		
+		//mBarcode = (TextView)findViewById(R.id.barcode);
+		mPncode = (TextView)findViewById(R.id.pncode);
+		//mCFTState = (TextView)findViewById(R.id.cft_state);
+		mCFT2G3G = (TextView)findViewById(R.id.cft2g3g_state);
+		mLteState = (TextView)findViewById(R.id.lte_state);
+		//mANTState = (TextView)findViewById(R.id.ant_state);
+		mMMIState = (TextView)findViewById(R.id.mmi_state);
+		mQC1State = (TextView)findViewById(R.id.qc_state);
+		//mNVState = (TextView)findViewById(R.id.testnv_state);
+		//mWIFIANTState = (TextView)findViewById(R.id.wifi_ant_state);
+		//mWifiAddress = (TextView)findViewById(R.id.wifi_address);
+		//mBTAddress = (TextView)findViewById(R.id.BT_address);
+		//mTdState = (TextView)findViewById(R.id.td_state);
+		mLinuxVersion = (TextView)findViewById(R.id.linux_version);
+		mModemVersion = (TextView)findViewById(R.id.modem_version);
+		mTPFWVersion = (TextView)findViewById(R.id.tp_firmware_version);
+		
+		/*mSuccessButton = (Button)findViewById(R.id.version_bt_ok);
+		mFailButton = (Button)findViewById(R.id.version_bt_failed);
+		
+		mSuccessButton.setEnabled(false);
+	
+		mSuccessButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Version.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		
+		mFailButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Version.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});*/
+        
+		mStorageManager = (StorageManager)this.getSystemService(Context.STORAGE_SERVICE);
+		getVersionInfo();
+		//if(lteFlag == true && buildNUMFlag == true && gsmFlag == true && tdFlag == true)
+		//	Log.i("cj","CFT_2G3GFlag:"+CFT_2G3GFlag+" buildNUMFlag:"+buildNUMFlag+" tpFlag:"+tpFlag+" lteFlag:"+lteFlag);
+		//	if(buildNUMFlag == true && tpFlag == true && lteFlag==true && CFT_2G3GFlag==true)
+		//	{
+		//	        mSuccessButton.setEnabled(true);
+		//	}
+		//}
+	}
+	
+    public String readSDFile(String filesname) {    
+        String allpath=SD_CARD+filesname;
+          StringBuffer sb = new StringBuffer();
+               File file = new File(allpath);   
+               BufferedReader br = null;           
+        try {
+         br = new BufferedReader(new FileReader(file));
+          String line = "";
+               while((line = br.readLine())!=null)
+               {
+               sb.append(line);
+               }
+               br.close();
+        } catch (FileNotFoundException e) {
+        e.printStackTrace();
+        } catch (IOException e) {
+        e.printStackTrace();
+        }
+        return sb.toString();
+    }
+
+    private String getSn() {
+        PhaseCheckParse parse = new PhaseCheckParse();
+		Log.i(TAG,"getSn = " + parse.getSn());
+        return parse.getSn(); /*+ "\n" + parse.getSn2();*/
+    }
+
+    private String getCFT() {
+        PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getCFTresult();
+    }
+    
+    private String getFlag(int station) {
+		PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getStationPhaseCheck(station-1);
+	}
+    
+	private String getWifiAntFlag(){
+		
+	    PhaseCheckParse parse = new PhaseCheckParse();
+		return parse.getWIFIANTresult();
+		
+	}
+   	
+    private String getNewWifiAntFlag(){
+   	
+   	     PhaseCheckParse parse = new PhaseCheckParse();
+        return parse.getNewWIFIANTresult();
+   	
+   	}
+   	
+   	
+	
+	private void getVersionInfo() {
+		//Android version
+		String androidVer = SystemProperties.get(ANDROID_VER, getResources().getString(R.string.default_version));
+		androidVer = "Android version: " + androidVer;
+		//mAndroidVersion.setText(androidVer);
+		
+		//build number
+		String buildNumber = SystemProperties.get(BUILD_NUMBER, getResources().getString(R.string.default_version));
+		buildNumber = "Build number: " + buildNumber;
+		//mBuildNumber.setText(buildNumber);
+		if(readSDFile("/versionNUM.txt").equals(buildNumber)){
+			
+			buildNUMFlag = true;
+		}
+		//imei
+		String[] imeis = new String[2];
+		TelephonyManager telephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+        int phoneCnt = telephonyManager.getPhoneCount();
+
+        if(phoneCnt == 2) {
+			for (int slot = 0; slot < telephonyManager.getPhoneCount(); slot++) {
+				String deviceId = telephonyManager.getDeviceId(slot);
+				imeis[slot] = TextUtils.isEmpty(deviceId) ? "unknow" : deviceId;
+			}
+            mIMEI1.setText("IMEI1: " + imeis[0]);
+			mIMEI2.setText("IMEI2: " + imeis[1]);
+        }else{
+            String imei1 = ((TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
+            if(imei1 == null || imei1.length() == 0) {
+                imei1 = "unknow";
+            }
+            imei1 = "IMEI: " + imei1;
+            mIMEI1.setText(imei1);
+        }
+		
+		//(SN)
+		mPncode.setText("Barcode(SN): " + getSn());
+
+		String lteResult = getFlag(CFT_4G_STATION);
+		mLteState.setText(lteResult);
+		Log.i(TAG, "lteResult = " + lteResult);
+		if("PASS".equals(lteResult.substring(lteResult.length()-4,lteResult.length()))){
+			lteFlag=true;
+		}
+		String gmsResult = getFlag(CFT_2G3G_STATION);
+		mCFT2G3G.setText(gmsResult);
+		Log.i(TAG, "gmsResult = " + gmsResult);
+		if("PASS".equals(gmsResult.substring(gmsResult.length()-4,gmsResult.length()))){
+			CFT_2G3GFlag=true;
+		}
+		
+		String antResult = getFlag(ANTENNA_STATION);
+	     
+        if(antResult == null || antResult.length() == 0) {
+			 antResult = "ANTENNA: Not Yet";
+		}
+	 	//mANTState.setText(antResult);
+		if("PASS".equals(antResult.substring(antResult.length()-4, antResult.length())))
+		{
+			ANTENNAFlag = true;
+		}
+	 	mMMIState.setText(getFlag(MMI_STATION));
+		Log.i(TAG, "mMMIState = " + getFlag(MMI_STATION));
+		
+		mQC1State.setText(getFlag(QC_STATION));
+		Log.i(TAG, "mQC1State = " + getFlag(QC_STATION));
+		
+		//mResetState.setText(getFlag(RESET_STATION));
+		Log.i(TAG, "mResetState = " + getFlag(RESET_STATION));
+
+		//linux version
+        String linuxVersion = "unknow";
+		try {
+			BufferedReader reader = new BufferedReader(new FileReader(LINUX_VER), 256);
+			if(reader != null) {
+				try {
+					linuxVersion = reader.readLine();
+					Log.v(TAG, "linuxVersion = " + linuxVersion);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					Log.e(TAG, "readLine failed!");
+				}
+			}
+		} catch (FileNotFoundException e) {
+			// TODO Auto-generated catch block
+			Log.e(TAG, "new BufferedReader failed!");
+		}
+		int head = linuxVersion.indexOf("(");
+		int tail = linuxVersion.indexOf(")");
+		String substr = linuxVersion.substring(head, tail+1);
+		linuxVersion = linuxVersion.replace(substr, "");
+		head = linuxVersion.indexOf("#");
+		tail = linuxVersion.length();
+		substr = linuxVersion.substring(head, tail);
+		linuxVersion = linuxVersion.replace(substr, "");
+		linuxVersion = linuxVersion.replace("Linux version ", "Linux version: ");
+		//mLinuxVersion.setText("Linux version:3.10.65 (gcc version 4.8(GCC))");
+
+		//Modem version
+		getModemVersion();
+
+
+		//TP firmware version
+        String tpFwVersion = "unknow";
+		try {
+			BufferedReader reader = new BufferedReader(new FileReader(TP_FIRMWARE_VER), 256);
+			if (reader != null) {
+				try {
+					//tpFwVersion = reader.readLine();
+					int version = reader.read();
+					tpFwVersion = "0x" + Integer.toHexString(version);
+					Log.v(TAG, "tpFwVersion = " + tpFwVersion);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					Log.e(TAG, "tpFwVersion readLine failed!");
+				}
+			}
+		} catch (FileNotFoundException e) {
+			// TODO Auto-generated catch block
+			Log.e(TAG, e.getMessage());
+			Log.e(TAG, "tpFwVersion new BufferedReader failed!");
+		}
+		//mTPFWVersion.setText("TP Firmware Version: " + tpFwVersion);
+		//Log.v(TAG, "[getVersionInfo] tp=" + readSDFile("/tp.txt"));
+		if (readSDFile("/tp.txt").equals(tpFwVersion)){
+			tpFlag = true;
+		}
+
+	}
+	
+	void getModemVersion() {
+		String modemVer = SystemProperties.get("gsm.version.baseband", getResources().getString(R.string.default_version));
+		Log.d(TAG, "Modem Version: " + modemVer);
+		String list[] = modemVer.split("\\|");
+		modemVer = list[0];
+		modemVer = "Modem Version: " + modemVer;
+		//mModemVersion.setText(modemVer);
+	}
+	
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/tprawdata/TPrawdata.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/tprawdata/TPrawdata.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/tprawdata/TPrawdata.java	(revision 166460)
@@ -0,0 +1,287 @@
+package com.mediatek.factorymode.tprawdata;
+
+import com.mediatek.factorymode.R; 
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.engfetch;
+import android.os.Environment;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.charset.Charset;
+import java.text.SimpleDateFormat;
+import java.util.Set;
+import java.util.SortedMap;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.text.SimpleDateFormat;
+/** 
+ * @author Demo.zeng E-mail: Demo_yolk@163.com
+ * @version 创建时间：2013-12-13 下午3:20:37 
+ * 
+ */
+public class TPrawdata extends Activity {
+
+    private static String TAG = "TPrawdata";
+
+    private static final int F54_Full_Raw_Capacitance_Test = 3;
+    private static final int F54_TRx_TRx_and_TRx_Vdd_Short_Test = 37;
+    private static final int F54_Bonding_Pad_Active_Guard_Open_Test = 48;
+
+    private byte[]  F54_Full_Raw_Capacitance_Test_Array = new byte[512];
+    private byte[]  F54_TRx_TRx_and_TRx_Vdd_Short_Test_Array = new byte[512];
+    private byte[]  F54_Bonding_Pad_Active_Guard_Open_Test_Array = new byte[512];
+
+	private boolean isTestFull = false;
+	private boolean isTestTRx = false;
+	private boolean isTestBond = false;
+
+    private Button mSuccesBtn;
+    private Button mFailBtn;
+    private TextView mInfoView;
+    
+    private engfetch mEf;
+
+    private Handler mHanlder = new Handler(new Handler.Callback() {
+        
+        @Override
+        public boolean handleMessage(Message msg) {
+            String txt = (String) msg.obj;
+            String orignalTxt = mInfoView.getText().toString();
+            mInfoView.setText(orignalTxt+"\n"+txt);
+			return true;
+        }
+    });
+    
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        
+        setContentView(R.layout.tprawdata);
+        
+        mInfoView = (TextView)findViewById(R.tprawdata.info);
+        
+        mSuccesBtn = (Button)findViewById(R.tprawdata.ok);
+        
+        mFailBtn = (Button)findViewById(R.tprawdata.fail);
+        
+        mSuccesBtn.setOnClickListener(new OnClickListener() {
+            
+            @Override
+            public void onClick(View arg0) {
+                Intent intent = new Intent(TPrawdata.this, FactoryMode.class);
+                setResult(FactoryMode.TEST_OK,intent);
+                finish();
+            }
+        });
+        
+        mFailBtn.setOnClickListener(new OnClickListener() {
+            
+            @Override
+            public void onClick(View arg0) {
+                Intent intent = new Intent(TPrawdata.this, FactoryMode.class);
+                setResult(FactoryMode.TEST_CANCEL,intent);
+                finish();
+            }
+        });
+        
+         sendMsg("this is info!");
+
+		mEf = new engfetch();
+        
+        sendMsg( "start init!");
+        
+        if(mEf.tp_init_driver()){
+			sendMsg( " init success!");
+			if(!isTestFull){
+			 new Thread(new Runnable() {
+            
+            @Override
+            public void run() {
+                startTest(F54_Full_Raw_Capacitance_Test);
+				isTestFull = true;
+            }
+			
+       
+        }).start();
+		}
+		}else{
+			sendMsg( " init fail,please use back button to back home page,then click 'tp raw' into this page to test again!");
+		}
+        
+    }
+    
+
+    private void sendMsg(String txt){
+        Message msg = mHanlder.obtainMessage();
+        msg.obj = txt;
+        mHanlder.sendMessage(msg);
+    }
+    
+    private void startTest(int type){
+        
+        sendMsg("F54_Full_Raw_Capacitance_Test start!");
+        
+        int[] order = new int[2];
+        int dataSize = mEf.tp_test(F54_Full_Raw_Capacitance_Test_Array,order,type);
+        if(logTheData(F54_Full_Raw_Capacitance_Test_Array,order,dataSize)){
+            sendMsg("F54_Full_Raw_Capacitance_Test end : success!");
+        }else {
+            sendMsg("F54_Full_Raw_Capacitance_Test end : failed!");
+        }
+        /* mInfoView.setText("start  F54_TRx_TRx_and_TRx_Vdd_Short_Test !");
+         dataSize =mEf.tp_test(F54_TRx_TRx_and_TRx_Vdd_Short_Test_Array,F54_TRx_TRx_and_TRx_Vdd_Short_Test);
+        logTheData(F54_TRx_TRx_and_TRx_Vdd_Short_Test_Array,dataSize);
+        mInfoView.setText("start  F54_Bonding_Pad_Active_Guard_Open_Test !");
+         dataSize =mEf.tp_test(F54_Bonding_Pad_Active_Guard_Open_Test_Array,F54_Bonding_Pad_Active_Guard_Open_Test);
+        logTheData(F54_Bonding_Pad_Active_Guard_Open_Test_Array,dataSize);*/
+    }
+
+    private boolean logTheData(byte[] inputBytes,int[] order,int showlen){
+        
+        if(showlen==-1){
+            Log.d(TAG,"get raw data fail");
+            sendMsg("get raw data fail!");
+            return false;
+        }
+		sendMsg("get raw data length :"+showlen+",rx:"+order[0]+",tx:"+order[1]);
+        Log.d(TAG,"rx:"+order[0]+",tx:"+order[1]);
+        if(order[0]*order[1]*2!=showlen){
+            Log.e(TAG, "rx:"+order[0]+",tx:"+order[1]+"; but showlen="+showlen+"! not mate ,it also like no data return is failed;");
+            sendMsg("get raw data not mate , fail!");
+            return false;
+        }
+        StringBuilder sb = new StringBuilder();
+        int highC = 0;
+        int lowC = 0;
+        int line = 0;
+        int row= 0;
+        /*for(int i = 0 ; i< showlen ; i+=2){
+            line = (i/(order[0]*2)>line)?line+1:line;
+            row = i%order[0]==0?0:row+1;
+            high = inputBytes[i+1];
+            low = inputBytes[i];
+            float comData = (float)(high<<8|low);
+            sb.append("["+line+"]["+row+"]:"+comData+"\n");
+        }*/
+		for(int i =0 ;i <showlen ; i+=2){
+			line = (i/(order[0]*2)>line)?line+1:line;
+            row = i%order[0]==0?0:row+1;
+			String high = Integer.toHexString(inputBytes[i+1] & 0xFF);
+			String low = Integer.toHexString(inputBytes[i] & 0xFF);
+			if (high.length() == 1) { 
+					high = '0' + high; 
+			 } 
+			if (low.length() == 1) { 
+					low = '0' + low; 
+			 } 
+			 int a = inputBytes[i+1]&0xff;
+			 int b = inputBytes[i]&0xff;
+
+			int comData = a<<8|b;
+
+			String originalHigh = Integer.toBinaryString(inputBytes[i+1]&0xff);
+			String originalLow = Integer.toBinaryString(inputBytes[i]&0xff);
+			String newFixData = Integer.toBinaryString(comData);
+			//sb.append("["+line+"]["+row+"]:"+originalHigh+","+originalLow+"\n");
+			//sb.append("["+line+"]["+row+"]:"+newFixData+"\n");
+			//sb.append("["+line+"]["+row+"]:"+high+low+"\n");
+			sb.append("["+line+"]["+row+"]:"+((float)comData)/1000+"\n");
+			
+		}
+        return writelogToFile(sb.toString());
+    }
+    private boolean writelogToFile(String dataLog){
+		 FileOutputStream fos = null;
+        PrintWriter pw = null;
+       String fileName = "TPrawdata" + new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss").format(System
+                .currentTimeMillis()) + ".txt";
+        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
+        {
+        		Log.d(TAG,"sd path:"+Environment.getExternalStorageDirectory().getPath());
+            fileName = Environment.getExternalStorageDirectory().getPath() + File.separator
+                    + fileName;
+            Log.d(TAG,"file path:"+fileName);
+            File file = new File(fileName);
+            if (file.exists()) {
+                file.delete();
+            }
+            try {
+                file.createNewFile();
+                fos = new FileOutputStream(file);
+                pw = new PrintWriter(fos);
+                pw.append(dataLog);
+                pw.flush();
+            } catch (IOException e) {
+                e.printStackTrace();
+				sendMsg("raw data  saved failed ");
+                return false;
+            } finally {
+                if (pw != null) {
+                    try {
+                        pw.close();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                }
+                if (fos != null) {
+                    try {
+                        fos.close();
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+            sendMsg("raw data is saved in : "+file.getAbsolutePath());
+            return true;
+        } else {
+            try {
+                getFilesDir();
+                fos = openFileOutput(fileName, MODE_WORLD_WRITEABLE);
+                pw = new PrintWriter(fos);
+                pw.append(dataLog);
+                pw.flush();
+
+            } catch (FileNotFoundException e) {
+                e.printStackTrace();
+				sendMsg("raw data  saved failed ");
+                return false;
+            } finally {
+                if (pw != null) {
+                    try {
+                        pw.close();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                }
+                if (fos != null) {
+                    try {
+                        fos.close();
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+        }
+        sendMsg("raw data is saved :"+getFilesDir()+File.pathSeparator+fileName);
+		return true;
+    }
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/SubCamera.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/SubCamera.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/SubCamera.java	(revision 166460)
@@ -0,0 +1,89 @@
+
+package com.mediatek.factorymode.camera;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.PixelFormat;
+import android.hardware.Camera;
+import android.hardware.Camera.AutoFocusCallback;
+import android.hardware.Camera.PictureCallback;
+import android.hardware.Camera.ShutterCallback;
+import android.os.Bundle;
+import android.os.Environment;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class SubCamera extends Activity { 
+	private Button succesButton ;
+	private Button failButton ;  
+      
+    @Override  
+    public void onCreate(Bundle savedInstanceState) {  
+          
+        super.onCreate(savedInstanceState);  
+        setContentView(R.layout.camera);
+        succesButton = (Button)this.findViewById(R.id.camera_btok);
+		failButton = (Button)this.findViewById(R.id.camera_btfailed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SubCamera.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SubCamera.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		Intent intent = new Intent();
+		intent.setClassName("com.android.camera2", "com.android.camera.CameraLauncher");
+		intent.putExtra("IsInFactoryModeTest", true);
+		intent.putExtra("FactoryModeTestCameraId", 1);
+		startActivity(intent);
+    }  
+    @Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(SubCamera.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}  
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/CameraTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/CameraTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/CameraTest.java	(revision 166460)
@@ -0,0 +1,118 @@
+package com.mediatek.factorymode.camera;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.PixelFormat;
+import android.hardware.Camera;
+import android.hardware.Camera.AutoFocusCallback;
+import android.hardware.Camera.PictureCallback;
+import android.hardware.Camera.ShutterCallback;
+import android.os.Bundle;
+import android.os.Environment;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.memory.Memory;
+
+//public class CameraTest extends Activity implements SurfaceHolder.Callback{ 
+public class CameraTest extends Activity {
+    
+//    private static String imgPath = Environment.getExternalStorageDirectory().getPath() + "/DCIM/CAMERA"  ;
+//      
+//    private SurfaceView surfaceView;  
+//    private SurfaceHolder surfaceHolder;   
+//    private Button takePicView;  
+	private Button succesButton ;
+	private Button failButton ;
+//    private Camera mCamera; 
+      
+    @Override  
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.camera);
+
+        succesButton = (Button)this.findViewById(R.id.camera_btok);
+		failButton = (Button)this.findViewById(R.id.camera_btfailed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+//				if(mCamera != null) {
+//					mCamera.stopPreview();
+//					mCamera.release();
+//					mCamera = null;
+//				}
+				
+				Intent intent = new Intent(CameraTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+//				if(mCamera != null) {
+//					mCamera.stopPreview();
+//					mCamera.release();
+//					mCamera = null;
+//				}
+				
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(CameraTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+    
+//        surfaceView = (SurfaceView)this.findViewById(R.id.camera_view);  
+//        surfaceHolder = surfaceView.getHolder();  
+//        surfaceHolder.addCallback(this);  
+//        surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);  
+//          
+//        checkSoftStage();  
+		
+		Intent intent = new Intent();
+		intent.setClassName("com.android.camera2", "com.android.camera.CameraLauncher");
+		intent.putExtra("IsInFactoryModeTest", true);
+		intent.putExtra("FactoryModeTestCameraId", 0);
+		startActivity(intent);
+    }  
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(CameraTest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
\ No newline at end of file
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/AutoTest.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/AutoTest.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/AutoTest.java	(revision 166460)
@@ -0,0 +1,5 @@
+package com.mediatek.factorymode;
+
+public class AutoTest {
+
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/engconstents.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/engconstents.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/engconstents.java	(revision 166460)
@@ -0,0 +1,84 @@
+package com.mediatek.factorymode;
+
+
+public interface engconstents {
+    // From the top of engat.h
+		int ENG_AT_REQUEST_MODEM_VERSION = 0; 	//get version
+		int ENG_AT_REQUEST_IMEI          = 1;	//get imei
+		int ENG_AT_SELECT_BAND			 = 2;  	//band select
+		int ENG_AT_CURRENT_BAND			 = 3;	//current band
+		int ENG_AT_SETARMLOG			 = 4;   //start/stop armlog
+		int ENG_AT_GETARMLOG			 = 5;	//get armlog			//5
+		int ENG_AT_SETAUTOANSWER		 = 6;	//set call auto answer
+		int ENG_AT_GETAUTOANSWER		 = 7;	//get call auto answer status
+		int ENG_AT_SETSPPSRATE			 = 8;	//set download/upload rate
+		int ENG_AT_GETSPPSRATE           = 9;  //get current rate
+		int ENG_AT_SETSPTEST             = 10;	//set sp test			//10
+		int ENG_AT_GETSPTEST             = 11;	//get sp test
+		int ENG_AT_SPID                  = 12;  //get UE Identity
+		int ENG_AT_SETSPFRQ              = 13;  //lock frequnece
+		int ENG_AT_GETSPFRQ              = 14; //get frequence
+		int ENG_AT_SPAUTE                = 15; //audio loopback test		//15
+		int ENG_AT_SETSPDGCNUM           = 16;//set dummy gsm cell
+		int ENG_AT_GETSPDGCNUM           = 17;//get dummy gsm cell
+		int ENG_AT_SETSPDGCINFO          = 18;//set dunmmy gsm info
+		int ENG_AT_GETSPDGCINFO          = 19;//set dunmmy gsm info
+		int ENG_AT_GRRTDNCELL            = 20;//set dnummy td ncell info //20
+		int ENG_AT_SPL1ITRRSWITCH        = 21;//start/stop L1ITa
+		int ENG_AT_GETSPL1ITRRSWITCH     = 22;//get ENG_AT_SPL1ITRRSWITCH status
+		int ENG_AT_PCCOTDCELL            = 23;//tdd target cell
+		int ENG_AT_SDATACONF             = 24;//data config
+		int ENG_AT_L1PARAM               = 25;//set l1param value		//25
+		int ENG_AT_TRRPARAM              = 26;//TRR BCFE param
+		int ENG_AT_SETTDMEASSWTH         = 27;//set RR TD switch
+		int ENG_AT_GETTDMEASSWTH         = 28;//get RR TD switch
+		int ENG_AT_RRDMPARAM             = 29;//RRDM param
+		int ENG_AT_DMPARAMRESET          = 30;//reset param			//30
+		int ENG_AT_SMTIMER               = 31;//set timer
+		int ENG_AT_TRRDCFEPARAM          = 32;//TRR DCFE
+		int ENG_AT_CIMI                  = 33;//get imsi
+		int ENG_AT_MBCELLID              = 34;//CELL ID
+		int ENG_AT_MBAU                  = 35;//					//35
+		int ENG_AT_EUICC                 = 36;//get usim/sim
+		int ENG_AT_CGREG                 = 37;//get lai
+		int ENG_AT_EXIT                  = 38;//set eng exit	
+		int ENG_AT_NOHANDLE_CMD			 = 39;//no need handle
+		int ENG_AT_SYSINFO				 = 40;//get system info
+		int ENG_AT_HVER					 = 41;//get hardware version
+		int ENG_AT_GETSYSCONFIG			 = 42;
+		int ENG_AT_SETSYSCONFIG			 = 43;
+		int ENG_AT_SPVER				 = 44;
+		int ENG_AT_AUTOATTACH				=45;
+		int ENG_AT_SETAUTOATTACH				=46;
+		int ENG_AT_PDPACTIVE					=47;
+		int ENG_AT_GETPDPACT					=48;
+		int ENG_AT_SGPRSDATA					=49;
+		int ENG_AT_GETUPLMN					=50;
+		int ENG_AT_CGSMS 						=51;
+		int ENG_AT_CAOC						=52;//aoc active,and {Deactive see@ENG_AT_CAOCD} {Query see@ENG_AT_CAOCQ}
+		int ENG_AT_CAMM						=53;
+		int ENG_AT_SETCOPS 					=54;
+		int ENG_AT_SADC					 	= 55;
+		int ENG_AT_CFUN						= 56;
+		int ENG_AT_CGMR						= 57;
+		int ENG_AT_SETCAPLOG					= 58;
+		int ENG_AT_SETUPLMN 				= 59;
+		int ENG_AT_GETUPLMNLEN				= 60;
+		int ENG_AT_SGMR							= 70;
+		int ENG_AT_CAOCD					= 80;//aoc deactive
+		int ENG_AT_CAOCQ					= 81;//aoc query
+		
+		int ENG_AT_CCED						= 101;//net info of sim
+		int ENG_AT_L1MON					= 103;
+
+		int ENG_AT_GET_ASSERT_MODE          = 108;
+		int ENG_AT_SET_ASSERT_MODE          = 109;
+		int ENG_AT_SET_MANUAL_ASSERT        = 110;
+		int ENG_AT_SFPL                     = 111;
+		int ENG_AT_SEPL                     = 112;
+
+		int ENG_AT_SPENGMD_QUERY			= 117;
+		int ENG_AT_SPENGMD_OPEN				= 118;
+		int ENG_AT_SPENGMD_CLOSE			= 119;
+		//ENG_AT_CMD_END,
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/sdcard/SDCard.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/sdcard/SDCard.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/sdcard/SDCard.java	(revision 166460)
@@ -0,0 +1,137 @@
+package com.mediatek.factorymode.sdcard;
+
+import java.io.File;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Environment;
+import android.os.StatFs;
+import android.os.storage.StorageManager;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.R.string;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class SDCard extends Activity {
+	
+	private TextView sdcardinfo;
+	private Button succesButton ;
+	private Button failButton ;
+	private StorageManager mStorageManager;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.sdcard);
+		//liuzhixiang 2012.3.12 begin
+		//bug 648,ver:308v3,factory pattern fixture test: application factory model stops unexpectedly.
+		sdcardinfo = (TextView)this.findViewById(R.id.sdcard_info);
+		//liuzhixiang 2012.3.12 end
+		succesButton = (Button)this.findViewById(R.id.sdcard_bt_ok);
+		failButton = (Button)this.findViewById(R.id.sdcard_bt_failed);
+		succesButton.setEnabled(false);
+		mStorageManager = StorageManager.from(SDCard.this);
+		final String state = mStorageManager.getVolumeState(Environment.getExternalStorageDirectory().getPath());
+		if (state.equals(Environment.MEDIA_MOUNTED)) {
+		    //liuzhixiang 2012.3.12 begin
+		    //bug 648,ver:308v3,factory pattern fixture test: application factory model stops unexpectedly.
+			//sdcardinfo = (TextView)this.findViewById(R.id.sdcard_info);
+			//liuzhixiang 2012.3.12 end
+			long availableMB =getAvailaleSize();
+			long totalMB = getAllSize();
+			sdcardinfo.setText(getString(R.string.sdcard_tips_success)+"\n\n"+
+			getString(R.string.sdcard_totalsize)+ totalMB + " MB\n\n"+
+			getString(R.string.sdcard_freesize)+ availableMB + " MB");
+// yaoming, 	If SD is ok, jumps to next test, 20130426
+			if(totalMB != 0){
+				succesButton.setEnabled(true);
+				//Intent intent = new Intent(SDCard.this, FactoryMode.class);
+				//setResult(FactoryMode.TEST_OK,intent);
+				//finish();
+
+				}
+			
+		} else {
+			sdcardinfo.setText(getString(R.string.sdcard_tips_failed));
+		}
+	
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SDCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SDCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	public long getAvailaleSize() {
+
+		File path = Environment.getExternalStorageDirectory(); 
+
+		StatFs stat = new StatFs(path.getPath());
+
+		long blockSize = stat.getBlockSize();
+
+		long availableBlocks = stat.getAvailableBlocks();
+
+		//return availableBlocks * blockSize;
+
+		return (availableBlocks * blockSize)/1024 /1024; 
+
+	}
+
+	public long getAllSize() {
+
+		File path = Environment.getExternalStorageDirectory();
+
+		StatFs stat = new StatFs(path.getPath());
+
+		long blockSize = stat.getBlockSize();
+
+		long availableBlocks = stat.getBlockCount();
+
+		return (availableBlocks * blockSize)/1024 /1024; 
+
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(SDCard.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/earphone/Earphone.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/earphone/Earphone.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/earphone/Earphone.java	(revision 166460)
@@ -0,0 +1,112 @@
+package com.mediatek.factorymode.earphone;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.os.SystemProperties;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.KeyCode;
+import com.mediatek.factorymode.R;
+
+public class Earphone extends Activity{
+	private AudioManager audiomanager;
+	private Button succesButton ;
+	private Button failButton ;
+	MediaPlayer mpbg ;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		SystemProperties.set("persist.sys.testearphone", "1");
+		setContentView(R.layout.speaker);
+		audiomanager = (AudioManager) this.getSystemService(this.AUDIO_SERVICE);
+		audiomanager.setSpeakerphoneOn(false); 
+
+		//audiomanager.setRouting(AudioManager.MODE_RINGTONE,AudioManager.ROUTE_EARPIECE,AudioManager.ROUTE_ALL);
+		setVolumeControlStream(AudioManager.STREAM_RING);
+     	audiomanager.setMode(AudioManager.MODE_IN_CALL);
+		audiomanager.setParameters("AudioSetForceToSpeaker=0");
+		succesButton = (Button)this.findViewById(R.id.speaker_bt_ok);
+		failButton = (Button)this.findViewById(R.id.speaker_bt_failed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Earphone.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Earphone.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		playonce();
+	}
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		super.onDestroy();
+//		mpbg.pause();
+//		mpbg.release();
+//		audiomanager.setMode(AudioManager.MODE_NORMAL);
+	}
+	
+	@Override
+	protected void onStop() {
+		super.onStop();
+		SystemProperties.set("persist.sys.testearphone", "0");
+		if(mpbg != null) {
+			mpbg.pause();
+			mpbg.release();
+			mpbg = null;
+		}
+		
+		if(audiomanager != null) {
+			audiomanager.setMode(AudioManager.MODE_NORMAL);
+			audiomanager.setSpeakerphoneOn(true);
+			audiomanager.setParameters("AudioSetForceToSpeaker=1");
+		}
+	}
+	protected void playonce()
+	{
+
+		mpbg = MediaPlayer.create(this,R.raw.tada);
+		mpbg.setLooping(true);
+		mpbg.start();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Earphone.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/KeyCode.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/KeyCode.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/KeyCode.java	(revision 166460)
@@ -0,0 +1,229 @@
+package com.mediatek.factorymode;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.GridView;
+import android.widget.SimpleAdapter;
+
+public class KeyCode extends Activity {
+
+	public static final int KEY_START = 0;
+	public static final int KEY_MENU = 0;
+	public static final int KEY_HOME = 1;
+	public static final int KEY_BACK = 2;
+	public static final int KEY_SEARCH = 3;
+	public static final int KEY_VOLUME_DOWN = 4;
+	public static final int KEY_VOLUME_UP = 5;
+	public static final int KEY_MAX = 6;
+
+	private GridView gridview;
+	ArrayList<HashMap<String, Object>> lstImageItem;
+	SimpleAdapter saImageItems;
+	Button succesButton ;
+	Button failButton ;
+
+	private boolean keymenutested = false;
+	private boolean keyhometested = false;
+	private boolean keybacktested = false;
+	private boolean keysearchtested = false;
+	private boolean keyvldtested = false;
+	private boolean keyvlutested = false;
+	private boolean keyheadsettest=false;
+	private int keymenupressedcount = 0;
+	private int keybackpressedcount = 0;
+
+	private boolean keymenuFlag = false;
+	private boolean keyhomeFlag = false;
+	private boolean keybackFlag = false;
+	private boolean keyupFlag = false;
+	private boolean keydownFlag = false;
+	private boolean keyheadsetFlag=false;
+	HashMap<String, Object> map_menu = new HashMap<String, Object>();
+	HashMap<String, Object> map_home = new HashMap<String, Object>();
+	HashMap<String, Object> map_back = new HashMap<String, Object>();
+//	HashMap<String, Object> map_search = new HashMap<String, Object>();
+	HashMap<String, Object> map_vldown = new HashMap<String, Object>();
+	HashMap<String, Object> map_vlup = new HashMap<String, Object>();
+	HashMap<String, Object> map_headset = new HashMap<String, Object>();
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.keycode);
+		gridview = (GridView) this.findViewById(R.id.keycode_grid);
+		lstImageItem = new ArrayList<HashMap<String, Object>>();
+		saImageItems = new SimpleAdapter(this, // ~{C;J2C4=bJM~}
+				lstImageItem,// ~{J}>]@4T4~}
+				R.layout.keycode_grid,// night_item~{5D~}XML~{J5OV~}
+				// ~{6/L,J}WiSk~}ImageItem~{6TS&5DWSOn~}
+				new String[] { "imageView" },
+				// ImageItem~{5D~}XML~{ND<~@oCf5DR;8v~}ImageView,~{A=8v~}TextView ID
+				new int[] { R.id.imgview });
+		map_menu.put("imageView", R.drawable.menu);
+		lstImageItem.add(map_menu);
+		map_home.put("imageView", R.drawable.home);
+		lstImageItem.add(map_home);
+		map_back.put("imageView", R.drawable.back);
+		lstImageItem.add(map_back);
+//		map_search.put("imageView", R.drawable.search);
+//		lstImageItem.add(map_search);
+		map_vldown.put("imageView", R.drawable.vldown);
+		lstImageItem.add(map_vldown);
+		map_vlup.put("imageView", R.drawable.vlup);
+		lstImageItem.add(map_vlup);
+		map_headset.put("imageView", R.drawable.headset);
+		lstImageItem.add(map_headset);
+		gridview.setAdapter(saImageItems);
+		succesButton = (Button)this.findViewById(R.id.keycode_bt_ok);
+		failButton = (Button)this.findViewById(R.id.keycode_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(KeyCode.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(KeyCode.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		// gridview.setOnItemClickListener(new ItemClickListener());
+	}
+	
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		// int selectkey = 0;
+		// TODO Auto-generated method stub
+		boolean isVolumeKey = false;
+		
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_APP_SWITCH:
+		case KeyEvent.KEYCODE_MENU:
+			// selectkey = KEY_MENU;
+			keymenupressedcount++;
+			if (!keymenutested) {
+				lstImageItem.remove(map_menu);
+				keymenutested = true;
+				keymenuFlag = true;
+			
+			}
+			break;
+		case KeyEvent.KEYCODE_HOME:
+			// selectkey = KEY_HOME;
+			if (!keyhometested) {
+				lstImageItem.remove(map_home);
+				keyhometested = true;
+				keyhomeFlag = true;
+			
+			}
+			break;
+		case KeyEvent.KEYCODE_BACK:
+			// selectkey = KEY_BACK;
+			keybackpressedcount++;
+			if (!keybacktested) {
+				lstImageItem.remove(map_back);
+				keybacktested = true;
+				keybackFlag = true;
+
+			}
+			break;
+		case KeyEvent.KEYCODE_SEARCH:
+			// selectkey = KEY_SEARCH;
+			if (!keysearchtested) {
+//				lstImageItem.remove(map_search);
+				keysearchtested = true;
+			}
+			break;
+		case KeyEvent.KEYCODE_VOLUME_DOWN:
+			// selectkey = KEY_VOLUME_DOWN;
+			if (!keyvldtested) {
+				lstImageItem.remove(map_vldown);
+				keyvldtested = true;
+				keydownFlag = true;
+				isVolumeKey = true;
+			}
+			break;
+		case KeyEvent.KEYCODE_VOLUME_UP:
+			// selectkey = KEY_VOLUME_UP;
+			if (!keyvlutested) {
+				lstImageItem.remove(map_vlup);
+				keyvlutested = true;
+				keyupFlag = true;
+				isVolumeKey = true;
+			}
+			break;
+		case KeyEvent.KEYCODE_HEADSETHOOK:
+			if(!keyheadsettest){
+				lstImageItem.remove(map_headset);
+				keyheadsettest=true;
+				keyheadsetFlag=true;
+			}
+			break;
+		}
+		if( keymenuFlag == true &&
+	 		keyhomeFlag == true &&
+	 		keybackFlag == true && 
+	 		keyupFlag == true && 
+	 		keydownFlag == true &&
+	 		keyheadsetFlag==true){
+	 	succesButton.setEnabled(true);
+	 	Intent intent = new Intent(KeyCode.this, FactoryMode.class);
+	 	setResult(FactoryMode.TEST_OK,intent);
+	 	finish();
+			}
+		gridview.setAdapter(saImageItems);
+		
+		if(isVolumeKey) return true;
+                if( keyCode == KeyEvent.KEYCODE_VOLUME_DOWN || 
+                        keyCode == KeyEvent.KEYCODE_VOLUME_UP){
+                    return true;
+                }
+		return super.onKeyDown(keyCode, event);
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		// TODO Auto-generated method stub
+
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			return true;
+			
+		case KeyEvent.KEYCODE_HOME:
+		case KeyEvent.KEYCODE_SEARCH:
+		case KeyEvent.KEYCODE_VOLUME_DOWN:
+		case KeyEvent.KEYCODE_VOLUME_UP:
+		case KeyEvent.KEYCODE_HEADSETHOOK:
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/Speaker.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/Speaker.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/Speaker.java	(revision 166460)
@@ -0,0 +1,220 @@
+package com.mediatek.factorymode;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Timer;
+import java.util.TimerTask;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.storage.StorageManager;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.R;
+
+import android.app.Service;
+import android.os.IBinder;
+import android.widget.ProgressBar;
+import android.widget.Toast;
+
+import android.os.Environment;
+import java.io.File;
+public class Speaker extends Activity{
+	
+	private static final String TAG = "Speaker";
+	private AudioManager audiomanager;
+	
+	private Button succesButton ;
+	private Button failButton ;
+	public static MediaPlayer mMediaPlayer = null;
+	private final String musicName = "/test.mp3";
+	private int maxVolume = 50; 
+	private int curVolume = 20; 
+	private int stepVolume = 0; 
+	private AudioManager audioMgr = null;
+	
+	Timer timer;
+	TimerTask task;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	  getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
+		setContentView(R.layout.speaker);
+		audiomanager = (AudioManager) this.getSystemService(this.AUDIO_SERVICE);
+		audiomanager.setSpeakerphoneOn(true); 
+		succesButton = (Button)this.findViewById(R.id.speaker_bt_ok);
+		failButton = (Button)this.findViewById(R.id.speaker_bt_failed);
+		mMediaPlayer = new MediaPlayer();
+		audioMgr = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+		maxVolume = audioMgr.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
+		curVolume = maxVolume / 2;
+		stepVolume = maxVolume / 6;
+
+		succesButton.setEnabled(false);
+
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Speaker.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+				if (mMediaPlayer != null) {
+					mMediaPlayer.stop();
+					mMediaPlayer.release();
+					mMediaPlayer = null;
+				}
+				if (timer != null) {
+					timer.cancel();
+					timer = null;
+				}
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Speaker.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+				if (mMediaPlayer != null) {
+					mMediaPlayer.stop();
+					mMediaPlayer.release();
+					mMediaPlayer = null;
+				}
+				if (timer != null) {
+					timer.cancel();
+					timer = null;
+				}
+			}
+			
+		});
+		playonce();
+	}
+	Handler updateBarHandler = new Handler() {
+		@Override
+		public void handleMessage(Message msg) {
+			super.handleMessage(msg);
+			if (msg.what == 0x1231) {
+				Log.v(TAG, "yaoming_thread" + "----------start handle");
+				curVolume += stepVolume;
+				if (curVolume >= maxVolume) {
+					curVolume = maxVolume;
+				}
+				audioMgr.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume,
+						AudioManager.FLAG_PLAY_SOUND);
+			}
+		}
+	};
+	@Override
+	protected void onRestart() {
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		super.onResume();
+	}
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+//		audiomanager.setSpeakerphoneOn(false);  
+		super.onDestroy();
+//		mpbg.pause();
+//		mpbg.release();
+		
+	}
+	
+	@Override
+	protected void onStop() {
+		if(audiomanager != null) {
+			audiomanager.setSpeakerphoneOn(false);  
+		}
+		super.onStop();
+		Intent intent = new Intent(Speaker.this, FactoryMode.class);
+		setResult(FactoryMode.TEST_CANCEL,intent);
+		finish();
+		if (mMediaPlayer != null) {
+			mMediaPlayer.pause();
+			mMediaPlayer.release();
+			mMediaPlayer = null;
+		}
+
+		if (timer != null) {
+			timer.cancel();
+			timer = null;
+		}
+	}
+	
+	protected void playonce() {
+	try {
+		mMediaPlayer.reset();
+		mMediaPlayer.release();
+		mMediaPlayer = MediaPlayer.create(this, Uri.parse("file://" + Environment.getExternalStorageDirectory().getPath() + musicName));
+		Log.v(TAG, "xxxxxxxxxxxxxx mMediaPlayer = " + mMediaPlayer);
+				
+		if(mMediaPlayer == null){
+			mMediaPlayer = MediaPlayer.create(this,R.raw.tada);
+		}
+		
+		if(mMediaPlayer != null){
+		    succesButton.setEnabled(true);
+
+			mMediaPlayer.start();
+		    TimerTask task = new TimerTask() {
+			public void run() {
+				Message msg = new Message();
+				msg.what = 0x1231;
+				updateBarHandler.sendMessage(msg);
+			}
+		};
+		if (timer == null) {
+			timer = new Timer(true);
+		}
+		if (timer != null && task != null) {
+			timer.schedule(task, 3000, 3000); 
+		}
+	}else{
+		Intent intent = new Intent(Speaker.this, FactoryMode.class);
+		setResult(FactoryMode.TEST_CANCEL, intent);
+		finish();
+	}
+	} catch (Exception e) {
+		e.printStackTrace();
+	}
+	
+	}
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Speaker.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+
+}
Index: packages/apps/FactoryMode/src/com/mediatek/factorymode/IATUtils.java
===================================================================
--- packages/apps/FactoryMode/src/com/mediatek/factorymode/IATUtils.java	(revision 0)
+++ packages/apps/FactoryMode/src/com/mediatek/factorymode/IATUtils.java	(revision 166460)
@@ -0,0 +1,59 @@
+package com.mediatek.factorymode;
+
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.util.Log;
+import android.telephony.TelephonyManager;
+
+public class IATUtils {
+    private static final String TAG = "IATUtils";
+    private static String strTmp = null;
+    public static String AT_FAIL = "AT FAILED";
+    public static String AT_OK = "OK";
+    public static String AT_CONNECT = "CONNECT";
+    public static int mPhoneCount = 0;
+    private static TelephonyManager mTelephonyManager;
+    private static int phoneId = 0;
+
+    public static synchronized String sendATCmd(String cmd, String serverName) {
+        strTmp = "error service can't get";
+        String[] oemReq = new String[1];
+        String[] oemResp = new String[1];
+        oemReq[0] = cmd;
+        mTelephonyManager = TelephonyManager.getDefault();
+        mPhoneCount = mTelephonyManager.getPhoneCount();
+        if (mPhoneCount == 1) {
+            Log.d(TAG, "phone count is 1");
+            serverName = "atchannel";
+        }
+        if (serverName.contains("atchannel0")) {
+            phoneId = 0;
+            Log.d(TAG, "<0> mAtChannel = " + phoneId + " , and cmd = " + cmd);
+        } else if (serverName.contains("atchannel1")) {
+            phoneId = 1;
+            Log.d(TAG, "<1> mAtChannel = " + phoneId + " , and cmd = " + cmd);
+        } else {
+            phoneId = 0;
+            Log.d(TAG, "<atchannel> mAtChannel = " + phoneId + " , and cmd = "
+                    + cmd);
+        }
+        /*int oemResplength = mTelephonyManager.invokeOemRilRequestStrings(phoneId, oemReq, oemResp);
+        if (oemResplength < 0) {
+            Log.d(TAG, "AT cmd send fail");
+            strTmp = "AT cmd send fail";
+        } else if (oemResplength == 0) {
+            Log.d(TAG, "the return value of AT is null");
+            strTmp = "the return value of AT is null";
+        } else {
+            strTmp = oemResp[0];
+            if (serverName.contains("atchannel0")) {
+                Log.d(TAG, "<0> AT response " + strTmp);
+            } else if (serverName.contains("atchannel1")) {
+                Log.d(TAG, "<1> AT response " + strTmp);
+            } else {
+                Log.d(TAG, "<atchannel> AT response " + strTmp);
+            }
+        }*/
+        return strTmp;
+    }
+}
Index: packages/apps/FactoryMode/res/values/ids.xml
===================================================================
--- packages/apps/FactoryMode/res/values/ids.xml	(revision 0)
+++ packages/apps/FactoryMode/res/values/ids.xml	(revision 166460)
@@ -0,0 +1,148 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item type="id" name="LinerLayout_comm_info" />
+    <item type="id" name="LinerLayout_file_sys_info" />
+    <item type="id" name="LinerLayout_partition_info" />
+    <item type="id" name="comm_info" />
+    <item type="id" name="file_sys_info" />
+    <item type="id" name="partition_info" />
+    <item type="id" name="all_bt_ok">false</item>
+    <item type="id" name="all_bt_failed">false</item>
+    <item type="id" name="audio_bt_ok">false</item>
+    <item type="id" name="audio_bt_failed">false</item>
+    <item type="id" name="LinearLayout">false</item>
+    <item type="id" name="Display_lcd_on">false</item>
+    <item type="id" name="Display_lcd_off">false</item>
+    <item type="id" name="display_bt_ok">false</item>
+    <item type="id" name="display_bt_failed">false</item>
+    <item type="id" name="status">false</item>
+    <item type="id" name="level">false</item>
+    <item type="id" name="scale">false</item>
+    <item type="id" name="health">false</item>
+    <item type="id" name="voltage">false</item>
+    <item type="id" name="temperature">false</item>
+    <item type="id" name="technology">false</item>
+    <item type="id" name="uptime">false</item>
+    <item type="id" name="battery_bt_ok">false</item>
+    <item type="id" name="battery_bt_failed">false</item>
+    <item type="id" name="ble_state_id">false</item>
+    <item type="id" name="ble_result_id">false</item>
+    <item type="id" name="ble_con_id">false</item>
+    <item type="id" name="ble_bt_ok">false</item>
+    <item type="id" name="ble_bt_failed">false</item>
+    <item type="id" name="camera_view">false</item>
+    <item type="id" name="subcamera_take">false</item>
+    <item type="id" name="camera_take">false</item>
+    <item type="id" name="camera_btok">false</item>
+    <item type="id" name="camera_btfailed">false</item>
+    <item type="id" name="gps_state_id">false</item>
+    <item type="id" name="gps_satellite_id">false</item>
+    <item type="id" name="gps_signal_id">false</item>
+    <item type="id" name="gps_result_id">false</item>
+    <item type="id" name="gps_time_id">false</item>
+    <item type="id" name="gps_bt_ok">false</item>
+    <item type="id" name="gps_bt_failed">false</item>
+    <item type="id" name="gsensor_iv_img">false</item>
+    <item type="id" name="gsensor_tv_info">false</item>
+    <item type="id" name="gsensor_bt_ok">false</item>
+    <item type="id" name="gsensor_bt_failed">false</item>
+    <item type="id" name="mic_bt_start">false</item>
+    <item type="id" name="uvMeter">false</item>
+    <item type="id" name="bt_ok">false</item>
+    <item type="id" name="bt_failed">false</item>
+    <item type="id" name="keycode_info">false</item>
+    <item type="id" name="keycode_grid">false</item>
+    <item type="id" name="keycode_bt_ok">false</item>
+    <item type="id" name="keycode_bt_failed">false</item>
+    <item type="id" name="imgview">false</item>
+    <item type="id" name="test_color_text1">false</item>
+    <item type="id" name="lsensor_accuracy">false</item>
+    <item type="id" name="lsensor_value">false</item>
+    <item type="id" name="lsensor_tips">false</item>
+    <item type="id" name="lsensor_bt_ok">false</item>
+    <item type="id" name="lsensor_bt_failed">false</item>
+    <item type="id" name="main_bt_autotest">false</item>
+    <item type="id" name="main_bt_alltest">false</item>
+    <item type="id" name="main_grid">false</item>
+    <item type="id" name="factor_button">false</item>
+    <item type="id" name="memory_bt_ok">false</item>
+    <item type="id" name="memory_bt_failed">false</item>
+    <item type="id" name="mic_tips">false</item>
+    <item type="id" name="mic_bt_ok">false</item>
+    <item type="id" name="mic_bt_failed">false</item>
+    <item type="id" name="speaker_bt_ok">false</item>
+    <item type="id" name="speaker_bt_failed">false</item>
+    <item type="id" name="mic_tv_status">false</item>
+    <item type="id" name="LinearLayout01">false</item>
+    <item type="id" name="OrientText">false</item>
+    <item type="id" name="ivCompass">false</item>
+    <item type="id" name="OrientValue">false</item>
+    <item type="id" name="msensor_iv_img">false</item>
+    <item type="id" name="msensor_tv_info">false</item>
+    <item type="id" name="msensor_bt_ok">false</item>
+    <item type="id" name="msensor_bt_failed">false</item>
+    <item type="id" name="proximity">false</item>
+    <item type="id" name="tips">false</item>
+    <item type="id" name="psensor_bt_ok">false</item>
+    <item type="id" name="psensor_bt_failed">false</item>
+    <item type="id" name="report_success">false</item>
+    <item type="id" name="report_failed">false</item>
+    <item type="id" name="report_default">false</item>
+    <item type="id" name="sdcard_info">false</item>
+    <item type="id" name="sdcard_bt_ok">false</item>
+    <item type="id" name="sdcard_bt_failed">false</item>
+    <item type="id" name="signal_bt_ok">false</item>
+    <item type="id" name="signal_bt_failed">false</item>
+    <item type="id" name="simcard_sim1_info">false</item>
+    <item type="id" name="simcard_sim2_info">false</item>
+    <item type="id" name="simcard_bt_ok">false</item>
+    <item type="id" name="simcard_bt_failed">false</item>
+    <item type="id" name="touchscreen_bt_ok">false</item>
+    <item type="id" name="touchscreen_bt_failed">false</item>
+    <item type="id" name="vibrator_bt_ok">false</item>
+    <item type="id" name="vibrator_bt_failed">false</item>
+    <item type="id" name="wifi_state_id">false</item>
+    <item type="id" name="wifi_result_id">false</item>
+    <item type="id" name="wifi_con_id">false</item>
+    <item type="id" name="wifi_resinfo_id">false</item>
+    <item type="id" name="wifi_bt_ok">false</item>
+    <item type="id" name="wifi_bt_failed">false</item>
+    <item type="id" name="ygps_bt_ok">false</item>
+    <item type="id" name="ygps_bt_failed">false</item>
+    <item type="id" name="android_version">false</item>
+    <item type="id" name="build_number">false</item>
+    <item type="id" name="imei">false</item>
+    <item type="id" name="barcode">false</item>
+    <item type="id" name="sn">false</item>
+    <item type="id" name="pn">false</item>
+    <item type="id" name="bt_state">false</item>
+    <item type="id" name="ft_state">false</item>
+    <item type="id" name="linux_version">false</item>
+    <item type="id" name="platform_version">false</item>
+    <item type="id" name="version_bt_ok">false</item>
+    <item type="id" name="version_bt_failed">false</item>
+    <item type="id" name="rf_cali">false</item>
+    <item type="id" name="rf_bt_ok">false</item>
+    <item type="id" name="rf_bt_failed">false</item>
+    <item type="id" name="fm_bt_ok">false</item>
+    <item type="id" name="fm_bt_failed">false</item>
+    <item type="id" name="lcd_bt_ok">false</item>
+    <item type="id" name="lcd_bt_failed">false</item>
+    <item type="id" name="pointer_bt_ok">false</item>
+    <item type="id" name="pointer_bt_failed">false</item>
+    <item type="id" name="line_bt_ok">false</item>
+    <item type="id" name="line_bt_failed">false</item>
+    <item type="id" name="electronic">false</item>
+    <item type="id" name="charger_type">false</item>
+    <item type="id" name="charger_result">false</item>
+    <item type="id" name="flashlight_tips">false</item>      
+    <item type="id" name="flashlight_bt_ok">false</item>     
+    <item type="id" name="flashlight_bt_failed">false</item> 
+    <item type="id" name="hall_tips">false</item>
+    <item type="id" name="hall_bt_ok">false</item>
+    <item type="id" name="hall_bt_failed">false</item>
+    <item type="id" name="Display_led_red">false</item>
+    <item type="id" name="Display_led_blue">false</item>
+    <item type="id" name="Display_led_green">false</item>
+    <item type="id" name="chargemessage" /> 
+</resources>
Index: packages/apps/FactoryMode/res/values/arrays.xml
===================================================================
--- packages/apps/FactoryMode/res/values/arrays.xml	(revision 0)
+++ packages/apps/FactoryMode/res/values/arrays.xml	(revision 166460)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string-array name="select_dialog_items">
+        <item>成功</item>
+        <item>失败</item>
+    </string-array>
+</resources>
Index: packages/apps/FactoryMode/res/values/colors.xml
===================================================================
--- packages/apps/FactoryMode/res/values/colors.xml	(revision 0)
+++ packages/apps/FactoryMode/res/values/colors.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="recording_current_shot_text">#ffffffff</color>
+    <color name="gray">#ffd3d3d3</color>
+    <color name="black">#ff000000</color>
+    <color name="Green">#ff00ff00</color>
+    <color name="Red">#ffff0000</color>
+    <color name="Blue">#ff0000ff</color>
+</resources>
Index: packages/apps/FactoryMode/res/values/styles.xml
===================================================================
--- packages/apps/FactoryMode/res/values/styles.xml	(revision 0)
+++ packages/apps/FactoryMode/res/values/styles.xml	(revision 166460)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <style name="info_label">
+        <item name="android:textAppearance">@style/TextAppearance.info_label</item>
+        <item name="android:paddingRight">4.0dip</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+    </style>
+    <style name="info_value">
+        <item name="android:textAppearance">@style/TextAppearance.info_value</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+    </style>
+    <style name="info_layout">
+        <item name="android:orientation">vertical</item>
+        <item name="android:paddingLeft">10.0dip</item>
+        <item name="android:paddingTop">10.0dip</item>
+        <item name="android:paddingRight">10.0dip</item>
+        <item name="android:paddingBottom">10.0dip</item>
+        <item name="android:layout_width">fill_parent</item>
+        <item name="android:layout_height">fill_parent</item>
+    </style>
+    <style name="entry_layout">
+        <item name="android:orientation">horizontal</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+    </style>
+    <style name="TextAppearance" parent="@android:style/TextAppearance" />
+    <style name="TextAppearance.info_label" parent="@style/TextAppearance">
+        <item name="android:textSize">14.0sp</item>
+        <item name="android:textStyle">bold</item>
+    </style>
+    <style name="TextAppearance.info_small" parent="@style/TextAppearance">
+        <item name="android:textSize">12.0sp</item>
+        <item name="android:textStyle">normal</item>
+    </style>
+    <style name="TextAppearance.info_value" parent="@style/TextAppearance">
+        <item name="android:textSize">14.0sp</item>
+        <item name="android:textStyle">normal</item>
+    </style>
+</resources>
Index: packages/apps/FactoryMode/res/values/strings.xml
===================================================================
--- packages/apps/FactoryMode/res/values/strings.xml	(revision 0)
+++ packages/apps/FactoryMode/res/values/strings.xml	(revision 166460)
@@ -0,0 +1,230 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="hello">Welcome to Factory Mode</string>
+    <string name="app_name">Factory Mode</string>
+    <string name="Settings">Settings</string>
+    <string name="AutoTest">Auto test</string>
+    <string name="AllTest">All test</string>
+    <string name="Packageerror">Package error!</string>
+    <string name="PackageIerror">Internal error</string>
+    <string name="BatteryLog">Battery</string>
+    <string name="battery_info_status_label">Charge state:</string>
+    <string name="battery_info_scale_label">Battery scale:</string>
+    <string name="battery_info_level_label">Battery level:</string>
+    <string name="battery_info_health_label">Battery health:</string>
+    <string name="battery_info_technology_label">Battery technology:</string>
+    <string name="battery_info_voltage_label">Battery voltage:</string>
+    <string name="battery_info_voltage_units">mV</string>
+    <string name="battery_info_temperature_label">Battery temperature:</string>
+    <string name="battery_info_temperature_units">° C</string>
+    <string name="battery_info_uptime">Battery time:</string>
+    <string name="battery_info_awake_battery">Battery wake time:</string>
+    <string name="battery_info_awake_plugged">Charge time:</string>
+    <string name="battery_info_screen_on">Screen time:</string>
+    <string name="battery_info_status_unknown">Battery unkonw</string>
+    <string name="battery_info_status_charging">Charging</string>
+    <string name="battery_info_status_charging_ac">(AC)</string>
+    <string name="battery_info_status_charging_usb">(USB)</string>
+    <string name="battery_info_status_discharging">Discharging</string>
+    <string name="battery_info_status_not_charging">Not charging</string>
+    <string name="battery_info_status_full">Battery full</string>
+    <string name="battery_info_health_unknown">Health unkonw</string>
+    <string name="battery_info_health_good">Health good</string>
+    <string name="battery_info_health_overheat">Health overheat</string>
+    <string name="battery_info_health_dead">Dead</string>
+    <string name="battery_info_health_over_voltage">Over voltage</string>
+    <string name="battery_info_health_unspecified_failure">Unspecified failure</string>
+    <string name="TouchScreen">Touch</string>
+    <string name="PointTest">Point test</string>
+    <string name="LineTest">Line test</string>
+    <string name="Result">Result</string>
+    <string name="Offset">Offset:</string>
+    <string name="TouchComplete">Touch complete</string>
+    <string name="Error">Error</string>
+    <string name="DrawError">Draw error!</string>
+    <string name="Again">Again</string>
+    <string name="GoOn">Go on</string>
+    <string name="BackLight">Backlight</string>
+    <string name="Display_lcd_Text">Backlight</string>
+    <string name="Memory">Memory</string>
+    <string name="Audio">Audio</string>
+    <string name="Camera">Camera</string>
+    <string name="Camera_takepic">Photograph</string>
+    <string name="Camera_notfound">Not found front camera</string>
+    <string name="WiFi">WiFi</string>
+    <string name="WiFi_success">Wifi success</string>
+    <string name="WiFi_failed">Wifi failed</string>
+    <string name="WiFi_scaning">Wifi scaning...</string>
+    <string name="WiFi_info_closeing">wifi closeing...</string>
+    <string name="WiFi_info_close">wifi close</string>
+    <string name="WiFi_info_opening">wifi opening</string>
+    <string name="WiFi_info_open">wifi open</string>
+    <string name="WiFi_info_unknown">wifi unknown</string>
+    <string name="WiFi_connecting">wifi connecting...</string>
+    <string name="WiFi_notfound_openap">wifi not found</string>
+    <string name="HeadSet">Headset</string>
+    <string name="HeadSet_plugged">Headset plugged</string>
+    <string name="HeadSet_unplugged">Headset unplugged</string>
+    <string name="HeadSet_tips">Plug headset</string>
+    <string name="HeadSet_hook">Headset hook!</string>
+    <string name="HeadSet_hook_message">Confirm long press headset hook to hang up phone?</string>
+    <string name="GPS">GPS</string>
+    <string name="GPS_open">GPS open</string>
+    <string name="GPS_connect">GPS connect...</string>
+    <string name="GPS_normal">GPS normal</string>
+    <string name="GPS_satelliteNum">GPS satellite num:</string>
+    <string name="GPS_Signal">GPS signal:</string>
+    <string name="GPS_Success">GPS success</string>
+    <string name="GPS_time">GPS time: %s min</string>
+    <string name="Sensor">Sensor</string>
+    <string name="Vibrator">Vibrator</string>
+    <string name="Signal">Signal</string>
+    <string name="YGPS">YGPS</string>
+    <string name="AGPS">AGPS</string>
+    <string name="Microphone">Microphone</string>
+    <string name="Mic_start">Mic start</string>
+    <string name="Mic_stop">Mic stop</string>
+    <string name="Mic_play">Mic play</string>
+    <string name="Mic_operation">Mic operation</string>
+    <string name="Speaker_operation">Speaker operation</string>
+    <string name="Bluetooth">Bluetooth</string>
+    <string name="Bluetooth_open">Bluetooth open</string>
+    <string name="Bluetooth_opening">Bluetooth opening...</string>
+    <string name="Bluetooth_scaning">Bluetooth scaning...</string>
+    <string name="Bluetooth_mac">MAC address:</string>
+    <string name="Bluetooth_scan_success">Bluetooth scan success</string>
+    <string name="GSensor">GSensor</string>
+    <string name="GSensor_info">Erected,flat,celi,gravity change!</string>
+    <string name="MSensor">MSensor</string>
+    <string name="MSensor_default_text">MSensor unknow</string>
+    <string name="MSensor_North">MSensor north</string>
+    <string name="MSensor_East">MSensor east</string>
+    <string name="MSensor_South">MSensor south</string>
+    <string name="MSensor_West">MSensor west</string>
+    <string name="MSensor_north_east">MSensor north east</string>
+    <string name="MSensor_south_east">MSensor south east</string>
+    <string name="MSensor_south_west">MSensor south west</string>
+    <string name="MSensor_north_west">MSensor north west</string>
+    <string name="LSensor">LSensor</string>
+    <string name="LSensor_default_text">LSensor unknow</string>
+    <string name="LSensor_accuracy">LSensor accuracy:</string>
+    <string name="LSensor_value">LSensor value:</string>
+    <string name="LSensor_tips">LSensor tips!</string>
+    <string name="Hall_tips">Hall</string>
+    <string name="Hall">Hall</string>
+    <string name="LCD_increase">LCD increase</string>
+    <string name="LCD_weaken">LCD weaken</string>
+    <string name="Success">Success</string>
+    <string name="Failed">Failed</string>
+    <string name="psensor_hello">PSensor check</string>
+    <string name="psensor_app_name">PSensor</string>
+    <string name="proximity">Proximity:</string>
+    <string name="tips">Proximity check!</string>
+    <string name="Earphone">Earphone</string>
+    <string name="battery_name">Battery</string>
+    <string name="touchscreen_name">Touch</string>
+    <string name="speaker_name">Speaker</string>
+    <string name="wifi_name">WiFi</string>
+    <string name="bluetooth_name">Bluetooth</string>
+    <string name="headset_name">Headset</string>
+    <string name="earphone_name">Earphone</string>
+    <string name="gps_name">GPS</string>
+    <string name="vibrator_name">Vibrator</string>
+    <string name="telephone_name">Phone</string>
+    <string name="backlight_name">Backlight</string>
+    <string name="memory_name">Memory</string>
+    <string name="gsensor_name">Gsensor</string>
+    <string name="msensor_name">Msensor</string>
+    <string name="lsensor_name">Lsensor</string>
+    <string name="LSensorCali">Lsensor Calibration</string>
+    <string name="lsensor_cali_name">LSCali</string>
+    <string name="lsensor_cali_start">Calibration Start</string>
+    <string name="psensor_name">Psensor</string>
+    <string name="camera_name">Camera</string>
+    <string name="sdcard_name">T card</string>
+    <string name="fmradio_name">FM</string>
+    <string name="KeyCode_name">Key</string>
+    <string name="lcd_name">LCD</string>
+    <string name="sim_name">SIM</string>
+    <string name="microphone_name">Mic</string>
+    <string name="submicrophone_name">Sub Mic</string>
+    <string name="subcamera_name">FCamera</string>
+    <string name="headsethook_name">Headset hook</string>
+    <string name="sdcard">T card</string>
+    <string name="sdcard_tips_success">SD success</string>
+    <string name="sdcard_tips_failed">SD failed</string>
+    <string name="sdcard_totalsize">SD total:</string>
+    <string name="sdcard_freesize">SD free:</string>
+    <string name="FMRadio">FM</string>
+    <string name="FMRadio_notice">FM select</string>
+    <string name="KeyCode">Key</string>
+    <string name="KeyCode_info">Press key</string>
+    <string name="LCD">LCD</string>
+    <string name="SimCard">SIM</string>
+    <string name="sim1_info_ok">SIM1:ok</string>
+    <string name="sim1_info_failed">SIM1:failed</string>
+    <string name="sim2_info_ok">SIM2:ok</string>
+    <string name="sim2_info_failed">SIM2:failed</string>
+    <string name="sim_info_ok">SIM:ok</string>
+    <string name="sim_info_failed">SIM:failed</string>
+    <string name="Report">Report</string>
+    <string name="SingleTestReport">SingleTest Report</string>
+    <string name="AutoTestReport">AutoTest Report</string>
+    <string name="report_ok">Success:</string>
+    <string name="report_failed">Failed:</string>
+    <string name="report_notest">Untested:</string>
+    <string name="menu_exit">Eixt</string>
+    <string name="Mic_player">Mic player</string>
+    <string name="Fmsearch">FM search</string>
+    <string name="hour">hour</string>
+    <string name="minute">minute</string>
+    <string name="second">second</string>
+    <string name="Bluetooth_closed">Bluetooth closed</string>
+    <string name="okok">OK</string>
+    <string name="stopplayer">Stop player</string>
+    <string name="memorytotal">Memory total:</string>
+    <string name="memoryfree">Memory free:</string>
+    <string name="GSensor_tips">Gsensor check XYZ</string>
+    <string name="MSensor_tips">Msensor check XYZ</string>
+    <string name="version_info">Version</string>
+    <string name="rf_cali">RF CALI</string>
+    <string name="default_version">unknow</string>
+    <string name="lcd_hint">Press home key</string>
+    <string name="tp_hw_hint">Press Search</string>
+    <string name="tp_line_hint">Draw diagonal position\nIf the diagonal continuous and smooth,TP is normal.</string>
+    <string name="tp_line_start_hint">From the yellow area began to draw</string>
+    <string name="tp_line_stop_hint">Draw diagonal position</string>
+    <string name="tp_line_area_hint">Draw between two parallel lines</string>
+    <string name="tp_success_hint">TP success</string>
+    <string name="tp_slide_too_quick">Sliding too fast,slow slide</string>
+    <string name="led_red">red led</string>
+    <string name="led_green">green led</string>
+    <string name="led_blue">blue led</string>
+    <string name="Led">led</string>
+    <string name="tp_block_too_quick">The blue point is for response.The block is not disappear if sliding fast</string>
+    <string name="flashlight_tips">FlashLight</string>
+    <string name="flashlight">FlashLight</string>
+    <string name="charger_failed">test failed</string>
+    <string name="charger_unknown">unknow</string>
+    <string name="charger_charging">charging</string>
+    <string name="charger_not_charging">no charge</string>
+    <string name="charger_discharging">discharge</string>
+    <string name="charger_full">is full of</string>
+    <string name="charger_electronic">electric current:</string>
+    <string name="charger_type">Charger:</string>
+    <string name="charger_connected">yes</string>
+    <string name="charger_disconnected">no</string>
+    <string name="charger_result">Charging test results:</string>
+    <string name="charger_success"> test success</string>
+    <string name="charger_tips">The battery is full, replace the battery please.</string>
+    <string name="charger_start_tips">Wait for the first test.</string>
+    <string name="charger_retry_tips">Test failed.Try again after <xliff:g id="xxx">%d</xliff:g> seconds.(Left <xliff:g id="yyy">%d</xliff:g> times)</string>
+    <string name="charge_message">Please plug in charger.</string>
+    <string name="tp_raw_data">TP RAW DATA test</string>
+    <string name="tp_raw_data_text">TP RAW</string>
+	<string name="Check_Flag">Check_Flag</string>
+	<string name="charger_temperature_error">The test has been stopped because of the battery temperature is not normal.</string>
+    <string name="sener_hint">The data of the lightdensor is:</string>
+    <string name="gsener_hint">The data of motionsensor is:</string>
+    <string name="flashlightSub">SubFlashLight</string>
+</resources>
Index: packages/apps/FactoryMode/res/values/public.xml
===================================================================
--- packages/apps/FactoryMode/res/values/public.xml	(revision 0)
+++ packages/apps/FactoryMode/res/values/public.xml	(revision 166460)
@@ -0,0 +1,348 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <public type="drawable" name="btn_default" id="0x7f020001" />
+    <public type="drawable" name="psensor_background" id="0x7f020010" />
+    <public type="drawable" name="back" id="0x7f020000" />
+    <public type="drawable" name="btn_default_normal" id="0x7f020002" />
+    <public type="drawable" name="btn_default_normal_disable" id="0x7f020003" />
+    <public type="drawable" name="btn_default_normal_disable_focused" id="0x7f020004" />
+    <public type="drawable" name="btn_default_pressed" id="0x7f020005" />
+    <public type="drawable" name="btn_default_selected" id="0x7f020006" />
+    <public type="drawable" name="camera" id="0x7f020007" />
+    <public type="drawable" name="compass" id="0x7f020008" />
+    <public type="drawable" name="error" id="0x7f020009" />
+    <public type="drawable" name="gsensor_x" id="0x7f02000a" />
+    <public type="drawable" name="gsensor_x_2" id="0x7f02000b" />
+    <public type="drawable" name="gsensor_y" id="0x7f02000c" />
+    <public type="drawable" name="gsensor_z" id="0x7f02000d" />
+    <public type="drawable" name="home" id="0x7f02000e" />
+    <public type="drawable" name="menu" id="0x7f02000f" />
+    <public type="drawable" name="search" id="0x7f020011" />
+    <public type="drawable" name="unknown" id="0x7f020012" />
+    <public type="drawable" name="vldown" id="0x7f020013" />
+    <public type="drawable" name="vlup" id="0x7f020014" />
+    <public type="drawable" name="vumeter" id="0x7f020015" />
+    <public type="layout" name="alltest" id="0x7f030000" />
+    <public type="layout" name="audio_test" id="0x7f030001" />
+    <public type="layout" name="backlight" id="0x7f030002" />
+    <public type="layout" name="battery_info" id="0x7f030003" />
+    <public type="layout" name="ble_test" id="0x7f030004" />
+    <public type="layout" name="btlist" id="0x7f030005" />
+    <public type="layout" name="camera" id="0x7f030006" />
+    <public type="layout" name="gps" id="0x7f030007" />
+    <public type="layout" name="gsensor" id="0x7f030008" />
+    <public type="layout" name="headset" id="0x7f030009" />
+    <public type="layout" name="keycode" id="0x7f03000a" />
+    <public type="layout" name="keycode_grid" id="0x7f03000b" />
+    <public type="layout" name="lcd" id="0x7f03000c" />
+    <public type="layout" name="lsensor" id="0x7f03000d" />
+    <public type="layout" name="main" id="0x7f03000e" />
+    <public type="layout" name="main_grid" id="0x7f03000f" />
+    <public type="layout" name="memory" id="0x7f030010" />
+    <public type="layout" name="micrecorder" id="0x7f030011" />
+    <public type="layout" name="microphone" id="0x7f030012" />
+    <public type="layout" name="msensor" id="0x7f030013" />
+    <public type="layout" name="psensor" id="0x7f030014" />
+    <public type="layout" name="report" id="0x7f030015" />
+    <public type="layout" name="sdcard" id="0x7f030016" />
+    <public type="layout" name="signal" id="0x7f030017" />
+    <public type="layout" name="simcard" id="0x7f030018" />
+    <public type="layout" name="touchscreen_handwriting" id="0x7f030019" />
+    <public type="layout" name="vibrator" id="0x7f03001a" />
+    <public type="layout" name="wifi_test" id="0x7f03001b" />
+	<public type="layout" name="chargealertdialog" id="0x7f03001d" />
+    <public type="layout" name="ygps" id="0x7f03001c" />
+    <public type="raw" name="tada" id="0x7f040000" />
+    <public type="array" name="select_dialog_items" id="0x7f050000" />
+    <public type="color" name="recording_current_shot_text" id="0x7f060000" />
+    <public type="color" name="gray" id="0x7f060001" />
+    <public type="color" name="black" id="0x7f060002" />
+    <public type="color" name="Green" id="0x7f060003" />
+    <public type="color" name="Red" id="0x7f060004" />
+    <public type="color" name="Blue" id="0x7f060005" />
+    <public type="id" name="LinerLayout_comm_info" id="0x7f070000" />
+    <public type="id" name="LinerLayout_file_sys_info" id="0x7f070001" />
+    <public type="id" name="LinerLayout_partition_info" id="0x7f070002" />
+    <public type="id" name="comm_info" id="0x7f070003" />
+    <public type="id" name="file_sys_info" id="0x7f070004" />
+    <public type="id" name="partition_info" id="0x7f070005" />
+    <public type="id" name="all_bt_ok" id="0x7f070006" />
+    <public type="id" name="all_bt_failed" id="0x7f070007" />
+    <public type="id" name="audio_bt_ok" id="0x7f070008" />
+    <public type="id" name="audio_bt_failed" id="0x7f070009" />
+    <public type="id" name="LinearLayout" id="0x7f07000a" />
+    <public type="id" name="Display_lcd_on" id="0x7f07000b" />
+    <public type="id" name="Display_lcd_off" id="0x7f07000c" />
+    <public type="id" name="display_bt_ok" id="0x7f07000d" />
+    <public type="id" name="display_bt_failed" id="0x7f07000e" />
+    <public type="id" name="status" id="0x7f07000f" />
+    <public type="id" name="level" id="0x7f070010" />
+    <public type="id" name="scale" id="0x7f070011" />
+    <public type="id" name="health" id="0x7f070012" />
+    <public type="id" name="voltage" id="0x7f070013" />
+    <public type="id" name="temperature" id="0x7f070014" />
+    <public type="id" name="technology" id="0x7f070015" />
+    <public type="id" name="uptime" id="0x7f070016" />
+    <public type="id" name="battery_bt_ok" id="0x7f070017" />
+    <public type="id" name="battery_bt_failed" id="0x7f070018" />
+    <public type="id" name="ble_state_id" id="0x7f070019" />
+    <public type="id" name="ble_result_id" id="0x7f07001a" />
+    <public type="id" name="ble_con_id" id="0x7f07001b" />
+    <public type="id" name="ble_bt_ok" id="0x7f07001c" />
+    <public type="id" name="ble_bt_failed" id="0x7f07001d" />
+    <public type="id" name="camera_view" id="0x7f07001e" />
+    <public type="id" name="subcamera_take" id="0x7f07001f" />
+    <public type="id" name="camera_take" id="0x7f070020" />
+    <public type="id" name="camera_btok" id="0x7f070021" />
+    <public type="id" name="camera_btfailed" id="0x7f070022" />
+    <public type="id" name="gps_state_id" id="0x7f070023" />
+    <public type="id" name="gps_satellite_id" id="0x7f070024" />
+    <public type="id" name="gps_signal_id" id="0x7f070025" />
+    <public type="id" name="gps_result_id" id="0x7f070026" />
+    <public type="id" name="gps_time_id" id="0x7f070027" />
+    <public type="id" name="gps_bt_ok" id="0x7f070028" />
+    <public type="id" name="gps_bt_failed" id="0x7f070029" />
+    <public type="id" name="gsensor_iv_img" id="0x7f07002a" />
+    <public type="id" name="gsensor_tv_info" id="0x7f07002b" />
+    <public type="id" name="gsensor_bt_ok" id="0x7f07002c" />
+    <public type="id" name="gsensor_bt_failed" id="0x7f07002d" />
+    <public type="id" name="mic_bt_start" id="0x7f07002e" />
+    <public type="id" name="uvMeter" id="0x7f07002f" />
+    <public type="id" name="bt_ok" id="0x7f070030" />
+    <public type="id" name="bt_failed" id="0x7f070031" />
+    <public type="id" name="keycode_info" id="0x7f070032" />
+    <public type="id" name="keycode_grid" id="0x7f070033" />
+    <public type="id" name="keycode_bt_ok" id="0x7f070034" />
+    <public type="id" name="keycode_bt_failed" id="0x7f070035" />
+    <public type="id" name="imgview" id="0x7f070036" />
+    <public type="id" name="test_color_text1" id="0x7f070037" />
+    <public type="id" name="lsensor_accuracy" id="0x7f070038" />
+    <public type="id" name="lsensor_value" id="0x7f070039" />
+    <public type="id" name="lsensor_tips" id="0x7f07003a" />
+    <public type="id" name="lsensor_bt_ok" id="0x7f07003b" />
+    <public type="id" name="lsensor_bt_failed" id="0x7f07003c" />
+    <public type="id" name="main_bt_autotest" id="0x7f07003d" />
+    <public type="id" name="main_bt_alltest" id="0x7f07003e" />
+    <public type="id" name="main_grid" id="0x7f07003f" />
+    <public type="id" name="factor_button" id="0x7f070040" />
+    <public type="id" name="memory_bt_ok" id="0x7f070041" />
+    <public type="id" name="memory_bt_failed" id="0x7f070042" />
+    <public type="id" name="mic_tips" id="0x7f070043" />
+    <public type="id" name="mic_bt_ok" id="0x7f070044" />
+    <public type="id" name="mic_bt_failed" id="0x7f070045" />
+    <public type="id" name="speaker_bt_ok" id="0x7f070046" />
+    <public type="id" name="speaker_bt_failed" id="0x7f070047" />
+    <public type="id" name="mic_tv_status" id="0x7f070048" />
+    <public type="id" name="LinearLayout01" id="0x7f070049" />
+    <public type="id" name="OrientText" id="0x7f07004a" />
+    <public type="id" name="ivCompass" id="0x7f07004b" />
+    <public type="id" name="OrientValue" id="0x7f07004c" />
+    <public type="id" name="msensor_bt_ok" id="0x7f07004d" />
+    <public type="id" name="msensor_bt_failed" id="0x7f07004e" />
+    <public type="id" name="proximity" id="0x7f07004f" />
+    <public type="id" name="tips" id="0x7f070050" />
+    <public type="id" name="psensor_bt_ok" id="0x7f070051" />
+    <public type="id" name="psensor_bt_failed" id="0x7f070052" />
+    <public type="id" name="report_success" id="0x7f070053" />
+    <public type="id" name="report_failed" id="0x7f070054" />
+    <public type="id" name="report_default" id="0x7f070055" />
+    <public type="id" name="sdcard_info" id="0x7f070056" />
+    <public type="id" name="sdcard_bt_ok" id="0x7f070057" />
+    <public type="id" name="sdcard_bt_failed" id="0x7f070058" />
+    <public type="id" name="signal_bt_ok" id="0x7f070059" />
+    <public type="id" name="signal_bt_failed" id="0x7f07005a" />
+    <public type="id" name="simcard_sim1_info" id="0x7f07005b" />
+    <public type="id" name="simcard_sim2_info" id="0x7f07005c" />
+    <public type="id" name="simcard_bt_ok" id="0x7f07005d" />
+    <public type="id" name="simcard_bt_failed" id="0x7f07005e" />
+    <public type="id" name="touchscreen_bt_ok" id="0x7f07005f" />
+    <public type="id" name="touchscreen_bt_failed" id="0x7f070060" />
+    <public type="id" name="vibrator_bt_ok" id="0x7f070061" />
+    <public type="id" name="vibrator_bt_failed" id="0x7f070062" />
+    <public type="id" name="wifi_state_id" id="0x7f070063" />
+    <public type="id" name="wifi_result_id" id="0x7f070064" />
+    <public type="id" name="wifi_con_id" id="0x7f070065" />
+    <public type="id" name="wifi_resinfo_id" id="0x7f070066" />
+    <public type="id" name="wifi_bt_ok" id="0x7f070067" />
+    <public type="id" name="wifi_bt_failed" id="0x7f070068" />
+    <public type="id" name="ygps_bt_ok" id="0x7f070069" />
+    <public type="id" name="ygps_bt_failed" id="0x7f07006a" />
+    <public type="id" name="electronic" id="0x7f07006b" />
+    <public type="id" name="charger_type" id="0x7f07006c" />
+    <public type="id" name="charger_result" id="0x7f07006d" />
+    <public type="string" name="hello" id="0x7f080000" />
+    <public type="string" name="app_name" id="0x7f080001" />
+    <public type="string" name="Settings" id="0x7f080002" />
+    <public type="string" name="AutoTest" id="0x7f080003" />
+    <public type="string" name="AllTest" id="0x7f080004" />
+    <public type="string" name="Packageerror" id="0x7f080005" />
+    <public type="string" name="PackageIerror" id="0x7f080006" />
+    <public type="string" name="BatteryLog" id="0x7f080007" />
+    <public type="string" name="battery_info_status_label" id="0x7f080008" />
+    <public type="string" name="battery_info_scale_label" id="0x7f080009" />
+    <public type="string" name="battery_info_level_label" id="0x7f08000a" />
+    <public type="string" name="battery_info_health_label" id="0x7f08000b" />
+    <public type="string" name="battery_info_technology_label" id="0x7f08000c" />
+    <public type="string" name="battery_info_voltage_label" id="0x7f08000d" />
+    <public type="string" name="battery_info_voltage_units" id="0x7f08000e" />
+    <public type="string" name="battery_info_temperature_label" id="0x7f08000f" />
+    <public type="string" name="battery_info_temperature_units" id="0x7f080010" />
+    <public type="string" name="battery_info_uptime" id="0x7f080011" />
+    <public type="string" name="battery_info_awake_battery" id="0x7f080012" />
+    <public type="string" name="battery_info_awake_plugged" id="0x7f080013" />
+    <public type="string" name="battery_info_screen_on" id="0x7f080014" />
+    <public type="string" name="battery_info_status_unknown" id="0x7f080015" />
+    <public type="string" name="battery_info_status_charging" id="0x7f080016" />
+    <public type="string" name="battery_info_status_charging_ac" id="0x7f080017" />
+    <public type="string" name="battery_info_status_charging_usb" id="0x7f080018" />
+    <public type="string" name="battery_info_status_discharging" id="0x7f080019" />
+    <public type="string" name="battery_info_status_not_charging" id="0x7f08001a" />
+    <public type="string" name="battery_info_status_full" id="0x7f08001b" />
+    <public type="string" name="battery_info_health_unknown" id="0x7f08001c" />
+    <public type="string" name="battery_info_health_good" id="0x7f08001d" />
+    <public type="string" name="battery_info_health_overheat" id="0x7f08001e" />
+    <public type="string" name="battery_info_health_dead" id="0x7f08001f" />
+    <public type="string" name="battery_info_health_over_voltage" id="0x7f080020" />
+    <public type="string" name="battery_info_health_unspecified_failure" id="0x7f080021" />
+    <public type="string" name="TouchScreen" id="0x7f080022" />
+    <public type="string" name="PointTest" id="0x7f080023" />
+    <public type="string" name="LineTest" id="0x7f080024" />
+    <public type="string" name="Result" id="0x7f080025" />
+    <public type="string" name="Offset" id="0x7f080026" />
+    <public type="string" name="TouchComplete" id="0x7f080027" />
+    <public type="string" name="Error" id="0x7f080028" />
+    <public type="string" name="DrawError" id="0x7f080029" />
+    <public type="string" name="Again" id="0x7f08002a" />
+    <public type="string" name="GoOn" id="0x7f08002b" />
+    <public type="string" name="BackLight" id="0x7f08002c" />
+    <public type="string" name="Display_lcd_Text" id="0x7f08002d" />
+    <public type="string" name="Memory" id="0x7f08002e" />
+    <public type="string" name="Audio" id="0x7f08002f" />
+    <public type="string" name="Camera" id="0x7f080030" />
+    <public type="string" name="Camera_takepic" id="0x7f080031" />
+    <public type="string" name="Camera_notfound" id="0x7f080032" />
+    <public type="string" name="WiFi" id="0x7f080033" />
+    <public type="string" name="WiFi_success" id="0x7f080034" />
+    <public type="string" name="WiFi_failed" id="0x7f080035" />
+    <public type="string" name="WiFi_scaning" id="0x7f080036" />
+    <public type="string" name="WiFi_info_closeing" id="0x7f080037" />
+    <public type="string" name="WiFi_info_close" id="0x7f080038" />
+    <public type="string" name="WiFi_info_opening" id="0x7f080039" />
+    <public type="string" name="WiFi_info_open" id="0x7f08003a" />
+    <public type="string" name="WiFi_info_unknown" id="0x7f08003b" />
+    <public type="string" name="WiFi_connecting" id="0x7f08003c" />
+    <public type="string" name="WiFi_notfound_openap" id="0x7f08003d" />
+    <public type="string" name="HeadSet" id="0x7f08003e" />
+    <public type="string" name="HeadSet_plugged" id="0x7f08003f" />
+    <public type="string" name="HeadSet_unplugged" id="0x7f080040" />
+    <public type="string" name="HeadSet_tips" id="0x7f080041" />
+    <public type="string" name="HeadSet_hook" id="0x7f080042" />
+    <public type="string" name="HeadSet_hook_message" id="0x7f080043" />
+    <public type="string" name="GPS" id="0x7f080044" />
+    <public type="string" name="GPS_open" id="0x7f080045" />
+    <public type="string" name="GPS_connect" id="0x7f080046" />
+    <public type="string" name="GPS_normal" id="0x7f080047" />
+    <public type="string" name="GPS_satelliteNum" id="0x7f080048" />
+    <public type="string" name="GPS_Signal" id="0x7f080049" />
+    <public type="string" name="GPS_Success" id="0x7f08004a" />
+    <public type="string" name="GPS_time" id="0x7f08004b" />
+    <public type="string" name="Sensor" id="0x7f08004c" />
+    <public type="string" name="Vibrator" id="0x7f08004d" />
+    <public type="string" name="Signal" id="0x7f08004e" />
+    <public type="string" name="YGPS" id="0x7f08004f" />
+    <public type="string" name="AGPS" id="0x7f080050" />
+    <public type="string" name="Microphone" id="0x7f080051" />
+    <public type="string" name="Mic_start" id="0x7f080052" />
+    <public type="string" name="Mic_stop" id="0x7f080053" />
+    <public type="string" name="Mic_play" id="0x7f080054" />
+    <public type="string" name="Mic_operation" id="0x7f080055" />
+    <public type="string" name="Speaker_operation" id="0x7f080056" />
+    <public type="string" name="Bluetooth" id="0x7f080057" />
+    <public type="string" name="Bluetooth_open" id="0x7f080058" />
+    <public type="string" name="Bluetooth_opening" id="0x7f080059" />
+    <public type="string" name="Bluetooth_scaning" id="0x7f08005a" />
+    <public type="string" name="Bluetooth_mac" id="0x7f08005b" />
+    <public type="string" name="Bluetooth_scan_success" id="0x7f08005c" />
+    <public type="string" name="GSensor" id="0x7f08005d" />
+    <public type="string" name="GSensor_info" id="0x7f08005e" />
+    <public type="string" name="MSensor" id="0x7f08005f" />
+    <public type="string" name="MSensor_default_text" id="0x7f080060" />
+    <public type="string" name="MSensor_North" id="0x7f080061" />
+    <public type="string" name="MSensor_East" id="0x7f080062" />
+    <public type="string" name="MSensor_South" id="0x7f080063" />
+    <public type="string" name="MSensor_West" id="0x7f080064" />
+    <public type="string" name="MSensor_north_east" id="0x7f080065" />
+    <public type="string" name="MSensor_south_east" id="0x7f080066" />
+    <public type="string" name="MSensor_south_west" id="0x7f080067" />
+    <public type="string" name="MSensor_north_west" id="0x7f080068" />
+    <public type="string" name="LSensor" id="0x7f080069" />
+    <public type="string" name="LSensor_default_text" id="0x7f08006a" />
+    <public type="string" name="LSensor_accuracy" id="0x7f08006b" />
+    <public type="string" name="LSensor_value" id="0x7f08006c" />
+    <public type="string" name="LSensor_tips" id="0x7f08006d" />
+    <public type="string" name="LCD_increase" id="0x7f08006e" />
+    <public type="string" name="LCD_weaken" id="0x7f08006f" />
+    <public type="string" name="Success" id="0x7f080070" />
+    <public type="string" name="Failed" id="0x7f080071" />
+    <public type="string" name="psensor_hello" id="0x7f080072" />
+    <public type="string" name="psensor_app_name" id="0x7f080073" />
+    <public type="string" name="proximity" id="0x7f080074" />
+    <public type="string" name="tips" id="0x7f080075" />
+    <public type="string" name="Earphone" id="0x7f080076" />
+    <public type="string" name="battery_name" id="0x7f080077" />
+    <public type="string" name="touchscreen_name" id="0x7f080078" />
+    <public type="string" name="speaker_name" id="0x7f080079" />
+    <public type="string" name="wifi_name" id="0x7f08007a" />
+    <public type="string" name="bluetooth_name" id="0x7f08007b" />
+    <public type="string" name="headset_name" id="0x7f08007c" />
+    <public type="string" name="earphone_name" id="0x7f08007d" />
+    <public type="string" name="gps_name" id="0x7f08007e" />
+    <public type="string" name="vibrator_name" id="0x7f08007f" />
+    <public type="string" name="telephone_name" id="0x7f080080" />
+    <public type="string" name="backlight_name" id="0x7f080081" />
+    <public type="string" name="memory_name" id="0x7f080082" />
+    <public type="string" name="gsensor_name" id="0x7f080083" />
+    <public type="string" name="msensor_name" id="0x7f080084" />
+    <public type="string" name="lsensor_name" id="0x7f080085" />
+    <public type="string" name="psensor_name" id="0x7f080086" />
+    <public type="string" name="camera_name" id="0x7f080087" />
+    <public type="string" name="sdcard_name" id="0x7f080088" />
+    <public type="string" name="fmradio_name" id="0x7f080089" />
+    <public type="string" name="KeyCode_name" id="0x7f08008a" />
+    <public type="string" name="lcd_name" id="0x7f08008b" />
+    <public type="string" name="sim_name" id="0x7f08008c" />
+    <public type="string" name="microphone_name" id="0x7f08008d" />
+    <public type="string" name="subcamera_name" id="0x7f08008e" />
+    <public type="string" name="headsethook_name" id="0x7f08008f" />
+    <public type="string" name="sdcard" id="0x7f080090" />
+    <public type="string" name="sdcard_tips_success" id="0x7f080091" />
+    <public type="string" name="sdcard_tips_failed" id="0x7f080092" />
+    <public type="string" name="sdcard_totalsize" id="0x7f080093" />
+    <public type="string" name="sdcard_freesize" id="0x7f080094" />
+    <public type="string" name="FMRadio" id="0x7f080095" />
+    <public type="string" name="FMRadio_notice" id="0x7f080096" />
+    <public type="string" name="KeyCode" id="0x7f080097" />
+    <public type="string" name="KeyCode_info" id="0x7f080098" />
+    <public type="string" name="LCD" id="0x7f080099" />
+    <public type="string" name="SimCard" id="0x7f08009a" />
+    <public type="string" name="sim1_info_ok" id="0x7f08009b" />
+    <public type="string" name="sim1_info_failed" id="0x7f08009c" />
+    <public type="string" name="sim2_info_ok" id="0x7f08009d" />
+    <public type="string" name="sim2_info_failed" id="0x7f08009e" />
+    <public type="string" name="sim_info_ok" id="0x7f08009f" />
+    <public type="string" name="sim_info_failed" id="0x7f0800a0" />
+    <public type="string" name="Report" id="0x7f0800a1" />
+    <public type="string" name="report_ok" id="0x7f0800a2" />
+    <public type="string" name="report_failed" id="0x7f0800a3" />
+    <public type="string" name="report_notest" id="0x7f0800a4" />
+    <public type="string" name="menu_exit" id="0x7f0800a5" />
+    <public type="string" name="charge_message" id="0x7f0800a6" />
+    <public type="style" name="info_label" id="0x7f090000" />
+    <public type="style" name="info_value" id="0x7f090001" />
+    <public type="style" name="info_layout" id="0x7f090002" />
+    <public type="style" name="entry_layout" id="0x7f090003" />
+    <public type="style" name="TextAppearance" id="0x7f090004" />
+    <public type="style" name="TextAppearance.info_label" id="0x7f090005" />
+    <public type="style" name="TextAppearance.info_small" id="0x7f090006" />
+    <public type="style" name="TextAppearance.info_value" id="0x7f090007" />
+</resources>
\ No newline at end of file
Index: packages/apps/FactoryMode/res/drawable/btn_default.xml
===================================================================
--- packages/apps/FactoryMode/res/drawable/btn_default.xml	(revision 0)
+++ packages/apps/FactoryMode/res/drawable/btn_default.xml	(revision 166460)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_window_focused="false" android:state_enabled="true" android:drawable="@drawable/btn_default_normal" />
+    <item android:state_window_focused="false" android:state_enabled="false" android:drawable="@drawable/btn_default_normal_disable" />
+    <item android:state_pressed="true" android:drawable="@drawable/btn_default_pressed" />
+    <item android:state_focused="true" android:state_enabled="true" android:drawable="@drawable/btn_default_selected" />
+    <item android:state_enabled="true" android:drawable="@drawable/btn_default_normal" />
+    <item android:state_focused="true" android:drawable="@drawable/btn_default_normal_disable_focused" />
+    <item android:drawable="@drawable/btn_default_normal_disable" />
+</selector>
Index: packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/headset.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/headset.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/headset.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/headset.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/headset.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/vlup.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/vlup.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/vlup.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/vlup.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/vlup.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/camera.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/camera.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/camera.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/camera.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/camera.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/home.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/home.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/home.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/home.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/home.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/error.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/error.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/error.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/error.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/error.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/unknown.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/unknown.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/unknown.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/unknown.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/unknown.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/back.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/back.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/back.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/back.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/back.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/menu.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/menu.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/menu.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/menu.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/menu.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/search.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/search.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/search.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/search.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/search.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/compass.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/compass.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/compass.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/compass.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/compass.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-hdpi/vldown.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-hdpi/vldown.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-hdpi/vldown.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-hdpi/vldown.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-hdpi/vldown.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_top.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_top.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-mdpi/arrow_top.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-mdpi/arrow_top.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-mdpi/arrow_top.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-mdpi/headset.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-mdpi/headset.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-mdpi/headset.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-mdpi/headset.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-mdpi/headset.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_bottom.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_bottom.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-mdpi/arrow_bottom.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-mdpi/arrow_bottom.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-mdpi/arrow_bottom.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_left.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_left.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-mdpi/arrow_left.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-mdpi/arrow_left.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-mdpi/arrow_left.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_right.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-mdpi/arrow_right.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-mdpi/arrow_right.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-mdpi/arrow_right.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-mdpi/arrow_right.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png
===================================================================
--- packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png	(revision 0)
+++ packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/raw/tada.ogg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/FactoryMode/res/raw/tada.ogg
===================================================================
--- packages/apps/FactoryMode/res/raw/tada.ogg	(revision 0)
+++ packages/apps/FactoryMode/res/raw/tada.ogg	(revision 166460)

Property changes on: packages/apps/FactoryMode/res/raw/tada.ogg
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/FactoryMode/res/layout/hall.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/hall.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/hall.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="22.0dip" android:textColor="@color/Green" android:id="@id/hall_tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Hall_tips" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/hall_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/hall_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/touchscreen_handwriting.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/touchscreen_handwriting.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/touchscreen_handwriting.xml	(revision 166460)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+    <RelativeLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_gravity="center_horizontal"
+        android:layout_weight="0.5">
+
+
+
+        <com.mediatek.factorymode.TouchView
+            android:id="@+id/toucheview"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_centerHorizontal="true" />
+
+    </RelativeLayout>
+
+   <LinearLayout
+       android:layout_width="fill_parent"
+       android:layout_height="wrap_content"
+       android:orientation="horizontal" >
+
+        <Button
+            android:id="@+id/touchscreen_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.5"
+            android:text="@string/Success"
+            android:textSize="20.0dip" />
+
+
+
+        <Button
+            android:id="@+id/touchscreen_bt_failed"
+            android:layout_width="157dp"
+            android:layout_height="wrap_content"
+            android:text="@string/Failed"
+            android:textSize="20.0dip" />
+
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/simcard.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/simcard.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/simcard.xml	(revision 166460)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:id="@id/simcard_sim1_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <TextView android:textSize="20.0dip" android:id="@id/simcard_sim2_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/simcard_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/simcard_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/touchscreen_pointer.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/touchscreen_pointer.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/touchscreen_pointer.xml	(revision 166460)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" 
+                android:id="@id/pointer_bt_ok" 
+                android:visibility="gone"
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/pointer_bt_failed" 
+                android:visibility="gone"
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/ygps.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/ygps.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/ygps.xml	(revision 166460)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:id="@id/ygps_bt_ok" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.5" />
+    <Button android:id="@id/ygps_bt_failed" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.5" />
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/keycode.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/keycode.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/keycode.xml	(revision 166460)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:textColor="@color/Green" android:layout_gravity="center_horizontal" android:id="@id/keycode_info" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/KeyCode_info" />
+    <GridView android:gravity="center" android:id="@id/keycode_grid" android:padding="1.0dip" android:layout_width="wrap_content" android:layout_height="wrap_content" android:horizontalSpacing="1.0dip" android:verticalSpacing="1.0dip" android:stretchMode="columnWidth" android:columnWidth="50.0dip" android:numColumns="auto_fit" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/keycode_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/keycode_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/main.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/main.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/main.xml	(revision 166460)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent"
+	xmlns:android="http://schemas.android.com/apk/res/android">
+	<Button 
+		android:textSize="15.0dip" 
+		android:id="@id/main_bt_autotest"
+		android:layout_width="fill_parent"
+		android:layout_height="wrap_content"
+		android:text="@string/AutoTest"
+		android:layout_weight="0.5" />
+		
+	<GridView
+		android:id="@id/main_grid"
+		android:layout_width="fill_parent"
+		android:layout_height="wrap_content"
+		android:columnWidth="101.0dip"
+		android:gravity="center"
+		android:horizontalSpacing="0.2dip"
+		android:numColumns="auto_fit"
+		android:padding="0.0dip"
+		android:stretchMode="columnWidth"
+		android:verticalSpacing="0.0dip" />
+		
+	<Button 
+		android:textSize="14.0dip" 
+		android:id="@+id/main_bt_report" 
+		android:layout_width="fill_parent" 
+		android:layout_height="wrap_content" 
+		android:text="@string/SingleTestReport" 
+		android:layout_weight="0.8" />
+		
+	<Button 
+		android:textSize="14.0dip" 
+		android:id="@+id/main_auto_report" 
+		android:layout_width="fill_parent" 
+		android:layout_height="wrap_content" 
+		android:text="@string/AutoTestReport" 
+		android:layout_weight="0.2" />
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/battery_info.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/battery_info.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/battery_info.xml	(revision 166460)
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout style="@style/info_layout"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_status_label" style="@style/info_label" />
+        <TextView android:id="@id/status" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_level_label" style="@style/info_label" />
+        <TextView android:id="@id/level" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout" android:visibility="gone">
+        <TextView android:text="@string/battery_info_scale_label" style="@style/info_label" />
+        <TextView android:id="@id/scale" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_health_label" style="@style/info_label" />
+        <TextView android:id="@id/health" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_voltage_label" style="@style/info_label" />
+        <TextView android:id="@id/voltage" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_temperature_label" style="@style/info_label" />
+        <TextView android:id="@id/temperature" style="@style/info_value" />
+    </LinearLayout>
+
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_electronic" style="@style/info_label" />
+        <TextView android:id="@id/electronic" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_type" style="@style/info_label" />
+        <TextView android:id="@id/charger_type" style="@style/info_value" />
+    </LinearLayout>
+
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_technology_label" style="@style/info_label" />
+        <TextView android:id="@id/technology" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout" android:visibility="gone">
+        <TextView android:text="@string/battery_info_uptime" style="@style/info_label" />
+        <TextView android:id="@id/uptime" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_result" style="@style/info_label" />
+        <TextView android:id="@id/charger_result" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/battery_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/battery_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/flashlight.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/flashlight.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/flashlight.xml	(revision 166460)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+
+    <TextView
+        android:id="@id/flashlight_tips"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/flashlight_tips"
+        android:textColor="@color/Green"
+        android:textSize="22.0dip" />
+
+    <TextureView
+        android:id="@+id/preview_content"
+        android:layout_width="match_parent"
+        android:layout_height="0dip" />
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:orientation="vertical" >
+
+        <Button
+            android:id="@id/flashlight_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.8"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button
+            android:id="@id/flashlight_bt_failed"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.2"
+            android:text="@string/Failed"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/FactoryMode/res/layout/version.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/version.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/version.xml	(revision 166460)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="300.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="14.0dip" android:id="@+id/android_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/build_number" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/imei1" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/imei2" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/barcode" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <TextView android:textSize="14.0dip" android:id="@+id/pncode" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/cft_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <TextView android:textSize="14.0dip" android:id="@+id/cft2g3g_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/lte_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+	    <TextView android:textSize="14.0dip" android:id="@+id/ant_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+	    <!--<TextView android:textSize="14.0dip" android:id="@+id/mmi_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+		<!--<TextView android:textSize="14.0dip" android:id="@+id/wifi_ant_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+       <!-- <TextView android:textSize="14.0dip" android:id="@+id/wifi_address" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/BT_address" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/lte_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/gsm_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+			<TextView android:textSize="14.0dip" android:id="@+id/td_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <TextView android:textSize="14.0dip" android:id="@+id/linux_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/modem_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/tp_firmware_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@+id/version_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@+id/version_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/tprawdata.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/tprawdata.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/tprawdata.xml	(revision 166460)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+    <TextView 
+        android:id="@+tprawdata/info"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        
+        />
+	<LinearLayout 
+	    android:layout_width="fill_parent"
+	    android:layout_height="wrap_content"
+	    android:orientation="horizontal"
+	    >
+	    <Button 
+	        android:id="@+tprawdata/ok"
+	        android:layout_width="fill_parent"
+	        android:layout_height="wrap_content"
+	        android:layout_weight="1"
+	        android:text="@string/Success"
+	        />
+	    <Button 
+	        android:id="@+tprawdata/fail"
+	        android:layout_width="fill_parent"
+	        android:layout_height="wrap_content"
+	        android:layout_weight="1"
+	        android:text="@string/Failed"
+	        />
+	</LinearLayout>
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/FactoryMode/res/layout/keycode_grid.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/keycode_grid.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/keycode_grid.xml	(revision 166460)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ImageView android:textSize="19.0dip" android:id="@id/imgview" android:background="@drawable/btn_default" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android" />
Index: packages/apps/FactoryMode/res/layout/camera.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/camera.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/camera.xml	(revision 166460)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" 
+                android:id="@id/camera_btok" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/camera_btfailed" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/vibrator.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/vibrator.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/vibrator.xml	(revision 166460)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:textSize="25.0dip" android:id="@id/vibrator_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+    <Button android:textSize="25.0dip" android:id="@id/vibrator_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/speaker.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/speaker.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/speaker.xml	(revision 166460)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical"
+     android:layout_width="fill_parent" 
+     android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:id="@id/speaker_bt_ok" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent" 
+        android:text="@string/Success" 
+        android:textSize="25.0dip"
+        android:layout_weight="0.3" />
+    <Button android:id="@id/speaker_bt_failed" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent" 
+        android:text="@string/Failed" 
+        android:textSize="25.0dip"
+        android:layout_weight="0.7"/>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/famain.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/famain.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/famain.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content">
+        <Button android:textSize="30.0dip" android:id="@id/main_bt_autotest" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/AutoTest" android:layout_weight="0.5" />
+        <Button android:textSize="30.0dip" android:id="@id/main_bt_alltest" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/AllTest" android:layout_weight="0.5" />
+    </LinearLayout>
+    <GridView android:gravity="center" android:id="@id/main_grid" android:padding="1.0dip" android:layout_width="fill_parent" android:layout_height="fill_parent" android:horizontalSpacing="1.0dip" android:verticalSpacing="1.0dip" android:stretchMode="columnWidth" android:columnWidth="101.0dip" android:numColumns="auto_fit" />
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/wifi_test.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/wifi_test.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/wifi_test.xml	(revision 166460)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="250.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="20.0dip" android:id="@id/wifi_state_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/wifi_result_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/wifi_con_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/wifi_resinfo_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/wifi_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/wifi_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/micrecorder.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/micrecorder.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/micrecorder.xml	(revision 166460)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal" >
+
+        <Button
+            android:id="@id/mic_bt_start"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.5"
+            android:text="@string/Mic_start"
+            android:textSize="20.0dip" />
+    </LinearLayout>
+
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal" >
+
+        <com.mediatek.factorymode.VUMeter
+            android:id="@id/uvMeter"
+            android:layout_width="150.0px"
+            android:layout_height="60.0px"
+            android:layout_centerInParent="true" />
+    </RelativeLayout>
+
+    <TextView
+        android:id="@id/mic_tips"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:text="@string/Mic_operation"
+        android:textColor="@color/Green"
+        android:textSize="20.0dip" />
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:orientation="vertical" >
+
+        <Button
+            android:id="@id/mic_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.8"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button
+            android:id="@id/mic_bt_failed"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.2"
+            android:text="@string/Failed"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+
+
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/famain_grid.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/famain_grid.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/famain_grid.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@id/factor_button"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@drawable/btn_default"
+    android:textColor="@color/black"
+    android:textSize="19.0dip" />
+
Index: packages/apps/FactoryMode/res/layout/sdcard.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/sdcard.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/sdcard.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="22.0dip" android:id="@id/sdcard_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/sdcard_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/sdcard_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/btlist.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/btlist.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/btlist.xml	(revision 166460)
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
++++
+    <TextView
+        android:id="@+id/bt_state_id"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_weight="0.32"
+        android:textSize="20dip" />
++
+    <ListView
+        android:id="@+id/listView1"
+        android:layout_width="fill_parent"
+        android:layout_height="200dp"
+        android:layout_weight="0.65" >
+
+    </ListView>
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical" >
+        <Button
+            android:id="@+id/bttest_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="91dp"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+        <Button
+            android:id="@+id/bttest_failed"
+            android:layout_width="fill_parent"
+            android:layout_height="77dp"
+            android:text="@string/Failed"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/check_flag.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/check_flag.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/check_flag.xml	(revision 166460)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="300.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/android_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/build_number" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <TextView android:textSize="14.0dip" android:id="@+id/imei1" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/imei2" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/barcode" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <TextView android:textSize="14.0dip" android:id="@+id/pncode" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/cft_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <TextView android:textSize="14.0dip" android:id="@+id/cft2g3g_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/lte_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+	    <!--<TextView android:textSize="14.0dip" android:id="@+id/ant_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+	    <TextView android:textSize="14.0dip" android:id="@+id/mmi_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+		<TextView android:textSize="14.0dip" android:id="@+id/qc_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+		<!--<TextView android:textSize="14.0dip" android:id="@+id/testnv_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+		<!--<TextView android:textSize="14.0dip" android:id="@+id/wifi_ant_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+       <!-- <TextView android:textSize="14.0dip" android:id="@+id/wifi_address" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/BT_address" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/lte_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/gsm_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+			<TextView android:textSize="14.0dip" android:id="@+id/td_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+            <!--<TextView android:textSize="14.0dip" android:id="@+id/linux_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/modem_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/tp_firmware_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+        </LinearLayout>
+    </ScrollView>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/lsensorcali.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/lsensorcali.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/lsensorcali.xml	(revision 166460)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" 
+    android:layout_width="fill_parent" 
+    android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical" >
+        <Button
+            android:id="@+id/lsensor_cali_start"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.5"
+            android:text="@string/lsensor_cali_start"
+            android:textSize="20.0dip" />
+        <TextView
+            android:id="@+id/lsensor_cali_showCaliVal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:layout_weight="0.5"
+            android:textSize="20.0dip" />
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:orientation="vertical" >
+        <Button
+            android:id="@+id/lsensor_cali_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.8"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button
+            android:id="@+id/lsensor_cali_failed"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.2"
+            android:text="@string/Failed"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/gsensor.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/gsensor.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/gsensor.xml	(revision 166460)
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" 
+        android:id="@id/gsensor_tv_info" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" 
+	android:text="@string/gsener_hint"
+	android:textColor="#000"/>
+    <TextView android:textSize="20.0dip" 
+        android:id="@+id/gsensor_xyz" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+    <RelativeLayout
+        android:id="@+id/view_container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="30dp"
+        android:gravity="center" >
+        <ImageView
+            android:id="@+id/arrow_view"
+            android:layout_width="100dp"
+            android:layout_height="100dp"
+            android:src="@drawable/arrow_bottom"
+             />
+    </RelativeLayout>
+    <LinearLayout android:orientation="vertical" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent">
+
+        <Button
+            android:id="@id/gsensor_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.57"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button android:textSize="25.0dip" 
+            android:id="@id/gsensor_bt_failed" 
+            android:layout_width="fill_parent" 
+            android:layout_height="wrap_content" 
+            android:text="@string/Failed" 
+            android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/fmradio.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/fmradio.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/fmradio.xml	(revision 166460)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" 
+                android:id="@id/fm_bt_ok" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/fm_bt_failed" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/lsensor.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/lsensor.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/lsensor.xml	(revision 166460)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:id="@id/lsensor_accuracy" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/sener_hint" />
+    <TextView android:textSize="20.0dip" android:id="@id/lsensor_value" android:layout_width="wrap_content" android:layout_height="wrap_content"  />
+    <!--<TextView android:textSize="22.0dip" android:textColor="@color/Green" android:id="@id/lsensor_tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/LSensor_tips" />-->
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/lsensor_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/lsensor_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/msensor.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/msensor.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/msensor.xml	(revision 166460)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" 
+        android:id="@id/msensor_tv_info" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+     <TextView android:textSize="20.0dip" 
+        android:id="@+id/msensor_xyz" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent">
+
+        <Button
+            android:id="@id/msensor_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.57"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button android:textSize="25.0dip" 
+            android:id="@id/msensor_bt_failed" 
+            android:layout_width="fill_parent" 
+            android:layout_height="wrap_content" 
+            android:text="@string/Failed" 
+            android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/backlight.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/backlight.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/backlight.xml	(revision 166460)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="horizontal" android:id="@id/LinearLayout" android:layout_width="fill_parent" android:layout_height="wrap_content">
+        <Button android:id="@id/Display_lcd_on" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/LCD_increase" android:layout_weight="0.5" />
+        <Button android:id="@id/Display_lcd_off" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/LCD_weaken" android:layout_weight="0.5" />
+    </LinearLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/psensor.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/psensor.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/psensor.xml	(revision 166460)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical"  android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:textColor="#ff000000" android:id="@id/proximity" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginLeft="20.0dip" android:layout_marginTop="30.0dip" android:layout_marginRight="20.0dip" android:text="@string/proximity" />
+    <TextView android:textSize="15.0dip" android:textColor="@color/Blue" android:id="@id/tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginLeft="20.0dip" android:layout_marginTop="15.0dip" android:layout_marginRight="20.0dip" android:text="@string/tips" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip"  android:id="@id/psensor_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_marginLeft="10.0dip" android:layout_marginRight="10.0dip" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:textColor="#ff000000" android:id="@id/psensor_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_marginLeft="10.0dip" android:layout_marginRight="10.0dip" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/main_grid.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/main_grid.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/main_grid.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@id/factor_button"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@drawable/btn_default"
+    android:textColor="@color/black"
+    android:textSize="15.0dip" />
+
Index: packages/apps/FactoryMode/res/layout/gps.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/gps.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/gps.xml	(revision 166460)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="250.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:id="@id/gps_state_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:id="@id/gps_satellite_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:id="@id/gps_signal_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:id="@id/gps_result_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <Chronometer android:id="@id/gps_time_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/gps_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/gps_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/touchscreen_line.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/touchscreen_line.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/touchscreen_line.xml	(revision 166460)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+  
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/faversion.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/faversion.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/faversion.xml	(revision 166460)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="300.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="14.0dip" android:id="@id/android_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@id/build_number" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@id/imei" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@id/barcode" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@id/bt_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@id/ft_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@id/linux_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@id/platform_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/version_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/version_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/audio_test.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/audio_test.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/audio_test.xml	(revision 166460)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:textSize="25.0dip" android:id="@id/audio_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+    <Button android:textSize="25.0dip" android:id="@id/audio_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/rfcali.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/rfcali.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/rfcali.xml	(revision 166460)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="300.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="15.0dip" android:id="@id/rf_cali" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/rf_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/rf_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/ble_test.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/ble_test.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/ble_test.xml	(revision 166460)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="250.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="20.0dip" android:id="@id/ble_state_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/ble_result_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="20.0dip" android:id="@id/ble_con_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/ble_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.5" />
+        <Button android:textSize="25.0dip" android:id="@id/ble_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/chargealertdialog.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/chargealertdialog.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/chargealertdialog.xml	(revision 166460)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="wrap_content" android:layout_height="wrap_content"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView 
+      android:textSize="26.0dip" 
+      android:textColor="@color/Red" 
+      android:layout_gravity="center_vertical"
+      android:gravity="center"
+      android:id="@id/chargemessage" 
+      android:layout_width="300dip" 
+      android:layout_height="100dip" 
+      android:text="@string/charge_message" />
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/lcd.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/lcd.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/lcd.xml	(revision 166460)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="#ff383838"
+    android:gravity="center"
+    android:orientation="vertical" >
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_weight="1.0"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@id/test_color_text1"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_weight="1.0"
+            android:background="#ffff0000" />
+        
+        <Button android:textSize="25.0dip" 
+                android:id="@id/lcd_bt_ok" 
+                android:visibility="gone"
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/lcd_bt_failed" 
+                android:visibility="gone"
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/microphone.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/microphone.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/microphone.xml	(revision 166460)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" 
+    android:layout_width="fill_parent" 
+    android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" 
+        android:id="@id/mic_tv_status" 
+        android:layout_width="fill_parent" 
+        android:layout_height="wrap_content" />
+    <Button android:id="@id/mic_bt_ok" 
+        android:textSize="30.0dip" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent" 
+        android:text="@string/Success" 
+        android:layout_weight="0.3" />
+    <Button android:id="@id/mic_bt_failed"
+        android:textSize="30.0dip" 
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent" 
+        android:text="@string/Failed"
+        android:layout_weight="0.7" />
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/led.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/led.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/led.xml	(revision 166460)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="horizontal" android:id="@id/LinearLayout" android:layout_width="fill_parent" android:layout_height="wrap_content">
+        <Button android:id="@id/Display_led_red" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/led_red" android:layout_weight="0.3" />
+        <Button android:id="@id/Display_led_green" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/led_green" android:layout_weight="0.3" />
+		<Button android:id="@id/Display_led_blue" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/led_blue" android:layout_weight="0.4" />
+    </LinearLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/memory.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/memory.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/memory.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:id="@id/comm_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/memory_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/memory_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/alltest.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/alltest.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/alltest.xml	(revision 166460)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView android:layout_width="fill_parent" android:layout_height="wrap_content"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+      xmlns:android="http://schemas.android.com/apk/res/android">
+        <LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content">
+            <Button android:id="@id/all_bt_ok" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.5" />
+            <Button android:id="@id/all_bt_failed" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.5" />
+        </LinearLayout>
+    </LinearLayout>
+</ScrollView>
Index: packages/apps/FactoryMode/res/layout/report.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/report.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/report.xml	(revision 166460)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView android:layout_width="fill_parent" android:layout_height="fill_parent" android:fadeScrollbars="false"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <TextView android:textSize="20.0dip" android:textColor="@color/Green" android:id="@id/report_success" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        <TextView android:textSize="20.0dip" android:textColor="@color/Red" android:id="@id/report_failed" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        <TextView android:textSize="20.0dip" android:textColor="@color/gray" android:id="@id/report_default" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    </LinearLayout>
+</ScrollView>
Index: packages/apps/FactoryMode/res/layout/headset.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/headset.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/headset.xml	(revision 166460)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content">
+        <Button android:textSize="20.0dip" android:id="@id/mic_bt_start" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/HeadSet_tips" android:layout_weight="0.5" />
+    </LinearLayout>
+    <RelativeLayout android:layout_gravity="center_horizontal" android:layout_width="wrap_content" android:layout_height="wrap_content">
+        <com.mediatek.factorymode.VUMeter android:id="@id/uvMeter" android:layout_width="150.0px" android:layout_height="60.0px" android:layout_centerInParent="true" />
+    </RelativeLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/layout/signal.xml
===================================================================
--- packages/apps/FactoryMode/res/layout/signal.xml	(revision 0)
+++ packages/apps/FactoryMode/res/layout/signal.xml	(revision 166460)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/signal_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/signal_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: packages/apps/FactoryMode/res/values-zh-rCN/strings.xml
===================================================================
--- packages/apps/FactoryMode/res/values-zh-rCN/strings.xml	(revision 0)
+++ packages/apps/FactoryMode/res/values-zh-rCN/strings.xml	(revision 166460)
@@ -0,0 +1,222 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="hello">欢迎来到工厂模式</string>
+    <string name="app_name">工厂模式</string>
+    <string name="Settings">设置</string>
+    <string name="AutoTest">自动测试</string>
+    <string name="ReportTest">测试报告</string>
+    <string name="Packageerror">出错了,无法找到应用包！</string>
+    <string name="PackageIerror">内部错误</string>
+    <string name="BatteryLog">充电测试</string>
+    <string name="battery_info_status_label">充电状态:</string>
+    <string name="battery_info_scale_label">电池电量:</string>
+    <string name="battery_info_level_label">当前电量:</string>
+    <string name="battery_info_health_label">电源状况:</string>
+    <string name="battery_info_technology_label">电源技术:</string>
+    <string name="battery_info_voltage_label">当前电压:</string>
+    <string name="battery_info_voltage_units">mV</string>
+    <string name="battery_info_temperature_label">电源温度:</string>
+    <string name="battery_info_temperature_units">° C</string>
+    <string name="battery_info_uptime">自启动的时间:</string>
+    <string name="battery_info_awake_battery">对电池唤醒时间:</string>
+    <string name="battery_info_awake_plugged">充电时间:</string>
+    <string name="battery_info_screen_on">屏幕打开时间:</string>
+    <string name="battery_info_status_unknown">未知</string>
+    <string name="battery_info_status_charging">充电</string>
+    <string name="battery_info_status_charging_ac">(AC)</string>
+    <string name="battery_info_status_charging_usb">(USB)</string>
+    <string name="battery_info_status_discharging">Discharging</string>
+    <string name="battery_info_status_not_charging">未充电</string>
+    <string name="battery_info_status_full">满</string>
+    <string name="battery_info_health_unknown">未知</string>
+    <string name="battery_info_health_good">很好</string>
+    <string name="battery_info_health_overheat">过热</string>
+    <string name="battery_info_health_dead">Dead</string>
+    <string name="battery_info_health_over_voltage">电压过高</string>
+    <string name="battery_info_health_unspecified_failure">未知错误</string>
+    <string name="TouchScreen">触屏</string>
+    <string name="PointTest">点测试</string>
+    <string name="LineTest">线测试</string>
+    <string name="Result">查看结果</string>
+    <string name="Offset">偏移量：</string>
+    <string name="TouchComplete">测试完成</string>
+    <string name="Error">错误</string>
+    <string name="DrawError">绘制出错！</string>
+    <string name="Again">重试</string>
+    <string name="GoOn">继续</string>
+    <string name="BackLight">背景灯</string>
+    <string name="Display_lcd_Text">背景灯</string>
+    <string name="Memory">内存</string>
+    <string name="Audio">声音</string>
+    <string name="Camera">相机</string>
+    <string name="Camera_takepic">拍照</string>
+    <string name="Camera_notfound">未检测到前置摄像头</string>
+    <string name="WiFi">WiFi</string>
+    <string name="WiFi_success">测试成功</string>
+    <string name="WiFi_failed">测试失败</string>
+    <string name="WiFi_scaning">正在查找中...</string>
+    <string name="WiFi_info_closeing">wifi正在关闭中...</string>
+    <string name="WiFi_info_close">wifi已经关闭</string>
+    <string name="WiFi_info_opening">wifi正在打开</string>
+    <string name="WiFi_info_open">wifi已经打开</string>
+    <string name="WiFi_info_unknown">未知状态</string>
+    <string name="WiFi_connecting">正在连接...</string>
+    <string name="WiFi_notfound_openap">未找到开放的连接点</string>
+    <string name="HeadSet">耳机</string>
+    <string name="HeadSet_plugged">耳机插入</string>
+    <string name="HeadSet_unplugged">耳机拔出</string>
+    <string name="HeadSet_tips">请插入耳机进行测试</string>
+    <string name="HeadSet_hook">按下耳机Hook键!</string>
+    <string name="HeadSet_hook_message">请确认拨打电话时长按耳机Hook键是否可以挂断?</string>
+    <string name="GPS">GPS</string>
+    <string name="GPS_open">请打开GPS</string>
+    <string name="GPS_connect">GPS 已打开, 正在连接...</string>
+    <string name="GPS_normal">GPS 正常</string>
+    <string name="GPS_satelliteNum">GPS 已搜索到卫星数 :</string>
+    <string name="GPS_Signal">GPS 信号 :</string>
+    <string name="GPS_Success">成功</string>
+    <string name="GPS_time">耗时： %s 分</string>
+    <string name="Sensor">传感器</string>
+    <string name="Vibrator">震动</string>
+    <string name="Signal">电话</string>
+    <string name="YGPS">YGPS</string>
+    <string name="AGPS">AGPS</string>
+    <string name="Microphone">麦克风</string>
+    <string name="Mic_start">开始录音</string>
+    <string name="Mic_stop">停止录音并播放</string>
+    <string name="Mic_play">开始播放</string>
+    <string name="Mic_operation">麦克风选项</string>
+    <string name="Speaker_operation">喇叭选项</string>
+    <string name="Bluetooth">蓝牙</string>
+    <string name="Bluetooth_open">蓝牙已经打开</string>
+    <string name="Bluetooth_opening">蓝牙正在打开...</string>
+    <string name="Bluetooth_scaning">正在查找...</string>
+    <string name="Bluetooth_mac">MAC地址:</string>
+    <string name="Bluetooth_scan_success">查找完成</string>
+    <string name="GSensor">重力传感器</string>
+    <string name="GSensor_info">竖立,平放,侧立,观察重力变化!</string>
+    <string name="MSensor">磁力传感器</string>
+    <string name="MSensor_default_text">未知数据</string>
+    <string name="MSensor_North">正北</string>
+    <string name="MSensor_East">正东</string>
+    <string name="MSensor_South">正南</string>
+    <string name="MSensor_West">正西</string>
+    <string name="MSensor_north_east">北偏东</string>
+    <string name="MSensor_south_east">南偏东</string>
+    <string name="MSensor_south_west">南偏西</string>
+    <string name="MSensor_north_west">北偏西</string>
+    <string name="LSensor">光传感器</string>
+    <string name="LSensorCali">光传感器校准</string>
+    <string name="lsensor_cali_name">光感校准</string>
+    <string name="lsensor_cali_start">开始校准</string>
+    <string name="LSensor_default_text">未知数据</string>
+    <string name="LSensor_accuracy">精度:</string>
+    <string name="LSensor_value">数值:</string>
+    <string name="LSensor_tips">在强光和黑暗地方观察数值变化!</string>
+    <string name="LCD_increase">强背光</string>
+    <string name="LCD_weaken">弱背光</string>
+    <string name="Success">成功</string>
+    <string name="Failed">失败</string>
+    <string name="psensor_hello">PSensor 验证</string>
+    <string name="psensor_app_name">距离传感器</string>
+    <string name="proximity">接近 :</string>
+    <string name="tips">请将手放置和离开感应区观看数值变化!</string>
+    <string name="Earphone">听筒</string>
+    <string name="battery_name">充电测试</string>
+    <string name="touchscreen_name">触 屏</string>
+    <string name="speaker_name">喇 叭</string>
+    <string name="wifi_name">WiFi</string>
+    <string name="bluetooth_name">蓝 牙</string>
+    <string name="headset_name">耳 机</string>
+    <string name="earphone_name">听 筒</string>
+    <string name="gps_name">GPS</string>
+    <string name="vibrator_name">震 动</string>
+    <string name="telephone_name">电 话</string>
+    <string name="backlight_name">背景灯</string>
+    <string name="memory_name">内 存</string>
+    <string name="gsensor_name">重力传感</string>
+    <string name="msensor_name">磁力传感</string>
+    <string name="lsensor_name">光传感</string>
+    <string name="psensor_name">距离传感</string>
+    <string name="camera_name">后摄像头</string>
+    <string name="sdcard_name">T 卡</string>
+    <string name="fmradio_name">收音机</string>
+    <string name="KeyCode_name">按 键</string>
+    <string name="lcd_name">LCD</string>
+    <string name="sim_name">SIM卡</string>
+    <string name="microphone_name">麦克风</string>
+    <string name="subcamera_name">前摄像头</string>
+    <string name="headsethook_name">耳机Hook</string>
+    <string name="sdcard">T卡</string>
+    <string name="sdcard_tips_success">已检测到SD卡</string>
+    <string name="sdcard_tips_failed">没有测到SD卡</string>
+    <string name="sdcard_totalsize">总容量:</string>
+    <string name="sdcard_freesize">剩余容量:</string>
+    <string name="FMRadio">收音机</string>
+    <string name="FMRadio_notice">选择</string>
+    <string name="KeyCode">按键</string>
+    <string name="KeyCode_info">请开始按键</string>
+    <string name="LCD">LCD</string>
+    <string name="SimCard">SIM卡</string>
+    <string name="sim1_info_ok">SIM1:正常</string>
+    <string name="sim1_info_failed">SIM1:未发现</string>
+    <string name="sim2_info_ok">SIM2:正常</string>
+    <string name="sim2_info_failed">SIM2:未发现</string>
+    <string name="sim_info_ok">SIM:正常</string>
+    <string name="sim_info_failed">SIM:未发现</string>
+    <string name="Report">测试报告</string>
+    <string name="SingleTestReport">单项测试报告</string>
+    <string name="AutoTestReport">自动测试报告</string>
+    <string name="report_ok">成功项:</string>
+    <string name="report_failed">失败项:</string>
+    <string name="report_notest">未测试项:</string>
+    <string name="menu_exit">退出测试</string>
+    <string name="Mic_player">停止并播放</string>
+    <string name="Fmsearch">FM搜台</string>
+    <string name="hour">小时</string>
+    <string name="minute">分</string>
+    <string name="second">秒</string>
+    <string name="Bluetooth_closed">蓝牙已关闭</string>
+    <string name="okok">确定</string>
+    <string name="stopplayer">停止播放</string>
+    <string name="memorytotal">总内存：</string>
+    <string name="memoryfree">剩余内存</string>
+    <string name="GSensor_tips">请晃动手机观察XYZ值的变化</string>
+    <string name="MSensor_tips">请晃动手机观察XYZ值的变化</string>
+    <string name="version_info">版本信息</string>
+    <string name="rf_cali">RF CALI</string>
+    <string name="default_version">unknow</string>
+    <string name="lcd_hint">请按 HOME 键进行颜色切换</string>
+    <string name="tp_hw_hint">测试完成后请按 Search 键确认结果</string>
+    <string name="tp_line_hint">请沿着平行线缓慢地画两条对角线\n如果对角线连续且平滑，则TP正常。</string>
+    <string name="tp_line_start_hint">请从黄色区域开始画</string>
+    <string name="tp_line_stop_hint">请画到对角位置</string>
+    <string name="tp_line_area_hint">请画在两条平行线之间</string>
+    <string name="tp_success_hint">TP测试成功</string>
+    <string name="tp_slide_too_quick">滑动速度太快，请缓慢滑动</string>
+    <string name="charger_unknown">未知</string>
+    <string name="charger_charging">充电中</string>
+    <string name="charger_not_charging">未充电</string>
+    <string name="charger_discharging">放电中</string>
+    <string name="charger_full">已充满</string>
+    <string name="charger_electronic">充电电流:</string>
+    <string name="charger_result">充电测试结果: </string>
+    <string name="charger_success">测试成功</string>
+    <string name="charger_failed">测试失败</string>
+    <string name="tp_raw_data">TP RAW DATA 測試</string>
+    <string name="tp_raw_data_text">TP RAW</string>
+    <string name="auto_test">自动测试</string>
+    <string name="flashlight_tips">闪光灯</string>
+    <string name="flashlight">闪光灯</string>
+    <string name="charge_message">"请插入充电器"</string>
+    <string name="charger_type">"充电类型:"</string>
+    <string name="charger_connected">"已连接"</string>
+    <string name="charger_disconnected">"未连接"</string>
+    <string name="charger_tips">"电池已满，请更换电池。"</string>
+    <string name="charger_start_tips">"等待第一次测试"</string>
+    <string name="charger_retry_tips">"测试失败。将在<xliff:g id="xxx">%d</xliff:g>秒后重试。（剩余 <xliff:g id="yyy">%d</xliff:g> 次）"</string>
+	<string name="charger_temperature_error">电池温度不正常，测试已停止。</string>
+    <string name="sener_hint">The data of the lightdensor is:</string>
+    <string name="gsener_hint">The data of motionsensor is:</string>
+    <string name="flashlightSub">前闪光灯</string>
+</resources>
Index: packages/apps/FactoryMode
===================================================================
--- packages/apps/FactoryMode	(revision 0)
+++ packages/apps/FactoryMode	(revision 166460)

Property changes on: packages/apps/FactoryMode
___________________________________________________________________
Added: svn:mergeinfo
   Merged /A08A/Custom_version/MOCORDROID7.0_Trunk_K310_17A_RLS1_W17.15.1/packages/apps/FactoryMode:r165466,165469,165472,165500,165503-165504,165507-165509,165512,165525,165528,165536,165541,165543-165545,165547-165548
   Merged /A08A/Branch/MOCORDROID7.0_Trunk_K310_17A_RLS1_W17.12.4_UseA07/packages/apps/FactoryMode:r165181
