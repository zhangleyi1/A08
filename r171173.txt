Index: device/sprd/scx35l/common/rootdir/root/init.sc8830.usb.rc
===================================================================
--- device/sprd/scx35l/common/rootdir/root/init.sc8830.usb.rc	(revision 171172)
+++ device/sprd/scx35l/common/rootdir/root/init.sc8830.usb.rc	(revision 171173)
@@ -34,8 +34,27 @@
     write /sys/class/android_usb/android0/enable 0
     write /sys/class/android_usb/android0/idVendor 201E
     write /sys/class/android_usb/android0/idProduct 2751
-    write /sys/class/android_usb/android0/f_gser/port_count ${sys.usb.gser.count}
-    write /sys/class/android_usb/android0/functions ${sys.usb.config}${persist.sys.modem.diag}
+    write /sys/class/android_usb/android0/functions ${sys.usb.config} 
+    write /sys/class/android_usb/android0/enable 1 
+    start adbd 
+    setprop sys.usb.state $sys.usb.config 
+ 
+on property:sys.usb.config=mtp,adb,sat 
+    write /sys/class/android_usb/android0/enable 0 
+    write /sys/class/android_usb/android0/idVendor 1782 
+    write /sys/class/android_usb/android0/idProduct 4d01 
+    write /sys/class/android_usb/android0/f_gser/port_count 4 
+    write /sys/class/android_usb/android0/functions mtp,adb,gser
+    write /sys/class/android_usb/android0/enable 1 
+    start adbd 
+    setprop sys.usb.state $sys.usb.config 
+ 
+on property:sys.usb.config=mtp,adb,sdiag 
+    write /sys/class/android_usb/android0/enable 0 
+    write /sys/class/android_usb/android0/idVendor 1782 
+    write /sys/class/android_usb/android0/idProduct 4d02 
+    write /sys/class/android_usb/android0/f_gser/port_count 4 
+    write /sys/class/android_usb/android0/functions mtp,adb,gser 
     write /sys/class/android_usb/android0/enable 1
     start adbd
     setprop sys.usb.state $sys.usb.config
@@ -52,8 +71,7 @@
     write /sys/class/android_usb/android0/enable 0
     write /sys/class/android_usb/android0/idVendor 201E
     write /sys/class/android_usb/android0/idProduct 2753
-    write /sys/class/android_usb/android0/f_gser/port_count ${sys.usb.gser.count}
-    write /sys/class/android_usb/android0/functions ${sys.usb.config}${persist.sys.modem.diag}
+    write /sys/class/android_usb/android0/functions ${sys.usb.config} 
     write /sys/class/android_usb/android0/enable 1
     start adbd
     setprop sys.usb.state $sys.usb.config
@@ -71,9 +89,8 @@
     write /sys/class/android_usb/android0/enable 0
     write /sys/class/android_usb/android0/idVendor 201E
     write /sys/class/android_usb/android0/idProduct 2757
-    write /sys/class/android_usb/android0/f_gser/port_count ${sys.usb.gser.count}
-    write /sys/class/android_usb/android0/functions ${sys.usb.config}${persist.sys.modem.diag}
     write /sys/class/android_usb/android0/bDeviceClass 0
+    write /sys/class/android_usb/android0/functions ${sys.usb.config} 
     write /sys/class/android_usb/android0/enable 1
     start adbd
     setprop sys.usb.state $sys.usb.config
@@ -94,8 +111,7 @@
     write /sys/class/android_usb/android0/enable 0
     write /sys/class/android_usb/android0/idVendor 201E
     write /sys/class/android_usb/android0/idProduct 2755
-    write /sys/class/android_usb/android0/f_gser/port_count ${sys.usb.gser.count}
-    write /sys/class/android_usb/android0/functions mass_storage,adb${persist.sys.modem.diag}
+    write /sys/class/android_usb/android0/functions mass_storage,adb 
     write /sys/class/android_usb/android0/f_mass_storage/lun/file '\0'
     write /sys/class/android_usb/android0/f_mass_storage/lun/cdrom 1
     write /sys/class/android_usb/android0/f_mass_storage/lun/ro 1
@@ -119,11 +135,10 @@
     write /sys/class/android_usb/android0/enable 0
     write /sys/class/android_usb/android0/idVendor 201E
     write /sys/class/android_usb/android0/idProduct 2755
-    write /sys/class/android_usb/android0/f_gser/port_count ${sys.usb.gser.count}
     write /sys/class/android_usb/android0/f_mass_storage/lun/file '\0'
     write /sys/class/android_usb/android0/f_mass_storage/lun/cdrom 0
     write /sys/class/android_usb/android0/f_mass_storage/lun/ro 0
-    write /sys/class/android_usb/android0/functions ${sys.usb.config}${persist.sys.modem.diag}
+    write /sys/class/android_usb/android0/functions ${sys.usb.config}
     write /sys/class/android_usb/android0/enable 1
     start adbd
     setprop sys.usb.state $sys.usb.config
Index: packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java
===================================================================
--- packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java	(revision 171172)
+++ packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java	(revision 171173)
@@ -78,11 +78,13 @@
     private static final String SECRET_CODE_ACTION = "android.provider.Telephony.SECRET_CODE";
     private static final String MMI_IMEI_DISPLAY = "*#06#";
     private static final String MMI_REGULATORY_INFO_DISPLAY = "*#07#";
-	//fix bug for:89797 start
-	private static final String MMI_INTERNAL_VERSION = "*#7522#";
-	private static final String MMI_EXTERNAL_VERSION = "*#92#";
-	private static final String MMI_CUSTOM_FACTORY = "#38378#";
-	 //fix bug for:89797 end
+    //fix bug for:89797 start
+    private static final String MMI_INTERNAL_VERSION = "*#7522#";
+    private static final String MMI_EXTERNAL_VERSION = "*#92#";
+    private static final String MMI_CUSTOM_FACTORY = "#38378#";
+    //fix bug for:89797 end
+    private static final String MMI_CUSTOM_OPEN_DIAG = "*76278#";
+    private static final String MMI_CUSTOM_OPEN_MODEM = "*88188#";
     private static SimContactQueryCookie mSC;
     private static final String MMI_RUNIN = "*#1212#";
     private static final String MMI_TRACE_LOG = "*#564*#";
@@ -243,7 +245,7 @@
 	static boolean handleCustomCode(Context context, String input) {
         // Secret codes are in the form #<code>#
         int len = input.length();
-        if (input.equals(MMI_CUSTOM_FACTORY)) {
+        if (input.equals(MMI_CUSTOM_FACTORY) || input.equals(MMI_CUSTOM_OPEN_DIAG) || input.equals(MMI_CUSTOM_OPEN_MODEM)) {
             final Intent intent = new Intent(SECRET_CODE_ACTION,
                     Uri.parse("android_secret_code://" + input.substring(1, len - 1)));
             context.sendBroadcast(intent);
Index: vendor/sprd/platform/packages/apps/KeyGen/jni/Android.mk
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/jni/Android.mk	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/jni/Android.mk	(revision 171173)
@@ -0,0 +1,25 @@
+LOCAL_PATH:= $(call my-dir)
+
+#validationtools invoke native methods
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE        := libjni_keygen
+
+LOCAL_NDK_STL_VARIANT := stlport_static
+
+LOCAL_C_INCLUDES += vendor/sprd/modules/libatci
+#validationtools invoke native lib
+LOCAL_SHARED_LIBRARIES := libcutils libutils liblog
+LOCAL_SHARED_LIBRARIES += libatci
+LOCAL_LDFLAGS        := -llog
+
+LOCAL_CPPFLAGS += $(JNI_CFLAGS)
+
+
+LOCAL_CPP_EXTENSION := .cpp
+LOCAL_SRC_FILES     := \
+    src/jniutils.cpp \
+
+
+include $(BUILD_SHARED_LIBRARY)
Index: vendor/sprd/platform/packages/apps/KeyGen/jni/src/jniutils.cpp
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/jni/src/jniutils.cpp	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/jni/src/jniutils.cpp	(revision 171173)
@@ -0,0 +1,636 @@
+#include <jni.h>
+#include <string>
+#include<android/log.h>
+#define LOG_TAG    "keygen_jni" // 这个是自定义的LOG的标识
+#include "utils/Log.h"
+//#undef LOG // 取消默认的LOG
+#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)
+#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)
+
+
+#if !defined(AFX_KEYGENUTILITY_H__5F040EAD_2ED9_4B3E_8907_024178DC9301__INCLUDED_)
+#define AFX_KEYGENUTILITY_H__5F040EAD_2ED9_4B3E_8907_024178DC9301__INCLUDED_
+
+#if _MSC_VER > 1000
+#pragma once
+#endif // _MSC_VER > 1000
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#define MN_SIM_LOCK_ENCRYPTED_KEY_MAX_LEN  32    /* MAX length of control key in encrypted data format */
+#define TABLE_NUMBER 62
+#define IMEI_LENGTH 15
+
+typedef struct
+{
+    unsigned int total[2];
+    unsigned int state[8];
+    unsigned char buffer[64];
+}mnrsf_simlock_sha256_context;
+
+
+#define GET_UINT32(n,b,i)                       \
+{                                               \
+    (n) = ( (unsigned int) (b)[(i)    ] << 24 )       \
+	| ( (unsigned int) (b)[(i) + 1] << 16 )       \
+	| ( (unsigned int) (b)[(i) + 2] <<  8 )       \
+	| ( (unsigned int) (b)[(i) + 3]       );      \
+}
+
+#define PUT_UINT32(n,b,i)                       \
+{                                               \
+    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
+    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
+    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
+    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
+}
+
+
+
+static void sha256_starts( mnrsf_simlock_sha256_context *ctx );
+static void sha256_process( mnrsf_simlock_sha256_context *ctx, unsigned char data[64] );
+static void sha256_update( mnrsf_simlock_sha256_context *ctx, unsigned char *input, int length );
+static void sha256_finish( mnrsf_simlock_sha256_context *ctx, unsigned char digest[32] );
+static void MNRSF_DoSHA256Encrypt( unsigned char raw_len, unsigned char *raw_data, unsigned char *encrypted_data );
+static void KeyGen(char *lpIMEI, unsigned int ndummy1, unsigned int ndummy2, unsigned int ndummy3, FILE *fp, int keylen);
+static __int64_t ComputeCD(__int64_t nImei);
+
+#endif // !defined(AFX_KEYGENUTILITY_H__5F040EAD_2ED9_4B3E_8907_024178DC9301__INCLUDED_)
+
+/* +BUG63292 Add code to support sha256 encryption algorithm for lock/unlock keys */
+static unsigned char sha256_padding[64] =
+        {
+                0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+        };
+/* -BUG63292 */
+
+/* +BUG63292 Add code to support sha256 encryption algorithm for lock/unlock keys */
+/*****************************************************************************/
+//  Description : initialize the context field when start the enryption.
+//  Global resource dependence : none
+//  Author: Maddie.lai
+//  Note:
+/*****************************************************************************/
+void sha256_starts( mnrsf_simlock_sha256_context *ctx )
+{
+    ctx->total[0] = 0;
+    ctx->total[1] = 0;
+
+    ctx->state[0] = 0x6A09E667;
+    ctx->state[1] = 0xBB67AE85;
+    ctx->state[2] = 0x3C6EF372;
+    ctx->state[3] = 0xA54FF53A;
+    ctx->state[4] = 0x510E527F;
+    ctx->state[5] = 0x9B05688C;
+    ctx->state[6] = 0x1F83D9AB;
+    ctx->state[7] = 0x5BE0CD19;
+}
+
+/*****************************************************************************/
+//  Description : continue the enryption progress.
+//  Global resource dependence : none
+//  Author: Maddie.lai
+//  Note:
+/*****************************************************************************/
+void sha256_process( mnrsf_simlock_sha256_context *ctx, unsigned char data[64] )
+{
+    unsigned int temp1, temp2, W[64];
+    unsigned int A, B, C, D, E, F, G, H;
+
+    GET_UINT32( W[0],  data,  0 );
+    GET_UINT32( W[1],  data,  4 );
+    GET_UINT32( W[2],  data,  8 );
+    GET_UINT32( W[3],  data, 12 );
+    GET_UINT32( W[4],  data, 16 );
+    GET_UINT32( W[5],  data, 20 );
+    GET_UINT32( W[6],  data, 24 );
+    GET_UINT32( W[7],  data, 28 );
+    GET_UINT32( W[8],  data, 32 );
+    GET_UINT32( W[9],  data, 36 );
+    GET_UINT32( W[10], data, 40 );
+    GET_UINT32( W[11], data, 44 );
+    GET_UINT32( W[12], data, 48 );
+    GET_UINT32( W[13], data, 52 );
+    GET_UINT32( W[14], data, 56 );
+    GET_UINT32( W[15], data, 60 );
+
+#define  SHR(x,n) ((x & 0xFFFFFFFF) >> n)
+#define ROTR(x,n) (SHR(x,n) | (x << (32 - n)))
+
+#define S0(x) (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))
+#define S1(x) (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))
+
+#define S2(x) (ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))
+#define S3(x) (ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))
+
+#define F0(x,y,z) ((x & y) | (z & (x | y)))
+#define F1(x,y,z) (z ^ (x & (y ^ z)))
+
+#define R(t)                                    \
+(                                               \
+    W[t] = S1(W[t -  2]) + W[t -  7] +          \
+           S0(W[t - 15]) + W[t - 16]            \
+)
+
+#define P(a,b,c,d,e,f,g,h,x,K)                  \
+{                                               \
+    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
+    temp2 = S2(a) + F0(a,b,c);                  \
+    d += temp1; h = temp1 + temp2;              \
+}
+
+    A = ctx->state[0];
+    B = ctx->state[1];
+    C = ctx->state[2];
+    D = ctx->state[3];
+    E = ctx->state[4];
+    F = ctx->state[5];
+    G = ctx->state[6];
+    H = ctx->state[7];
+
+    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
+    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
+    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
+    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
+    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
+    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
+    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
+    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
+    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
+    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
+    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
+    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
+    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
+    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
+    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
+    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
+    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
+    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
+    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
+    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
+    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
+    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
+    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
+    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
+    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
+    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
+    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
+    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
+    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
+    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
+    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
+    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
+    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
+    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
+    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
+    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
+    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
+    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
+    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
+    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
+    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
+    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
+    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
+    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
+    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
+    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
+    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
+    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
+    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
+    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
+    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
+    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
+    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
+    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
+    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
+    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
+    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
+    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
+    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
+    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
+    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
+    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
+    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
+    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
+
+    ctx->state[0] += A;
+    ctx->state[1] += B;
+    ctx->state[2] += C;
+    ctx->state[3] += D;
+    ctx->state[4] += E;
+    ctx->state[5] += F;
+    ctx->state[6] += G;
+    ctx->state[7] += H;
+}
+
+/*****************************************************************************/
+//  Description : do encryption algorithm with raw data.
+//  Global resource dependence : none
+//  Author: Maddie.lai
+//  Note:
+/*****************************************************************************/
+void sha256_update( mnrsf_simlock_sha256_context *ctx, unsigned char *input, int length )
+{
+    unsigned int left, fill;
+
+    if( ! length ) return;
+
+    left = ctx->total[0] & 0x3F;
+    fill = 64 - left;
+
+    ctx->total[0] += length;
+    ctx->total[0] &= 0xFFFFFFFF;
+
+    if( ctx->total[0] < length )
+        ctx->total[1]++;
+
+    if( left && length >= fill )
+    {
+        memcpy( (void *) (ctx->buffer + left),
+                (void *) input, fill );
+        sha256_process( ctx, ctx->buffer );
+        length -= fill;
+        input  += fill;
+        left = 0;
+    }
+
+    while( length >= 64 )
+    {
+        sha256_process( ctx, input );
+        length -= 64;
+        input  += 64;
+    }
+
+    if( length )
+    {
+        memcpy( (void *) (ctx->buffer + left),
+                (void *) input, length );
+    }
+}
+
+/*****************************************************************************/
+//  Description : output the encrypted data.
+//  Global resource dependence : none
+//  Author: Maddie.lai
+//  Note:
+/*****************************************************************************/
+void sha256_finish( mnrsf_simlock_sha256_context *ctx, unsigned char digest[32] )
+{
+    unsigned int last, padn;
+    unsigned int high, low;
+    unsigned char msglen[8];
+
+    high = ( ctx->total[0] >> 29 )
+           | ( ctx->total[1] <<  3 );
+    low  = ( ctx->total[0] <<  3 );
+
+    PUT_UINT32( high, msglen, 0 );
+    PUT_UINT32( low,  msglen, 4 );
+
+    last = ctx->total[0] & 0x3F;
+    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
+
+    sha256_update( ctx, sha256_padding, padn );
+    sha256_update( ctx, msglen, 8 );
+
+    PUT_UINT32( ctx->state[0], digest,  0 );
+    PUT_UINT32( ctx->state[1], digest,  4 );
+    PUT_UINT32( ctx->state[2], digest,  8 );
+    PUT_UINT32( ctx->state[3], digest, 12 );
+    PUT_UINT32( ctx->state[4], digest, 16 );
+    PUT_UINT32( ctx->state[5], digest, 20 );
+    PUT_UINT32( ctx->state[6], digest, 24 );
+    PUT_UINT32( ctx->state[7], digest, 28 );
+}
+
+/*****************************************************************************/
+//  Description : do sha256 encryption algorithm.
+//  Global resource dependence : none
+//  Author: Maddie.lai
+//  Note: encrypted_data length should be equal or larger than 32 bytes
+/*****************************************************************************/
+void MNRSF_DoSHA256Encrypt( unsigned char raw_len, unsigned char *raw_data, unsigned char *encrypted_data )
+{
+    mnrsf_simlock_sha256_context ctx;
+
+    sha256_starts( &ctx );
+
+    sha256_update( &ctx, raw_data, raw_len);
+
+    sha256_finish( &ctx, encrypted_data);
+
+    return;
+}
+
+void KeyGen(char *lpIMEI, unsigned int ndummy1, unsigned int ndummy2, unsigned int ndummy3, FILE *fp, int keylen)
+{
+    char			   imei_str[16] = {0};
+    unsigned char      key_index[8] = {0};
+    unsigned int       imei_length = 15;
+    unsigned char      source1[32] = {0};
+    unsigned char      source1_len=0;
+    unsigned char      encrypted_keys[MN_SIM_LOCK_ENCRYPTED_KEY_MAX_LEN];
+    unsigned int	   i = 0;
+    unsigned char	   szKeys[32] = {0};
+
+    strcpy(imei_str, lpIMEI);
+
+    key_index[0] = (ndummy2 & 0xff) - '0';
+    key_index[1] = ((ndummy2 >> 8) & 0xff) - '0';
+    key_index[2] = ((ndummy2 >> 16) & 0xff) - '0';
+    key_index[3] = ((ndummy2 >> 24) & 0xff) - '0';
+    key_index[4] = (ndummy3 & 0xff) - '0';
+    key_index[5] = ((ndummy3 >> 8) & 0xff) - '0';
+    key_index[6] = ((ndummy3 >> 16) & 0xff) - '0';
+    key_index[7] = ((ndummy3 >> 24) & 0xff) - '0';
+
+    for(i = 0; i < imei_length; i++)
+    {
+        imei_str[i] -= 0x30;
+    }
+
+    source1_len = imei_length + 8;    /* 8 is the key_index length */
+    memcpy(source1, imei_str, imei_length);
+    memcpy(source1+imei_length, key_index, 8);
+//    sourre = "phone" + "pre-Uat data" + "imei_1" + "Imei_2" + "SPCCode";
+//    source_length = strlen(source);
+//    char enkey[32] = {0};
+    /* Do encryption based on sha256 here */
+    MNRSF_DoSHA256Encrypt(source1_len, source1, encrypted_keys);
+
+    //-生成Password  32位-》10位
+//    encrypted_keys[3]= 73;  1
+//    char [36 +1] = "0123456789abcdefghijklmnopqrstABCDEFGHIJKLMNOPQRST"
+//    password[0] = 0;
+//    passsword[1]
+
+    //-检测
+//    if ( newpssword  == psss)
+//    {
+//        fsdfsd
+//    }
+
+
+    /* Calculate to output the keys */
+    if(keylen == 8)
+    {
+        for (i = 0; i < 8; i++)
+        {
+            szKeys[i] = (unsigned char)(encrypted_keys[i] + encrypted_keys[i+8] + encrypted_keys[i+16] + encrypted_keys[i+24]);
+
+            szKeys[i] %= 10;
+            szKeys[i] += 0x30;
+        }
+    }
+    else if(keylen == 16)
+    {
+        for (i = 0; i < 16; i++)
+        {
+            szKeys[i] = (unsigned char)(encrypted_keys[i] + encrypted_keys[i+16]);
+
+            szKeys[i] %= 10;
+            szKeys[i] += 0x30;
+        }
+    }
+
+
+
+    char szContent[256] = {0};
+    sprintf(szContent, "=\"%s\",=\"%s\"\n",lpIMEI, szKeys);
+    fwrite(szContent, 1, strlen(szContent), fp);
+
+    fflush(fp);
+}
+
+__int64_t ComputeCD(__int64_t nImei)
+{
+    int nTime = 0;
+    __int64_t nCD = 0;
+    while(nImei != 0)
+    {
+        __int64_t d = nImei % 10;
+        if(nTime % 2 == 0)
+        {
+            d *= 2;
+            if(d >= 10)
+            {
+                d = d % 10 + d / 10;
+            }
+        }
+        nCD += d;
+        nTime++;
+        nImei /= 10;
+    }
+    nCD %= 10;
+    if(nCD != 0)
+    {
+        nCD = 10 - nCD;
+    }
+    return nCD;
+}
+
+
+// void CKeyGenUtility::PrintUsage()
+// {
+// 	printf("[Version]:2015-04-10\n");
+// 	printf("[Usage]: SimLockKeyGen IMEI_Start IMEI_End dummy1 dummy2 dummy3 OutputCsvFile [-keylen n] \n");
+// 	printf("         SimLockKeyGen -f imei_list_file  dummy1 dummy2 dummy3 OutputCsvFile [-keylen n]\n");
+// 	printf("         SimLockKeyGen -f imei_list_file OutputCsvFile [-keylen n]\n");
+// 	printf("         -keylen n :  option, only support 8 and 16, default is 8\n");
+// }
+
+
+
+
+
+
+
+char* jstringTostring(JNIEnv* env, jstring jstr)
+{
+    char* rtn = NULL;
+    jclass clsstring = env->FindClass("java/lang/String");
+    jstring strencode = env->NewStringUTF("utf-8");
+    jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
+    jbyteArray barr= (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);
+    jsize alen = env->GetArrayLength(barr);
+    jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
+    if (alen > 0)
+    {
+        rtn = (char*)malloc(alen + 1);
+
+        memcpy(rtn, ba, alen);
+        rtn[alen] = 0;
+    }
+    env->ReleaseByteArrayElements(barr, ba, 0);
+    return rtn;
+}
+
+
+static jstring KeyGen_GetSPCFromJNI(JNIEnv *env, jobject instance, jstring imei) {
+    const char *imei1 = env->GetStringUTFChars(imei, 0);
+
+    char szIMEI1[IMEI_LENGTH + 1] = {0};
+    int i = 0;
+    //字符串转化成数字  "12345" -> 1,2,3,4,5
+    for(i = 0; i < IMEI_LENGTH; i++)
+    {
+        szIMEI1[i] = imei1[i] - 0x30;
+    }
+    int source1_len = 8;
+    unsigned char      source1[32] = {0};
+    unsigned char      encrypted_keys[MN_SIM_LOCK_ENCRYPTED_KEY_MAX_LEN];
+    char key_index[8] = "abcdefg";
+    /* Do encryption based on sha256 here */
+    source1_len = IMEI_LENGTH + 8;
+    memcpy(source1, szIMEI1, IMEI_LENGTH);
+    memcpy(source1 + IMEI_LENGTH, key_index, 8);
+
+    int keylen = 8;
+    unsigned char	   szKeys[32] = {0};
+    MNRSF_DoSHA256Encrypt(source1_len, source1, encrypted_keys);
+    //将加密后的数据处理成数字，默认生成8位
+    if(keylen == 8)
+    {
+        for (i = 0; i < 8; i++)
+        {
+            szKeys[i] = (unsigned char)(encrypted_keys[i] + encrypted_keys[i+8] + encrypted_keys[i+16] + encrypted_keys[i+24]);
+
+            szKeys[i] %= 10;
+            szKeys[i] += 0x30;
+            LOGD("spc code:%c",szKeys[i]);
+        }
+    }
+    char spc[6 + 1] = {0};
+    for(int i = 0; i < 6; i++) {
+        *(spc + i) = *(szKeys + i + 1);
+    }
+    //SPC code 取上面生成的中间6位。
+    std::string m_strSPCode = spc;
+    return env->NewStringUTF(m_strSPCode.c_str());
+}
+
+
+
+
+
+static jstring KeyGen_DoSHA256EncrypttFromJNI(
+        JNIEnv *env,
+        jobject /* this */, jstring input) {
+    LOGD("input:%s",input);
+    const char *source = env->GetStringUTFChars(input, 0);
+
+    LOGD("source:%s",source);
+
+    char szPhone[16] = {0};		//A36c5H
+    char szPreUatDate[9] = {0};  //09012017
+    char szIMEI1[16] = {0};
+    char szIMEI2[16] = {0};
+    char szSpcCode[7] = {0};
+    char sourceInput[51] = {0};
+    char* pSourceInput = sourceInput;
+
+    for(int i = 0; i < 6; i++) {
+        szPhone[i] = source[i];
+    }
+    LOGD("szPhone:%s",szPhone);
+
+    for(int i = 0; i < 8; i++) {
+        szPreUatDate[i] = source[i + 6];
+    }
+    LOGD("szPreUatDate:%s",szPreUatDate);
+
+    // imei做下处理
+    for(int i = 0; i < IMEI_LENGTH; i++)
+    {
+        szIMEI1[i] = source[i + 14] - 0x30;
+        szIMEI2[i] = source[i + 29] - 0x30;
+        LOGD("11111ccccszIMEI1:%d",szIMEI1[i] );
+        LOGD("22222cccszIMEI2:%d",szIMEI2[i] );
+    }
+
+    for(int i = 0; i < 6; i++) {
+        szSpcCode[i] = source[i + 44];
+    }
+    LOGD("szSpcCode:%s",szSpcCode);
+
+    unsigned char      source1[64] = {0};
+    char* pSource = (char*)&source1[0];
+    int source1_len = 0;
+    sprintf(pSource, "%s%s%s%s%s", szPhone, szPreUatDate, szIMEI1, szIMEI2, szSpcCode);
+    source1_len = strlen(pSource);
+    LOGD("111szIMEI1:%s",szIMEI1);
+    LOGD("222szIMEI2:%s",szIMEI2);
+
+    LOGD("source2digt:%s",source1);
+
+    int source_length = strlen((char*)source1);
+    LOGD("source_length:%d",source_length);
+    unsigned char ncrypted_keys[MN_SIM_LOCK_ENCRYPTED_KEY_MAX_LEN] = {0};
+
+    MNRSF_DoSHA256Encrypt(source_length, source1, ncrypted_keys);
+    LOGD("ncrypted_keys:%s",ncrypted_keys);
+
+    char NUMBERTOCHARTABLE[TABLE_NUMBER + 1] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
+
+    //密码获取方式：
+    // encrypted_keys为32位，portLock为10位，故取encrypted_keys中%3=2的数，然后查表NUMBERTOCHARTABLE 找到对应的字符。
+    char szPassword[10 + 1] = {0};
+    char* pPwd = szPassword;
+    for (int i = 0; i < MN_SIM_LOCK_ENCRYPTED_KEY_MAX_LEN; i++)
+    {
+        if ((i % 3) == 2)
+        {
+            LOGD("pwd:%c",NUMBERTOCHARTABLE[ncrypted_keys[i] % TABLE_NUMBER]);
+            *pPwd = NUMBERTOCHARTABLE[ncrypted_keys[i] % TABLE_NUMBER];
+            pPwd++;
+        }
+    }
+    LOGD("1pPwd:%s", szPassword);
+    LOGD("szPassword len:%d", strlen(szPassword));
+    std::string result = szPassword;
+    return env->NewStringUTF(result.c_str());
+}
+
+
+
+static const char *hardWareClassPathName =
+        "com/sprd/keygen/Native";
+        
+static JNINativeMethod getMethods[] = {
+		{"native_doSHA256EncrypttFromJNI","(Ljava/lang/String;)Ljava/lang/String;", (void*) KeyGen_DoSHA256EncrypttFromJNI },
+        {"native_GetSPCFromJNI","(Ljava/lang/String;)Ljava/lang/String;", (void*) KeyGen_GetSPCFromJNI }
+};
+        
+        
+static int registerNativeMethods(JNIEnv* env, const char* className,
+        JNINativeMethod* gMethods, int numMethods) {
+    jclass clazz;
+    clazz = env->FindClass(className);
+    if (clazz == NULL) {
+        ALOGE("Native registration unable to find class '%s'", className);
+        return JNI_FALSE;
+    }
+    if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
+        ALOGE("RegisterNatives failed for '%s'", className);
+        return JNI_FALSE;
+    }
+    return JNI_TRUE;
+}
+        
+jint JNI_OnLoad(JavaVM* vm, void* reserved) {
+    JNIEnv* env;
+    //use JNI1.6
+    if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK) {
+        ALOGE("Error: GetEnv failed in JNI_OnLoad");
+        return -1;
+    }
+    if (!registerNativeMethods(env, hardWareClassPathName, getMethods,
+            sizeof(getMethods) / sizeof(getMethods[0]))) {
+        ALOGE("Error: could not register native methods for HardwareFragment");
+        return -1;
+    }
+      return JNI_VERSION_1_6;
+}
Index: vendor/sprd/platform/packages/apps/KeyGen/Android.mk
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/Android.mk	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/Android.mk	(revision 171173)
@@ -0,0 +1,22 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-java-files-under, src)
+
+LOCAL_STATIC_JAVA_LIBRARIES := android-support-v4
+LOCAL_JNI_SHARED_LIBRARIES := libjni_keygen
+
+LOCAL_PACKAGE_NAME := KeyGen
+LOCAL_CERTIFICATE := platform
+
+LOCAL_PROGUARD_ENABLED := disabled
+
+include $(BUILD_PACKAGE)
+
+
+include $(CLEAR_VARS)
+include $(BUILD_MULTI_PREBUILT)
+
+include $(call all-makefiles-under,$(LOCAL_PATH))
Index: vendor/sprd/platform/packages/apps/KeyGen/AndroidManifest.xml
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/AndroidManifest.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/AndroidManifest.xml	(revision 171173)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    android:sharedUserId="android.uid.system"
+    package="com.sprd.keygen">
+
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <application
+        android:allowBackup="true"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+		android:debuggable="false"
+        android:theme="@android:style/Theme.Holo.Light">
+        <activity android:name=".MainActivity"
+            android:excludeFromRecents="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+        <receiver android:name="com.sprd.keygen.SprdBroadcastReceiver" >
+            <intent-filter>
+                <action android:name="android.provider.Telephony.SECRET_CODE" />
+                <data
+                    android:host="76278"
+                    android:scheme="android_secret_code"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.provider.Telephony.SECRET_CODE" />
+                <data
+                    android:host="88188"
+                    android:scheme="android_secret_code"/>
+            </intent-filter>
+        </receiver>
+    </application>
+
+</manifest>
\ No newline at end of file
Index: vendor/sprd/platform/packages/apps/KeyGen/src/com/sprd/keygen/MainActivity.java
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/src/com/sprd/keygen/MainActivity.java	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/src/com/sprd/keygen/MainActivity.java	(revision 171173)
@@ -0,0 +1,162 @@
+package com.sprd.keygen;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnDismissListener;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.RadioGroup.OnCheckedChangeListener;
+import android.widget.Toast;
+import android.os.SystemProperties;
+
+
+public class MainActivity extends Activity implements OnCheckedChangeListener, OnClickListener {
+    private static final String TAG = "TestKeyGen";
+    private RadioGroup mRadioGroup;
+    private AlertDialog mAlertDialog;
+    private RadioButton mOpenRadioButton, mCloseRadioButton;
+
+    private String mPhone = "A36c5H";
+    private String mPreUATData = "23052017";
+    private String mIMEI1 = "753951298651313";
+    private String mIMEI2 = "753951963258746";
+    private String mSPC = "743003";
+
+    private EditText mPwd;
+    private TelephonyManager mTelephonyManager;
+    private boolean mIsATDiag = false;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.main);
+        mTelephonyManager = (TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
+        mIsATDiag = getIntent().getBooleanExtra("isatdiag", false);
+
+        initViews();
+        if(mIsATDiag) {
+            setTitle("AT Diag Port");
+        } else {
+            setTitle("Modem Diag Port");
+        }
+    }
+
+    private void initViews() {
+        mRadioGroup = (RadioGroup) findViewById(R.id.radiogroup);
+        mRadioGroup.setOnCheckedChangeListener(this);
+        mOpenRadioButton = (RadioButton) findViewById(R.id.open);
+        mCloseRadioButton = (RadioButton) findViewById(R.id.close);
+        if(SystemProperties.get("sys.usb.config", "mtp,adb").contains("sat") || SystemProperties.get("sys.usb.config", "mtp,adb").contains("sdiag")) {                    
+            mOpenRadioButton.setChecked(true);
+        } else {
+            mCloseRadioButton.setChecked(true);
+        }
+    }
+
+    private String getIMEIEncrypt(String imei) {
+        String result = null;
+        char[] array = imei.toCharArray();
+        for(int i = 0; i < array.length; i++) {
+            array[i] = (char)(array[i] - 0x30);
+            Log.d("keygen_jni", i + "String.valueOf(array):" + Integer.valueOf(array[i]));
+        }
+
+        return String.valueOf(array);
+    }
+
+    private synchronized void showDialg() {
+        mPwd = new EditText(this);
+        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
+        builder.setTitle("input pwd").setView(mPwd)
+        .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                if(TextUtils.isEmpty(mPwd.getText().toString().trim())) {
+                    Toast.makeText(MainActivity.this, "please input password!", Toast.LENGTH_SHORT).show();
+                    return;
+                }
+                mIMEI1 = mTelephonyManager.getDeviceId(0);
+                mIMEI2 = mTelephonyManager.getDeviceId(1);
+                mSPC = Native.native_GetSPCFromJNI(mIMEI1);
+                //mSPC = editText5.getText().toString();
+                StringBuffer sb = new StringBuffer();
+                sb.append(mPhone);
+                sb.append(mPreUATData);
+                //sb.append(getIMEIEncrypt(mIMEI1));
+                //sb.append(getIMEIEncrypt(mIMEI2));
+                sb.append(mIMEI1);
+                sb.append(mIMEI2);
+                sb.append(getRevertString(mSPC));
+
+                String pwd = Native.native_doSHA256EncrypttFromJNI(sb.toString());
+
+                Log.d(TAG, "mIMEI1:"+ mIMEI1);
+                Log.d(TAG, "mIMEI2:"+ mIMEI2);
+                Log.d(TAG, "mSPC:"+ mSPC);
+                Log.d(TAG, "pwd:"+ pwd);
+                Log.d(TAG, "para:"+ sb.toString());
+
+                if(mPwd.getText().toString().trim().equals(pwd)) {
+                    if(mIsATDiag) {
+                        SystemProperties.set("sys.usb.config", "mtp,adb,sat");
+                        Toast.makeText(MainActivity.this, "at diag open success!", Toast.LENGTH_SHORT).show();
+                    } else {
+                        SystemProperties.set("sys.usb.config", "mtp,adb,sdiag");
+                        Toast.makeText(MainActivity.this, "modem diag open success!", Toast.LENGTH_SHORT).show();
+                    }
+                    mAlertDialog.dismiss();
+                } else {
+                    Toast.makeText(MainActivity.this, "Incorrect password!", Toast.LENGTH_SHORT).show();
+                }
+            }
+        }).setNegativeButton(android.R.string.cancel, null)
+        .setOnDismissListener(new OnDismissListener() {
+            @Override
+            public void onDismiss(DialogInterface dialog) {
+                if(SystemProperties.get("sys.usb.config", "mtp,adb").contains("sat") || SystemProperties.get("sys.usb.config", "mtp,adb").contains("sdiag")) {                    
+                    mOpenRadioButton.setChecked(true);
+                } else {
+                    mCloseRadioButton.setChecked(true);
+                }
+            }
+        });
+        mAlertDialog = builder.create();
+        mAlertDialog.setCanceledOnTouchOutside(false);
+        mAlertDialog.show();
+    }
+
+    private String getRevertString(String arg) {
+        return new StringBuffer(arg).reverse().toString();
+    }
+
+    @Override
+    public void onCheckedChanged(RadioGroup group, int checkedId) {
+        switch(checkedId) {
+        case R.id.open:
+            showDialg();
+            break;
+        case R.id.close:
+            SystemProperties.set("sys.usb.config", "mtp,adb");
+            break;
+        }
+    }
+
+    @Override
+    public void onClick(View arg0) {
+        switch(arg0.getId()) {
+        case R.id.button_ok:
+            break;
+        case R.id.button_cancel:
+            break;
+        }
+    }
+
+}
Index: vendor/sprd/platform/packages/apps/KeyGen/src/com/sprd/keygen/Native.java
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/src/com/sprd/keygen/Native.java	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/src/com/sprd/keygen/Native.java	(revision 171173)
@@ -0,0 +1,18 @@
+package com.sprd.keygen;
+
+import android.util.Log;
+
+public class Native {
+
+    static {
+        try {
+            System.loadLibrary("jni_keygen");
+        } catch (UnsatisfiedLinkError e) {
+            Log.d("KeyGenNative", " #loadLibrary jni_keygen failed  ");
+            e.printStackTrace();
+        }
+    }
+
+    public static native String native_doSHA256EncrypttFromJNI(String input);
+    public static native String native_GetSPCFromJNI(String input);
+}
\ No newline at end of file
Index: vendor/sprd/platform/packages/apps/KeyGen/res/values/colors.xml
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/values/colors.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/values/colors.xml	(revision 171173)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+    <color name="gray">#DCDCDC</color>
+</resources>
Index: vendor/sprd/platform/packages/apps/KeyGen/res/values/strings.xml
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/values/strings.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/values/strings.xml	(revision 171173)
@@ -0,0 +1,7 @@
+<resources>
+    <string name="app_name">TestKeyGen</string>
+	<string name="title">Input Password to open diag</string>
+	<string name="pwd">Password</string>
+	<string name="open_port">Open Port</string>
+	<string name="close_port">Close Port</string>
+</resources>
Index: vendor/sprd/platform/packages/apps/KeyGen/res/values/dimens.xml
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/values/dimens.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/values/dimens.xml	(revision 171173)
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-hdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-hdpi/ic_launcher.png
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/drawable-hdpi/ic_launcher.png	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/drawable-hdpi/ic_launcher.png	(revision 171173)

Property changes on: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-hdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xxhdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xxhdpi/ic_launcher.png
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xxhdpi/ic_launcher.png	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xxhdpi/ic_launcher.png	(revision 171173)

Property changes on: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xxhdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-mdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-mdpi/ic_launcher.png
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/drawable-mdpi/ic_launcher.png	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/drawable-mdpi/ic_launcher.png	(revision 171173)

Property changes on: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-mdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xhdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xhdpi/ic_launcher.png
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xhdpi/ic_launcher.png	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xhdpi/ic_launcher.png	(revision 171173)

Property changes on: vendor/sprd/platform/packages/apps/KeyGen/res/drawable-xhdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/sprd/platform/packages/apps/KeyGen/res/layout/activity_main.xml
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/layout/activity_main.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/layout/activity_main.xml	(revision 171173)
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentStart="true">
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="10dp"
+        android:layout_marginBottom="10dp"
+        android:layout_marginTop="10dp"
+        android:textColor="@android:color/black"
+        android:text="@string/title"/>
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:layout_marginBottom="10dp"
+        android:background="@color/gray"/>
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:text="@string/pwd"
+            android:layout_width="100dp"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="20dp" />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="20dp"
+            android:layout_marginRight="20dp"
+            android:id="@+id/password"
+            android:layout_weight="1" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="10dp">
+        <Button
+            android:text="@android:string/ok"
+            android:id="@+id/button_ok"
+            android:layout_weight="1"
+            android:layout_marginLeft="50dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+        <Button
+            android:text="@android:string/cancel"
+            android:id="@+id/button_cancel"
+            android:layout_weight="1"
+            android:layout_marginLeft="50dp"
+            android:layout_marginRight="50dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/sprd/platform/packages/apps/KeyGen/res/layout/main.xml
===================================================================
--- vendor/sprd/platform/packages/apps/KeyGen/res/layout/main.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/KeyGen/res/layout/main.xml	(revision 171173)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentStart="true">
+
+    <RadioGroup
+        android:id="@+id/radiogroup"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+        <RadioButton
+            android:id="@+id/open"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="50dp"
+            android:layout_marginTop="10dp"
+            android:text="@string/open_port"
+            />
+        <RadioButton
+            android:id="@+id/close"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="50dp"
+            android:layout_marginTop="5dp"
+            android:text="@string/close_port"
+            />
+    </RadioGroup>
+</LinearLayout>
Index: vendor/sprd/custom/KeyGen_signd.apk
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/sprd/custom/Android.mk
===================================================================
--- vendor/sprd/custom/Android.mk	(revision 171172)
+++ vendor/sprd/custom/Android.mk	(revision 171173)
@@ -37,15 +37,5 @@
 LOCAL_SRC_FILES := wps.apk
 include $(BUILD_PREBUILT)
 
-# KeyGen_signd
-include $(CLEAR_VARS)
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE := KeyGen_signd
-LOCAL_MODULE_STEM := KeyGen_signd.apk
-LOCAL_MODULE_CLASS := APPS
-LOCAL_CERTIFICATE := platform
-LOCAL_MODULE_PATH := $(TARGET_OUT)/app/
-LOCAL_SRC_FILES := KeyGen_signd.apk
-include $(BUILD_PREBUILT)
 
 include $(call all-makefiles-under,$(LOCAL_PATH))
Index: build/target/product/core.mk
===================================================================
--- build/target/product/core.mk	(revision 171172)
+++ build/target/product/core.mk	(revision 171173)
@@ -62,10 +62,10 @@
     Flashlight \
     Provision \
     wps \
-    KeyGen_signd \
     RunIn \
     dummysuw \
     fotaplusDaemon \
-    fotaplus
+    fotaplus \
+    KeyGen
 
 $(call inherit-product, $(SRC_TARGET_DIR)/product/core_base.mk)
