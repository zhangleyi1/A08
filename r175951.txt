Index: frameworks/av/camera/tests/Android.mk
===================================================================
--- frameworks/av/camera/tests/Android.mk	(revision 175950)
+++ frameworks/av/camera/tests/Android.mk	(revision 175951)
@@ -1,44 +0,0 @@
-# Copyright 2013 The Android Open Source Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-LOCAL_PATH:= $(call my-dir)
-include $(CLEAR_VARS)
-LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
-
-LOCAL_SRC_FILES:= \
-	VendorTagDescriptorTests.cpp \
-	CameraBinderTests.cpp
-
-LOCAL_SHARED_LIBRARIES := \
-	libutils \
-	libcutils \
-	libcamera_metadata \
-	libcamera_client \
-	libgui \
-	libsync \
-	libui \
-	libdl \
-	libbinder
-
-LOCAL_C_INCLUDES += \
-	system/media/private/camera/include \
-	system/media/camera/tests \
-	frameworks/av/services/camera/libcameraservice \
-
-LOCAL_CFLAGS += -Wall -Wextra -Werror
-
-LOCAL_MODULE:= camera_client_test
-LOCAL_MODULE_TAGS := tests
-
-include $(BUILD_NATIVE_TEST)
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/FirstRunDialog.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/FirstRunDialog.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/FirstRunDialog.java	(revision 175951)
@@ -1,253 +0,0 @@
-/*
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.camera.app;
-
-import android.app.Dialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.view.ViewGroup;
-
-import com.android.camera.device.CameraId;
-import com.android.camera.exif.Rational;
-import com.android.camera.one.OneCamera.Facing;
-import com.android.camera.one.OneCameraAccessException;
-import com.android.camera.one.OneCameraManager;
-import com.android.camera.settings.Keys;
-import com.android.camera.settings.ResolutionSetting;
-import com.android.camera.settings.ResolutionUtil;
-import com.android.camera.settings.SettingsManager;
-import com.android.camera.util.ApiHelper;
-import com.android.camera.widget.AspectRatioDialogLayout;
-import com.android.camera.widget.LocationDialogLayout;
-
-/**
- * The dialog to show when users open the app for the first time.
- */
-public class FirstRunDialog {
-
-    public interface FirstRunDialogListener {
-        public void onFirstRunStateReady();
-        public void onFirstRunDialogCancelled();
-        public void onCameraAccessException();
-    }
-
-    /** The default preference of aspect ratio. */
-    private static final Rational DEFAULT_ASPECT_RATIO = ResolutionUtil.ASPECT_RATIO_4x3;
-
-    /** The default preference of whether enabling location recording. */
-    private static final boolean DEFAULT_LOCATION_RECORDING_ENABLED = true;
-
-    /** Listener to receive events. */
-    private final FirstRunDialogListener mListener;
-
-    /** The app controller. */
-    private final AppController mAppController;
-
-    /** The hardware manager. */
-    private final OneCameraManager mOneCameraManager;
-
-    /** The app context. */
-    private final Context mContext;
-
-    /** The resolution settings. */
-    private final ResolutionSetting mResolutionSetting;
-
-    /** The settings manager. */
-    private final SettingsManager mSettingsManager;
-
-    /** Aspect ratio preference dialog */
-    private Dialog mAspectRatioPreferenceDialog;
-
-    /** Location preference dialog */
-    private Dialog mLocationPreferenceDialog;
-
-    /**
-     * Constructs a first run dialog.
-     *
-     */
-    public FirstRunDialog(
-          AppController appController,
-          Context androidContext,
-          ResolutionSetting resolutionSetting,
-          SettingsManager settingManager,
-          OneCameraManager hardwareManager,
-          FirstRunDialogListener listener) {
-        mAppController = appController;
-        mContext = androidContext;
-        mResolutionSetting = resolutionSetting;
-        mSettingsManager = settingManager;
-        mOneCameraManager = hardwareManager;
-        mListener = listener;
-    }
-
-    /**
-     * Shows first run dialogs if necessary.
-     */
-    public void showIfNecessary() {
-        if (shouldShowLocationDialog()) {
-            // When people open the app for the first time, prompt two dialogs to
-            // ask preferences about location and aspect ratio. The first dialog is
-            // location reference.
-            promptLocationPreferenceDialog();
-        } else if (shouldShowAspectRatioDialog()) {
-            /**
-             * If people already set location preference, prompt aspect ratio dialog.
-             */
-            promptAspectRatioPreferenceDialog();
-        } else {
-            mListener.onFirstRunStateReady();
-        }
-    }
-
-    /**
-     * Dismiss all shown dialogs.
-     */
-    public void dismiss() {
-        if (mAspectRatioPreferenceDialog != null) {
-            // Remove the listener since we actively dismiss the dialog.
-            mAspectRatioPreferenceDialog.setOnDismissListener(null);
-            mAspectRatioPreferenceDialog.dismiss();
-            mAspectRatioPreferenceDialog = null;
-        }
-        if (mLocationPreferenceDialog != null) {
-            // Remove the listener since we actively dismiss the dialog.
-            mLocationPreferenceDialog.setOnDismissListener(null);
-            mLocationPreferenceDialog.dismiss();
-            mLocationPreferenceDialog = null;
-        }
-    }
-
-    /**
-     * Whether first run dialogs should be presented to the user.
-     *
-     * @return Whether first run dialogs should be presented to the user.
-     */
-    private boolean shouldShowLocationDialog() {
-        return !mSettingsManager.isSet(SettingsManager.SCOPE_GLOBAL, Keys.KEY_RECORD_LOCATION);
-    }
-
-    private boolean shouldShowAspectRatioDialog() {
-        return mAppController.getCameraAppUI().shouldShowAspectRatioDialog();
-    }
-
-    /**
-     * Prompts a dialog to allow people to choose aspect ratio preference when
-     * people open the app for the first time. If the preference has been set,
-     * this will return false.
-     */
-    private void promptAspectRatioPreferenceDialog() {
-        // Create a content view for the dialog.
-        final AspectRatioDialogLayout dialogLayout = new AspectRatioDialogLayout(
-                mContext, DEFAULT_ASPECT_RATIO);
-        dialogLayout.setListener(new AspectRatioDialogLayout.AspectRatioDialogListener() {
-            @Override
-            public void onConfirm(Rational aspectRatio) {
-                // Change resolution setting based on the chosen aspect ratio.
-                try {
-                    CameraId backCameraId = mOneCameraManager.findFirstCameraFacing(Facing.BACK);
-                    if (backCameraId != null) {
-                        mResolutionSetting.setPictureAspectRatio(backCameraId, aspectRatio);
-                    }
-                    CameraId frontCameraId = mOneCameraManager.findFirstCameraFacing(Facing.FRONT);
-                    if (frontCameraId != null) {
-                        mResolutionSetting.setPictureAspectRatio(frontCameraId, aspectRatio);
-                    }
-                } catch (OneCameraAccessException ex) {
-                    mListener.onCameraAccessException();
-                    return;
-                }
-
-                // Mark that user has made the choice.
-                mSettingsManager.set(
-                        SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_USER_SELECTED_ASPECT_RATIO,
-                        true);
-
-                // Dismiss all dialogs.
-                dismiss();
-
-                // Notify that the app is ready to go.
-                mListener.onFirstRunStateReady();
-            }
-        });
-
-        // Create the dialog.
-        mAspectRatioPreferenceDialog = mAppController.createDialog();
-        mAspectRatioPreferenceDialog.setContentView(dialogLayout, new ViewGroup.LayoutParams(
-                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-        // Detect if the dialog is dismissed by back button.
-        mAspectRatioPreferenceDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
-            @Override
-            public void onDismiss(DialogInterface dialog) {
-                mAspectRatioPreferenceDialog = null;
-                dismiss();
-                mListener.onFirstRunDialogCancelled();
-            }
-        });
-
-        // Show the dialog.
-        mAspectRatioPreferenceDialog.show();
-    }
-
-    /**
-     * Prompts a dialog to allow people to choose location preference when
-     * people open the app for the first time. If the preference has been set,
-     * this will return false.
-     */
-    private void promptLocationPreferenceDialog() {
-        // Create a content view for the dialog.
-        final LocationDialogLayout dialogLayout = new LocationDialogLayout(
-                mContext, DEFAULT_LOCATION_RECORDING_ENABLED);
-        dialogLayout.setListener(new LocationDialogLayout.LocationDialogListener() {
-            @Override
-            public void onConfirm(boolean locationRecordingEnabled) {
-                // Change the location preference setting.
-                mSettingsManager.set(
-                        SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_RECORD_LOCATION,
-                        locationRecordingEnabled);
-
-                if (shouldShowAspectRatioDialog()) {
-                    // Prompt the second dialog about aspect ratio preference.
-                    promptAspectRatioPreferenceDialog();
-                } else {
-                    // Dismiss all dialogs.
-                    dismiss();
-                    // Notify that the app is ready to go.
-                    mListener.onFirstRunStateReady();
-                }
-            }
-        });
-
-        // Create the dialog.
-        mLocationPreferenceDialog = mAppController.createDialog();
-        mLocationPreferenceDialog.setContentView(dialogLayout, new ViewGroup.LayoutParams(
-                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-        // Detect if the dialog is dismissed by back button.
-        mLocationPreferenceDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
-            @Override
-            public void onDismiss(DialogInterface dialog) {
-                mLocationPreferenceDialog = null;
-                dismiss();
-                mListener.onFirstRunDialogCancelled();
-            }
-        });
-
-        // Show the dialog.
-        mLocationPreferenceDialog.show();
-    }
-}
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/LegacyLocationProvider.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/LegacyLocationProvider.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/LegacyLocationProvider.java	(revision 175951)
@@ -92,7 +92,7 @@
                         0F,
                         mLocationListeners[1]);
             } catch (SecurityException ex) {
-                Log.i(TAG, "fail to request location update, ignore", ex);
+                Log.i(TAG, "fail to request location update, ignore", ex.getMessage());
             } catch (IllegalArgumentException ex) {
                 Log.d(TAG, "provider does not exist " + ex.getMessage());
             }
@@ -103,7 +103,7 @@
                         0F,
                         mLocationListeners[0]);
             } catch (SecurityException ex) {
-                Log.i(TAG, "fail to request location update, ignore", ex);
+                Log.i(TAG, "fail to request location update, ignore", ex.getMessage());
             } catch (IllegalArgumentException ex) {
                 Log.d(TAG, "provider does not exist " + ex.getMessage());
             }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/CameraApp.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/CameraApp.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/CameraApp.java	(revision 175951)
@@ -61,30 +61,10 @@
         // the time between any two calls or the total time from
         // start to stop is over 10ms.
         Profile guard = Profilers.instance().guard("CameraApp onCreate()");
-
-        // It is important that this gets called early in execution before the
-        // app has had the opportunity to touch shared preferences.
-        /**
-         * SPRD: Fix bug 572631, optimize camera launch time
-         * Original Code
-         *
-        FirstRunDetector.instance().initializeTimeOfFirstRun(context);
-        guard.mark("initializeTimeOfFirstRun");
-         */
-        UsageStatistics.instance().initialize(this);
-        guard.mark("UsageStatistics.initialize");
-
         clearNotifications();
         guard.mark("clearNotifications");
 
-        // SPRD:fix bug 473462 add for burst capture
-        CameraUtil.initialize(context);
-        // SPRD: Fix bug 572473 add for usb storage support
-        // SPRD: fix bug 620061 first start app, will not show OTG storage
-        MultiStorage.getInstance().initialize(this);
-        // SPRD: fix bug474674
-        UCamUtill.initialize(context);
-        guard.stop("utils initialize");
+       
     }
 
     /**
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/CameraController.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/CameraController.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/app/CameraController.java	(revision 175951)
@@ -90,10 +90,7 @@
         // CameraAgentFactory decided this device doesn't support the new API.
         mCameraAgentNg = cameraManagerNg != cameraManager ? cameraManagerNg : null;
         mActiveCameraDeviceTracker = activeCameraDeviceTracker;
-        mInfo = mCameraAgent.getCameraDeviceInfo();
-        if (mInfo == null && mCallbackReceiver != null) {
-            mCallbackReceiver.onDeviceOpenFailure(-1, "GETTING_CAMERA_INFO");
-        }
+        
     }
 
     @Override
@@ -360,8 +357,13 @@
 
     /* SPRD: Fix bug 572631, optimize camera launch time @{ */
     public void initCameraDeviceInfo() {
-        CameraAgent cameraManager = mUsingNewApi ? mCameraAgentNg : mCameraAgent;
-        mInfo = cameraManager.getCameraDeviceInfo();
+       if(mInfo == null){
+            CameraAgent cameraManager = mUsingNewApi ? mCameraAgentNg : mCameraAgent;
+            mInfo = cameraManager.getCameraDeviceInfo();
+        }
+        if (mInfo == null && mCallbackReceiver != null) {
+            mCallbackReceiver.onDeviceOpenFailure(-1, "GETTING_CAMERA_INFO");
+        }
     }
     /* @} */
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/captureintent/CaptureIntentModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/captureintent/CaptureIntentModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/captureintent/CaptureIntentModule.java	(revision 175951)
@@ -174,10 +174,7 @@
         // Do nothing.
     }
 
-    @Override
-    public void hardResetSettings(SettingsManager settingsManager) {
-        // Do nothing.
-    }
+    
 
     @Override
     public HardwareSpec getHardwareSpec() {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/AppUpgrader.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/AppUpgrader.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/AppUpgrader.java	(revision 175951)
@@ -122,58 +122,8 @@
 
     @Override
     public void upgrade(SettingsManager settingsManager, int lastVersion, int currentVersion) {
-        Context context = mAppController.getAndroidContext();
+    
 
-        Log.i(TAG, "upgrade lastVersion=" + lastVersion);
-
-        // Do strings upgrade first before 'earlier' upgrades, since they assume
-        // valid storage of values.
-        if (lastVersion < CAMERA_SETTINGS_STRINGS_UPGRADE) {
-            upgradeTypesToStrings(settingsManager);
-        }
-
-        if (lastVersion < FORCE_LOCATION_CHOICE_VERSION) {
-            forceLocationChoice(settingsManager);
-        }
-
-        if (lastVersion < CAMERA_SIZE_SETTING_UPGRADE_VERSION) {
-            CameraDeviceInfo infos = CameraAgentFactory
-                    .getAndroidCameraAgent(context, CameraAgentFactory.CameraApi.API_1)
-                    .getCameraDeviceInfo();
-            // SPRD: Fix bug 545710 The sAndroidCameraAgentClientCount is
-            // keeping increase.
-            CameraAgentFactory.recycle(CameraAgentFactory.CameraApi.API_1);
-
-            upgradeCameraSizeSetting(settingsManager, context, infos,
-                    SettingsUtil.CAMERA_FACING_FRONT);
-            upgradeCameraSizeSetting(settingsManager, context, infos,
-                    SettingsUtil.CAMERA_FACING_BACK);
-            // We changed size handling and aspect ratio placement, put user
-            // back into Camera mode this time to ensure they see the ratio
-            // chooser if applicable.
-            settingsManager.remove(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_STARTUP_MODULE_INDEX);
-        }
-
-        if (lastVersion < CAMERA_MODULE_SETTINGS_FILES_RENAMED_VERSION) {
-            upgradeCameraSettingsFiles(settingsManager, context);
-            upgradeModuleSettingsFiles(settingsManager, context,
-                    mAppController);
-        }
-
-        if (lastVersion < CAMERA_SETTINGS_SELECTED_MODULE_INDEX) {
-            upgradeSelectedModeIndex(settingsManager, context);
-        }
-
-        if (lastVersion < NEEDS_N5_16by9_RESOLUTION_SWAP) {
-            updateN516by9ResolutionIfNeeded(settingsManager);
-        }
-
-        //SPRD:fix for bug 507101 ota from 4.4 to 6.0 issue
-        if (lastVersion < KK_UPGRADE_VERSION) {
-            upgradeFromKK(settingsManager,context);
-        }
-
     }
 
     /**
@@ -185,122 +135,8 @@
      * an int or boolean as a String.
      */
     private void upgradeTypesToStrings(SettingsManager settingsManager) {
-        SharedPreferences defaultPreferences = settingsManager.getDefaultPreferences();
-        SharedPreferences oldGlobalPreferences =
-                settingsManager.openPreferences(OLD_GLOBAL_PREFERENCES_FILENAME);
+        
 
-        // Location: boolean -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_RECORD_LOCATION)) {
-            boolean location = removeBoolean(defaultPreferences, Keys.KEY_RECORD_LOCATION);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_RECORD_LOCATION, location);
-        }
-
-        // User selected aspect ratio: boolean -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_USER_SELECTED_ASPECT_RATIO)) {
-            boolean userSelectedAspectRatio = removeBoolean(defaultPreferences,
-                    Keys.KEY_USER_SELECTED_ASPECT_RATIO);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_USER_SELECTED_ASPECT_RATIO,
-                    userSelectedAspectRatio);
-        }
-
-        // Manual exposure compensation: boolean -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_EXPOSURE_COMPENSATION_ENABLED)) {
-            boolean manualExposureCompensationEnabled = removeBoolean(defaultPreferences,
-                    Keys.KEY_EXPOSURE_COMPENSATION_ENABLED);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_EXPOSURE_COMPENSATION_ENABLED, manualExposureCompensationEnabled);
-        }
-
-        // Hint: boolean -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_CAMERA_FIRST_USE_HINT_SHOWN)) {
-            boolean hint = removeBoolean(defaultPreferences, Keys.KEY_CAMERA_FIRST_USE_HINT_SHOWN);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_FIRST_USE_HINT_SHOWN,
-                    hint);
-        }
-
-        // Startup module index: Integer -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_STARTUP_MODULE_INDEX)) {
-            int startupModuleIndex = removeInteger(defaultPreferences,
-                    Keys.KEY_STARTUP_MODULE_INDEX);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_STARTUP_MODULE_INDEX,
-                    startupModuleIndex);
-        }
-
-        // Last camera used module index: Integer -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_CAMERA_MODULE_LAST_USED)) {
-            int lastCameraUsedModuleIndex = removeInteger(defaultPreferences,
-                    Keys.KEY_CAMERA_MODULE_LAST_USED);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_MODULE_LAST_USED,
-                    lastCameraUsedModuleIndex);
-        }
-
-        // Flash supported back camera setting: boolean -> String, from old
-        // global.
-        if (oldGlobalPreferences.contains(Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA)) {
-            boolean flashSupportedBackCamera = removeBoolean(oldGlobalPreferences,
-                    Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA);
-            if (flashSupportedBackCamera) {
-                settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA, flashSupportedBackCamera);
-            }
-        }
-
-        // Should show refocus viewer cling: boolean -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING)) {
-            boolean shouldShowRefocusViewer = removeBoolean(defaultPreferences,
-                    Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING, shouldShowRefocusViewer);
-        }
-
-        // Should show settings button cling: boolean -> String, from default.
-        if (defaultPreferences.contains(Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING)) {
-            boolean shouldShowSettingsButtonCling = removeBoolean(defaultPreferences,
-                    Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING, shouldShowSettingsButtonCling);
-        }
-
-        // HDR plus on setting: String on/off -> String, from old global.
-        if (oldGlobalPreferences.contains(Keys.KEY_CAMERA_HDR_PLUS)) {
-            String hdrPlus = removeString(oldGlobalPreferences, Keys.KEY_CAMERA_HDR_PLUS);
-            if (OLD_SETTINGS_VALUE_ON.equals(hdrPlus)) {
-                settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR_PLUS, true);
-            }
-        }
-
-        // HDR on setting: String on/off -> String, from old global.
-        if (oldGlobalPreferences.contains(Keys.KEY_CAMERA_HDR)) {
-            String hdrPlus = removeString(oldGlobalPreferences, Keys.KEY_CAMERA_HDR);
-            if (OLD_SETTINGS_VALUE_ON.equals(hdrPlus)) {
-                settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR, true);
-            }
-        }
-
-        // Grid on setting: String on/off -> String, from old global.
-        if (oldGlobalPreferences.contains(Keys.KEY_CAMERA_GRID_LINES)) {
-            String hdrPlus = removeString(oldGlobalPreferences, Keys.KEY_CAMERA_GRID_LINES);
-            if (OLD_SETTINGS_VALUE_ON.equals(hdrPlus)) {
-                settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_GRID_LINES,
-                        true);
-            }
-        }
-
-        // SPRD:Add for antibanding
-        if (defaultPreferences.contains(Keys.KEY_CAMER_ANTIBANDING)) {
-            String antibanding = removeString(defaultPreferences, Keys.KEY_CAMER_ANTIBANDING);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMER_ANTIBANDING,
-                    antibanding);
-        }
-
-        /* SPRD Bug 495676: DV antibanding update */
-        if (defaultPreferences.contains(Keys.KEY_VIDEO_ANTIBANDING)) {
-            String antibanding = removeString(defaultPreferences,
-                    Keys.KEY_VIDEO_ANTIBANDING);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_VIDEO_ANTIBANDING, antibanding);
-        }
-
     }
 
     /**
@@ -516,240 +352,7 @@
      *
      **/
     private void upgradeFromKK(SettingsManager settingsManager, Context context) {
-        Log.i(TAG, "upgradeFromKK in");
-
-        // update pic size
-        String key;
-        String[] cameraIds =
-                context.getResources().getStringArray(R.array.camera_id_entryvalues);
-        /**
-         * CID 120725 : DLS: Dead local store (FB.DLS_DEAD_LOCAL_STORE)
-        SharedPreferences oldGlobalPreferences =
-                settingsManager.openPreferences(OLD_GLOBAL_PREFERENCES_FILENAME);
-                */
-        SharedPreferences oldCameraBackPreferences =
-                settingsManager.openPreferences(
-                        OLD_CAMERA_PREFERENCES_PREFIX + "0");
-
-        for (int i = 0; i < cameraIds.length; i++) {
-            Log.i(TAG, "i =" + i);
-            if (i == 0) {
-                key = Keys.KEY_PICTURE_SIZE_BACK;
-            } else if (i == 1) {
-                key = Keys.KEY_PICTURE_SIZE_FRONT;
-            } else {
-                Log.w(TAG, "Ignoring attempt to upgrade size of unhandled camera facing direction");
-                return;
-            }
-
-            SharedPreferences oldCameraPreferences =
-                    settingsManager.openPreferences(
-                            OLD_CAMERA_PREFERENCES_PREFIX + cameraIds[i]);
-
-            List<Size> supported = CameraPictureSizesCacher.getSizesForCamera(i, context);
-            if (oldCameraPreferences.contains("pref_camera_picturesize_key")) {
-                String pictureSize = removeString(oldCameraPreferences,
-                        "pref_camera_picturesize_key");
-                Log.i(TAG, "pictureSize=" + pictureSize);
-                if (supported != null) {
-                    Size size = SettingsUtil.getPhotoSize(pictureSize, supported, i);
-                    Log.i(TAG, "size=" + size);
-                    /*
-                     * CID 120122 : Dereference null return value (NULL_RETURNS)
-                     * follow the default operation like (supported == null), just continue
-                     * @{ */
-                    if(size == null){
-                        continue;
-                    }
-                    /*@}*/
-                    settingsManager.set(SettingsManager.SCOPE_GLOBAL, key,
-                            SettingsUtil.sizeToSettingString(size));
-                }
-            }
-        }
-
-        // update jpeg quality
-        if (oldCameraBackPreferences.contains("pref_camera_jpeg_quality_key")) {
-            String jpegQuality = removeString(oldCameraBackPreferences,
-                    "pref_camera_jpeg_quality_key");
-            Log.i(TAG, "jpegQuality=" + jpegQuality);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_JPEG_QUALITY, jpegQuality);
-        }
-
-        // update scenemode
-        if (oldCameraBackPreferences.contains("pref_camera_scenemode_key")) {
-            String scenemode = removeString(oldCameraBackPreferences,
-                    "pref_camera_scenemode_key");
-            Log.i(TAG, "scenemode=" + scenemode);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_SCENE_MODE, scenemode);
-        }
-
-        // update burst capture
-        if (oldCameraBackPreferences.contains("pref_camera_burst_key")) {
-            String burst = removeString(oldCameraBackPreferences,
-                    "pref_camera_burst_key");
-            if (burst.equals("1")) {
-                burst = "one";
-            } else if (burst.equals("3")) {
-                burst = "three";
-            } else if (burst.equals("6")) {
-                burst = "six";
-            } else {
-                burst = "one";
-            }
-            Log.i(TAG, "burst=" + burst);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_CONTINUE_CAPTURE, burst);
-        }
-
-        // update whitebalance
-        if (oldCameraBackPreferences.contains("pref_camera_whitebalance_key")) {
-            String whitebalance = removeString(oldCameraBackPreferences,
-                    "pref_camera_whitebalance_key");
-            Log.i(TAG, "whitebalance=" + whitebalance);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_WHITE_BALANCE, whitebalance);
-        }
-
-        // update coloreffect
-        if (oldCameraBackPreferences.contains("pref_camera_color_effect_key")) {
-            String coloreffect = removeString(oldCameraBackPreferences,
-                    "pref_camera_color_effect_key");
-            Log.i(TAG, "coloreffect=" + coloreffect);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_COLOR_EFFECT, coloreffect);
-        }
-
-        // update freeze
-        if (oldCameraBackPreferences.contains("pref_freeze_frame_display_key")) {
-            String freeze = removeString(oldCameraBackPreferences,
-                    "pref_freeze_frame_display_key");
-            Log.i(TAG, "freeze=" + freeze);
-            if (freeze.equals("on")) {
-                freeze = "1";
-            } else if (freeze.equals("off")) {
-                freeze = "0";
-            }
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_FREEZE_FRAME_DISPLAY, freeze);
-        }
-
-        // update iso
-        if (oldCameraBackPreferences.contains("pref_camera_iso_key")) {
-            String iso = removeString(oldCameraBackPreferences,
-                    "pref_camera_iso_key");
-            Log.i(TAG, "iso=" + iso);
-            iso = "iso_" + iso;
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_ISO, iso);
-        }
-
-        // update brightness
-        if (oldCameraBackPreferences.contains("pref_camera_brightness_key")) {
-            String bright = removeString(oldCameraBackPreferences,
-                    "pref_camera_brightness_key");
-            Log.i(TAG, "bright=" + bright);
-            if (bright.equals("0")) {
-                bright = "brightness_zero";
-            } else if (bright.equals("1")) {
-                bright = "brightness_one";
-            } else if (bright.equals("2")) {
-                bright = "brightness_two";
-            } else if (bright.equals("3")) {
-                bright = "brightness_three";
-            } else if (bright.equals("4")) {
-                bright = "brightness_four";
-            } else if (bright.equals("5")) {
-                bright = "brightness_five";
-            } else if (bright.equals("6")) {
-                bright = "brightness_six";
-            } else {
-                bright = "brightness_zero";
-            }
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_BRIGHTNESS, bright);
-        }
-
-        // update saturation
-        if (oldCameraBackPreferences.contains("pref_camera_saturation_key")) {
-            String saturation = removeString(oldCameraBackPreferences,
-                    "pref_camera_saturation_key");
-            Log.i(TAG, "saturation=" + saturation);
-            if (saturation.equals("0")) {
-                saturation = "saturation_zero";
-            } else if (saturation.equals("1")) {
-                saturation = "saturation_one";
-            } else if (saturation.equals("2")) {
-                saturation = "saturation_two";
-            } else if (saturation.equals("3")) {
-                saturation = "saturation_three";
-            } else if (saturation.equals("4")) {
-                saturation = "saturation_four";
-            } else if (saturation.equals("5")) {
-                saturation = "saturation_five";
-            } else if (saturation.equals("6")) {
-                saturation = "saturation_six";
-            } else {
-                saturation = "saturation_zero";
-            }
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_SATURATION, saturation);
-        }
-
-        // update video size
-        for (int i = 0; i < cameraIds.length; i++) {
-            Log.i(TAG, "i =" + i);
-            if (i == 0) {
-                key = Keys.KEY_VIDEO_QUALITY_BACK;
-            } else if (i == 1) {
-                key = Keys.KEY_VIDEO_QUALITY_FRONT;
-            } else {
-                Log.w(TAG, "Ignoring attempt to upgrade size of unhandled camera facing direction");
-                return;
-            }
-
-            SharedPreferences oldCameraPreferences =
-                    settingsManager.openPreferences(
-                            OLD_CAMERA_PREFERENCES_PREFIX + cameraIds[i]);
-
-            List<Size> supported = CameraPictureSizesCacher.getSizesForCamera(i, context);
-            if (oldCameraPreferences.contains("pref_video_quality_key")) {
-                String videoquality = removeString(oldCameraPreferences,
-                        "pref_video_quality_key");
-                Log.i(TAG, "videoquality=" + videoquality);
-                if (videoquality.equals("5") && i == 0) {
-                    videoquality = "large";
-                } else if (videoquality.equals("4") && i == 0) {
-                    videoquality = "medium";
-                } else if (videoquality.equals("3") && i == 0) {
-                    videoquality = "small";
-                } else if (videoquality.equals("4") && i == 1) {
-                    videoquality = "large";
-                } else if (videoquality.equals("3") && i == 1) {
-                    videoquality = "medium";
-                } else if (videoquality.equals("2") && i == 1) {
-                    videoquality = "small";
-                } else {
-                    videoquality = "large";
-                }
-                settingsManager.set(SettingsManager.SCOPE_GLOBAL, key,
-                        videoquality);
-
-            }
-        }
-
-        // update video ecode
-        if (oldCameraBackPreferences.contains("pref_video_encode_type")) {
-            String encode = removeString(oldCameraBackPreferences,
-                    "pref_video_encode_type");
-            Log.i(TAG, "encode=" + encode);
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_VIDEO_ENCODE_TYPE, encode);
-        }
-
-        Log.i(TAG, "upgradeFromKK out");
+        
     }
 
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/SettingsUpgrader.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/SettingsUpgrader.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/SettingsUpgrader.java	(revision 175951)
@@ -49,11 +49,7 @@
      * party modules also use this to upgrade settings local to them.
      */
     public void upgrade(SettingsManager settingsManager) {
-        int lastVersion = getLastVersion(settingsManager);
-        if (lastVersion != mTargetVersion) {
-            upgrade(settingsManager, lastVersion, mTargetVersion);
-        }
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, mVersionKey, mTargetVersion);
+       
     }
 
     /**
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/SettingsManager.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/SettingsManager.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/settings/SettingsManager.java	(revision 175951)
@@ -209,7 +209,7 @@
                 mCustomPreferences.registerOnSharedPreferenceChangeListener(
                         sharedPreferenceListener);
             }
-            Log.v(TAG, "listeners: " + mListeners);
+            
         }
     }
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/AccessibilityUtil.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/AccessibilityUtil.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/AccessibilityUtil.java	(revision 175951)
@@ -62,11 +62,7 @@
     };
 
     public AccessibilityUtil(PreviewOverlay previewOverlay, View view) {
-        mPreviewOverlay = previewOverlay;
-        mZoomPlusButton = (Button) view.findViewById(R.id.accessibility_zoom_plus_button);
-        mZoomMinusButton = (Button) view.findViewById(R.id.accessibility_zoom_minus_button);
-        mZoomPlusButton.setOnClickListener(zoomInListener);
-        mZoomMinusButton.setOnClickListener(zoomOutListener);
+        
     }
 
     /**
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/PhotoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/PhotoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/PhotoModule.java	(revision 175951)
@@ -2249,7 +2249,7 @@
             mAppController.addPreviewAreaSizeChangedListener(mFocusManager);
         }
         mAppController.addPreviewAreaSizeChangedListener(mUI);
-        mActivity.getModuleLayoutRoot().findViewById(R.id.shutter_button).setOnTouchListener(this);//SPRD: fix bug473462
+        
 
         CameraProvider camProvider = mActivity.getCameraProvider();
         if (camProvider == null) {
@@ -2438,8 +2438,7 @@
         getServices().getMemoryManager().removeListener(this);
         mAppController.removePreviewAreaSizeChangedListener(mFocusManager);
         mAppController.removePreviewAreaSizeChangedListener(mUI);
-        mActivity.getModuleLayoutRoot().findViewById(R.id.shutter_button).setOnTouchListener(null);//SPRD: fix bug 473462
-
+      
         SettingsManager settingsManager = mActivity.getSettingsManager();
         settingsManager.removeListener(this);
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/PermissionsActivity.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/PermissionsActivity.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/PermissionsActivity.java	(revision 175951)
@@ -20,7 +20,6 @@
 import com.android.camera.app.CameraServicesImpl;
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.util.CameraUtil;
 import com.android.camera.util.QuickActivity;
 import com.android.camera2.R;
@@ -48,7 +47,6 @@
     private boolean mFlagHasCameraPermission;
     private boolean mFlagHasMicrophonePermission;
     private boolean mFlagHasStoragePermission;
-    private SettingsManager mSettingsManager;
     private String cameraIntentAction;
 
     /**
@@ -66,7 +64,6 @@
     @Override
     protected void onCreateTasks(Bundle savedInstanceState) {
         setContentView(R.layout.permissions);
-        mSettingsManager = CameraServicesImpl.instance().getSettingsManager();
 
         // Filter for screen off so that we can finish permissions activity
         // when screen is off.
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/widget/IndicatorIconController.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/widget/IndicatorIconController.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/widget/IndicatorIconController.java	(revision 175951)
@@ -39,8 +39,7 @@
  * visibility of an indicator is set when an indicator's setting changes.
  */
 public class IndicatorIconController
-    implements SettingsManager.OnSettingChangedListener,
-               ButtonManager.ButtonStatusListener {
+    implements ButtonManager.ButtonStatusListener {
 
     private final static Log.Tag TAG = new Log.Tag("IndicatorIconCtrlr");
 
@@ -369,48 +368,4 @@
             changeVisibility(imageView, View.VISIBLE);
         }
     }
-
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-        if (key.equals(Keys.KEY_FLASH_MODE)) {
-            syncFlashIndicator();
-            return;
-        }
-        if (key.equals(Keys.KEY_VIDEOCAMERA_FLASH_MODE)) {
-            syncFlashIndicator();
-            return;
-        }
-        //SPRD:fix bug528493 flash state is not consistent between hide and spread
-        if (key.equals(Keys.KEY_GIF_FLASH_MODE)) {
-            syncFlashIndicator();
-            return;
-        }
-        if (key.equals(Keys.KEY_CAMERA_HDR_PLUS)) {
-            syncHdrIndicator();
-            return;
-        }
-        if (key.equals(Keys.KEY_CAMERA_HDR)) {
-            syncHdrIndicator();
-            return;
-        }
-        if (key.equals(Keys.KEY_CAMERA_PANO_ORIENTATION)) {
-            syncPanoIndicator();
-            return;
-        }
-        if (key.equals(Keys.KEY_EXPOSURE)) {
-            syncExposureIndicator();
-            return;
-        }
-        if (key.equals(Keys.KEY_COUNTDOWN_DURATION)) {
-            syncCountdownTimerIndicator();
-            return;
-        }
-        /* SPRD: New feature vgesture detect @{ */
-        if (key.equals(Keys.KEY_CAMERA_VGESTURE)) {
-            syncVgestureIndicator();
-            return;
-        }
-        /* @} */
-    }
-
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/CaptureModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/CaptureModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/CaptureModule.java	(revision 175951)
@@ -776,17 +776,6 @@
     }
 
     @Override
-    public void hardResetSettings(SettingsManager settingsManager) {
-        if (mStickyGcamCamera) {
-            // Sticky HDR+ mode should hard reset HDR+ to on, and camera back
-            // facing.
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR_PLUS, true);
-            settingsManager.set(mAppController.getModuleScope(), Keys.KEY_CAMERA_ID,
-                  mOneCameraManager.findFirstCameraFacing(Facing.BACK).getValue());
-        }
-    }
-
-    @Override
     public HardwareSpec getHardwareSpec() {
         return new HardwareSpec() {
             @Override
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/module/ModuleController.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/module/ModuleController.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/module/ModuleController.java	(revision 175951)
@@ -20,7 +20,6 @@
 import com.android.camera.ShutterButton;
 import com.android.camera.app.CameraAppUI.BottomBarUISpec;
 import com.android.camera.hardware.HardwareSpec;
-import com.android.camera.settings.SettingsManager;
 import com.android.ex.camera2.portability.CameraAgent;
 
 /**
@@ -102,7 +101,7 @@
      * Called by the app on startup or module switches, this allows the module
      * to perform a hard reset on specific settings.
      */
-    public void hardResetSettings(SettingsManager settingsManager);
+    
 
     /**
      * Returns a {@link com.android.camera.hardware.HardwareSpec}
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ButtonManager.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ButtonManager.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ButtonManager.java	(revision 175951)
@@ -114,7 +114,6 @@
             }
         }
         /* @} */
-        mSettingsManager.addListener(this);
     }
 
     /**
@@ -694,27 +693,7 @@
     private void initializeFlashButton(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.camera_flash_descriptions);
-
-        int index = mSettingsManager.getIndexOfCurrentValue(mAppController.getCameraScope(),
-                                                            Keys.KEY_FLASH_MODE);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(mAppController.getCameraScope(),
-                                                 Keys.KEY_FLASH_MODE, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
+        
     }
 
     /**
@@ -723,55 +702,6 @@
     private void initializeTorchButton(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.video_flash_descriptions);
-
-        /**
-         *SPRD: Change for New Feature Gif
-         *original code
-         * @{
-        int index = mSettingsManager.getIndexOfCurrentValue(mAppController.getCameraScope(),
-                                                                    Keys.KEY_VIDEOCAMERA_FLASH_MODE);
-         */
-        int index = mSettingsManager.getIndexOfCurrentValue(
-                mAppController.getCameraScope(),
-                mAppController.getCurrentModuleIndex() != mAppController
-                        .getAndroidContext().getResources()
-                        .getInteger(R.integer.camera_mode_gif) ? Keys.KEY_VIDEOCAMERA_FLASH_MODE
-                        : Keys.KEY_GIF_FLASH_MODE);
-        /**
-         * @}
-         */
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                /**
-                 *SPRD: Change for New Feature Gif
-                 *original code
-                 * @{
-                mSettingsManager.setValueByIndex(mAppController.getCameraScope(),
-                                                      Keys.KEY_VIDEOCAMERA_FLASH_MODE, state);
-                 */
-                mSettingsManager.setValueByIndex(
-                        mAppController.getCameraScope(),
-                        mAppController.getCurrentModuleIndex() != mAppController
-                                .getAndroidContext().getResources()
-                                .getInteger(R.integer.camera_mode_gif) ? Keys.KEY_VIDEOCAMERA_FLASH_MODE
-                                : Keys.KEY_GIF_FLASH_MODE, state);
-                /**
-                 * @}
-                 */
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
     }
 
     /**
@@ -780,27 +710,7 @@
     private void initializeHdrPlusFlashButton(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.hdr_plus_flash_descriptions);
-
-        int index = mSettingsManager.getIndexOfCurrentValue(mAppController.getModuleScope(),
-                                                            Keys.KEY_HDR_PLUS_FLASH_MODE);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(mAppController.getModuleScope(),
-                                                 Keys.KEY_HDR_PLUS_FLASH_MODE, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
+       
     }
 
     /**
@@ -809,51 +719,7 @@
     private void initializeCameraButton(final MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-
-        int index = mSettingsManager.getIndexOfCurrentValue(mAppController.getModuleScope(),
-                                                            Keys.KEY_CAMERA_ID);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                /* SPRD: fix bug 516434,519391 If the state is the same with current camera ID,
-                 * the function will not run.*/
-                if (state != mSettingsManager.getInteger(mAppController.getModuleScope(),
-                        Keys.KEY_CAMERA_ID)) {
-                    /*
-                     * SPRD: Fix bug 555789 set the value just before we start to open camera @{
-                     * original code
-                     *
-                    mSettingsManager.setValueByIndex(mAppController.getModuleScope(),
-                                                     Keys.KEY_CAMERA_ID, state);
-                    int cameraId = mSettingsManager.getInteger(mAppController.getModuleScope(),
-                                                               Keys.KEY_CAMERA_ID);
-                      */
-                    // This is a quick fix for ISE in Gcam module which can be
-                    // found by rapid pressing camera switch button. The assumption
-                    // here is that each time this button is clicked, the listener
-                    // will do something and then enable this button again.
-                    button.setEnabled(false);
-                    if (cb != null) {
-                        /*
-                         * SPRD: Fix bug 555789 notify the state @{
-                         * original code
-                         *
-                        cb.onStateChanged(cameraId);
-                         */
-                        cb.onStateChanged(state);
-                        /* @} */
-                    }
-                    mAppController.getCameraAppUI().onChangeCamera();
-                }
-            }
-        });
+        
     }
 
     /* SPRD: Fix bug 555789 reset camera button @{ */
@@ -872,24 +738,7 @@
     private void initializeHdrPlusButton(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        initializeHdrPlusButtonIcons(button, resIdImages);
-
-        int index = mSettingsManager.getIndexOfCurrentValue(SettingsManager.SCOPE_GLOBAL,
-                                                            Keys.KEY_CAMERA_HDR_PLUS);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(SettingsManager.SCOPE_GLOBAL,
-                                                 Keys.KEY_CAMERA_HDR_PLUS, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
+       
     }
 
     private void initializeHdrPlusButtonIcons(MultiToggleImageButton button, int resIdImages) {
@@ -905,24 +754,7 @@
     private void initializeHdrButton(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        initializeHdrButtonIcons(button, resIdImages);
-
-        int index = mSettingsManager.getIndexOfCurrentValue(SettingsManager.SCOPE_GLOBAL,
-                                                            Keys.KEY_CAMERA_HDR);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(SettingsManager.SCOPE_GLOBAL,
-                                                 Keys.KEY_CAMERA_HDR, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
+      
     }
 
     private void initializeHdrButtonIcons(MultiToggleImageButton button, int resIdImages) {
@@ -937,26 +769,7 @@
      */
     private void initializeCountdownButton(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-
-        int index = mSettingsManager.getIndexOfCurrentValue(SettingsManager.SCOPE_GLOBAL,
-                                                            Keys.KEY_COUNTDOWN_DURATION);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(SettingsManager.SCOPE_GLOBAL,
-                                                 Keys.KEY_COUNTDOWN_DURATION, state);
-                if(cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
+        
     }
 
     /**
@@ -971,27 +784,7 @@
     private void initializeGridLinesButton(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.grid_lines_descriptions);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(SettingsManager.SCOPE_GLOBAL,
-                                                 Keys.KEY_CAMERA_GRID_LINES, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
-
-        int index = mSettingsManager.getIndexOfCurrentValue(SettingsManager.SCOPE_GLOBAL,
-                                                            Keys.KEY_CAMERA_GRID_LINES);
-        button.setState(index >= 0 ? index : 0, true);
+        
     }
 
    /**
@@ -1004,27 +797,7 @@
     private void initializeCameraButtonVG(MultiToggleImageButton button,
             final ButtonCallback cb, final ButtonCallback preCb,int resIdImages) {
 
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.camera_vgesture_descriptions);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(SettingsManager.SCOPE_GLOBAL,
-                                                 Keys.KEY_CAMERA_VGESTURE, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
-
-        int index = mSettingsManager.getIndexOfCurrentValue(SettingsManager.SCOPE_GLOBAL,
-                                                            Keys.KEY_CAMERA_VGESTURE);
-        button.setState(index >= 0 ? index : 0, true);
+      
     }
     /* @} */
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ui/FilmstripGestureRecognizer.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ui/FilmstripGestureRecognizer.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ui/FilmstripGestureRecognizer.java	(revision 175951)
@@ -56,7 +56,7 @@
     public FilmstripGestureRecognizer(Context context, Listener listener) {
         mListener = listener;
         mGestureDetector = new GestureDetector(context, new MyGestureListener(),
-                null, true /* ignoreMultitouch */);
+                ((CameraActivity) context).getMainHandler(), true /* ignoreMultitouch */);
         mGestureDetector.setOnDoubleTapListener(new MyDoubleTapListener());
         mScaleDetector = new ScaleGestureDetector(
                 context, new MyScaleListener());
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ui/CountDownView.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ui/CountDownView.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/android/camera/ui/CountDownView.java	(revision 175951)
@@ -22,6 +22,7 @@
 import android.graphics.RectF;
 import android.os.Handler;
 import android.os.Message;
+import android.os.Looper;
 import android.util.AttributeSet;
 import android.view.View;
 import android.widget.FrameLayout;
@@ -41,7 +42,7 @@
     private TextView mRemainingSecondsView;
     private int mRemainingSecs = 0;
     private OnCountDownStatusListener mListener;
-    private final Handler mHandler = new MainHandler();
+    private final Handler mHandler;
     private final RectF mPreviewArea = new RectF();
 
     /**
@@ -65,6 +66,7 @@
 
     public CountDownView(Context context, AttributeSet attrs) {
         super(context, attrs);
+		mHandler = new MainHandler(context.getMainLooper());
     }
 
     /**
@@ -170,6 +172,9 @@
     }
 
     private class MainHandler extends Handler {
+		public MainHandler(Looper looper) {
+            super(looper);
+        }
         @Override
         public void handleMessage(Message message) {
             if (message.what == SET_TIMER_TEXT) {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/sprd/camera/panora/WideAnglePanoramaModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/sprd/camera/panora/WideAnglePanoramaModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/sprd/camera/panora/WideAnglePanoramaModule.java	(revision 175951)
@@ -66,7 +66,6 @@
 import com.android.camera.hardware.HardwareSpec;
 import com.android.camera.hardware.HardwareSpecImpl;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.ui.TouchCoordinate;
 import com.android.camera.util.CameraUtil;
 import com.android.camera.util.GservicesHelper;
@@ -363,11 +362,6 @@
     }
 
     @Override
-    public void hardResetSettings(SettingsManager settingsManager) {
-
-    }
-
-    @Override
     public HardwareSpec getHardwareSpec() {
         return mCameraCapabilities != null ?
                 new HardwareSpecImpl(getCameraProvider(), mCameraCapabilities,
@@ -1496,13 +1490,7 @@
                 .getModuleView());
     }
 
-    // dream test 11
-    protected boolean getShutterSoundEnable() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        return settingsManager.getBoolean(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_SHUTTER_SOUND,
-                true);
-    }
+    
 
     /*Dream Camera test ui check 38 and 39 */
     protected void doSomethingWhenonShutterStateViewFinder() {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src/com/sprd/camera/aidetection/AIDetectionController.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src/com/sprd/camera/aidetection/AIDetectionController.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src/com/sprd/camera/aidetection/AIDetectionController.java	(revision 175951)
@@ -5,7 +5,6 @@
 package com.sprd.camera.aidetection;
 
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import android.util.Log;
 
 /**
@@ -25,22 +24,11 @@
     public static int SMILE_SCORE_X = 7;
     private static String strValue = VAL_FACE;
 
-    public AIDetectionController(SettingsManager sm) {
-        getChooseValue(sm);
-    }
+   
 
     public AIDetectionController() {
     }// SPRD: BUG 330578
 
-    private String getChooseValue(SettingsManager sm) {
-        if (sm != null) {
-            strValue = sm.getString(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_AI_DATECT);
-        }
-        Log.d(TAG, " getChooseValue strValue=" + strValue);
-        return strValue;
-    }
-
     public String getChooseValue(String value) {
         strValue = value;
         Log.d(TAG, " getChooseValue strValue=" + strValue);
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/thundersoft/advancedfilter/SmallAdvancedFilter.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/thundersoft/advancedfilter/SmallAdvancedFilter.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/thundersoft/advancedfilter/SmallAdvancedFilter.java	(revision 175951)
@@ -34,8 +34,8 @@
 import android.widget.Toast;
 import com.ucamera.ucam.modules.ufilter.UcamFilterPhotoModule;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 
+
 public class SmallAdvancedFilter implements View.OnTouchListener, TsAdvancedFilterNative.OnReceiveBufferListener {
     private static final String TAG = "SmallAdvancedFilter";
 
@@ -88,9 +88,6 @@
 //        mCamera = (CameraActivity)context;
         initData();
         initImgGirdView();
-
-        mSettingManager = new SettingsManager(context);
-
         setFilterType(TsAdvancedFilterNative.ADVANCEDFILTER_AUTUMN);
     }
     private void initFiltersTable() {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ufilter/UcamFilterPhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ufilter/UcamFilterPhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ufilter/UcamFilterPhotoUI.java	(revision 175951)
@@ -46,7 +46,8 @@
         OrientationManager.OnOrientationChangeListener {
     private static final Log.Tag TAG = new Log.Tag("UcamFilterPhotoUI");
     private ImageView mFilterButton;
-
+	
+	private ModeOptionsOverlay mModeOptionsOverlay;
     protected TsAdvancedFilterGLView mFilterGLView;
     protected SmallAdvancedFilter mSmallAdvancedFilter;
     // SPRD: Fix bug 574390 Quick click two times filter, no filter interface,Filter effect diagram disappear
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ufilter/UcamFilterPhotoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ufilter/UcamFilterPhotoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ufilter/UcamFilterPhotoModule.java	(revision 175951)
@@ -41,7 +41,6 @@
 import com.android.camera.one.OneCameraAccessException;
 import com.android.camera.settings.CameraPictureSizesCacher;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.settings.SettingsScopeNamespaces;
 import com.android.camera.settings.SettingsUtil;
 import com.android.camera.util.CameraUtil;
@@ -68,7 +67,6 @@
     private static final Log.Tag TAG = new Log.Tag(SettingsScopeNamespaces.FILTER);
 
     private Size mSize;
-    private SettingsManager mSettingsManager;
     protected TsAdvancedFilterGLView mAdvancedFilterGLView;
     protected SmallAdvancedFilter mSmallAdvancedFilter;
     private UcamFilterPhotoUI mFilterUI;
@@ -117,8 +115,6 @@
         mAdvancedFilterGLView = mFilterUI.getAdvancedFilterGLView();
         mSmallAdvancedFilter = mFilterUI.getSmallAdvancedFilter();
 
-        mSettingsManager = mActivity.getSettingsManager();
-        mSettingsManager.setToDefault(mSettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_TIME_STAMP);
         mCurrentModule = SettingsScopeNamespaces.FILTER;
         initializeModuleControls();
         Log.d(TAG, "makeModuleUI X.");
@@ -211,18 +207,6 @@
     }
 
     @Override
-    public void initCameraID() {
-        mSettingsManager.set(mAppController.getModuleScope(),
-                Keys.KEY_CAMERA_ID, mActivity.getCameraId());
-    }
-
-    @Override
-    public void setPhotoCameraID() {
-        int photoIndex = mActivity.getResources().getInteger(R.integer.camera_mode_photo);
-        mSettingsManager.set(mActivity.getModuleScope(photoIndex), Keys.KEY_CAMERA_ID, mCameraId);
-    };
-
-    @Override
     public void resume() {
         super.resume();
         mSmallAdvancedFilter.setUcamFilterPhotoModule(this);
@@ -374,100 +358,6 @@
     /* @} */
 
     @Override
-    protected void updateParametersPictureSize() {
-        if (mCameraDevice == null) {
-            Log.i(TAG, "attempting to set picture size without caemra device");
-            return;
-        }
-
-        List<Size> supported = Size.convert(mCameraCapabilities.getSupportedPhotoSizes());
-        CameraPictureSizesCacher.updateSizesForCamera(mAppController.getAndroidContext(),
-                mCameraDevice.getCameraId(), supported);
-
-        OneCamera.Facing cameraFacing =
-                isCameraFrontFacing() ? OneCamera.Facing.FRONT : OneCamera.Facing.BACK;
-        Size pictureSizeRestricted;
-        try {
-            // not bigger than 300 megapixels, hard-code max resolution here temporarily
-            // Fix bug 563079 filter mode in not full screen
-            SettingsManager settingsManager = mActivity.getSettingsManager();
-            final String pictureSizeSettingKey = cameraFacing == OneCamera.Facing.FRONT ?
-                    Keys.KEY_PICTURE_SIZE_FRONT : Keys.KEY_PICTURE_SIZE_BACK;
-            Size size = SettingsUtil.sizeFromSettingString(
-                    settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                            pictureSizeSettingKey));
-            Size preferredMaxSize;
-            if ((float) size.width() / (float) size.height() > 4.0f / 3.0f) {
-                preferredMaxSize = new Size(2048, 1152);
-            } else {
-                preferredMaxSize = new Size(2048, 1536);
-            }
-
-            pictureSizeRestricted = mAppController.getResolutionSetting().getPictureSize(
-                    mAppController.getCameraProvider().getCurrentCameraId(),
-                    cameraFacing, preferredMaxSize);
-        } catch (OneCameraAccessException ex) {
-            mAppController.getFatalErrorHandler().onGenericCameraAccessFailure();
-            return;
-        }
-        mCameraSettings.setPhotoSize(pictureSizeRestricted.toPortabilitySize());
-        Log.i(TAG, "setting photo size: " + pictureSizeRestricted);
-
-        // SPRD: add fix bug 555245 do not display thumbnail picture in MTP/PTP Mode at pc
-        mCameraSettings.setExifThumbnailSize(CameraUtil.getAdaptedThumbnailSize(pictureSizeRestricted,
-                mAppController.getCameraProvider()).toPortabilitySize());
-
-        // Set a preview size that is closest to the viewfinder height and has
-        // the right aspect ratio.
-        List<Size> sizes = Size.convert(mCameraCapabilities.getSupportedPreviewSizes());
-        Size optimalSize = CameraUtil.getOptimalPreviewSize(sizes,
-                (double) pictureSizeRestricted.width() / pictureSizeRestricted.height());
-
-        // Filter module does not support large sizes, we restrict them as follow.
-        Size optimalSizeRestricted;
-        if ((float) pictureSizeRestricted.width() / (float) pictureSizeRestricted.height() > 4.0f / 3.0f) {
-            optimalSizeRestricted = new Size(1280, 720);
-        } else {
-            optimalSizeRestricted = new Size(1280, 960);
-        }
-        if (optimalSize.height() * optimalSize.width()
-                > optimalSizeRestricted.height() * optimalSizeRestricted.width()) {
-            if (sizes.contains(optimalSizeRestricted)) {
-                optimalSize = optimalSizeRestricted;
-            } else {
-                Collections.sort(sizes, new Comparator<Size>() {
-                    @Override
-                    public int compare(Size lhs, Size rhs) {
-                        // sorted in descending order
-                        return rhs.height() * rhs.width() - lhs.height() * lhs.width();
-                    }
-                });
-                for (Size size : sizes) {
-                    if (size.height() * size.width()
-                            > optimalSizeRestricted.height() * optimalSizeRestricted.width()) {
-                        continue;
-                    }
-                    if (Math.abs((float)size.width() / (float)size.height()
-                            - (float)pictureSizeRestricted.width() / (float)pictureSizeRestricted.height()) > 0.00001) {
-                        continue;
-                    }
-                    optimalSize = size;
-                }
-            }
-        }
-
-        mCameraSettings.setPreviewSize(optimalSize.toPortabilitySize());
-        mCameraDevice.applySettings(mCameraSettings);
-        mCameraSettings = mCameraDevice.getSettings();
-
-        if (optimalSize.width() != 0 && optimalSize.height() != 0) {
-            mUI.updatePreviewAspectRatio((float) optimalSize.width()
-                    / (float) optimalSize.height());
-        }
-        Log.d(TAG, "Preview size is " + optimalSize);
-    }
-
-    @Override
     public void updateBatteryLevel(int level) {
         super.updateBatteryLevel(level, Keys.KEY_FLASH_MODE, ButtonManagerDream.BUTTON_FLASH_DREAM);
     }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ugif/edit/cate/BasicEditCate.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ugif/edit/cate/BasicEditCate.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/ugif/edit/cate/BasicEditCate.java	(revision 175951)
@@ -28,6 +28,7 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 import com.android.camera.app.CameraApp;
+import com.dream.camera.settings.DataModuleManager;
 
 import com.android.camera2.R;
 
@@ -62,10 +63,8 @@
                 mNestRectWidth = getBitmapWidth(GifEditDatas.getOriBitmaps()[0]);
                 mNestRectHeight = getBitmapHeight(GifEditDatas.getOriBitmaps()[0]);
             } else {
-                CameraApp application = (CameraApp) context.getApplicationContext();
-                SettingsManager settingsManager = CameraServicesImpl.instance().getSettingsManager();
-                String picsize = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,Keys.KEY_GIF_MODE_PIC_SIZE,
-                        context.getString(R.string.pref_gif_mode_pic_size_default));
+                String picsize = DataModuleManager.getInstance(
+                        context).getCurrentDataModule().getString(Keys.KEY_GIF_MODE_PIC_SIZE);
                 mNestRectWidth = mNestRectHeight = Integer.valueOf(picsize);
             }
         } else {
@@ -73,10 +72,8 @@
                 mNestRectWidth = getBitmapWidth(GifEditDatas.getResultBitmaps()[0]);
                 mNestRectHeight = getBitmapHeight(GifEditDatas.getResultBitmaps()[0]);
             } else {
-                CameraApp application = (CameraApp) context.getApplicationContext();
-                SettingsManager settingsManager = CameraServicesImpl.instance().getSettingsManager();
-                String picsize = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,Keys.KEY_GIF_MODE_PIC_SIZE,
-                        context.getString(R.string.pref_gif_mode_pic_size_default));
+                String picsize = DataModuleManager.getInstance(
+                        context).getCurrentDataModule().getString(Keys.KEY_GIF_MODE_PIC_SIZE);
                 mNestRectWidth = mNestRectHeight = Integer.valueOf(picsize);
             }
         }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/uscenery/SprdSceneryModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/uscenery/SprdSceneryModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_ucam/UCamera/src/com/ucamera/ucam/modules/uscenery/SprdSceneryModule.java	(revision 175951)
@@ -143,7 +143,7 @@
             showMenu();
             getUcamUI();
         }
-        mUI.intializeAIDetection(mActivity.getSettingsManager());
+        mUI.intializeAIDetection(mDataModuleCurrent);
         Log.d(TAG, "onPreviewStartedAfter E.");
     }
 
@@ -761,8 +761,7 @@
     }
 
     public boolean isCameraMirror() {
-        return mActivity.getSettingsManager().getBoolean(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_FRONT_CAMERA_MIRROR);
+		return false;
     }
     /* @} */
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/res_ucam/layout/ucam_magiclens_module.xml
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/res_ucam/layout/ucam_magiclens_module.xml	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/res_ucam/layout/ucam_magiclens_module.xml	(revision 175951)
@@ -24,64 +24,30 @@
     android:id="@+id/camera_root_view"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:layout_gravity="center">
-    <!-- Wrap a frame layout around texture view so that when scaled, texture
-         view will not draw outside its unscaled bounds -->
+    android:layout_gravity="center" >
+
+    <!--
+         Wrap a frame layout around texture view so that when scaled, texture
+         view will not draw outside its unscaled bounds
+    -->
+
     <FrameLayout
         android:id="@+id/frame_layout"
         android:layout_width="match_parent"
-        android:layout_height="match_parent">
+        android:layout_height="match_parent" >
+
         <!--
-        <TextureView
-            android:id="@+id/preview_content"
+         用于显示预览实时滤镜的GLSurfaceView。
+         TsAdvancedFilterGLView会显示在PreviewSurfaceView上层，遮挡住PreviewSurfaceView
+        -->
+
+        <ViewStub
+            android:id="@+id/ucam_magiclens_module_id"
             android:layout_width="match_parent"
-            android:layout_height="match_parent" />
-        <View
-            android:id="@+id/preview_cover"
-            android:layout_width="match_parent"
             android:layout_height="match_parent"
-            android:background="@android:color/black"
-            android:visibility="gone" />
-            -->
-        <!--用于显示预览实时滤镜的GLSurfaceView。
-         TsAdvancedFilterGLView会显示在PreviewSurfaceView上层，遮挡住PreviewSurfaceView
-         -->
-        <ViewStub
-        android:id="@+id/ucam_magiclens_module_id"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout="@layout/ucam_magiclens_module_advfilter" />
+            android:layout="@layout/ucam_magiclens_module_advfilter" />
+    </FrameLayout>
 
-    </FrameLayout>
-    <!--
-    <ImageView
-        android:id="@+id/review_image"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:visibility="gone"
-        android:clickable="true"
-        android:background="@android:color/black"
-        android:scaleType="fitCenter"/>
-    <View
-        android:id="@+id/flash_overlay"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:background="@android:color/white"
-        android:visibility="gone"
-        android:alpha="0" />
-     <ViewStub android:id="@+id/face_view_stub"
-        android:inflatedId="@+id/face_view"
-        android:layout="@layout/face_view"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:visibility="gone"/>
-    <com.android.camera.ui.RenderOverlay
-        android:id="@+id/render_overlay"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent" />
-    <include layout="@layout/camera_controls"
-        android:layout_gravity="center"
-        style="@style/CameraControls"/>
         -->
 
 </merge>
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/BasicModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/BasicModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/BasicModule.java	(revision 175951)
@@ -77,7 +77,6 @@
 import com.android.camera.settings.CameraPictureSizesCacher;
 import com.android.camera.settings.Keys;
 import com.android.camera.settings.ResolutionUtil;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.stats.SessionStatsCollector;
 import com.android.camera.stats.UsageStatistics;
 import com.android.camera.ui.CountDownView;
@@ -137,7 +136,6 @@
         ModuleController,
         MemoryListener,
         FocusOverlayManager.Listener,
-        SettingsManager.OnSettingChangedListener,
         RemoteCameraModule,
         CountDownView.OnCountDownStatusListener
         , MediaSaverImpl.Listener, /* SPRD:Add for bug 461734 add freeze for scenerymodule */
@@ -426,10 +424,6 @@
 
     protected void switchToGcamCapture() {
         if (mActivity != null && mGcamModeIndex != 0) {
-            SettingsManager settingsManager = mActivity.getSettingsManager();
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_HDR_PLUS, true);
-
             // Disable the HDR+ button to prevent callbacks from being
             // queued before the correct callback is attached to the button
             // in the new module. The new module will set the enabled/disabled
@@ -498,7 +492,7 @@
         mDataModuleCurrent = DataModuleManager.getInstance(
                 mAppController.getAndroidContext()).getCurrentDataModule();
 
-        mActivity.getCameraAppUI().initSidePanel();
+        
         /* @} */
 
         // SPRD initialize mJpegQualityController.
@@ -511,14 +505,9 @@
         mShutterSound.loadSounds(mActivity);
         // mActivity.setPreviewStatusListener(mUI);
 
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        initCameraID();
         // TODO: Move this to SettingsManager as a part of upgrade procedure.
         // Aspect Ratio selection dialog is only shown for Nexus 4, 5 and 6.
-        if (mAppController.getCameraAppUI().shouldShowAspectRatioDialog()) {
-            // Switch to back camera to set aspect ratio.
-            settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_ID);
-        }
+        
         mCameraId = mDataModule.getInt(Keys.KEY_CAMERA_ID);
 
         mContentResolver = mActivity.getContentResolver();
@@ -560,13 +549,13 @@
             // Cancel on-going countdown.
             mUI.cancelCountDown();
         }
-        if (!mActivity.getCameraAppUI().isInIntentReview() /*
+		if (!mActivity.getCameraAppUI().isBottomBarNull()
+                && !mActivity.getCameraAppUI().isInIntentReview() /*
                                                             * && !mActivity.getCameraAppUI().
                                                             * isInFreezeReview()
-                                                            */) {// SPRD:Fix bug 398341
+                                                            */){// SPRD:Fix bug 398341ix bug 398341
             mAppController.getCameraAppUI().transitionToCapture();
             mAppController.getCameraAppUI().setSwipeEnabled(true);
-            
             mAppController.setShutterEnabled(true);
         }
         /*SPRD: fix bug 599542 add for touch capture and count down @{*/
@@ -657,7 +646,7 @@
         }
         mAppController.freezeScreenUntilPreviewReady();
         freezeScreen(false, false);
-        SettingsManager settingsManager = mActivity.getSettingsManager();
+        
 
         closeCamera();
         mCameraId = mPendingSwitchCameraId;
@@ -664,7 +653,6 @@
         Log.i(TAG, "Start to switch camera. id=" + mPendingSwitchCameraId + " mCameraId="
                 + mCameraId);
         mDataModule.set(Keys.KEY_CAMERA_ID, mCameraId);
-        setPhotoCameraID();
         requestCameraOpen();
         if (mFocusManager != null) {
             mFocusManager.removeMessages();
@@ -706,16 +694,7 @@
                     }
                     // If switching to back camera, and HDR+ is still on,
                     // switch back to gcam, otherwise handle callback normally.
-                    SettingsManager settingsManager = mActivity.getSettingsManager();
-                    if (Keys.isCameraBackFacing(settingsManager,
-                            mAppController.getModuleScope())) {
-                        if (Keys.requestsReturnToHdrPlus(settingsManager,
-                                mAppController.getModuleScope())) {
-                            switchToGcamCapture();
-                            return;
-                        }
-                    }
-
+                    
                     ButtonManager buttonManager = mActivity.getButtonManager();
                     buttonManager.disableCameraButtonAndBlock();
 
@@ -730,39 +709,6 @@
                 }
             };
 
-    public final ButtonManager.ButtonCallback mHdrPlusCallback =
-            new ButtonManager.ButtonCallback() {
-                @Override
-                public void onStateChanged(int state) {
-                    SettingsManager settingsManager = mActivity.getSettingsManager();
-                    if (GcamHelper.hasGcamAsSeparateModule(
-                            mAppController.getCameraFeatureConfig())) {
-                        // Set the camera setting to default backfacing.
-                        settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-                                Keys.KEY_CAMERA_ID);
-                        switchToGcamCapture();
-                    } else {
-                        if (Keys.isHdrOn(settingsManager)) {
-                            settingsManager.set(mAppController.getCameraScope(),
-                                    Keys.KEY_SCENE_MODE,
-                                    mCameraCapabilities.getStringifier().stringify(
-                                            CameraCapabilities.SceneMode.HDR));
-                        } else {
-                            settingsManager.set(mAppController.getCameraScope(),
-                                    Keys.KEY_SCENE_MODE,
-                                    mCameraCapabilities.getStringifier().stringify(
-                                            CameraCapabilities.SceneMode.AUTO));
-                        }
-                        updateParametersSceneMode();
-                        if (mCameraDevice != null) {
-                            mCameraDevice.applySettings(mCameraSettings);
-                        }
-                        updateSceneMode();
-                    }
-                }
-            };
-
-
             public final ButtonManager.ButtonCallback mFlashCallback = new ButtonManager.ButtonCallback() {
                 @Override
                 public void onStateChanged(int state) {
@@ -803,15 +749,6 @@
         }
     };
 
-    @Override
-    public void hardResetSettings(SettingsManager settingsManager) {
-        // PhotoModule should hard reset HDR+ to off,
-        // and HDR to off if HDR+ is supported.
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR_PLUS, false);
-        if (GcamHelper.hasGcamAsSeparateModule(mAppController.getCameraFeatureConfig())) {
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR, false);
-        }
-    }
 
     @Override
     public HardwareSpec getHardwareSpec() {
@@ -864,10 +801,8 @@
     public void initBottomBarSpec(CameraAppUI.BottomBarUISpec bottomBarSpec) {
         bottomBarSpec.enableCamera = true;
         bottomBarSpec.cameraCallback = mCameraCallback;
-        bottomBarSpec.enableFlash = !mAppController.getSettingsManager()
-            .getBoolean(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR);
+        bottomBarSpec.enableFlash = mDataModuleCurrent.getBoolean(Keys.KEY_CAMERA_HDR) && !mIsBatteryLow;
         bottomBarSpec.enableHdr = true;
-        bottomBarSpec.hdrCallback = mHdrPlusCallback;
         bottomBarSpec.enableGridLines = true;
 //        bottomBarSpec.hideVGesture = true;
     }
@@ -875,12 +810,6 @@
     // either open a new camera or switch cameras
     private void openCameraCommon() {
         mUI.onCameraOpened(mCameraCapabilities, mCameraSettings);
-        if (mIsImageCaptureIntent) {
-            // Set hdr plus to default: off.
-            SettingsManager settingsManager = mActivity.getSettingsManager();
-            settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_HDR_PLUS);
-        }
         // CID 123737 : DLS: Dead local store (FB.DLS_DEAD_LOCAL_STORE)
         // SettingsManager settingsManager = mActivity.getSettingsManager();
 //        mShutterSoundEnabled = settingsManager.getBoolean(
@@ -896,15 +825,7 @@
         mAppController.updatePreviewAspectRatio(aspectRatio);
     }
 
-    private void resetExposureCompensation() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        if (settingsManager == null) {
-            Log.e(TAG, "Settings manager is null!");
-            return;
-        }
-        settingsManager.setToDefault(mAppController.getCameraScope(),
-                Keys.KEY_EXPOSURE);
-    }
+    
 
     // Snapshots can only be taken after this is called. It should be called
     // once only. We could have done these things in onCreate() but we want to
@@ -1184,18 +1105,7 @@
             zoomValue = mCameraSettings.getCurrentZoomRatio();
         }
         boolean hdrOn = CameraCapabilities.SceneMode.HDR == mSceneMode;
-        String flashSetting = mDataModuleCurrent.getString(Keys.KEY_FLASH_MODE);
-        boolean gridLinesOn = Keys.areGridLinesOn(mActivity.getSettingsManager());
-        // CID 123725 : Dereference before null check (REVERSE_INULL)
-        if (name != null) {
-            Log.i(TAG, "saveFinalPhoto title=" + name.title + ".jpg");
-            UsageStatistics.instance().photoCaptureDoneEvent(
-                eventprotos.NavigationChange.Mode.PHOTO_CAPTURE,
-                name.title + ".jpg", exif,
-                isCameraFrontFacing(), hdrOn, zoomValue, flashSetting, gridLinesOn,
-                (float) mTimerDuration, null, mShutterTouchCoordinate, mVolumeButtonClickedFlag,
-                null, null, null);
-        }
+       
         mShutterTouchCoordinate = null;
         mVolumeButtonClickedFlag = false;
         Log.i(TAG, "saveFinalPhoto mIsImageCaptureIntent=" + mIsImageCaptureIntent);
@@ -1526,10 +1436,6 @@
         }
 
         setCameraParameters(UPDATE_PARAM_ALL);
-        // Set a listener which updates camera parameters based
-        // on changed settings.
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        settingsManager.addListener(this);
         mCameraPreviewParamsReady = true;
 
         startPreview();
@@ -1768,6 +1674,10 @@
             mVolumeButtonClickedFlag = false;
             return;
         }
+		if(mUI.isZooming()){
+            Log.i(TAG, "camera is zooming,can not perform onShutterbuttonClick");
+            return;
+        }
         // mAppController.setShutterEnabled(false); // SPRD: FixBug 388808
         if (!mIsImageCaptureIntent) {// SPRD BUG:389377
             mContinuousCaptureCount = getContinuousCount();
@@ -2053,7 +1963,8 @@
         // SPRD: Bug540238 SoundPool leaks.
         mShutterSound.unloadSounds();
 
-        if (!mActivity.getCameraAppUI().isInIntentReview()) {
+        if (!mActivity.getCameraAppUI().isBottomBarNull() &&
+                !mActivity.getCameraAppUI().isInIntentReview()) {
             mNamedImages = null;
             // If we are in an image capture intent and has taken
             // a picture, we just clear it in onPause.
@@ -2086,8 +1997,6 @@
         mAppController.removePreviewAreaSizeChangedListener(mFocusManager);
         mAppController.removePreviewAreaSizeChangedListener(mUI);
 
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        settingsManager.removeListener(this);
 
         /* Add for Dream Camera */
         mDataModuleCurrent.removeListener(this);
@@ -2221,6 +2130,8 @@
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
+		if (mDataModuleCurrent == null || mActivity.getCameraAppUI().isBottomBarNull())
+            return false;
         switch (keyCode) {
             case KeyEvent.KEYCODE_VOLUME_UP:
             case KeyEvent.KEYCODE_VOLUME_DOWN:
@@ -2282,6 +2193,8 @@
 
    @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (mDataModuleCurrent == null || mActivity.getCameraAppUI().isBottomBarNull())
+            return false;
         switch (keyCode) {
             case KeyEvent.KEYCODE_VOLUME_UP:
             case KeyEvent.KEYCODE_VOLUME_DOWN:
@@ -2479,129 +2392,7 @@
         Log.i(TAG, "stopPreview end!");
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-//        Log.i(TAG, "BasicModule onSettingChanged key:" + key);
-//        SharedPreferences defaultPrefs = PreferenceManager.getDefaultSharedPreferences(
-//                mActivity.getAndroidContext());
-//        SharedPreferences.Editor editor = defaultPrefs.edit();
-//        int countDownDuration = mActivity.getSettingsManager().getInteger(
-//                SettingsManager.SCOPE_GLOBAL, Keys.KEY_COUNTDOWN_DURATION);
-//        if (key.equals(Keys.KEY_COUNTDOWN_DURATION) && countDownDuration > 0) {
-//            closeFace();
-//            /* SPRD: fix bug 471387 countDown - ZSL @{ */
-//            // if(Keys.isZslOn(settingsManager)){
-//            // settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_ZSL_DISPLAY);
-//            // mCameraSettings.setZslModeEnable(0);
-//            // Toast.makeText(mActivity,R.string.countdown_on_zsl_off,Toast.LENGTH_SHORT).show();
-//            // }
-//            /* @} */
-//        }
-//        if (key.equals(Keys.KEY_FLASH_MODE)) {
-//            updateParametersFlashMode();
-//            /* SPRD: Fix bug 406333 @{ */
-//            String flashValues = settingsManager.getString(mAppController.getCameraScope(),
-//                    Keys.KEY_FLASH_MODE);
-//            String burstNumber = settingsManager.getString(
-//                    SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_CONTINUE_CAPTURE);
-//            if (!"off".equals(flashValues) && !"one".equals(burstNumber) /*
-//                                                                          * ||
-//                                                                          * Keys.isZslOn(settingsManager
-//                                                                          * )
-//                                                                          */) {// SPRD:Fix bug
-//                                                                               // 409175
-//                settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_CONTINUE_CAPTURE);
-//                updateParametersBurstCount();
-//                // settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_ZSL_DISPLAY);
-//                // mCameraSettings.setZslModeEnable(0);
-//                // Toast.makeText(mActivity,R.string.flashmode_on_burst_off,Toast.LENGTH_SHORT).show();//
-//                // SPRD:Fix bug 415356
-//            }
-//            if (!"off".equals(flashValues)) {
-//                settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_SCENE_MODE);
-//                updateParametersSceneMode();
-//            }
-//            /* @} */
-//        }
-//        if (key.equals(Keys.KEY_CAMERA_HDR)) {
-//            if (settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,
-//                    Keys.KEY_CAMERA_HDR)) {
-//                Log.i(TAG,
-//                        "KEY_CAMERA_HDR:"
-//                                + settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,
-//                                        Keys.KEY_CAMERA_HDR));
-//                // HDR is on.
-//                /* SPRD: fix bug 471305 hdr - ZSL @{ */
-//                // mZSLBeforeSceneMode = settingsManager.getString(
-//                // SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_ZSL_DISPLAY);
-//                // editor.putString(Keys.KEY_CAMERA_ZSL_DISPLAY + 1, mZSLBeforeSceneMode);
-//                // settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_ZSL_DISPLAY);
-//                // mCameraSettings.setZslModeEnable(0);
-//                /* @} */
-//                /* SPRD: fix bug 381386 hdr - color effect; hdr - iso @{ */
-//                settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_COLOR_EFFECT);
-//                updateParametersColorEffect();
-//                // settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_ISO);
-//                updateParametersISO();
-//                /* @} */
-//                /* SPRD: hdr - burst @{ */
-//                if (!(settingsManager.getStringDefault(Keys.KEY_CAMERA_CONTINUE_CAPTURE)
-//                        .equals(settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-//                                Keys.KEY_CAMERA_CONTINUE_CAPTURE)))) {// SPRD:Fix bug 408178
-//                    settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-//                            Keys.KEY_CAMERA_CONTINUE_CAPTURE);
-//                    updateParametersBurstCount();
-//                }
-//                /* @} */
-//                /* SPRD: Fix bug 390999 hdr - whitebalance @{ */
-//                if (!(settingsManager.getStringDefault(Keys.KEY_WHITE_BALANCE)
-//                        .equals(settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-//                                Keys.KEY_WHITE_BALANCE)))) {
-//                    settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-//                            Keys.KEY_WHITE_BALANCE);
-//                    updateParametersWhiteBalance();
-//                }
-//                /* @} */
-//                mFlashModeBeforeSceneMode = settingsManager.getString(
-//                        mAppController.getCameraScope(), Keys.KEY_FLASH_MODE);
-//                // SPRD:FixBug 387101,Set flash mode is off when hdr is on!
-//                settingsManager.set(mAppController.getCameraScope(), Keys.KEY_FLASH_MODE, "off");
-//                mAppController.getButtonManager().disableButton(ButtonManager.BUTTON_FLASH);
-//
-//                closeFace();
-//                editor.apply();
-//            } else {
-//                Log.i(TAG, "mFlashModeBeforeSceneMode:" + mFlashModeBeforeSceneMode);
-//                if (mFlashModeBeforeSceneMode != null) {
-//                    settingsManager.set(mAppController.getCameraScope(),
-//                            Keys.KEY_FLASH_MODE,
-//                            mFlashModeBeforeSceneMode);
-//                    updateParametersFlashMode();
-//                    mFlashModeBeforeSceneMode = null;
-//                }
-//                // if(CameraUtil.isWCNDisabled()){
-//                // mAppController.getButtonManager().disableButton(ButtonManager.BUTTON_FLASH);
-//                // }else{
-//                mAppController.getButtonManager().enableButton(ButtonManager.BUTTON_FLASH);
-//                // }
-//                // mZSLBeforeSceneMode = defaultPrefs.getString(Keys.KEY_CAMERA_ZSL_DISPLAY + 1,
-//                // null);
-//                // if (mZSLBeforeSceneMode != null) {
-//                // settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-//                // Keys.KEY_CAMERA_ZSL_DISPLAY,
-//                // mZSLBeforeSceneMode);
-//                // mCameraSettings.setZslModeEnable(1);
-//                // mZSLBeforeSceneMode = null;
-//                // }
-//            }
-//        }
-//
-//        if (mCameraDevice != null) {
-//            mCameraDevice.applySettings(mCameraSettings);
-//        }
-    }
+   
 
     protected void updateCameraParametersInitialize() {
         // Reset preview frame rate to the maximum because it may be lowered by
@@ -2934,8 +2725,8 @@
             return;
         }
         String mface = mDataModuleCurrent.getString(Keys.KEY_CAMERA_AI_DATECT);
-        Log.i(TAG, " face = " + mface + " hdrState = " + isHdr());
-        if (!mface.equals(Keys.CAMERA_AI_DATECT_VAL_OFF) && isCameraIdle() && !isHdr()) {
+        Log.i(TAG, " face = " + mface);
+		if (!mface.equals(Keys.CAMERA_AI_DATECT_VAL_OFF) && isCameraIdle()) {
 //            mDataModuleCurrent.set(Keys.KEY_CAMERA_AI_DATECT,mface);
             startFaceDetection();
         } else if (mface.equals(Keys.CAMERA_AI_DATECT_VAL_OFF)) {
@@ -2983,43 +2774,8 @@
         Log.d(TAG, "updateParametersFlashMode = " + flashMode);
     }
 
-    protected void updateParametersHDR() {
-        if (mCameraDevice == null) {
-            return;
-        }
-        CameraCapabilities.Stringifier stringifier = mCameraCapabilities
-                .getStringifier();
+    
 
-        Log.d(TAG, "updateParametersHDR mSceneMode=" + mSceneMode + ","
-                + isHdr());
-        if (isHdr()) {
-            mSceneMode = CameraCapabilities.SceneMode.HDR;
-        } else {
-            mSceneMode = stringifier.sceneModeFromString("auto");
-        }
-
-        Log.d(TAG, "updateParametersSceneMode mSceneMode=" + mSceneMode);
-
-        if (mCameraCapabilities.supports(mSceneMode)) {
-            Log.d(TAG, "updateParametersHDR support currentSceneMode="
-                    + mCameraSettings.getCurrentSceneMode());
-            if (mCameraSettings.getCurrentSceneMode() != mSceneMode) {
-                mCameraSettings.setSceneMode(mSceneMode);
-
-                // Setting scene mode will change the settings of flash mode,
-                // white balance, and focus mode. Here we read back the
-                // parameters, so we can know those settings.
-                // mCameraDevice.applySettings(mCameraSettings);
-                // mCameraSettings = mCameraDevice.getSettings();
-            }
-        } else {
-            mSceneMode = mCameraSettings.getCurrentSceneMode();
-            if (mSceneMode == null) {
-                mSceneMode = CameraCapabilities.SceneMode.AUTO;
-            }
-        }
-    }
-
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     private void updateAutoFocusMoveCallback() {
         if (mCameraDevice == null) {
@@ -3329,12 +3085,7 @@
     }
 
     protected void updateParametersISO() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        // CameraCapabilities.ISO iso = mCameraCapabilities.getStringifier().isoModeFromString(
-        // settingsManager.getString(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_ISO));
-        // if (mCameraCapabilities.supports(iso)) {
-        // mCameraSettings.setISO(iso);
-        // }
+        
     }
 
     /* SPRD: porting new feature JPEG quality start @{ */
@@ -3399,6 +3150,7 @@
         if(!mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_CAMERA_GRID_LINES)){
             return;
         }
+		mAppController.getCameraAppUI().initGridlineView();
         String grid = mDataModuleCurrent.getString(Keys.KEY_CAMERA_GRID_LINES);
         mAppController.getCameraAppUI().updateScreenGridLines(grid);
         Log.d(TAG, "updateParametersGridLine = " + grid);
@@ -3424,74 +3176,6 @@
         mCameraSettings.setZslModeEnable(0);
     }
 
-    /*
-     * private void resetCameraSettings(SettingsManager settingsManager) {
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_PICTURE_SIZE_FRONT);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_PICTURE_SIZE_BACK);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_RECORD_LOCATION);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_COUNTDOWN_DURATION);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMER_ANTIBANDING);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_SCENE_MODE);
-     * settingsManager.setToDefault(mAppController.getCameraScope(), Keys.KEY_FLASH_MODE);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_FOCUS_MODE);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_WHITE_BALANCE);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_JPEG_QUALITY);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_GRID_LINES);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-     * Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_HDR_PLUS_FLASH_MODE);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-     * Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_FREEZE_FRAME_DISPLAY);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_COLOR_EFFECT);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_CONTINUE_CAPTURE);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_ISO);
-     * Keys.setManualExposureCompensation(settingsManager, false);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_JPEG_QUALITY);
-     * Map<String, String> mStorage= StorageUtil.supportedRootDirectory(); String external =
-     * mStorage.get(StorageUtil.KEY_DEFAULT_EXTERNAL); if (null == external) {
-     * settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_STORAGE_PATH,
-     * MultiStorage.KEY_DEFAULT_INTERNAL); }else{ settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-     * Keys.KEY_CAMERA_STORAGE_PATH, MultiStorage.KEY_DEFAULT_EXTERNAL); }
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMER_METERING);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_CONTRAST);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_SATURATION);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_BRIGHTNESS);
-     * settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_AI_DATECT); }
-     */
-    private boolean isHdr() {
-        // SettingsManager settingsManager = mActivity.getSettingsManager();
-        // return settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR);
-//        return Keys.isHdrOn(mActivity.getSettingsManager());
-        return false;
-    }
-
-//    private void faceDatectMutex() {
-//        SettingsManager settingsManager = mActivity.getSettingsManager();
-//        String mface = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-//                Keys.KEY_CAMERA_AI_DATECT);
-//        if (isHdr() && !mface.equals(Keys.CAMERA_AI_DATECT_VAL_OFF)) {
-//            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR, false);
-//        }
-//        int index = settingsManager.getIndexOfCurrentValue(SettingsManager.SCOPE_GLOBAL,
-//                Keys.KEY_COUNTDOWN_DURATION);
-//        if (index > 0 && !mface.equals(Keys.CAMERA_AI_DATECT_VAL_OFF)) {
-//            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_COUNTDOWN_DURATION, 0);
-//        }
-//    }
-
-    private void closeFace() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        String mFace = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_CAMERA_AI_DATECT);
-        if (!mFace.equals(Keys.CAMERA_AI_DATECT_VAL_OFF)) {
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_AI_DATECT,
-                    Keys.CAMERA_AI_DATECT_VAL_OFF);
-            stopFaceDetection();
-        }
-    }
-
     /* SPRD:Fix bug 473602 CAF do not need AF only flash on @{ */
     private boolean isFlashOn() {
         String flashValues = mDataModuleCurrent.getString(Keys.KEY_FLASH_MODE);
@@ -3598,12 +3282,8 @@
     }
     */
 
-    public void initCameraID() {
-    };
+   
 
-    public void setPhotoCameraID() {
-    };
-
     protected int getFrontCameraId() {
         if (getCameraProvider() != null) {
             return getCameraProvider().getFirstFrontCameraId();
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/ugif/GifModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/ugif/GifModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/ugif/GifModule.java	(revision 175951)
@@ -947,22 +947,8 @@
         Log.d(TAG, "updateGifModeNumSize = " + picNum);
     }
 
-    protected void updateParametersAntibanding() {
-        CameraCapabilities.Stringifier stringifier = mCameraCapabilities.getStringifier();
-        SettingsManager settingsManager = mActivity.getSettingsManager();
+    
 
-        String mAntibanding = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_CAMER_ANTIBANDING);
-        List<String> supportedAntibanding = null;
-        if (mParameters != null) {
-            supportedAntibanding = mParameters.getSupportedAntibanding();
-        }
-        if (mParameters != null && supportedAntibanding != null
-                && supportedAntibanding.contains(mAntibanding)) {
-            mCameraSettings.setAntibanding(stringifier.antibandingModeFromString(mAntibanding));
-        }
-    }
-
     @Override
     protected void setPreviewFrameLayoutAspectRatio() {
         /* SPRD:fix bug 462193 Occasionally generate gif error @{ */
@@ -1001,9 +987,7 @@
         }
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-    }
+    
 
     @Override
     public void onDreamSettingChangeListener(
@@ -1251,8 +1235,10 @@
         // CID 109221 : UrF: Unread field (FB.URF_UNREAD_FIELD)
         // numOfTakenPics = 0;
         isStartEditActicity = false;
-        String picSize = mDataModuleCurrent.getString(Keys.KEY_GIF_MODE_PIC_SIZE);
-        String picNum = mDataModuleCurrent.getString(Keys.KEY_GIF_MODE_NUM_SIZE);
+        String picSize = mDataModuleCurrent.getString(Keys.KEY_GIF_MODE_PIC_SIZE,
+                mActivity.getString(R.string.pref_gif_mode_pic_size_default));
+        String picNum = mDataModuleCurrent.getString(Keys.KEY_GIF_MODE_NUM_SIZE,
+                mActivity.getString(R.string.pref_gif_mode_pic_num_default));
 
         /* SPRD:add for Head upside down @{ */
         OrientationManager orientationManager = mAppController.getOrientationManager();
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/ui/BasicUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/ui/BasicUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamucamoverlay/ucam/modules/ui/BasicUI.java	(revision 175951)
@@ -39,7 +39,6 @@
 import com.android.camera.debug.DebugPropertyHelper;
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.ui.CountDownView;
 import com.android.camera.ui.FaceView;
 import com.android.camera.ui.PreviewOverlay;
@@ -491,8 +490,8 @@
         @}*/
         if (isNeedClearFaceView()/*((mAIController == null || mAIController.isChooseOff()))
                 || Keys.isHdrOn(mActivity.getSettingsManager()) || isCountDown*/) {
+                mFaceView.clear();
             if (mFaceView != null) {
-                mFaceView.clear();
             }
             return;
         }
@@ -525,9 +524,7 @@
         }
     }
 
-    public void intializeAIDetection(SettingsManager sm) {
-        mAIController = new AIDetectionController(sm);
-    }
+   
 
     public void intializeAIDetection(DataModuleBasic dataModuleCurrent) {
 
@@ -616,4 +613,11 @@
     public void setButtonVisibility(int buttonId, int visibility) {
         ((ButtonManagerDream)mActivity.getButtonManager()).setButtonVisibility(buttonId,visibility);
     }
+	//Sprd Fix Bug: 665197
+    public boolean isZooming(){
+        if (mPreviewOverlay == null) {
+            return false;
+        }
+        return mPreviewOverlay.isZooming();
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamsprdoverlay/camera/freeze/FreezeFrameDisplayControl.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamsprdoverlay/camera/freeze/FreezeFrameDisplayControl.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamsprdoverlay/camera/freeze/FreezeFrameDisplayControl.java	(revision 175951)
@@ -18,7 +18,6 @@
 import android.app.Dialog;
 
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.dream.camera.DreamOrientation;
 
 public class FreezeFrameDisplayControl implements FreezeFrameDisplayView.ProxyFreezeFrameClick,Rotatable {
@@ -31,7 +30,6 @@
     // freeze-frame display view
     private FreezeFrameDisplayView sView;
     private CameraActivity mActivity;
-    private SettingsManager mSettingsmanager;
     private FaceDetectionController mUI;
     private boolean mIsImageCaptureIntent;
     private Listener mListener;
@@ -56,15 +54,14 @@
     public FreezeFrameDisplayControl(CameraActivity activity,FaceDetectionController ui,
             boolean isImageCaptureIntent) {
         mActivity = activity;
-        mSettingsmanager = activity.getSettingsManager();
+        
         mUI = ui;
-        sFreezSwitch = getBooleanByPreferenceKey(Keys.KEY_FREEZE_FRAME_DISPLAY);
+        
     }
 
     public FreezeFrameDisplayControl(CameraActivity activity, FaceDetectionController ui,
             boolean isImageCaptureIntent, boolean freezSwitch) {
         mActivity = activity;
-        mSettingsmanager = activity.getSettingsManager();
         mUI = ui;
         sFreezSwitch = freezSwitch;
         Log.d(TAG,"DD sFreezSwitch"+sFreezSwitch);
@@ -100,7 +97,7 @@
 
     public boolean isFreezeFrame() {
         // SPRD: FixBug 269986,To obtain the values "FreezeDisplay".
-        sFreezSwitch = Keys.isFreezeDisplayOn(mSettingsmanager);
+        
         Log.d(TAG,"sFreezSwitch = " + sFreezSwitch);
         if (mListener != null)
         sBurstSwitch = mListener.proxyIsContinueTakePicture();
@@ -187,12 +184,7 @@
         mActivity.setSwipingEnabled(false);
         sView.runLoadResource(jpagByte,/*mActivity.isAutoCapture()*/false);
     }
-    /* bug 251198 end @} */
-
-    public boolean getBooleanByPreferenceKey(String key) {
-         return Keys.isFreezeDisplayOn(mSettingsmanager);
-    }
-
+    
     public void proxyRestartCamera() {
         if (!mIsImageCaptureIntent && mListener != null/*&& (mCameraStartUpThread == null)*/) {
             mListener.proxyStartPreview();
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ButtonManagerDream.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ButtonManagerDream.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ButtonManagerDream.java	(revision 175951)
@@ -36,7 +36,6 @@
 import com.android.camera.app.CameraAppUI;
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.ui.RadioOptions;
 import com.android.camera.util.GcamHelper;
 import com.android.camera.util.PhotoSphereHelper;
@@ -52,8 +51,7 @@
 /**
  * A class for generating pre-initialized {@link #android.widget.ImageButton}s.
  */
-public class ButtonManagerDream extends ButtonManager implements
-        SettingsManager.OnSettingChangedListener {
+public class ButtonManagerDream extends ButtonManager {
     private static final Log.Tag TAG = new Log.Tag("BMDream");
     public static final int BUTTON_FLASH_DREAM = 20;
     public static final int BUTTON_CAMERA_DREAM = 21;
@@ -68,9 +66,6 @@
     public static final int BUTTON_SETTING_DREAM = 30;
     public static final int BUTTON_MAKE_UP_VIDEO_DREAM = 31;
 
-    /** A reference to the application's settings manager. */
-    private final SettingsManager mSettingsManager;
-
     /** Bottom bar options toggle buttons. */
     private MultiToggleImageButton mButtonCameraDream;
     private MultiToggleImageButton mButtonFlashDream;
@@ -113,9 +108,6 @@
         super(app);
         mAppController = app;
 
-        mSettingsManager = app.getSettingsManager();
-        mSettingsManager.addListener(this);
-
         mDataModule = DataModuleManager.getInstance(
                 mAppController.getAndroidContext()).getDataModuleCamera();
 
@@ -157,65 +149,6 @@
         getButtonsReferencesDream(root);
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-        // MultiToggleImageButton button = null;
-        // int index = 0;
-        //
-        // if (key.equals(Keys.KEY_FLASH_MODE)) {
-        // index = mSettingsManager.getIndexOfCurrentValue(
-        // mAppController.getCameraScope(), Keys.KEY_FLASH_MODE);
-        // button = getButtonOrError(BUTTON_FLASH_DREAM);
-        // /**
-        // * SPRD: Change for New Feature Gif original code
-        // *
-        // * @{ else if (key.equals(Keys.KEY_VIDEOCAMERA_FLASH_MODE)) { index
-        // * = mSettingsManager.getIndexOfCurrentValue(mAppController.
-        // * getCameraScope(), Keys.KEY_VIDEOCAMERA_FLASH_MODE);
-        // */
-        // } else if (key.equals(Keys.KEY_VIDEOCAMERA_FLASH_MODE)
-        // || key.equals(Keys.KEY_GIF_FLASH_MODE)) {
-        // index = DataModuleManager
-        // .getInstance(mAppController.getAndroidContext())
-        // .getCurrentDataModule()
-        // .getIndexOfCurrentValue(
-        // mAppController.getCurrentModuleIndex() != mAppController
-        // .getAndroidContext().getResources()
-        // .getInteger(R.integer.camera_mode_gif) ?
-        // Keys.KEY_VIDEOCAMERA_FLASH_MODE
-        // : Keys.KEY_GIF_FLASH_MODE);
-        // /**
-        // * @}
-        // */
-        // button = getButtonOrError(BUTTON_TORCH_DREAM);
-        // } else if (key.equals(Keys.KEY_CAMERA_ID)) {
-        // index = mDataModule.getIndexOfCurrentValue(Keys.KEY_CAMERA_ID);
-        // button = getButtonOrError(BUTTON_CAMERA_DREAM);
-        // } else if (key.equals(Keys.KEY_CAMERA_HDR)) {
-        // index = mSettingsManager.getIndexOfCurrentValue(
-        // SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR);
-        // button = getButtonOrError(BUTTON_HDR_DREAM);
-        // } else if (key.equals(Keys.KEY_EXPOSURE)) {
-        // updateExposureButtons();
-        // } else if (key.equals(Keys.KEY_CAMER_METERING)) {
-        // index = mSettingsManager.getIndexOfCurrentValue(
-        // SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMER_METERING);
-        // button = getButtonOrError(BUTTON_METERING_DREAM);
-        // } else if (key.equals(Keys.KEY_CAMERA_BEAUTY_ENTERED)) {
-        // index = mSettingsManager.getIndexOfCurrentValue(
-        // SettingsManager.SCOPE_GLOBAL,
-        // Keys.KEY_CAMERA_BEAUTY_ENTERED);
-        // button = getButtonOrError(BUTTON_MAKE_UP_DREAM);
-        // } else if (key.equals(Keys.KEY_VIDEO_FLASH_MODE)) {
-        // index = mSettingsManager.getIndexOfCurrentValue(
-        // SettingsManager.SCOPE_GLOBAL, Keys.KEY_VIDEO_FLASH_MODE);
-        // button = getButtonOrError(BUTTON_VIDEO_FLASH_DREAM);
-        // }
-        // if (button != null && button.getState() != index) {
-        // button.setState(Math.max(index, 0), false);
-        // }
-    }
-
     /**
      * Returns the appropriate {@link com.android.camera.MultiToggleImageButton}
      * based on button id. An IllegalStateException will be throw if the button
@@ -910,93 +843,6 @@
     }
 
     /**
-     * Initialize video torch button
-     */
-    private void initializeTorchButton(MultiToggleImageButton button,
-            final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
-
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.video_flash_descriptions);
-
-        /**
-         * SPRD: Change for New Feature Gif original code
-         * 
-         * @{ int index =
-         *    mSettingsManager.getIndexOfCurrentValue(mAppController.
-         *    getCameraScope(), Keys.KEY_VIDEOCAMERA_FLASH_MODE);
-         */
-        int index = mSettingsManager
-                .getIndexOfCurrentValue(
-                        mAppController.getCameraScope(),
-                        mAppController.getCurrentModuleIndex() != mAppController
-                                .getAndroidContext().getResources()
-                                .getInteger(R.integer.camera_mode_gif) ? Keys.KEY_VIDEOCAMERA_FLASH_MODE
-                                : Keys.KEY_GIF_FLASH_MODE);
-        /**
-         * @}
-         */
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                /**
-                 * SPRD: Change for New Feature Gif original code
-                 * 
-                 * @{ mSettingsManager.setValueByIndex(mAppController.
-                 *    getCameraScope(), Keys.KEY_VIDEOCAMERA_FLASH_MODE, state);
-                 */
-                mSettingsManager.setValueByIndex(
-                        mAppController.getCameraScope(),
-                        mAppController.getCurrentModuleIndex() != mAppController
-                                .getAndroidContext().getResources()
-                                .getInteger(R.integer.camera_mode_gif) ? Keys.KEY_VIDEOCAMERA_FLASH_MODE
-                                : Keys.KEY_GIF_FLASH_MODE, state);
-                /**
-                 * @}
-                 */
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
-    }
-
-    /**
-     * Initialize hdr plus flash button
-     */
-    private void initializeHdrPlusFlashButton(MultiToggleImageButton button,
-            final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
-
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.hdr_plus_flash_descriptions);
-
-        int index = mSettingsManager.getIndexOfCurrentValue(
-                mAppController.getModuleScope(), Keys.KEY_HDR_PLUS_FLASH_MODE);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(
-                        mAppController.getModuleScope(),
-                        Keys.KEY_HDR_PLUS_FLASH_MODE, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
-    }
-
-    /**
      * Initialize a camera button.
      */
     private void initializeCameraButton(final MultiToggleImageButton button,
@@ -1046,32 +892,6 @@
         });
     }
 
-    /**
-     * Initialize an hdr plus button.
-     */
-    private void initializeHdrPlusButton(MultiToggleImageButton button,
-            final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
-
-        initializeHdrPlusButtonIcons(button, resIdImages);
-
-        int index = mSettingsManager.getIndexOfCurrentValue(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR_PLUS);
-        button.setState(index >= 0 ? index : 0, false);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_CAMERA_HDR_PLUS, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
-    }
-
     private void initializeHdrPlusButtonIcons(MultiToggleImageButton button,
             int resIdImages) {
         if (resIdImages > 0) {
@@ -1161,36 +981,7 @@
      * Math.round(compValue * mExposureCompensationStep);
      * mModeOptionsExposure.setSelectedOptionByTag(String.valueOf(comp)); } }
      */
-    /**
-     * Initialize a grid lines button.
-     */
-    private void initializeGridLinesButton(MultiToggleImageButton button,
-            final ButtonCallback cb, final ButtonCallback preCb, int resIdImages) {
 
-        if (resIdImages > 0) {
-            button.overrideImageIds(resIdImages);
-        }
-        button.overrideContentDescriptions(R.array.grid_lines_descriptions);
-
-        int index = mSettingsManager.getIndexOfCurrentValue(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_GRID_LINES);
-        button.setState(index >= 0 ? index : 0, true);
-
-        setPreChangeCallback(button, preCb);
-
-        button.setOnStateChangeListener(new MultiToggleImageButton.OnStateChangeListener() {
-            @Override
-            public void stateChanged(View view, int state) {
-                mSettingsManager.setValueByIndex(SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_CAMERA_GRID_LINES, state);
-                if (cb != null) {
-                    cb.onStateChanged(state);
-                }
-            }
-        });
-
-    }
-
     /**
      * Initialize a metering button.
      */
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DreamUIPreferenceSettingFragment.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DreamUIPreferenceSettingFragment.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DreamUIPreferenceSettingFragment.java	(revision 175951)
@@ -69,6 +69,9 @@
     @Override
     public void onResume() {
         super.onResume();
+		if (mCameraPart == null) {
+            return;
+        }
         mCameraPart.addListener();
         if (mDataSetting.mCategory
                 .equals(DataConfig.CategoryType.CATEGORY_PHOTO)) {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DreamResolutionSetting.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DreamResolutionSetting.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DreamResolutionSetting.java	(revision 175951)
@@ -29,7 +29,6 @@
 import com.android.camera.one.OneCameraManager;
 import com.android.camera.settings.Keys;
 import com.android.camera.settings.ResolutionUtil;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.settings.SettingsUtil;
 import com.android.camera.util.GservicesHelper;
 import com.android.camera.util.Size;
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DataModuleManager.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DataModuleManager.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DataModuleManager.java	(revision 175951)
@@ -16,6 +16,7 @@
 
     // handler for camera module
     private DataModuleCamera mDataModuleCamera;
+    private DataModuleCamera mDataModuleCameraTemp;
     // handler for photo module
     private DataModulePhoto mDataModulePhoto;
     // handler for video module
@@ -42,7 +43,9 @@
 //        mTempDataModulePhoto = new DataModulePhoto(mContext);
 //        mTempDataModuleVideo = new DataModuleVideo(mContext);
         mDataModuleTemp = new DataModuleTemp(mContext);
-
+        mDataModuleCameraTemp = new DataModuleCamera(mContext);
+    }
+    public void initializeDataModuleCamera(){
         mDataModuleCamera.initializeData(new DataStructSetting(
                 DataConfig.CategoryType.CATEGORY_CAMERA, true, null, 0));
     }
@@ -118,8 +121,10 @@
         mDataModuleTemp.changeCurrentModule(mTempDataSetting);
         return mDataModuleTemp;
     }
+    public DataModuleBasic getTempCameraModule() {
+        return mDataModuleCameraTemp;
+    }
 
-
     public DataModuleBasic getDataModule(String category) {
         if (category.equals(DataConfig.CategoryType.CATEGORY_CAMERA)) {
             return mDataModuleCamera;
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DataModulePhoto.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DataModulePhoto.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/settings/DataModulePhoto.java	(revision 175951)
@@ -249,6 +249,11 @@
                 continueSetMutex(Keys.KEY_CAMERA_ZSL_DISPLAY, false, keyList,
                         "hdr mutex with zsl");
             }
+			 // HDR - BEAUTY
+            if (getBoolean(Keys.KEY_CAMERA_BEAUTY_ENTERED)) {
+                continueSetMutex(Keys.KEY_CAMERA_BEAUTY_ENTERED, false, keyList,
+                        "hdr mutex with beauty");
+            }
 
         }
         // RESTORE
@@ -259,6 +264,8 @@
                     "hdr restore color effect");
             continueSetRestore(Keys.KEY_CAMERA_ZSL_DISPLAY, keyList,
                     "hdr restore zsl");
+			continueSetRestore(Keys.KEY_CAMERA_BEAUTY_ENTERED, keyList,
+                    "hdr restore beauty");
         }
 
     }
@@ -513,6 +520,16 @@
 
     private void setMutexBeauty(String key, String entryValue,
             Set<String> keyList) {
+		if (getBoolean(Keys.KEY_CAMERA_BEAUTY_ENTERED)) {
+            //Beauty - HDR
+            if (getBoolean(Keys.KEY_CAMERA_HDR)) {
+                continueSetMutex(Keys.KEY_CAMERA_HDR, false, keyList,
+                        "beauty mutex with hdr");
+            }
+        } else {
+            continueSetRestore(Keys.KEY_CAMERA_HDR, keyList,
+                    "beauty resotre hdr");
+        }
         // MAKEUP --- MUTEX WITH Vgesture
 //        if (!"0".equals(entryValue)) {
 //            if (UCamUtill.isVgestureEnnable()
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifphoto/GifPhotoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifphoto/GifPhotoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifphoto/GifPhotoModule.java	(revision 175951)
@@ -8,7 +8,6 @@
 import com.android.camera.app.AppController;
 import com.android.camera.app.CameraAppUI;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.dream.camera.ButtonManagerDream;
 import com.dream.camera.dreambasemodules.DreamGifModule;
 import com.dream.camera.util.DreamUtil;
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifphoto/GifPhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifphoto/GifPhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifphoto/GifPhotoUI.java	(revision 175951)
@@ -11,7 +11,6 @@
 import com.android.camera.debug.Log;
 import com.ucamera.ucam.modules.ugif.GifModule;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 
 import com.android.camera2.R;
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/scenerydream/DreamSceneryUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/scenerydream/DreamSceneryUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/scenerydream/DreamSceneryUI.java	(revision 175951)
@@ -10,7 +10,6 @@
 import com.android.camera.PhotoController;
 
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera2.R;
 
 import com.dream.camera.dreambasemodules.DreamBasicUI;
@@ -101,8 +100,4 @@
         super.updateSidePanel();
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-
-    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/scenerydream/DreamSceneryModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/scenerydream/DreamSceneryModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/scenerydream/DreamSceneryModule.java	(revision 175951)
@@ -44,8 +44,6 @@
         // super.switchCamera();
         mActivity.switchFrontAndBackMode();
 
-        mActivity.getCameraAppUI().updateModeList();
-
     }
 
     @Override
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/qr/ReuseModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/qr/ReuseModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/qr/ReuseModule.java	(revision 175951)
@@ -12,7 +12,6 @@
 import com.android.camera.debug.Log;
 import com.android.camera.hardware.HardwareSpec;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.ui.TouchCoordinate;
 import android.hardware.Camera;
 import android.view.KeyEvent;
@@ -84,8 +83,6 @@
         mShutterSound.loadSounds(mActivity);
         // mActivity.setPreviewStatusListener(mUI);
 
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        initCameraID();
         mCameraId = mDataModule.getInt(Keys.KEY_CAMERA_ID);
     }
 
@@ -150,8 +147,6 @@
 
     }
 
-    public void initCameraID() {
-    }
     public void makeModuleUI(ReuseController controller, View parent){
     }
     @Override
@@ -189,11 +184,6 @@
     }
 
     @Override
-    public void hardResetSettings(SettingsManager settingsManager) {
-        // TODO Auto-generated method stub
-    }
-
-    @Override
     public HardwareSpec getHardwareSpec() {
         // TODO Auto-generated method stub
         return null;
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/qr/ReusePhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/qr/ReusePhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/qr/ReusePhotoUI.java	(revision 175951)
@@ -6,7 +6,6 @@
 import com.android.camera.ButtonManager;
 import com.android.camera.CameraActivity;
 import com.android.camera.debug.Log;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera2.R;
 import com.dream.camera.ButtonManagerDream;
 import com.dream.camera.dreambasemodules.DreamInterface;
@@ -133,11 +132,7 @@
     public int getSidePanelMask() {
         return sidePanelMask;
     }
-
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-    }
-
+	
     private void initIndicators() {
         // TODO init toggle buttons on bottom bar here
     }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intentcapture/DreamIntentCaptureModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intentcapture/DreamIntentCaptureModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intentcapture/DreamIntentCaptureModule.java	(revision 175951)
@@ -4,7 +4,6 @@
 import com.android.camera.app.AppController;
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.util.GservicesHelper;
 import com.android.camera.CameraActivity;
 import com.android.camera.PhotoUI;
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/manualphoto/ManualPhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/manualphoto/ManualPhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/manualphoto/ManualPhotoUI.java	(revision 175951)
@@ -16,7 +16,6 @@
 import com.android.camera.app.AppController;
 
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 
 import com.android.camera2.R;
 
@@ -366,83 +365,7 @@
         }
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-        //
-        // // EXPOSURE
-        // if (Keys.KEY_EXPOSURE.equals(key)) {
-        // int exposure = settingsManager.getInteger(
-        // mActivity.getCameraScope(), Keys.KEY_EXPOSURE);
-        // int exposureIndex = exposure + 3;
-        //
-        // eExposureTv.setText(mActivity.getAndroidContext().getString(
-        // SettingsList.EXPOSURE_DISPLAY[exposureIndex]));
-        //
-        // eExposureSeekBar.setProgress(exposureIndex);
-        // return;
-        // }
-        //
-        // // ISO
-        // if (Keys.KEY_CAMERA_ISO.equals(key)) {
-        // String iso = settingsManager.getString(
-        // SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_ISO);
-        // int isoIndex = SettingsList.indexOf(iso, SettingsList.ISO,
-        // SettingsList.ISO_DEFAULT);
-        //
-        // eIsoTv.setText(mActivity.getAndroidContext().getString(
-        // SettingsList.ISO_DISPLAY[isoIndex]));
-        //
-        // eIsoSeekBar.setProgress(isoIndex);
-        // return;
-        // }
-        //
-        // // WHITE_BALANCE
-        // if (Keys.KEY_WHITE_BALANCE.equals(key)) {
-        // String wb = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-        // Keys.KEY_WHITE_BALANCE);
-        // int wbIndex = SettingsList.indexOf(wb, SettingsList.WHITE_BALANCE,
-        // SettingsList.WHITE_BALANCE_DEFAULT);
-        //
-        // eWbTv.setText(mActivity.getAndroidContext().getString(
-        // SettingsList.WHITE_BALANCE_DISPLAY[wbIndex]));
-        //
-        // eWbSeekBar.setProgress(wbIndex);
-        // return;
-        // }
-        //
-        // // CONTRAST
-        // if (Keys.KEY_CAMERA_CONTRAST.equals(key)) {
-        // String contrast = settingsManager.getString(
-        // SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_CONTRAST);
-        // int contrastIndex = SettingsList.indexOf(contrast,
-        // SettingsList.CONTRAST, SettingsList.CONTRAST_DEFAULT);
-        //
-        // eContrastSeekBar.setProgress(contrastIndex);
-        // return;
-        // }
-        //
-        // // SATURATION
-        // if (Keys.KEY_CAMERA_SATURATION.equals(key)) {
-        // String saturation = settingsManager.getString(
-        // SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_SATURATION);
-        // int saturatioIndex = SettingsList.indexOf(saturation,
-        // SettingsList.SATURATION, SettingsList.SATURATION_DEFAULT);
-        //
-        // eSaturationSeekBar.setProgress(saturatioIndex);
-        // return;
-        // }
-        //
-        // // BRIGHTNESS
-        // if (Keys.KEY_CAMERA_BRIGHTNESS.equals(key)) {
-        // String brightness = settingsManager.getString(
-        // SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_BRIGHTNESS);
-        // int brightnessIndex = SettingsList.indexOf(brightness,
-        // SettingsList.BRIGHTNESS, SettingsList.BRIGHTNESS_DEFAULT);
-        //
-        // eBrightnessSeekBar.setProgress(brightnessIndex);
-        // return;
-        // }
-    }
+    
 
     @Override
     public void onProgressChanged(SeekBar seekBar, int progress,
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifvideo/GifVideoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifvideo/GifVideoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifvideo/GifVideoModule.java	(revision 175951)
@@ -5,7 +5,6 @@
 import com.android.camera.app.AppController;
 import com.android.camera.app.CameraAppUI;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.dream.camera.ButtonManagerDream;
 import com.dream.camera.dreambasemodules.DreamGifModule;
 import android.view.View;
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifvideo/GifVideoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifvideo/GifVideoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/gifvideo/GifVideoUI.java	(revision 175951)
@@ -11,7 +11,6 @@
 import com.android.camera.debug.Log;
 import com.ucamera.ucam.modules.ugif.GifModule;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 
 import com.android.camera2.R;
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/AudioPicture/AudioPictureModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/AudioPicture/AudioPictureModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/AudioPicture/AudioPictureModule.java	(revision 175951)
@@ -6,7 +6,6 @@
 import com.android.camera.debug.Log;
 import com.android.camera.exif.ExifInterface;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.util.GservicesHelper;
 import com.android.camera.util.Size;
 import com.android.camera.util.ToastUtil;
@@ -63,7 +62,7 @@
 
     @Override
     public PhotoUI createUI(CameraActivity activity) {
-        ViewStub viewStubRecordProgess = (ViewStub) activity.findViewById(R.id.layout_photo_voice_record_progess_id);
+       ViewStub viewStubRecordProgess = (ViewStub) activity.findViewById(R.id.layout_photo_voice_record_progess_id);
         if (viewStubRecordProgess != null) {
             viewStubRecordProgess.inflate();
         }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/AudioPicture/AudioPictureUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/AudioPicture/AudioPictureUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/AudioPicture/AudioPictureUI.java	(revision 175951)
@@ -13,7 +13,6 @@
 
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera2.R;
 
 import android.widget.FrameLayout;
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intervalphoto/IntervalPhotoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intervalphoto/IntervalPhotoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intervalphoto/IntervalPhotoModule.java	(revision 175951)
@@ -12,7 +12,6 @@
 import android.net.Uri;
 import android.view.View;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.dream.camera.dreambasemodules.DreamPhotoUI;
 import android.graphics.Bitmap;
 public class IntervalPhotoModule extends DreamPhotoModule {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intervalphoto/IntervalPhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intervalphoto/IntervalPhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/intervalphoto/IntervalPhotoUI.java	(revision 175951)
@@ -128,8 +128,10 @@
         updateIntervalFreezeFrameUI(View.VISIBLE);
         // ui check 129,dream camera test 121
         // interval self own
-        if (DataModuleManager.getInstance(mActivity).getCurrentDataModule()
-                .getBoolean(Keys.KEY_CAMERA_BEAUTY_ENTERED)) {
+         if (mMakeupController != null
+                && mBasicModule.isUcamBeautyCanBeUsed()
+                && DataModuleManager.getInstance(mActivity).getCurrentDataModule()
+                        .getBoolean(Keys.KEY_CAMERA_BEAUTY_ENTERED)) {
             mMakeupController.resumeMakeupControllerView();
         }
     }
@@ -152,14 +154,16 @@
 
         View fourList = mActivity.findViewById(R.id.four_list);
 
-        if (show) {
-            bottomBar.setVisibility(View.GONE);
-            fourList.setVisibility(View.VISIBLE);
-            ((IntervalPhotoModule) mController).setCanShutter(false);
-        } else {
-            bottomBar.setVisibility(View.VISIBLE);
-            fourList.setVisibility(View.GONE);
-            ((IntervalPhotoModule) mController).setCanShutter(true);
+         if (bottomBar != null && fourList != null) {
+            if (show) {
+                bottomBar.setVisibility(View.GONE);
+                fourList.setVisibility(View.VISIBLE);
+                ((IntervalPhotoModule) mController).setCanShutter(false);
+            } else {
+                bottomBar.setVisibility(View.VISIBLE);
+                fourList.setVisibility(View.GONE);
+                ((IntervalPhotoModule) mController).setCanShutter(true);
+            }
         }
 
         if (previewOne == null || previewTwo == null || previewThree == null
@@ -252,7 +256,9 @@
         // ui check 129
         // interval self own
         //mMakeupController.pauseMakeupControllerView();
-        mMakeupController.pauseMakeupControllerView(false);
+        if (mMakeupController != null && mBasicModule.isUcamBeautyCanBeUsed()) {
+            mMakeupController.pauseMakeupControllerView(false);
+        }
     }
 
     /* @} */
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/filterdream/DreamFilterModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/filterdream/DreamFilterModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/filterdream/DreamFilterModule.java	(revision 175951)
@@ -50,7 +50,7 @@
             public void run() {
                 if (!mPaused) {
                     mActivity.switchFrontAndBackMode();
-                    mActivity.getCameraAppUI().updateModeList();
+                   
                 }
             }
         });
@@ -62,8 +62,7 @@
         super(app);
     }
 
-    @Override
-    public void setPhotoCameraID() { };
+    
 
     @Override
     public void makeModuleUI(PhotoController controller, View parent) {
@@ -97,9 +96,7 @@
         setFilterHandle(true);
     }
 
-    @Override
-    public void initCameraID() {
-    }
+   
 
     @Override
     public void delayUiPause() {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/continuephoto/ContinuePhotoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/continuephoto/ContinuePhotoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/continuephoto/ContinuePhotoModule.java	(revision 175951)
@@ -46,9 +46,12 @@
         //mActivity.getCameraAppUI().setBottomBarRightUI(View.VISIBLE);
         super.resume();
         mBurstNotShowShutterButton = false;
+        mHasCaputureCount = 0;
         mBurstCaptureType = -1;
         mAppController.getCameraAppUI().setShutterButtonEnabled(true);
         ((ContinuePhotoUI) mUI).changeOtherUIVisible(false, View.VISIBLE);
+        mActivity.getModuleLayoutRoot().findViewById(R.id.shutter_button)
+                .setOnTouchListener(this);
     }
 
     @Override
@@ -66,6 +69,8 @@
 //                        R.string.pref_camera_burst_entry_defaultvalue));
         ((ContinuePhotoUI) mUI).changeExtendPanelUI(View.GONE);
         mAppController.getCameraAppUI().setBursting(false);
+        mActivity.getModuleLayoutRoot().findViewById(R.id.shutter_button)
+                .setOnTouchListener(null);
         super.pause();
     }
 
@@ -81,7 +86,12 @@
     protected void doSomethingWhenonPictureTaken() {
         captureAlready++;
         ((ContinuePhotoUI) mUI).updateCaptureUI("" + captureAlready);
-        if (mBurstNotShowShutterButton) {
+        if (captureAlready == mBurstCount) {
+            mBurstAllDone = true;
+            handleActionUp();
+        }
+
+        if (mHasCaputureCount == captureAlready || mBurstAllDone) {
             mHandler.post(new Runnable() {
                 @Override
                 public void run() {
@@ -88,6 +98,14 @@
                     mUI.showBurstScreenHint(captureAlready);
                 }
             });
+            //SPRD:Fix Bug665117
+            getHandler().postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    ((ContinuePhotoUI) mUI).changeExtendPanelUI(View.GONE);
+                }
+            },1000);
+            mHasCaputureCount = 0;
         }
     }
 
@@ -106,6 +124,15 @@
 
     @Override
     protected void handleActionDown(int action) {
+        if (mBurstCaptureType != -1) {
+            Log.e(TAG, "handleActionDown is running while handleActionUp not");
+            return;
+        }
+        //Sprd Fix bug:665197
+        if (mUI.isZooming()){
+            Log.i(TAG, "camera can not burst capture when zooming");
+            return;
+        }
         //SPRD:Fix Bug670446
         if (mAppController.getCameraAppUI().isThumbnailViewPressed()
                 || !mAppController.getCameraAppUI().isShutterButtonClickable()) {
@@ -121,16 +148,7 @@
 
     @Override
     protected void handleActionUp() {
-        // show something
-        //if(mBurstMode) {
-            getHandler().postDelayed(new Runnable() {
-                @Override
-                public void run() {
-                    ((ContinuePhotoUI) mUI).changeExtendPanelUI(View.GONE);
-                }
-            }, 1000);
-            ((ContinuePhotoUI) mUI).changeOtherUIVisible(false, View.VISIBLE);
-        //}
+        ((ContinuePhotoUI) mUI).changeOtherUIVisible(false, View.VISIBLE);
         super.handleActionUp();
     }
 
@@ -185,4 +203,9 @@
     public boolean isShutterClicked(){
         return !mAppController.isShutterEnabled() || isBurstCapturing();
     }
+    private int mHasCaputureCount = 0;//the count of requests sent to hal
+    @Override
+    public void onCanceled(int count) {//SPRD:Fix Bug665117
+        mHasCaputureCount = getCurrentBurstCountFromSettings() - count;
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/continuephoto/ContinuePhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/continuephoto/ContinuePhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/continuephoto/ContinuePhotoUI.java	(revision 175951)
@@ -84,6 +84,9 @@
     }
 
     public void changeExtendPanelUI(int visibility) {
+        if (mExtendPanel == null) {
+            return;
+        }
         mExtendPanel.setVisibility(visibility);
     }
 
@@ -96,6 +99,6 @@
     }
 
     public boolean getExtendPanelVisibility() {
-        return View.VISIBLE == mExtendPanel.getVisibility();
+        return (mExtendPanel != null) && View.VISIBLE == mExtendPanel.getVisibility();
     }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/panoramadream/DreamPanoramaUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/panoramadream/DreamPanoramaUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/panoramadream/DreamPanoramaUI.java	(revision 175951)
@@ -9,8 +9,6 @@
 
 import com.sprd.camera.panora.WideAnglePanoramaController;
 import com.sprd.camera.panora.WideAnglePanoramaUI;
-
-import com.android.camera.settings.SettingsManager;
 import com.android.camera2.R;
 
 import com.dream.camera.dreambasemodules.DreamInterface;
@@ -87,10 +85,7 @@
         return sidePanelMask;
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-
-    }
+    
     /* Dream Camera ui check 41*/
     public void adjustUI(int orientation) {
         super.adjustUIDream(orientation);
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/vgesturephoto/VgesturePhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/vgesturephoto/VgesturePhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/modules/vgesturephoto/VgesturePhotoUI.java	(revision 175951)
@@ -12,7 +12,6 @@
 import com.android.camera.PhotoModule;
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera2.R;
 
 import android.widget.FrameLayout;
@@ -102,6 +101,7 @@
     public void onPreviewAreaChanged(RectF previewArea) {
         super.onPreviewAreaChanged(previewArea);
         /* SPRD: New feature vgesture detect @{ */
+		mBasicModule.waitInitDataSettingCounter();
         if (isShowVGesture() && mVGestureImp != null) {
             mVGestureImp.onPreviewAreaChanged(previewArea);
         }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/SlidePanelManager.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/SlidePanelManager.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/SlidePanelManager.java	(revision 175951)
@@ -11,6 +11,7 @@
 import com.android.camera.CameraActivity.onModuleChangeListen;
 import com.android.camera.CameraModule;
 import com.android.camera.VideoModule;
+import android.view.ViewStub;
 import com.android.camera.PhotoModule;
 import android.widget.TextView;
 
@@ -49,12 +50,23 @@
     }
 
     public void init() {
-        slidePanelParent = mActivity.findViewById(R.id.slide_panel_parent);
-        slidePanel = mActivity.findViewById(R.id.slide_panel);
-
-        modeText = mActivity.findViewById(R.id.sp_mode_tv);
-        captureText = (TextView)mActivity.findViewById(R.id.sp_capture_tv);
-        filterText = mActivity.findViewById(R.id.sp_filter_tv);
+        if (mActivity == null)
+            return;
+        ViewStub viewStubSlidePanel = (ViewStub) mActivity
+                .findViewById(R.id.slide_panel_id);
+        if (viewStubSlidePanel != null) {
+            viewStubSlidePanel.inflate();
+        }
+        if (slidePanelParent == null){
+            slidePanelParent = mActivity.findViewById(R.id.slide_panel_parent);
+			
+			mActivity.getCameraAppUI().initSlidePanel(slidePanelParent);
+			
+            slidePanel = mActivity.findViewById(R.id.slide_panel);
+            modeText = mActivity.findViewById(R.id.sp_mode_tv);
+            captureText = (TextView)mActivity.findViewById(R.id.sp_capture_tv);
+            filterText = mActivity.findViewById(R.id.sp_filter_tv);
+        }
     }
 
     public void focusItem(int id, boolean animation) {
@@ -134,4 +146,9 @@
 			captureText.setText(mActivity.getResources().getString(R.string.slide_panel_capture));
 		}
 	}
+	public View getSlidePanelParent() {
+        if (slidePanelParent != null)
+            return slidePanelParent;
+        return mActivity.findViewById(R.id.slide_panel_parent);
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamPhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamPhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamPhotoUI.java	(revision 175951)
@@ -10,7 +10,7 @@
 import com.android.camera.PhotoModule;
 import com.android.camera.PhotoUI;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
+import com.android.camera.ui.CountDownView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.SeekBar;
@@ -26,6 +26,7 @@
 import com.dream.camera.settings.DataStructSetting;
 import com.dream.camera.settings.DreamUIPreferenceSettingLayout;
 import com.dream.camera.settings.DreamUIPreferenceSettingLayout.SettingUIListener;
+import com.dream.camera.ui.TopPanelListener;
 import com.dream.camera.util.DreamUtil;
 import com.dream.camera.MakeupController;
 
@@ -37,34 +38,16 @@
             View parent) {
         super(activity, controller, parent);
         activity.getCameraAppUI().setDreamInterface(this);
+        mBasicModule = (PhotoModule) mController;
     }
 
     @Override
     public void initUI() {
-
         mBasicModule = (PhotoModule) mController;
-
-        // Generate a view to fit top panel.
-        ViewGroup topPanelParent = (ViewGroup) mRootView
-                .findViewById(R.id.top_panel_parent);
-        topPanelParent.removeAllViews();
+        long start = System.currentTimeMillis();
         updateTopPanelValue(mActivity);
-        fitTopPanel(topPanelParent);
-
-        // Update visibilities of state icons on side panel.
-        updateSidePanel();
-
-        // Generate views to fit extend panel.
-        ViewGroup extendPanelParent = (ViewGroup) mRootView
-                .findViewById(R.id.extend_panel_parent);
-        extendPanelParent.removeAllViews();
-        fitExtendPanel(extendPanelParent);
-
-        // Update icons on bottom panel.
-        updateBottomPanel();
-
-        // Update item on slide panel.
-        updateSlidePanel();
+        long end = System.currentTimeMillis();
+        Log.i(TAG, "initUI cost: " + (end - start));
     }
 
     @Override
@@ -151,8 +134,7 @@
     public void bindHdrButton() {
         ButtonManagerDream buttonManager = (ButtonManagerDream) mActivity
                 .getButtonManager();
-        buttonManager.initializeButton(ButtonManagerDream.BUTTON_HDR_DREAM,
-                mBasicModule.mHdrPlusCallback);
+        buttonManager.initializeButton(ButtonManagerDream.BUTTON_HDR_DREAM,null);
     }
 
     public void bindCameraButton() {
@@ -208,10 +190,6 @@
         return sidePanelMask;
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-    }
-
     /**
      * update preview ui after settings closed
      */
@@ -240,4 +218,54 @@
                     mActivity.getResources().getInteger(R.integer.ucam_makup_default_value));
         }
     }
+
+    /* SPRD: Fix bug 659315, optimize camera launch time @{ */
+    private boolean mHasDelayWorkOnInit = true;
+
+    @Override
+    public void onPreviewStarted() {
+        super.onPreviewStarted();
+        if (!mHasDelayWorkOnInit) {
+            return;
+        }
+        long start = System.currentTimeMillis();
+        mHasDelayWorkOnInit = false;
+
+        initModuleLayout();
+        setCountdownFinishedListener((CountDownView.OnCountDownStatusListener)mBasicModule);
+        mActivity.getCameraAppUI().initBottomBar();
+        // Generate views to fit extend panel.
+        mActivity.getCameraAppUI().initExtendPanel();
+        mActivity.getCameraAppUI().initSettingLayout(this);
+
+        // Update visibilities of state icons on side panel.
+        updateSidePanel();
+
+        // must be after updateSidePanel()
+        mActivity.getCameraAppUI().initSidePanel();
+
+        // Update icons on bottom panel.
+        updateBottomPanel();
+
+        // Update item on slide panel.
+        updateSlidePanel();
+
+        // update top panel
+        updateTopPanel();
+
+        mActivity.getCameraAppUI().initializeBottomBarSpec();
+
+        long end = System.currentTimeMillis();
+        Log.i(TAG, "onPreviewStarted cost: " + (end - start));
+    }
+    /* @} */
+
+    private void updateTopPanel() {
+        ViewGroup topPanelParent = (ViewGroup) mRootView
+                .findViewById(R.id.top_panel_parent);
+        topPanelParent.removeAllViews();
+        fitTopPanel(topPanelParent);
+
+        ((TopPanelListener)mController).updateTopPanel();
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamVideoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamVideoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamVideoModule.java	(revision 175951)
@@ -19,7 +19,7 @@
     protected void switchCamera() {
         // super.switchCamera();
         mActivity.switchFrontAndBackMode();
-        mActivity.getCameraAppUI().updateModeList();
+        
     }
 
     @Override
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamBasicUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamBasicUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamBasicUI.java	(revision 175951)
@@ -9,7 +9,6 @@
 import com.android.camera.PhotoController;
 import com.android.camera.PhotoUI;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.SeekBar;
@@ -39,7 +38,6 @@
     public DreamBasicUI(int cameraId, CameraActivity activity, PhotoController controller,
             View parent) {
         super(cameraId, activity, controller, parent);
-        activity.getCameraAppUI().setDreamInterface(this);
     }
 
     @Override
@@ -46,6 +44,7 @@
     public void initUI() {
 
         mBasicModule = (BasicModule) mController;
+        mActivity.getCameraAppUI().setDreamInterface(this);
 
         // Generate a view to fit top panel.
         ViewGroup topPanelParent = (ViewGroup) mRootView
@@ -56,12 +55,9 @@
 
         // Update visibilities of state icons on side panel.
         updateSidePanel();
-
+        mActivity.getCameraAppUI().initSidePanel();
         // Generate views to fit extend panel.
-        ViewGroup extendPanelParent = (ViewGroup) mRootView
-                .findViewById(R.id.extend_panel_parent);
-        extendPanelParent.removeAllViews();
-        fitExtendPanel(extendPanelParent);
+        mActivity.getCameraAppUI().initExtendPanel();
 
         // Update icons on bottom panel.
         updateBottomPanel();
@@ -129,8 +125,7 @@
     public void bindHdrButton() {
         ButtonManagerDream buttonManager = (ButtonManagerDream) mActivity
                 .getButtonManager();
-        buttonManager.initializeButton(ButtonManagerDream.BUTTON_HDR_DREAM,
-                mBasicModule.mHdrPlusCallback);
+        buttonManager.initializeButton(ButtonManagerDream.BUTTON_HDR_DREAM,null);
     }
 
     public void bindCameraButton() {
@@ -172,10 +167,6 @@
         return sidePanelMask;
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-    }
-
     /**
      * update preview ui after settings closed
      */
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamPhotoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamPhotoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamPhotoModule.java	(revision 175951)
@@ -27,8 +27,6 @@
         // super.switchCamera();
         mActivity.switchFrontAndBackMode();
 
-        mActivity.getCameraAppUI().updateModeList();
-
     }
 
     public void singleTapAEAF(int x, int y) {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamInterface.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamInterface.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamInterface.java	(revision 175951)
@@ -3,8 +3,6 @@
 
 import android.view.ViewGroup;
 
-import com.android.camera.settings.SettingsManager;
-
 public interface DreamInterface {
 
     // Generate a view to fit top panel.
@@ -24,5 +22,5 @@
 
     public int getSidePanelMask();
 
-    public void onSettingChanged(SettingsManager settingsManager, String key);
+    
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamGifUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamGifUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamGifUI.java	(revision 175951)
@@ -10,8 +10,8 @@
 import com.android.camera.debug.Log;
 import com.ucamera.ucam.modules.ugif.GifModule;
 import com.ucamera.ucam.modules.ugif.GifUI;
-import com.android.camera.settings.SettingsManager;
 
+
 import com.android.camera2.R;
 
 import com.dream.camera.ButtonManagerDream;
@@ -29,7 +29,6 @@
     public DreamGifUI(int cameraId, PhotoController baseController, CameraActivity activity,
             View parent) {
         super(cameraId, baseController, activity, parent);
-        activity.getCameraAppUI().setDreamInterface(this);
     }
 
     @Override
@@ -36,7 +35,7 @@
     public void initUI() {
 
         mBasicModule = (GifModule) mController;
-
+		mActivity.getCameraAppUI().setDreamInterface(this);
         // Generate a view to fit top panel.
         ViewGroup topPanelParent = (ViewGroup) mRootView.findViewById(R.id.top_panel_parent);
         topPanelParent.removeAllViews();
@@ -46,10 +45,7 @@
         // Update visibilities of state icons on side panel.
         updateSidePanel();
 
-        // Generate views to fit extend panel.
-        ViewGroup extendPanelParent = (ViewGroup) mRootView.findViewById(R.id.extend_panel_parent);
-        extendPanelParent.removeAllViews();
-        fitExtendPanel(extendPanelParent);
+		mActivity.getCameraAppUI().initExtendPanel();
 
         // Update icons on bottom panel.
         updateBottomPanel();
@@ -109,9 +105,6 @@
         return sidePanelMask;
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-    }
 
     /**
      * update preview ui after settings closed
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamVideoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamVideoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/dreambasemodules/DreamVideoUI.java	(revision 175951)
@@ -6,7 +6,6 @@
 
 import com.android.camera.CameraActivity;
 import com.android.camera.app.OrientationManager;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.ui.Rotatable;
 import com.android.camera.MultiToggleImageButton;
 import com.android.camera.VideoModule;
@@ -31,12 +30,12 @@
     public DreamVideoUI(CameraActivity activity, VideoController controller,
             View parent) {
         super(activity, controller, parent);
-        activity.getCameraAppUI().setDreamInterface(this);
     }
 
     @Override
     public void initUI() {
         mBasicModule = (VideoModule) mController;
+        mActivity.getCameraAppUI().setDreamInterface(this);
         // Generate a view to fit top panel.
         ViewGroup topPanelParent = (ViewGroup) mRootView
                 .findViewById(R.id.top_panel_parent);
@@ -48,14 +47,8 @@
         updateSidePanel();
 
         // Generate views to fit extend panel.
-        ViewGroup extendPanelParent = (ViewGroup) mRootView
-                .findViewById(R.id.extend_panel_parent);
-        extendPanelParent.removeAllViews();
-        fitExtendPanel(extendPanelParent);
+        mActivity.getCameraAppUI().initExtendPanel();
 
-        // Update icons on bottom panel.
-        updateBottomPanel();
-
         // Update item on slide panel.
         updateSlidePanel();
     }
@@ -86,11 +79,6 @@
         return sidePanelMask;
     }
 
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-
-    }
-
     public void bindSettingsButton(View settingsButton) {
         if (settingsButton != null) {
             final DreamUIPreferenceSettingLayout dps = (DreamUIPreferenceSettingLayout) mRootView
@@ -233,4 +221,14 @@
             mActivity.getCameraAppUI().updateSlidePanelUI(View.GONE);
         }
     }
+
+    public void onPreviewStarted() {
+        mActivity.getCameraAppUI().initBottomBar();
+        mActivity.getButtonManager().load(mRootView);
+        mActivity.getCameraAppUI().initializeBottomBarSpec();
+        ((VideoModule)mController).initializeControlByIntent();
+
+        // Update icons on bottom panel.
+        updateBottomPanel();
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/TopPanelListener.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/TopPanelListener.java	(revision 0)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/TopPanelListener.java	(revision 175951)
@@ -0,0 +1,5 @@
+package com.dream.camera.ui;
+
+public interface TopPanelListener {
+    public void updateTopPanel();
+}
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/PhotoVoicePlayProgress.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/PhotoVoicePlayProgress.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/PhotoVoicePlayProgress.java	(revision 175951)
@@ -21,42 +21,25 @@
     private TextView mTotalTime;
     private View mProgress;
     private int mSec;
+    private Context mContext;
 
-    private Handler mHandler = new Handler() {
+    private Handler mHandler;
 
-        @Override
-        public void handleMessage(Message msg) {
-            // TODO Auto-generated method stub
-            switch (msg.what) {
-                case START_TIME:
-                    mSec++;
-                    mPlayTime.setText("00:0"+mSec);
-                    if (mSec == 10) {
-                        mPlayTime.setText("00:10");
-                    } else if (mSec >= mLimit) {
-                        break;
-                    }
-                    mHandler.sendEmptyMessageDelayed(START_TIME, 1000);
-                    break;
-                default:
-                    break;
-            }
-        }
-
-    };
-
     public PhotoVoicePlayProgress(Context context) {
         super(context);
+        mContext = context;
         // TODO Auto-generated constructor stub
     }
 
     public PhotoVoicePlayProgress(Context context, AttributeSet attrs) {
         super(context, attrs);
+        mContext = context;
         // TODO Auto-generated constructor stub
     }
 
     public PhotoVoicePlayProgress(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
+        mContext = context;
         // TODO Auto-generated constructor stub
     }
 
@@ -63,6 +46,7 @@
     public PhotoVoicePlayProgress(Context context, AttributeSet attrs, int defStyleAttr,
             int defStyleRes) {
         super(context, attrs, defStyleAttr, defStyleRes);
+        mContext = context;
         // TODO Auto-generated constructor stub
     }
 
@@ -70,6 +54,26 @@
     protected void onFinishInflate() {
         // TODO Auto-generated method stub
         super.onFinishInflate();
+        mHandler = new Handler(mContext.getMainLooper()) {
+            @Override
+            public void handleMessage(Message msg) {
+                // TODO Auto-generated method stub
+                switch (msg.what) {
+                    case START_TIME:
+                        mSec++;
+                        mPlayTime.setText("00:0"+mSec);
+                        if (mSec == 10) {
+                            mPlayTime.setText("00:10");
+                        } else if (mSec >= mLimit) {
+                            break;
+                        }
+                        mHandler.sendEmptyMessageDelayed(START_TIME, 1000);
+                        break;
+                    default:
+                        break;
+                }
+            }
+        };
         mPlayTime = (TextView) findViewById(R.id.play_time);
         mTotalTime = (TextView) findViewById(R.id.total_time);
         mTotalTime.setText("/00:00");
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/DreamVoiceImageView.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/DreamVoiceImageView.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/ui/DreamVoiceImageView.java	(revision 175951)
@@ -49,7 +49,7 @@
         public void onVoicePlayClicked();
     }
 
-    public void addListener(DreamVoiceImageOnclickListener listener) {
+    public void setClickListener(DreamVoiceImageOnclickListener listener) {
         mDreamVoiceImageOnclickListener = listener;
     }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/util/Counter.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/util/Counter.java	(revision 0)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/util/Counter.java	(revision 175951)
@@ -0,0 +1,30 @@
+package com.dream.camera.util;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class Counter {
+
+    private AtomicInteger mCurrentValue;
+
+    public Counter(int maxValue) {
+        mCurrentValue = new AtomicInteger(maxValue);
+    }
+
+    synchronized public void count() {
+        if (mCurrentValue.decrementAndGet() <= 0) {
+            this.notifyAll();
+        }
+    }
+
+    synchronized public void waitCount() {
+        if (mCurrentValue.get() > 0) {
+            try {
+                this.wait();
+            } catch (InterruptedException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+            }
+        }
+    }
+
+}
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/util/DreamUtil.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/util/DreamUtil.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dream/camera/util/DreamUtil.java	(revision 175951)
@@ -5,7 +5,6 @@
 
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera2.R;
 import com.dream.camera.settings.DataConfig;
 import com.dream.camera.settings.DataModuleBasic;
@@ -183,14 +182,6 @@
         return value;
     }
 
-    public int getRightMode(SettingsManager settingsManager, int module, int cameraId) {
-        Log.d(TAG,
-                "getRightMode cameraId=" + cameraId + ",module=" + module + ","
-                        + getGlobleKey(module, cameraId) + "," + getDefaultValue(module, cameraId));
-        return settingsManager.getInteger(SettingsManager.SCOPE_GLOBAL,
-                getGlobleKey(module, cameraId), getDefaultValue(module, cameraId));
-    }
-
     public int getRightMode(DataModuleBasic dataModule, int module, int cameraId) {
         Log.d(TAG,
                 "getRightMode cameraId=" + cameraId + ",module=" + module);
@@ -207,19 +198,6 @@
      * @param cameraId        : 0/1 - back/front
      * @param saveMode        : current mode.
      */
-    public void savaToCameraMode(Context context, SettingsManager settingsManager, int cameraId,
-                                 int saveMode) {
-        Log.d(TAG, "savaRightMode cameraId=" + cameraId + ",saveMode=" + saveMode);
-
-        // Now in photo or video
-        int[] modeSupportList = context.getResources().getIntArray(
-                R.array.dream_module_mode_support_list);
-
-        // save value to responding keys.
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                getGlobleKey(modeSupportList[saveMode], cameraId), saveMode);
-    }
-
     public void savaToCameraMode(Context context, DataModuleBasic dataModule, int cameraId,
                                  int saveMode) {
         Log.d(TAG, "savaRightMode cameraId=" + cameraId + ",saveMode=" + saveMode);
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/PhotoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/PhotoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/PhotoModule.java	(revision 175951)
@@ -48,6 +48,8 @@
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.Toast;
+import com.dream.camera.ui.TopPanelListener;
+import com.dream.camera.util.Counter;
 
 import com.android.camera.PhotoModule.NamedImages.NamedEntity;
 import com.android.camera.PhotoUI;
@@ -134,7 +136,7 @@
 
 public class PhotoModule extends CameraModule implements PhotoController,
         ModuleController, MemoryListener, FocusOverlayManager.Listener,
-        SettingsManager.OnSettingChangedListener, RemoteCameraModule,
+         RemoteCameraModule,
         /**
          * SPRD: fix bug 388273 CountDownView.OnCountDownStatusListener {
          */
@@ -143,7 +145,7 @@
         View.OnTouchListener, CancelBurstCaptureCallback,
         DreamSettingChangeListener,
         OrientationManager.OnOrientationChangeListener,
-        FocusOverlayManager.TouchListener{
+        FocusOverlayManager.TouchListener,TopPanelListener{
 
     private static final Log.Tag TAG = new Log.Tag("PhotoModule");
 
@@ -173,6 +175,7 @@
     protected boolean mPaused;
     private boolean mCancelBurst = false;
     private boolean mThumbnailHasInvalid = false;
+	protected boolean mBurstAllDone;
 
     protected PhotoUI mUI;
 
@@ -593,9 +596,7 @@
 
     private void switchToGcamCapture() {
         if (mActivity != null && mGcamModeIndex != 0) {
-            SettingsManager settingsManager = mActivity.getSettingsManager();
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_HDR_PLUS, true);
+            mDataModule.set(Keys.KEY_CAMERA_HDR_PLUS, true);
 
             // Disable the HDR+ button to prevent callbacks from being
             // queued before the correct callback is attached to the button
@@ -648,30 +649,15 @@
          * 
          * @{
          */
-        int cameraId = DataModuleManager
+        mCameraId = DataModuleManager
                 .getInstance(mAppController.getAndroidContext())
                 .getDataModuleCamera().getInt(Keys.KEY_CAMERA_ID);
 
-        DataStructSetting dataSetting = new DataStructSetting(
-                DreamUtil.intToString(getMode()), DreamUtil.isFrontCamera(
-                        mAppController.getAndroidContext(), cameraId),
-                mActivity.getCurrentModuleIndex(), cameraId);
-
-        // change the data storage module
-        DataModuleManager.getInstance(mAppController.getAndroidContext())
-                .changeModuleStatus(dataSetting);
-
         mDataModule = DataModuleManager.getInstance(
                 mAppController.getAndroidContext()).getDataModuleCamera();
 
-        mDataModuleCurrent = DataModuleManager.getInstance(
-                mAppController.getAndroidContext()).getCurrentDataModule();
+        
 
-        //DataModuleManager.getInstance(mActivity).addListener(this);
-        mDataModuleCurrent.addListener(this);
-
-        mActivity.getCameraAppUI().initSidePanel();
-
         /* @} */
 
         // SPRD initialize mJpegQualityController.
@@ -678,18 +664,17 @@
         mJpegQualityController = new JpegQualityController();
 
         mUI = createUI(mActivity);
+        mActivity.getDreamHandler().post(new Runnable(){
+            @Override
+            public void run() {
+                if (mActivity.isDestroyed()) {
+                    return;
+                }
+                performInitAsync();
+            }
+        });
         mActivity.setPreviewStatusListener(mUI);
 
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        // TODO: Move this to SettingsManager as a part of upgrade procedure.
-        // Aspect Ratio selection dialog is only shown for Nexus 4, 5 and 6.
-        if (mAppController.getCameraAppUI().shouldShowAspectRatioDialog()) {
-            // Switch to back camera to set aspect ratio.
-            settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_ID);
-        }
-        mCameraId = mDataModule.getInt(Keys.KEY_CAMERA_ID);
-
         Log.i(TAG, " init " + mAppController.getModuleScope() + ","
                 + mCameraId);
         mContentResolver = mActivity.getContentResolver();
@@ -697,8 +682,7 @@
         // Surface texture is from camera screen nail and startPreview needs it.
         // This must be done before startPreview.
         mIsImageCaptureIntent = isImageCaptureIntent();
-        mUI.setCountdownFinishedListener(this);
-
+        
         mQuickCapture = mActivity.getIntent().getBooleanExtra(
                 EXTRA_QUICK_CAPTURE, false);
         mHeadingSensor = new HeadingSensor(AndroidServices.instance()
@@ -716,32 +700,16 @@
             Log.e(TAG, "Hardware manager failed to open.");
         }
 
-        // TODO: Make this a part of app controller API.
-        View cancelButton = mActivity.findViewById(R.id.shutter_cancel_button);
-        cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                // SPRD: Fix bug 537444 if paused, ignore this event
-                if (mPaused) return;
-
-                cancelCountDown();
-            }
-        });
-        // SPRD:Add for freeze_display
-        sFreezeFrameControl = new FreezeFrameDisplayControl(mActivity, mUI,
-                mIsImageCaptureIntent, mDataModuleCurrent.getBoolean(
-                        Keys.KEY_FREEZE_FRAME_DISPLAY, true));
-        sFreezeFrameControl.setListener(PhotoModule.this);
+        
     }
 
     @Override
     public void onDreamSettingChangeListener(HashMap<String, String> keyList) {
-        Log.e(TAG, "dreamPhotoonDreamSettingChangeListener  ");
+        
         if (mCameraDevice == null) {
             return;
         }
-        DataModuleBasic dataModulePhoto = DataModuleManager.getInstance(
-                mAppController.getAndroidContext()).getCurrentDataModule();
+       
 
         HashMap<String, String> keys = new HashMap<String, String>();
         keys.putAll(keyList);
@@ -898,7 +866,8 @@
     }
 
     private void updateUIGridLineToDefault() {
-        if(!mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_CAMERA_GRID_LINES)){
+         if (mDataModuleCurrent == null
+                || !mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_CAMERA_GRID_LINES)) {
             return;
         }
 
@@ -912,7 +881,8 @@
             // Cancel on-going countdown.
             mUI.cancelCountDown();
         }
-        if (!mActivity.getCameraAppUI().isInIntentReview()// SPRD:Fix bug 497077
+        if (!mActivity.getCameraAppUI().isBottomBarNull()
+                && !mActivity.getCameraAppUI().isInIntentReview()// SPRD:Fix bug 497077
                 && !mActivity.getCameraAppUI().isInFreezeReview()){// SPRD:Fix bug 398341
             mAppController.getCameraAppUI().transitionToCapture();
             mAppController.setShutterEnabled(true);
@@ -956,6 +926,9 @@
              * 
              * @{
              */
+			if (mActivity.getCameraAppUI().isBottomBarNull()) {
+                mActivity.getCameraAppUI().initBottomBar();
+            }
             if (!mActivity.getCameraAppUI().isInIntentReview()) {
                 mActivity.getCameraAppUI().transitionToIntentCaptureLayout();
             } else {
@@ -989,20 +962,7 @@
         updateFace();
         /* @} */
 
-        /* SPRD: Fix bug 572631, optimize camera launch time @{ */
-        if (mCountdownSoundPlayer == null) {
-            mCountdownSoundPlayer = new SoundPlayer(mAppController.getAndroidContext());
-
-            mCountdownSoundPlayer.loadSound(R.raw.timer_final_second);
-            mCountdownSoundPlayer.loadSound(R.raw.timer_increment);
-        }
-
-        if (mCameraSound == null) {
-            mCameraSound = new MediaActionSound();
-            // Not required, but reduces latency when playback is requested later
-            mCameraSound.load(MediaActionSound.SHUTTER_CLICK);
-        }
-        /* @} */
+        
     }
 
     @Override
@@ -1057,7 +1017,7 @@
         cancelVgestureCountDown(false);
 
         mAppController.freezeScreenUntilPreviewReady();
-        SettingsManager settingsManager = mActivity.getSettingsManager();
+        
 
         Log.i(TAG, "Start to switch camera. id=" + mPendingSwitchCameraId);
         closeCamera();
@@ -1077,7 +1037,7 @@
         // Start switch camera animation. Post a message because
         // onFrameAvailable from the old camera may already exist.
         //SPRD:fix bug534665 add some mutex about scene mode
-        setExposureIfNecessary();
+        
         Log.i(TAG, "switchCamera end");
     }
 
@@ -1106,7 +1066,7 @@
          * mCameraId will not be the latest one. Which will cause the switch
          * camera function can not be used. @{
          */
-        SettingsManager settingsManager = mActivity.getSettingsManager();
+        
         if (mCameraId != mDataModule.getInt(Keys.KEY_CAMERA_ID)) {
             mCameraId = mDataModule.getInt(Keys.KEY_CAMERA_ID);
         }
@@ -1165,63 +1125,7 @@
         }
     };
 
-    public final ButtonManager.ButtonCallback mHdrPlusCallback = new ButtonManager.ButtonCallback() {
-        @Override
-        public void onStateChanged(int state) {
-            Log.v(TAG, "mHdrPlusCallback, onStateChanged state=" + state);
-            SettingsManager settingsManager = mActivity.getSettingsManager();
-            if (GcamHelper.hasGcamAsSeparateModule(mAppController
-                    .getCameraFeatureConfig())) {
-                // Set the camera setting to default backfacing.
-                settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_CAMERA_ID);
-                switchToGcamCapture();
-            } else {
-                boolean sceneShowToast = false;
-                if (Keys.isHdrOn(settingsManager)) {
-                    String sceneMode = settingsManager.getString(
-                            settingsManager.SCOPE_GLOBAL, Keys.KEY_SCENE_MODE);
-                    if (!"auto".equals(sceneMode)) {
-                        sceneShowToast = true;
-                    }
-                    settingsManager.set(
-                            SettingsManager.SCOPE_GLOBAL,
-                            Keys.KEY_SCENE_MODE,
-                            mCameraCapabilities.getStringifier().stringify(
-                                    CameraCapabilities.SceneMode.HDR));
-                } else {
-                    settingsManager.set(
-                            SettingsManager.SCOPE_GLOBAL,
-                            Keys.KEY_SCENE_MODE,
-                            mCameraCapabilities.getStringifier().stringify(
-                                    CameraCapabilities.SceneMode.AUTO));
-                }
-                updateParametersSceneMode();
-                if (mCameraDevice != null) {
-                    mCameraDevice.applySettings(mCameraSettings);
-                }
-                /*
-                 * SPRD: All MUTEX OPERATION in onSettingsChanged function.
-                 * updateSceneMode();
-                 */
-                /*
-                 * scene mode mutex with hdr is special, so, if hdr on and toast
-                 * did not show just now, which isToastExit = false, here, we
-                 * should show the toast. otherwise, if the toast has been shown
-                 * just now, which isToastExit = true we don't show toast any
-                 * more.
-                 */
-                if (!isToastExit && sceneShowToast) {
-                    Toast.makeText(
-                            mActivity,
-                            mActivity.getResources().getString(
-                                    R.string.hdr_mutex), Toast.LENGTH_LONG)
-                            .show();
-                    isToastExit = false;
-                }
-            }
-        }
-    };
+   
 
     public final ButtonManager.ButtonCallback mFlashCallback = new ButtonManager.ButtonCallback() {
         @Override
@@ -1279,18 +1183,6 @@
         }
     };
 
-    @Override
-    public void hardResetSettings(SettingsManager settingsManager) {
-        // PhotoModule should hard reset HDR+ to off,
-        // and HDR to off if HDR+ is supported.
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_CAMERA_HDR_PLUS, false);
-        if (GcamHelper.hasGcamAsSeparateModule(mAppController
-                .getCameraFeatureConfig())) {
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_HDR, false);
-        }
-    }
 
     @Override
     public HardwareSpec getHardwareSpec() {
@@ -1309,10 +1201,8 @@
 
         bottomBarSpec.enableCamera = true;
         bottomBarSpec.cameraCallback = mCameraCallback;
-        bottomBarSpec.enableFlash = !mAppController.getSettingsManager()
-                .getBoolean(SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_HDR) && !mIsBatteryLow;
         bottomBarSpec.enableHdr = true;
-        bottomBarSpec.hdrCallback = mHdrPlusCallback;
+       
         bottomBarSpec.enableGridLines = false;
         if (mCameraCapabilities != null) {
             bottomBarSpec.enableExposureCompensation = true;
@@ -1364,16 +1254,7 @@
     // either open a new camera or switch cameras
     private void openCameraCommon() {
         mUI.onCameraOpened(mCameraCapabilities, mCameraSettings);
-        if (mIsImageCaptureIntent) {
-            // Set hdr plus to default: off.
-            SettingsManager settingsManager = mActivity.getSettingsManager();
-            settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_HDR_PLUS);
-        }
-        /*
-         * SPRD: All MUTEX OPERATION in onSettingsChanged function.
-         * updateSceneMode();
-         */
+        
     }
 
     /* SPRD: fix bug 474665 add shutter sound switch @{ */
@@ -1392,15 +1273,7 @@
         mAppController.updatePreviewAspectRatio(aspectRatio);
     }
 
-    private void resetExposureCompensation() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        if (settingsManager == null) {
-            Log.e(TAG, "Settings manager is null!");
-            return;
-        }
-        settingsManager.setToDefault(mAppController.getCameraScope(),
-                Keys.KEY_EXPOSURE);
-    }
+   
 
     // Snapshots can only be taken after this is called. It should be called
     // once only. We could have done these things in onCreate() but we want to
@@ -1641,6 +1514,7 @@
             /* @} */
             mAppController.getCameraAppUI().setBottomPanelLeftRightClickable(true);
             if (mPaused) {
+				mBurstAllDone = false;
                 return;
             }
 
@@ -1650,12 +1524,13 @@
             }
             mHasCaputureCount++;
 
-            if (!mIsImageCaptureIntent
+             if (!mIsImageCaptureIntent
                     && !isSetFreezeFrameDisplay()
                     //&& getModuleTpye() != DreamModule.INTERVAL_MODULE
                     && (!isBurstCapture()
                             || (mContinuousCaptureCount > 1 && mIsContinousCaptureFinish)
-                            || mHasCaputureCount == getCurrentBurstCountFromSettings())) {
+                            || mHasCaputureCount == getCurrentBurstCountFromSettings()
+                            || mBurstAllDone)) {
                 /* SPRD:fix bug620386 move up the thumbnail at Interval module @{ */
                 if (getModuleTpye() != DreamModule.INTERVAL_MODULE) {
                     mThumbnailHasInvalid = true;
@@ -1665,7 +1540,9 @@
             }
 
             if (mAppController.isPlaySoundEnable()) {//SPRD:fix bug 618933 api1 not need shutter sound
-                mCameraSound.play(MediaActionSound.SHUTTER_CLICK);
+                if (mCameraSound != null) {
+                    mCameraSound.play(MediaActionSound.SHUTTER_CLICK);
+                }
                 /* SPRD: Fix bug 581173 when burst capture, the shutter sound should be the same @{ */
                 if (mIsBurstStarted && (getContinuousCaptureCount() == 0 || mIsContinousCaptureFinish)) {
                     AndroidServices.instance().provideAudioManager().abandonAudioFocus(null);
@@ -1767,6 +1644,7 @@
                 Log.i(TAG, "onPictureTaken enablePreviewOverlayHint!");
             }
             /* @} */
+			mBurstAllDone = false;
         }
 
         void saveFinalPhoto(final byte[] jpegData, NamedEntity name,
@@ -1779,19 +1657,9 @@
                 zoomValue = mCameraSettings.getCurrentZoomRatio();
             }
             boolean hdrOn = CameraCapabilities.SceneMode.HDR == mSceneMode;
-            String flashSetting = mActivity.getSettingsManager().getString(
-                    mAppController.getCameraScope(), Keys.KEY_FLASH_MODE);
-            boolean gridLinesOn = Keys.areGridLinesOn(mActivity
-                    .getSettingsManager());
+           
             Log.i(TAG, "saveFinalPhoto title=" + name.title + ".jpg");// SPRD:Fix
                                                                       // bug
-                                                                      // 419844
-            UsageStatistics.instance().photoCaptureDoneEvent(
-                    eventprotos.NavigationChange.Mode.PHOTO_CAPTURE,
-                    name.title + ".jpg", exif, isCameraFrontFacing(), hdrOn,
-                    zoomValue, flashSetting, gridLinesOn,
-                    (float) mTimerDuration, null, mShutterTouchCoordinate,
-                    mVolumeButtonClickedFlag, null, null, null);
             mShutterTouchCoordinate = null;
             mVolumeButtonClickedFlag = false;
 
@@ -2111,7 +1979,9 @@
 
     @Override
     public void setFocusParameters() {
-        setCameraParameters(UPDATE_PARAM_PREFERENCE);
+        if (mCameraState != PREVIEW_STOPPED) {
+            setCameraParameters(UPDATE_PARAM_PREFERENCE);
+        }
     }
     /* SPRD: All MUTEX OPERATION in onSettingsChanged function.
     private void updateSceneMode() {
@@ -2172,16 +2042,7 @@
 
         mCameraDevice = cameraProxy;
         initializeCapabilities();
-        if (!mCameraDevice.getCapabilities().supports(CameraCapabilities.SceneMode.HDR)) {
-            mUI.setButtonVisibility(ButtonManagerDream.BUTTON_HDR_DREAM,View.GONE);
-        } else {
-            mUI.setButtonVisibility(ButtonManagerDream.BUTTON_HDR_DREAM,View.VISIBLE);
-        }
-        // mCameraCapabilities is guaranteed to initialized at this point.
-        mAppController.getCameraAppUI().showAccessibilityZoomUI(
-                mCameraCapabilities.getMaxZoomRatio());
-
-        // Reset zoom value index.
+        
         mZoomValue = 1.0f;
         if (mFocusManager == null) {
             initializeFocusManager();
@@ -2198,21 +2059,7 @@
             mCameraSettings.setFocusMode(CameraCapabilities.FocusMode.AUTO);
         }
 
-        /**
-         * SPRD: Fix bug 572631, optimize camera launch time,
-         * Original Code
-         *
-        setCameraParameters(UPDATE_PARAM_ALL);
-         */
-        // Set a listener which updates camera parameters based
-        // on changed settings.
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        settingsManager.addListener(this);
-        /* SPRD:fix bug529235 hdr and flash are both on@{ */
-        if (isHdr() && !isFlashOff()) {
-            Log.e(TAG, "Mutex error, HDR && Flash are both On!");
-            onSettingChanged(settingsManager, Keys.KEY_CAMERA_HDR);
-        }
+       
         /* @} */
         /**
          * SPRD: Fix bug 572631, optimize camera launch time
@@ -2233,8 +2080,7 @@
         }else{
             mUI.setButtonVisibility(ButtonManagerDream.BUTTON_FLASH_DREAM,View.GONE);
         }
-        ButtonManager buttonManager = mActivity.getButtonManager();
-        buttonManager.enableCameraButton();
+       
         mBurstCount = getCurrentBurstCountFromSettings();
 
         mCameraAvailable = true;
@@ -2415,8 +2261,7 @@
     public void onShutterButtonFocus(boolean pressed) {
         // Do nothing. We don't support half-press to focus anymore.
         /* SPRD: fix bug 473602 add for half-press @{ */
-        Log.i(TAG, "onShutterButtonFocus pressed = " + pressed + ",isFlashOn="
-                + isFlashOn());
+        Log.i(TAG, "onShutterButtonFocus pressed = " + pressed);
         if (mPaused || (mCameraState == SWITCHING_CAMERA)
                 || (mCameraState == PREVIEW_STOPPED) || !isShutterEnabled()
                 || isFreezeFrameDisplay()
@@ -2555,6 +2400,11 @@
             mVolumeButtonClickedFlag = false;
             return;
         }
+		 //Sprd Fix Bug: 665197
+        if(mUI.isZooming()){
+            Log.i(TAG, "camera is zooming,can not perform onShutterbuttonClick");
+            return;
+        }
         /**
          * SPRD: fix bug 388808 Log.d(TAG, "onShutterButtonClick: mCameraState="
          * + mCameraState + " mVolumeButtonClickedFlag=" +
@@ -2590,6 +2440,7 @@
 
         mTimerDuration = countDownDuration;
         if (countDownDuration > 0) {
+			initCancelButton();
             // Start count down.
             mAppController.getCameraAppUI().transitionToCancel();
             mUI.startCountdown(countDownDuration);
@@ -2656,9 +2507,13 @@
     public void onRemainingSecondsChanged(int remainingSeconds) {
         /* SPRD:fix bug 474665 @{ */
         if (remainingSeconds == 1 && mAppController.isPlaySoundEnable()) {
-            mCountdownSoundPlayer.play(R.raw.timer_final_second, 0.6f);
+            if (mCountdownSoundPlayer != null) {
+                mCountdownSoundPlayer.play(R.raw.timer_final_second, 0.6f);
+            }
         } else if ((remainingSeconds == 2 || remainingSeconds == 3) && mAppController.isPlaySoundEnable()) {
-            mCountdownSoundPlayer.play(R.raw.timer_increment, 0.6f);
+            if (mCountdownSoundPlayer != null) {
+                mCountdownSoundPlayer.play(R.raw.timer_increment, 0.6f);
+            }
             /* @} */
             /**
              * SRPD: fix bug 388289 }
@@ -2727,7 +2582,16 @@
         mCountdownSoundPlayer.loadSound(R.raw.timer_increment);
          */
         //DataModuleManager.getInstance(mActivity).addListener(this);
-        mDataModuleCurrent.addListener(this);
+         mActivity.getDreamHandler().post(new Runnable(){
+            @Override
+            public void run() {
+                if (mPaused || mActivity.isDestroyed()) {
+                    return;
+                }
+                mDataModuleCurrent.addListener(PhotoModule.this);
+                
+            }
+        });
         if (mFocusManager != null) {
             // If camera is not open when resume is called, focus manager will
             // not be initialized yet, in which case it will start listening to
@@ -2735,10 +2599,7 @@
             mAppController.addPreviewAreaSizeChangedListener(mFocusManager);
         }
         mAppController.addPreviewAreaSizeChangedListener(mUI);
-        mActivity.getModuleLayoutRoot().findViewById(R.id.shutter_button)
-                .setOnTouchListener(this);// SPRD:
-                                          // fix
-                                          // bug473462
+       
 
         CameraProvider camProvider = mActivity.getCameraProvider();
         if (camProvider == null) {
@@ -2752,10 +2613,10 @@
         mUI.onOrientationChanged(orientationManager,
                 orientationManager.getDeviceOrientation());
         requestCameraOpen();
-        mUI.intializeAIDetection(mDataModuleCurrent);// SPRD:Modify
-                                                     // for ai
-                                                     // detect
-
+		if(mDataModuleCurrent!=null){
+			mUI.intializeAIDetection(mDataModuleCurrent);// SPRD:Modify   // for ai  // detect                                     
+		}
+        
         mJpegPictureCallbackTime = 0;
         mZoomValue = 1.0f;
 
@@ -2843,9 +2704,13 @@
     public void pause() {
         Log.i(TAG, "pause");
         mPaused = true;
+		settingchange = false;
         /* SPRD: Fix bug 474851, Add for new feature VGesture @{ */
         mHandler.removeMessages(MSG.CAMERA_SHUTTER);
         mHandler.removeMessages(MSG.CAMERA_FOCUS_CAPTURE);
+		if (isUseSurfaceView() && (mActivity.getCameraAppUI() != null)) {
+            mActivity.getCameraAppUI().resumeTextureViewRendering();
+        }
         /* @} */
 		if (isUseSurfaceView() && (mActivity.getCameraAppUI() != null)) {
             mActivity.getCameraAppUI().resumeTextureViewRendering();
@@ -2890,7 +2755,8 @@
          */
 
         /* SPRD:Fix bug 499558 @{ */
-        if (!mActivity.getCameraAppUI().isInIntentReview()) {
+         if (!mActivity.getCameraAppUI().isBottomBarNull() &&
+                !mActivity.getCameraAppUI().isInIntentReview()) {
             mNamedImages = null;
             // If we are in an image capture intent and has taken
             // a picture, we just clear it in onPause.
@@ -2923,15 +2789,8 @@
         getServices().getMemoryManager().removeListener(this);
         mAppController.removePreviewAreaSizeChangedListener(mFocusManager);
         mAppController.removePreviewAreaSizeChangedListener(mUI);
-        mActivity.getModuleLayoutRoot().findViewById(R.id.shutter_button)
-                .setOnTouchListener(null);// SPRD:
-                                          // fix
-                                          // bug
-                                          // 473462
+        
 
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        settingsManager.removeListener(this);
-
         mDataModuleCurrent.removeListener(this);
         mDataModule.removeListener(this);
         //DataModuleManager.getInstance(mActivity).removeListener(this);
@@ -3096,7 +2955,7 @@
     @Override
     public boolean onBackPressed() {
 
-        if(sFreezeFrameControl.onBackPressed()){
+        if(sFreezeFrameControl != null && sFreezeFrameControl.onBackPressed()){
             return true;
         }
 
@@ -3105,6 +2964,8 @@
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
+		if (mDataModuleCurrent == null || mActivity.getCameraAppUI().isBottomBarNull())
+            return false;
         switch (keyCode) {
         case KeyEvent.KEYCODE_VOLUME_UP:
         case KeyEvent.KEYCODE_VOLUME_DOWN:
@@ -3191,6 +3052,8 @@
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (mDataModuleCurrent == null || mActivity.getCameraAppUI().isBottomBarNull())
+            return false;
         switch (keyCode) {
         case KeyEvent.KEYCODE_VOLUME_UP:
         case KeyEvent.KEYCODE_VOLUME_DOWN:
@@ -3230,7 +3093,7 @@
                             Log.e(TAG, "burst capture is triggered by other key, can not cancel burst capture!");
                             return true;
                         }
-                        if (!mBurstMode){
+                        if (!mBurstMode && !isAudioRecording()){
                             onShutterButtonFocus(true);
                             onShutterButtonClick();
                         }
@@ -3396,6 +3259,120 @@
     /**
      * The start/stop preview should only run on the UI thread.
      */
+	boolean settingchange = false;
+     private void updateSettingAfterOpencamera(boolean optimize){
+        // Nexus 4 must have picture size set to > 640x480 before other
+        // parameters are set in setCameraParameters, b/18227551. This call to
+        // updateParametersPictureSize should occur before setCameraParameters
+        // to address the issue.
+
+        if (!mSnapshotOnIdle) {
+            // If the focus mode is continuous autofocus, call cancelAutoFocus
+            // to resume it because it may have been paused by autoFocus call.
+            if (mFocusManager.getFocusMode(mCameraSettings
+                    .getCurrentFocusMode(),mDataModule.getString(Keys.KEY_FOCUS_MODE)) == CameraCapabilities.FocusMode.CONTINUOUS_PICTURE) {
+                mCameraDevice.cancelAutoFocus();
+            }
+            mFocusManager.setAeAwbLock(false); // Unlock AE and AWB.
+        }
+        updateSettingsBeforeStartPreview();
+        if (mCameraState == PREVIEW_STOPPED) {
+            applySettings();
+            // update settings after startpreview to optimize launch time
+            mHandler.post(new Runnable(){
+                @Override
+                public void run() {
+                    if (mPaused || mActivity.isDestroyed()) {
+                        return;
+                    }
+                    updateLeftSettings();
+                }
+            });
+        } else {
+            // update settings before startpreview when take picture to avoid preview jump
+            updateLeftSettings();
+        }
+    }
+    private void updateSettingsBeforeStartPreview() {
+        updateParametersPictureSize();
+        updateCameraParametersInitialize();
+        mCameraSettings.setDefault(mCameraId);//SPRD:fix bug616836 add for photo use api1 or api2 use reconnect
+        if (!mIsImageCaptureIntent) {
+            updateParametersZsl();
+            updateParametersMirror();
+        }
+    }
+    private void updateLeftSettings() {
+        /*SPRD: fix bug606414 burst mode not need to set display orientation, because it will modify jpeg orientation @ */
+        if (!mBurstMode) {
+            setDisplayOrientation();
+        }
+        updateCameraParametersZoom();
+        setAutoExposureLockIfSupported();
+        setAutoWhiteBalanceLockIfSupported();
+        setFocusAreasIfSupported();
+        setMeteringAreasIfSupported();
+
+        mFocusManager.overrideFocusMode(null);
+        mCameraSettings.setFocusMode(mFocusManager.getFocusMode(mCameraSettings
+                .getCurrentFocusMode(),mDataModule.getString(Keys.KEY_FOCUS_MODE)));
+        SessionStatsCollector
+                .instance()
+                .autofocusActive(
+                        mFocusManager.getFocusMode(mCameraSettings
+                                .getCurrentFocusMode(),mDataModule.getString(Keys.KEY_FOCUS_MODE)) == CameraCapabilities.FocusMode.CONTINUOUS_PICTURE);
+
+        if (mIsImageCaptureIntent) {
+            updateParametersFlashMode();
+            mDataModuleCurrent.set(Keys.KEY_CAMERA_HDR, false);
+        } else {
+            updateParametersAntibanding();
+
+            updateParametersPictureQuality();
+
+            updateParametersExposureCompensation();
+
+            updateParametersSceneMode();
+
+            updateParametersWhiteBalance();
+
+            updateParametersColorEffect();
+
+            updateParametersBurstCount();
+
+            updateParametersFlashMode();
+
+            updateParametersContrast();
+
+            updateParametersBrightness();
+
+            updateParametersISO();
+
+            updateParametersMetering();
+
+            updateParametersEOIS();
+
+            updateTimeStamp();
+
+            updateParametersHDR();
+        }
+
+        updateParametersSaturation();
+
+        updateCameraShutterSound();
+
+        updateParametersGridLine();
+
+        if (mContinuousFocusSupported && ApiHelper.HAS_AUTO_FOCUS_MOVE_CALLBACK) {
+            updateAutoFocusMoveCallback();
+        }
+        updateMakeLevel();
+
+        applySettings();
+    }
+    /**
+     * The start/stop preview should only run on the UI thread.
+     */
     private void startPreview(boolean optimize) {
         if (mCameraDevice == null) {
             Log.i(TAG, "attempted to start preview before camera device");
@@ -3404,36 +3381,20 @@
         }
 
         if (!checkPreviewPreconditions()) {
+            updateSettingAfterOpencamera(true);
+            settingchange = true;
             return;
         }
 
-        /* SPRD: add for bug 380597/642171: switch camera preview has a frame error @{ */
+        /* SPRD: add for bug 380597: switch camera preview has a frame error @{ */
         mActivity.getCameraAppUI().resetPreview();
         /* @} */
-        /*SPRD: fix bug606414 burst mode not need to set display orientation, because it will modify jpeg orientation @ */
-        if (!mBurstMode) {
-            setDisplayOrientation();
+        if(settingchange){
+            settingchange = false;
+        } else {
+            updateSettingAfterOpencamera(optimize);
         }
-        /* @}*/
 
-        if (!mSnapshotOnIdle) {
-            // If the focus mode is continuous autofocus, call cancelAutoFocus
-            // to resume it because it may have been paused by autoFocus call.
-            if (mFocusManager.getFocusMode(mCameraSettings
-                    .getCurrentFocusMode(),mDataModule.getString(Keys.KEY_FOCUS_MODE)) == CameraCapabilities.FocusMode.CONTINUOUS_PICTURE) {
-                mCameraDevice.cancelAutoFocus();
-            }
-            mFocusManager.setAeAwbLock(false); // Unlock AE and AWB.
-        }
-
-        // Nexus 4 must have picture size set to > 640x480 before other
-        // parameters are set in setCameraParameters, b/18227551. This call to
-        // updateParametersPictureSize should occur before setCameraParameters
-        // to address the issue.
-        updateParametersPictureSize();
-
-        setCameraParameters(UPDATE_PARAM_ALL);
-
         if (isUseSurfaceView()) {
             if (optimize) {
                 mCameraDevice.setPreviewDisplay(mActivity.getCameraAppUI().getSurfaceHolder());
@@ -3453,7 +3414,7 @@
         // If we're using API2 in portability layers, don't use
         // startPreviewWithCallback()
         // b/17576554
-      CameraAgent.CameraStartPreviewCallback startPreviewCallback = new CameraAgent.CameraStartPreviewCallback() {
+        CameraAgent.CameraStartPreviewCallback startPreviewCallback = new CameraAgent.CameraStartPreviewCallback() {
             @Override
             public void onPreviewStarted() {
                 mFocusManager.onPreviewStarted();
@@ -3491,7 +3452,7 @@
 
         doStartPreviewSpecial(isCameraIdle(), isHdr(), mActivity, mCameraDevice, mHandler,
                 mDisplayOrientation, isCameraFrontFacing(), mUI.getRootView(), mCameraSettings);//SPRD:fix bug624871
-        doStartPreview(startPreviewCallback,mCameraDevice);
+        doStartPreview(startPreviewCallback, mCameraDevice);
         mAppController.getCameraAppUI().setBottomPanelLeftRightClickable(true);
         Log.i(TAG, "startPreview end!");
     }
@@ -3522,337 +3483,8 @@
      * SPRD: onSettingChanged method is mainly do the Mutex in the preview
      * screen @{
      */
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-          Log.d(TAG, "onSettingChanged key=" + key);
-//        if (key.equals(Keys.KEY_FLASH_MODE)) {
-//            updateParametersFlashMode();
-//        }
-//        if (key.equals(Keys.KEY_CAMERA_HDR)) {
-//            if (settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,
-//                    Keys.KEY_CAMERA_HDR)) {
-//                Log.d(TAG, "onSettingChanged hdr on");
-//                // HDR is on.
-//                int showToast = 0;
-//                // SPRD: HDR MUTEX WITH FLASH BEGIN 1/2
-//                mAppController.getButtonManager().disableButton(
-//                        ButtonManager.BUTTON_FLASH);
-//                mFlashModeBeforeSceneMode = settingsManager.getString(
-//                        mAppController.getCameraScope(), Keys.KEY_FLASH_MODE);
-//                settingsManager.set(mAppController.getCameraScope(),
-//                        Keys.KEY_FLASH_MODE + PREF_BEFORE,
-//                        mFlashModeBeforeSceneMode);
-//                settingsManager.set(mAppController.getCameraScope(),
-//                        Keys.KEY_FLASH_MODE, "off");
-//                updateParametersFlashMode();
-//                // SPRD: HDR MUTEX WITH FLASH END 1/2
-//
-//                // SPRD: HDR MUTEX WITH EXPOSURE BEGIN 1/2
-//                if (settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_EXPOSURE_COMPENSATION_ENABLED)) {
-//                    Log.d(TAG,
-//                            "onSettingChanged KEY_EXPOSURE_COMPENSATION_ENABLED ");
-//                    mAppController.getButtonManager().disableButton(
-//                            ButtonManager.BUTTON_EXPOSURE_COMPENSATION);
-//                    mExposureCompensationBefore = settingsManager.getString(
-//                            mAppController.getCameraScope(), Keys.KEY_EXPOSURE);
-//                    Log.d(TAG, "onSettingChanged mExposureCompensationBefore="
-//                            + mExposureCompensationBefore);
-//                    settingsManager.set(mAppController.getCameraScope(),
-//                            Keys.KEY_EXPOSURE + PREF_BEFORE,
-//                            mExposureCompensationBefore);
-//                    setExposureCompensation(0);
-//                }
-//                // SPRD: HDR MUTEX WITH EXPOSURE END 1/2
-//
-//                // SPRD: HDR MUTEX WITH AeLock BEGIN 1/2
-//                if (mAeLockSupported) {
-//                    mAutoExposureLockBefore = mFocusManager.getAeAwbLock();
-//                    mCameraSettings.setAutoExposureLock(false);
-//                }
-//                // SPRD: HDR MUTEX WITH AeLock END 1/2
-//
-//                // SPRD: HDR MUTEX WITH CONTINUE_CAPTURE BEGIN
-//                mCountineCaptureBefore = settingsManager.getString(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_CONTINUE_CAPTURE);
-//                Log.d(TAG, "onSettingChanged mCountineCaptureBefore="
-//                        + mCountineCaptureBefore);
-//                settingsManager.set(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_CONTINUE_CAPTURE,
-//                        mActivity.getAndroidContext().getString(
-//                                R.string.pref_camera_burst_entry_defaultvalue));
-//                updateParametersBurstCount();
-//                if (!mActivity
-//                        .getAndroidContext()
-//                        .getString(
-//                                R.string.pref_camera_burst_entry_defaultvalue)
-//                        .equals(mCountineCaptureBefore)) {
-//                    showToast++;
-//                }
-//                // SPRD: HDR MUTEX WITH CONTINUE_CAPTURE END
-//
-//                // SPRD: HDR MUTEX WITH WHITE BALANCE BEGIN
-//                mWhiteBalanceBefore = settingsManager.getString(
-//                        SettingsManager.SCOPE_GLOBAL, Keys.KEY_WHITE_BALANCE);
-//                Log.d(TAG,
-//                        "onSettingChanged mWhiteBalanceBefore="
-//                                + mWhiteBalanceBefore
-//                                + ",DEFAULT"
-//                                + mActivity
-//                                        .getAndroidContext()
-//                                        .getString(
-//                                                R.string.pref_camera_whitebalance_default));
-//                settingsManager.set(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_WHITE_BALANCE,
-//                        mActivity.getAndroidContext().getString(
-//                                R.string.pref_camera_whitebalance_default));
-//                updateParametersWhiteBalance();
-//                if (!mActivity.getAndroidContext()
-//                        .getString(R.string.pref_camera_whitebalance_default)
-//                        .equals(mWhiteBalanceBefore)) {
-//                    showToast++;
-//                }
-//                // SPRD: HDR MUTEX WITH WHITE BALANCE BEGIN
-//
-//                // SPRD: HDR MUTEX WITH COLOR EFFECT BEGIN
-//                mColorEffectBefore = settingsManager.getString(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_COLOR_EFFECT);
-//                Log.d(TAG, "onSettingChanged mColorEffectBefore="
-//                        + mColorEffectBefore);
-//                settingsManager
-//                        .set(SettingsManager.SCOPE_GLOBAL,
-//                                Keys.KEY_CAMERA_COLOR_EFFECT,
-//                                mActivity
-//                                        .getAndroidContext()
-//                                        .getString(
-//                                                R.string.pref_camera_color_effect_entry_value_none));
-//                updateParametersColorEffect();
-//                if (!mActivity
-//                        .getAndroidContext()
-//                        .getString(
-//                                R.string.pref_camera_color_effect_entry_value_none)
-//                        .equals(mColorEffectBefore)) {
-//                    showToast++;
-//                }
-//                // SPRD: HDR MUTEX WITH COLOR EFFECT BEGIN
-//
-//                // SPRD: HDR MUTEX WITH ISO BEGIN
-//                mISOBefore = settingsManager.getString(
-//                        SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_ISO);
-//                Log.d(TAG, "onSettingChanged mISOBefore=" + mISOBefore);
-//                settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_ISO, mActivity.getAndroidContext()
-//                                .getString(R.string.pref_entry_value_auto));
-//                updateParametersISO();
-//                if (!mActivity.getAndroidContext()
-//                        .getString(R.string.pref_entry_value_auto)
-//                        .equals(mISOBefore)) {
-//                    showToast++;
-//                }
-//                // SPRD: HDR MUTEX WITH ISO END
-//
-//                // SPRD: HDR MUTEX WITH CONTRAST BEGIN
-//                mContrastBefore = settingsManager.getString(
-//                        SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_CONTRAST);
-//                Log.d(TAG, "onSettingChanged mContrastBefore="
-//                        + mContrastBefore);
-//                settingsManager.set(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_CONTRAST,
-//                        mActivity.getAndroidContext().getString(
-//                                R.string.pref_contrast_entry_defaultvalue));
-//                updateParametersContrast();
-//                if (!mActivity.getAndroidContext()
-//                        .getString(R.string.pref_contrast_entry_defaultvalue)
-//                        .equals(mContrastBefore)) {
-//                    showToast++;
-//                }
-//                // SPRD: HDR MUTEX WITH CONTRAST END
-//
-//                // SPRD: HDR MUTEX WITH SATURATION BEGIN
-//                mSaturationBefore = settingsManager.getString(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_SATURATION);
-//                Log.d(TAG, "onSettingChanged mSaturationBefore="
-//                        + mSaturationBefore);
-//                settingsManager.set(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_SATURATION,
-//                        mActivity.getAndroidContext().getString(
-//                                R.string.pref_saturation_entry_defaultvalue));
-//                updateParametersSaturation();
-//                if (!mActivity.getAndroidContext()
-//                        .getString(R.string.pref_saturation_entry_defaultvalue)
-//                        .equals(mSaturationBefore)) {
-//                    showToast++;
-//                }
-//                // SPRD: HDR MUTEX WITH SATURATION END
-//
-//                // SPRD: HDR MUTEX WITH BRIGHTNESS BEGIN
-//                mBrightnessBefore = settingsManager.getString(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_BRIGHTNESS);
-//                Log.d(TAG, "onSettingChanged mBrightnessBefore="
-//                        + mBrightnessBefore);
-//                settingsManager.set(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_BRIGHTNESS,
-//                        mActivity.getAndroidContext().getString(
-//                                R.string.pref_brightness_entry_defaultvalue));
-//                updateParametersBrightness();
-//                if (!mActivity.getAndroidContext()
-//                        .getString(R.string.pref_brightness_entry_defaultvalue)
-//                        .equals(mBrightnessBefore)) {
-//                    showToast++;
-//                }
-//                // SPRD: HDR MUTEX WITH BRIGHTNESS END
-//                Log.d(TAG, "onSettingChanged showToast = " + showToast);
-//                if (showToast != 0) {
-//                    Toast.makeText(
-//                            mActivity,
-//                            mActivity.getResources().getString(
-//                                    R.string.hdr_mutex), Toast.LENGTH_LONG)
-//                            .show();
-//                    isToastExit = true;
-//                }
-//                // SPRD: MUTEX END
-//            } else {
-//                Log.d(TAG, "onSettingChanged hdr off");
-//                // SPRD: HDR MUTEX WITH FLASH BEGIN 2/2
-//                mFlashModeBeforeSceneMode = settingsManager.getString(
-//                        mAppController.getCameraScope(), Keys.KEY_FLASH_MODE
-//                                + PREF_BEFORE, null);
-//                settingsManager.set(mAppController.getCameraScope(),
-//                        Keys.KEY_FLASH_MODE + PREF_BEFORE, null);
-//                Log.d(TAG, "onSettingChanged mFlashModeBeforeSceneMode="
-//                        + mFlashModeBeforeSceneMode);
-//                if (mFlashModeBeforeSceneMode != null) {
-//                    settingsManager.set(mAppController.getCameraScope(),
-//                            Keys.KEY_FLASH_MODE, mFlashModeBeforeSceneMode);
-//                    updateParametersFlashMode();
-//                    mFlashModeBeforeSceneMode = null;
-//                }
-//                mAppController.getButtonManager().enableButton(
-//                        ButtonManager.BUTTON_FLASH);
-//                // SPRD: HDR MUTEX WITH FLASH BEGIN 2/2
-//
-//                // SPRD: HDR MUTEX WITH EXPOSURE BEGIN 2/2
-//                if (settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_EXPOSURE_COMPENSATION_ENABLED)) {
-//                    mExposureCompensationBefore = settingsManager.getString(
-//                            mAppController.getCameraScope(), Keys.KEY_EXPOSURE
-//                                    + PREF_BEFORE, null);
-//                    Log.d(TAG, "onSettingChanged mExposureCompensationBefore="
-//                            + mExposureCompensationBefore);
-//                    settingsManager.set(mAppController.getCameraScope(),
-//                            Keys.KEY_EXPOSURE + PREF_BEFORE, null);
-//                    if (mExposureCompensationBefore != null) {
-//                        settingsManager.set(mAppController.getCameraScope(),
-//                                Keys.KEY_EXPOSURE, mExposureCompensationBefore);
-//                        updateParametersExposureCompensation();
-//                        mExposureCompensationBefore = null;
-//                    }
-//                    mAppController.getButtonManager().enableButton(
-//                            ButtonManager.BUTTON_EXPOSURE_COMPENSATION);
-//                }
-//                // SPRD: HDR MUTEX WITH EXPOSURE END 2/2
-//
-//                // SPRD: HDR MUTEX WITH AeLock BEGIN 2/2
-//                if (mAeLockSupported) {
-//                    mCameraSettings
-//                            .setAutoExposureLock(mAutoExposureLockBefore);
-//                    mAutoExposureLockBefore = false;
-//                }
-//                // SPRD: HDR MUTEX WITH AeLock END 2/2
-//            }
-//        }
-//
-//        // FLASH
-//        if (key.equals(Keys.KEY_FLASH_MODE)
-//                && !"off".equals(settingsManager.getString(
-//                        mAppController.getCameraScope(), Keys.KEY_FLASH_MODE))) {
-//            Log.d(TAG, "onSettingsChanged flash is not off ");
-//            int showFlashToast = 0;
-//            // SPRD: FLASH MUTEX WITH SCENE MODE BEGIN
-//            String sceneModeBefore = settingsManager.getString(
-//                    SettingsManager.SCOPE_GLOBAL, Keys.KEY_SCENE_MODE);
-//            Log.d(TAG, " sceneModeBefore=" + sceneModeBefore);
-//            if (!"auto".equals(sceneModeBefore)) {
-//                settingsManager.set(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_SCENE_MODE,
-//                        mCameraCapabilities.getStringifier().stringify(
-//                                CameraCapabilities.SceneMode.AUTO));
-//                updateParametersSceneMode();
-//                showFlashToast++;
-//            }
-//            // SPRD: FLASH MUTEX WITH SCENE MODE END
-//
-//            // SPRD: FLASH MUTEX WITH CONTINUE_CAPTURE BEGIN
-//            String countineCaptureBefore = settingsManager.getString(
-//                    SettingsManager.SCOPE_GLOBAL,
-//                    Keys.KEY_CAMERA_CONTINUE_CAPTURE);
-//            Log.d(TAG,
-//                    " countineCaptureBefore="
-//                            + countineCaptureBefore
-//                            + ","
-//                            + mActivity
-//                                    .getAndroidContext()
-//                                    .getString(
-//                                            R.string.pref_camera_burst_entry_defaultvalue));
-//            if (!mActivity.getAndroidContext()
-//                    .getString(R.string.pref_camera_burst_entry_defaultvalue)
-//                    .equals(countineCaptureBefore)) {
-//                settingsManager.set(
-//                        SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_CONTINUE_CAPTURE,
-//                        mActivity.getAndroidContext().getString(
-//                                R.string.pref_camera_burst_entry_defaultvalue));
-//                updateParametersBurstCount();
-//                showFlashToast++;
-//            }
-//            // SPRD: FLASH MUTEX WITH CONTINUE_CAPTURE END
-//            Log.d(TAG, "showFlashToast = " + showFlashToast);
-//            if (showFlashToast != 0) {
-//                Toast.makeText(
-//                        mActivity,
-//                        mActivity.getResources()
-//                                .getString(R.string.flash_mutex),
-//                        Toast.LENGTH_LONG).show();
-//            }
-//        }// FLASH END
-//
-//        // SMILE MUTEX COUNTDOWN BEGIN
-//        if (key.equals(Keys.KEY_COUNTDOWN_DURATION)) {
-//            String mface = settingsManager.getString(
-//                    SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_AI_DATECT);
-//            Log.d(TAG, "mutex mface=" + mface);
-//            if ("smile".equals(mface)) {
-//                settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-//                        Keys.KEY_CAMERA_AI_DATECT,
-//                        Keys.CAMERA_AI_DATECT_VAL_OFF);
-//                mFaceDetectionStarted = true;
-//                stopFaceDetection();
-//                setCaptureCount(0);
-//                Toast.makeText(
-//                        mActivity,
-//                        mActivity.getResources().getString(
-//                                R.string.count_down_mutex), Toast.LENGTH_LONG)
-//                        .show();
-//            }
-//        }
-//        // SMILE MUTEX COUNTDOWN END
-//        if (mCameraDevice != null) {
-//            mCameraDevice.applySettings(mCameraSettings);
-//        }
-    }
+   
 
-    /* @} */
-
     private void updateCameraParametersInitialize() {
         // Reset preview frame rate to the maximum because it may be lowered by
         // video camera application.
@@ -3950,12 +3582,7 @@
              * flash off, exposure = 0. Expected: Exposure = 3. flash = on. This
              * is why add CameraSettingsFragment.mNeedCheckMutex.
              */
-            if (CameraSettingsFragment.mNeedCheckMutex
-                    && Keys.isCameraBackFacing(mActivity.getSettingsManager())) {
-                onSettingChanged(mActivity.getSettingsManager(),
-                        Keys.KEY_CAMERA_HDR);
-                CameraSettingsFragment.mNeedCheckMutex = false;
-            }
+           
 
             // SPRD:Add for antibanding
             updateParametersAntibanding();
@@ -4323,10 +3950,11 @@
     }
 
     //nj dream camera test 70, 75
-    private void updateParametersGridLine() {
+     protected void updateParametersGridLine() {
         if(!mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_CAMERA_GRID_LINES)){
             return;
         }
+		mAppController.getCameraAppUI().initGridlineView();
         String grid = mDataModuleCurrent.getString(Keys.KEY_CAMERA_GRID_LINES);
         mAppController.getCameraAppUI().updateScreenGridLines(grid);
         Log.d(TAG, "updateParametersGridLine = " + grid);
@@ -4689,39 +4317,9 @@
      * false); } }
      */
 
-    private void openFace() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        String mFace = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_CAMERA_AI_DATECT);
-        SharedPreferences defaultPrefs = PreferenceManager
-                .getDefaultSharedPreferences(mActivity.getAndroidContext());
-        mDetectValueBeforeSceneMode = defaultPrefs.getString(
-                Keys.KEY_CAMERA_AI_DATECT + 1, null);
-        if (mFace != null && mFace.equals(Keys.CAMERA_AI_DATECT_VAL_OFF)) {
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_AI_DATECT, mDetectValueBeforeSceneMode);
-            startFaceDetection();
-        }
-    }
+   
 
-    private void closeFace() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        String mFace = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_CAMERA_AI_DATECT);
-        SharedPreferences defaultPrefs = PreferenceManager
-                .getDefaultSharedPreferences(mActivity.getAndroidContext());
-        SharedPreferences.Editor editor = defaultPrefs.edit();
-        mDetectValueBeforeSceneMode = settingsManager.getString(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_AI_DATECT);
-        editor.putString(Keys.KEY_CAMERA_AI_DATECT + 1,
-                mDetectValueBeforeSceneMode);
-        editor.apply();
-        if (mFace != null && !mFace.equals(Keys.CAMERA_AI_DATECT_VAL_OFF)) {
-            settingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_CAMERA_AI_DATECT, Keys.CAMERA_AI_DATECT_VAL_OFF);
-            stopFaceDetection();
-        }
-    }
+   
 
     private boolean isHdr() {
         // SettingsManager settingsManager = mActivity.getSettingsManager();
@@ -4805,10 +4403,7 @@
     protected void handleActionDown(int action) {
         Log.d(TAG, "mBurstMode =" + mBurstMode + "," + mIsImageCaptureIntent
                 + "," + checkStorage());
-        if (mBurstCaptureType != -1) {
-            Log.e(TAG, "handleActionDown is running while handleActionUp not");
-            return;
-        }
+       
         if (!mBurstMode && checkStorage() && !mIsImageCaptureIntent) {
             mBurstCaptureType = action;
             mHandler.sendEmptyMessageDelayed(BUTST_START_CAPTURE, 500);
@@ -5224,24 +4819,8 @@
         }
     }
 
-//SPRD:fix bug534665 add some mutex about scene mode
-    public void setExposureIfNecessary() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        if (settingsManager == null) {
-            Log.e(TAG, "Settings manager is null when setExposureIfNecessary!");
-            return;
-        }
-        String sceneMode = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_SCENE_MODE);
-        if (!sceneMode.equals("auto")) {
-            int exposureValue = settingsManager.getInteger(mAppController.getCameraScope(),
-                    Keys.KEY_EXPOSURE);
-            if (exposureValue != 0) {
-                settingsManager.set(mAppController.getCameraScope(), Keys.KEY_EXPOSURE, "0");
-            }
-        }
-    }
 
+
     public void applySettings() {
         if (mCameraDevice != null) {
             mCameraDevice.applySettings(mCameraSettings);
@@ -5308,6 +4887,7 @@
             mCameraDevice.startPreviewWithCallback(new Handler(Looper.getMainLooper()),
                     startPreviewCallback);
         }
+		mUI.onPreviewStarted();
     }
     /* @} */
 
@@ -5415,6 +4995,10 @@
      */
     @Override
     public void updateBatteryLevel(int level) {
+		if (mDataModuleCurrent == null
+                || !mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_FLASH_MODE)) {
+            return;
+        }
         String BEFORE_LOW_BATTERY = "_before_low_battery";
         String valueEffectScope = mAppController.getCameraScope();
         // the limen value which set up in system properties
@@ -5579,8 +5163,84 @@
     public boolean isCameraAvailable(){
         return mCameraAvailable;
     }
-	@Override
+	 @Override
     public boolean useNewApi() {
         return GservicesHelper.useCamera2ApiThroughPortabilityLayer(mActivity.getContentResolver());
     }
+    /* SPRD: Fix bug 659315,572631 optimize camera launch time @{ */
+    private boolean mSoundInitialized = false;
+
+    public void onSurfaceTextureUpdated() {
+        mActivity.onSurfaceTextureUpdate();
+        if (!mSoundInitialized) {
+            mSoundInitialized = true;
+            AsyncTask.THREAD_POOL_EXECUTOR.execute(new Runnable() {
+                @Override
+                public void run() {
+                    if (mCountdownSoundPlayer == null) {
+                        mCountdownSoundPlayer = new SoundPlayer(mAppController.getAndroidContext());
+
+                        mCountdownSoundPlayer.loadSound(R.raw.timer_final_second);
+                        mCountdownSoundPlayer.loadSound(R.raw.timer_increment);
+                    }
+
+                    if (mCameraSound == null) {
+                        mCameraSound = new MediaActionSound();
+                        // Not required, but reduces latency when playback is requested later
+                        mCameraSound.load(MediaActionSound.SHUTTER_CLICK);
+                    }
+                }
+            });
+        }
+    }
+    /* @} */
+    @Override
+    public void updateTopPanel(){
+
+        if (!mCameraDevice.getCapabilities().supports(CameraCapabilities.SceneMode.HDR)) {
+            mUI.setButtonVisibility(ButtonManagerDream.BUTTON_HDR_DREAM,View.GONE);
+        } else {
+            mUI.setButtonVisibility(ButtonManagerDream.BUTTON_HDR_DREAM,View.VISIBLE);
+        }
+
+        ButtonManager buttonManager = mActivity.getButtonManager();
+        buttonManager.enableCameraButton();
+    }
+
+    private View mCancelButton;
+    private void initCancelButton() {
+        if (mCancelButton == null){
+            mCancelButton = mActivity.findViewById(R.id.shutter_cancel_button);
+            mCancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    // SPRD: Fix bug 537444 if paused, ignore this event
+                    if (mPaused) return;
+
+                    cancelCountDown();
+                }
+            });
+        }
+    }
+    private void performInitAsync(){
+        DataStructSetting dataSetting = new DataStructSetting(
+                DreamUtil.intToString(getMode()),
+                DreamUtil.isFrontCamera(mAppController.getAndroidContext(), mCameraId),
+                mActivity.getCurrentModuleIndex(), mCameraId);
+
+        DataModuleManager.getInstance(mAppController.getAndroidContext())
+                .changeModuleStatus(dataSetting);
+        mDataModuleCurrent = DataModuleManager.getInstance(
+                mAppController.getAndroidContext()).getCurrentDataModule();
+        mCounterInitDataSettingWait.count();//It may wait by Vgesture when resume
+
+        sFreezeFrameControl = new FreezeFrameDisplayControl(mActivity, mUI,
+                mIsImageCaptureIntent, mDataModuleCurrent.getBoolean(
+                        Keys.KEY_FREEZE_FRAME_DISPLAY, true));
+        sFreezeFrameControl.setListener(PhotoModule.this);
+    }
+    private Counter mCounterInitDataSettingWait = new Counter(1);
+    public void waitInitDataSettingCounter (){
+        mCounterInitDataSettingWait.waitCount();
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/app/AppController.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/app/AppController.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/app/AppController.java	(revision 175951)
@@ -410,10 +410,7 @@
     /** Whether auto-rotate is enabled.*/
     public boolean isAutoRotateScreen();
 
-    /**
-     * Shows the given tutorial overlay.
-     */
-    public void showTutorial(AbstractTutorialOverlay tutorial);
+   
 
     /**
      * Finishes the activity since the intent is completed successfully.
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/app/CameraAppUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/app/CameraAppUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/app/CameraAppUI.java	(revision 175951)
@@ -107,6 +107,7 @@
 import android.view.SurfaceHolder;
 import com.android.camera.SurfaceViewEx;
 import com.android.ex.camera2.portability.CameraAgent;
+import com.dream.camera.settings.DreamUIPreferenceSettingLayout.SettingUIListener;
 
 
 /**
@@ -130,7 +131,6 @@
  */
 public class CameraAppUI implements ModeListView.ModeSwitchListener,
         TextureView.SurfaceTextureListener, ModeListView.ModeListOpenListener,
-        SettingsManager.OnSettingChangedListener,
         ShutterButton.OnShutterButtonListener,
         OrientationManager.OnOrientationChangeListener {
 
@@ -544,7 +544,7 @@
 
     private final static Log.Tag TAG = new Log.Tag("CameraAppUI Dream");
 
-    private final AppController mController;
+	private final CameraActivity mController;
     private final boolean mIsCaptureIntent;
     private final AnimationManager mAnimationManager;
 
@@ -581,9 +581,9 @@
     private final FrameLayout mCameraRootView;
     private final ModeTransitionView mModeTransitionView;
     private final MainActivityLayout mAppRootView;
-    private final ModeListView mModeListView;
-    private final FilmstripLayout mFilmstripLayout;
-    private final FilmstripView mFilmstripView;
+    private ModeListView mModeListView;
+    private FilmstripLayout mFilmstripLayout;
+    private FilmstripView mFilmstripView;
     private TextureView mTextureView;
     private FrameLayout mModuleUI;
     private ShutterButton mShutterButton;
@@ -610,8 +610,8 @@
     private CaptureAnimationOverlay mCaptureOverlay;
     private PreviewStatusListener mPreviewStatusListener;
     private int mModeCoverState = COVER_HIDDEN;
-    private final FilmstripBottomPanel mFilmstripBottomControls;
-    private final FilmstripContentPanel mFilmstripPanel;
+    private FilmstripBottomPanel mFilmstripBottomControls;
+    private FilmstripContentPanel mFilmstripPanel;
     private Runnable mHideCoverRunnable;
     DreamUIPreferenceSettingLayout mSettingLayout;
 
@@ -640,17 +640,13 @@
             }
         }
     };
-    private final RoundedThumbnailView mRoundedThumbnailView;
-    private final DreamCaptureLayoutHelper mCaptureLayoutHelper;
-    private final View mAccessibilityAffordances;
-    private AccessibilityUtil mAccessibilityUtil;
-
+    
     public int mBottomHeightOptimal = 1;
-
+	private DreamCaptureLayoutHelper mCaptureLayoutHelper;
     private boolean mDisableAllUserInteractions;
     /** Whether to prevent capture indicator from being triggered. */
     private boolean mSuppressCaptureIndicator;
-
+	private RoundedThumbnailView mRoundedThumbnailView;
     /** Supported HDR mode (none, hdr, hdr+). */
     private String mHdrSupportMode;
 
@@ -741,6 +737,10 @@
             Bitmap overlays = Bitmap.createBitmap(mCameraRootView.getWidth(),
                     mCameraRootView.getHeight(), Bitmap.Config.ARGB_8888);
             Canvas canvas = new Canvas(overlays);
+			if (slidePanel == null) {
+                mCameraRootView.draw(canvas);
+                return overlays;
+            }
             slidePanel.setVisibility(View.INVISIBLE);
             mCameraRootView.draw(canvas);
             if(mController.isSecureCamera()){
@@ -958,7 +958,7 @@
                     || !mSwipeEnabled) {
                 return false;
             }
-            if (mModeListView.getModeListSize() == 1) {
+            if (mModeListView == null || mModeListView.getModeListSize() == 1) {
                 return false;
             }
             int deltaX = (int) (ev.getX() - mDown.getX());
@@ -1036,28 +1036,17 @@
             MainActivityLayout appRootView, boolean isCaptureIntent) {
         mSlop = ViewConfiguration.get(controller.getAndroidContext())
                 .getScaledTouchSlop();
-        mController = controller;
+         mController = (CameraActivity) controller;
         mIsCaptureIntent = isCaptureIntent;
 
         mAppRootView = appRootView;
-        mSettingLayout = (DreamUIPreferenceSettingLayout) appRootView
-                .findViewById(R.id.dream_ui_preference_setting_layout);
-        DataModuleManager.getInstance(mController.getAndroidContext()).addListener(mSettingLayout);
         mCurrentModuleTip = (TextView) appRootView
                 .findViewById(R.id.current_module);
-
-        mFilmstripLayout = (FilmstripLayout) appRootView
-                .findViewById(R.id.filmstrip_layout);
-        mFilmstripView = (FilmstripView) appRootView.findViewById(R.id.filmstrip_view);
         mCameraRootView = (FrameLayout) appRootView
                 .findViewById(R.id.camera_app_root);
         mModeTransitionView = (ModeTransitionView) mAppRootView
                 .findViewById(R.id.mode_transition_view);
-        mFilmstripBottomControls = new FilmstripBottomPanel(controller,
-                (ViewGroup) mAppRootView
-                        .findViewById(R.id.filmstrip_bottom_panel));
-        mFilmstripPanel = (FilmstripContentPanel) mAppRootView
-                .findViewById(R.id.filmstrip_layout);
+       
         mGestureDetector = new GestureDetector(controller.getAndroidContext(),
                 new MyGestureListener());
         Resources res = controller.getAndroidContext().getResources();
@@ -1065,65 +1054,14 @@
                 res.getDimensionPixelSize(R.dimen.bottom_bar_height_min),
                 res.getDimensionPixelSize(R.dimen.bottom_bar_height_max),
                 res.getDimensionPixelSize(R.dimen.bottom_bar_height_optimal));
-        mCaptureLayoutHelper.setActivity((CameraActivity) mController);
+        mCaptureLayoutHelper.setActivity(mController);
         mModeListView = (ModeListView) appRootView
                 .findViewById(R.id.mode_list_layout);
-        if (mModeListView != null) {
-            mModeListView.setModeSwitchListener(this);
-            mModeListView.setModeListOpenListener(this);
-            mModeListView
-                    .setCameraModuleScreenShotProvider(mCameraModuleScreenShotProvider);
-            mModeListView.setCaptureLayoutHelper(mCaptureLayoutHelper);
-            boolean shouldShowSettingsCling = mController.getSettingsManager()
-                    .getBoolean(SettingsManager.SCOPE_GLOBAL,
-                            Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING);
-            mModeListView.setShouldShowSettingsCling(shouldShowSettingsCling);
-        } else {
-            Log.e(TAG, "Cannot find mode list in the view hierarchy");
-        }
+        
         mAnimationManager = new AnimationManager();
-        mRoundedThumbnailView = (RoundedThumbnailView) appRootView
-                .findViewById(R.id.rounded_thumbnail_view);
-        mRoundedThumbnailView.setCallback(new RoundedThumbnailView.Callback() {
-            @Override
-            public void onHitStateFinished() {
-                if(mFilmstripView.getController().getCurrentAdapterIndex() == -1 ||
-                        mFilmstripView.getCurrentData().getItemViewType() == FilmstripItemType.SECURE_ALBUM_PLACEHOLDER ||
-                        ((CameraActivity) mController).getCurrentModule().isShutterClicked()){
-                    setBottomPanelLeftRightClickable(true);
-                    return;
-                }
-                hidePanels();
-                mFilmstripLayout.showFilmstrip();
-                ((CameraActivity) mController).doSometingWhenFilmStripShow();
-            }
-            @Override
-            public void onClick(){
-                setBottomPanelLeftRightClickable(false);
-            }
-        });
-
+       
         mAppRootView.setNonDecorWindowSizeChangedListener(mCaptureLayoutHelper);
         initDisplayListener();
-        mAccessibilityAffordances = mAppRootView
-                .findViewById(R.id.accessibility_affordances);
-        View modeListToggle = mAppRootView
-                .findViewById(R.id.accessibility_mode_toggle_button);
-        modeListToggle.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                openModeList();
-            }
-        });
-        View filmstripToggle = mAppRootView
-                .findViewById(R.id.accessibility_filmstrip_toggle_button);
-        filmstripToggle.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                showFilmstrip();
-            }
-        });
-
         mSuppressCaptureIndicator = false;
 
         mDataModule = DataModuleManager.getInstance(
@@ -1130,7 +1068,6 @@
                 mController.getAndroidContext()).getDataModuleCamera();
 
         initAllPanels();
-        initBottomButtons();
         // SPRD: Fix 474843 Add for Filter Feature
         mDreamFilterModuleController = new DreamFilterModuleController(
                 controller, appRootView);
@@ -1272,7 +1209,9 @@
             enabled = false;
         }
         mSwipeEnabled = enabled;
-        mModeListView.setTouchable(enabled);// SPRD:Fix bug428712
+		if(mModeListView != null){
+            mModeListView.setTouchable(enabled && initModeListViewEnd);// SPRD:Fix bug428712
+        }
         // TODO: This can be removed once we come up with a new design for
         // handling swipe
         // on shutter button and mode options. (More details: b/13751653)
@@ -1282,15 +1221,9 @@
     public void onDestroy() {
         AndroidServices.instance().provideDisplayManager()
                 .unregisterDisplayListener(mDisplayListener);
-        SlidePanelManager.getInstance((CameraActivity) mController).onDestroy();
+        SlidePanelManager.getInstance(mController).onDestroy();
         mIsDestroyed = true;
-		/* SPRD: Fix bug 613015 add SurfaceView support @{ */
-        if (((CameraActivity) mController).getCurrentModule().isUseSurfaceView()) {
-            mTextureViewHelper.removePreviewAreaSizeChangedListener(
-                    mSurfaceView.getPreviewAreaChangedListener());
-        }
-        /* @} */
-        DataModuleManager.getInstance(mController.getAndroidContext()).removeListener(mSettingLayout);
+		
     }
 
     /**
@@ -1379,7 +1312,7 @@
             // SPRD Bug:528553 icons disappear.
             // hidePanels();
             // SPRD: Fix 474843 Add for Filter Feature.
-            if(mModeListView.isShown()){
+            if(mModeListView != null && mModeListView.isShown()){
                 return;
             }
             mDreamFilterModuleController.switchMode(swipeState);
@@ -1391,7 +1324,9 @@
             mModeListView.setVisibility(View.VISIBLE);
             mAppRootView.redirectTouchEventsTo(mModeListView);
              */
-            if (!mDreamFilterModuleController.switchMode(swipeState)) {
+            if (!mDreamFilterModuleController.switchMode(swipeState)&& (mSettingLayout == null
+                    || mSettingLayout.getVisibility() != View.VISIBLE)
+                    && mModeListView != null) {
                 mModeListView.setVisibility(View.VISIBLE);
                 mAppRootView.redirectTouchEventsTo(mModeListView);
             }
@@ -1407,19 +1342,17 @@
         if (!mIsCaptureIntent) {
             showModeCoverUntilPreviewReady();
         }
-        // Hide action bar first since we are in full screen mode first, and
-        // switch the system UI to lights-out mode.
-        mFilmstripPanel.hide();
-
-        // Show UI that is meant to only be used when spoken feedback is
-        // enabled.
-        mAccessibilityAffordances
-                .setVisibility((!mIsCaptureIntent && mAccessibilityUtil
-                        .isAccessibilityEnabled()) ? View.VISIBLE : View.GONE);
-
-        if(mController != null && mController.getButtonManager() != null)
-            mController.getButtonManager().refreshButtonState();
-        mIsDestroyed = false;
+        mController.rollTask(new Runnable() {
+            @Override
+            public void run() {
+                // Hide action bar first since we are in full screen mode first, and
+                // switch the system UI to lights-out mode.
+                mFilmstripPanel.hide();
+                if(mController != null && mController.getButtonManager() != null)
+                    mController.getButtonManager().refreshButtonState();
+                mIsDestroyed = false;
+            }
+        });
     }
 
     /**
@@ -1427,15 +1360,17 @@
      * adapts the rest of the UI.
      */
     public void openModeList() {
-        mModeListView.onMenuPressed();
+        if(mModeListView != null){
+            mModeListView.onMenuPressed();
+        }
     }
 
     public void showAccessibilityZoomUI(float maxZoom) {
-        mAccessibilityUtil.showZoomUI(maxZoom);
+        
     }
 
     public void hideAccessibilityZoomUI() {
-        mAccessibilityUtil.hideZoomUI();
+        
     }
 
     /**
@@ -1454,6 +1389,7 @@
             @Override
             public void run() {
                 mModeTransitionView.hideModeCover(null);
+				((CameraActivity)mController).initModelistview();
                 if (!mDisableAllUserInteractions) {
 //                    showShimmyDelayed();
                 }
@@ -1518,15 +1454,9 @@
     public void onPreviewVisiblityChanged(int visibility) {
         if (visibility == ModuleController.VISIBILITY_HIDDEN) {
             setIndicatorBottomBarWrapperVisible(false);
-            mAccessibilityAffordances.setVisibility(View.GONE);
+           
         } else {
             setIndicatorBottomBarWrapperVisible(true);
-            if (!mIsCaptureIntent
-                    && mAccessibilityUtil.isAccessibilityEnabled()) {
-                mAccessibilityAffordances.setVisibility(View.VISIBLE);
-            } else {
-                mAccessibilityAffordances.setVisibility(View.GONE);
-            }
         }
     }
 
@@ -1582,10 +1512,9 @@
 
     @Override
     public void onModeListClosed() {
-        // Convert hardware layers back to default layer types when animation
-        // stops
-        // to prevent accidental artifacting.
-        mShutterButton.setAlpha(ShutterButton.ALPHA_WHEN_ENABLED);
+       if (mShutterButton != null) {
+            mShutterButton.setAlpha(ShutterButton.ALPHA_WHEN_ENABLED);
+       }
     }
 
     /**
@@ -1594,13 +1523,14 @@
      * @return Whether the UI responded to the key event.
      */
     public boolean onBackPressed() {
-        if (mFilmstripLayout.getVisibility() == View.VISIBLE) {
+         if (mFilmstripLayout != null && mFilmstripLayout.getVisibility() == View.VISIBLE) {
             return mFilmstripLayout.onBackPressed();
-        } else if (mSettingLayout.getVisibility() == View.VISIBLE) {
+        } else if (mSettingLayout != null && mSettingLayout.getVisibility() == View.VISIBLE) {
             return mSettingLayout.onBackPressed();
-        } else {
+        } else if (mModeListView != null){
             return mModeListView.onBackPressed();
         }
+        return false;
     }
 
     /**
@@ -1652,15 +1582,13 @@
      * specific changes that depend on the camera or camera settings.
      */
     public void onChangeCamera() {
-        ModuleController moduleController = mController
+		
+	}
+    public void initializeBottomBarSpec() {
+		ModuleController moduleController = mController
                 .getCurrentModuleController();
         HardwareSpec hardwareSpec = moduleController.getHardwareSpec();
-        Log.d(TAG, "onChangeCamera hardwareSpec=" + hardwareSpec
-                + ",moduleController=" + moduleController);
-        if (moduleController != null) {
-            Log.d(TAG,
-                    "getBottomBarSpec()=" + moduleController.getBottomBarSpec());
-        }
+       
 
         /**
          * The current UI requires that the flash option visibility in front-
@@ -1672,32 +1600,7 @@
          * opening the camera in back facing camera, and can save this flash
          * support value again.
          */
-        if (hardwareSpec != null) {
-            if (!mController.getSettingsManager().isSet(
-                    SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA)) {
-                mController.getSettingsManager().set(
-                        SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA,
-                        hardwareSpec.isFlashSupported());
-            }
-            /** Similar logic applies to the HDR option. */
-            if (!mController.getSettingsManager().isSet(
-                    SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_HDR_SUPPORT_MODE_BACK_CAMERA)) {
-                String hdrSupportMode;
-                if (hardwareSpec.isHdrPlusSupported()) {
-                    hdrSupportMode = getResourceString(R.string.pref_camera_hdr_supportmode_hdr_plus);
-                } else if (hardwareSpec.isHdrSupported()) {
-                    hdrSupportMode = getResourceString(R.string.pref_camera_hdr_supportmode_hdr);
-                } else {
-                    hdrSupportMode = getResourceString(R.string.pref_camera_hdr_supportmode_none);
-                }
-                mController.getSettingsManager().set(
-                        SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_HDR_SUPPORT_MODE_BACK_CAMERA, hdrSupportMode);
-            }
-        }
+      
 
         applyModuleSpecs(hardwareSpec, moduleController.getBottomBarSpec(),
                 true /* skipScopeCheck */);
@@ -1728,7 +1631,6 @@
      * should only need to be done once per app start.
      */
     public void prepareModuleUI() {
-        mController.getSettingsManager().addListener(this);
         mModuleUI = (FrameLayout) mCameraRootView
                 .findViewById(R.id.module_layout);
         mTextureView = (TextureView) mCameraRootView
@@ -1740,12 +1642,7 @@
         mTextureViewHelper
                 .setOnLayoutChangeListener(mPreviewLayoutChangeListener);
 
-        mBottomBar = (BottomBar) mCameraRootView.findViewById(R.id.bottom_bar);
-        // int unpressedColor = mController.getAndroidContext().getResources()
-        // .getColor(R.color.camera_gray_background);
-        // setBottomBarColor(unpressedColor);
-        // updateModeSpecificUIColors();
-         /* SPRD: Fix bug 613015 add SurfaceView support @{ */
+        /* SPRD: Fix bug 613015 add SurfaceView support @{ */
         mSurfaceView = (SurfaceViewEx) mCameraRootView.findViewById(R.id.preview_content_surfaceview);
         if ((null != mSurfaceView) && ((CameraActivity) mController).getCurrentModule().isUseSurfaceView()) {
             mSurfaceView.setCameraAppUI(this);
@@ -1753,43 +1650,11 @@
         }
         /* @} */
 
-        mBottomBar.setCaptureLayoutHelper(mCaptureLayoutHelper);
-
-        // Sets the visibility of the bottom bar and the mode options.
-        resetBottomControls(mController.getCurrentModuleController(),
-                mController.getCurrentModuleIndex());
-
-        mShutterButton = (ShutterButton) mCameraRootView
-                .findViewById(R.id.shutter_button);
-        addShutterListener(mController.getCurrentModuleController());
-        addShutterListener(this);
-
-        mGridLines = (GridLines) mCameraRootView.findViewById(R.id.grid_lines);
-        /* SRPD: add more gridline type @{ */
-        mNineGridLines = (GridLines) mCameraRootView.findViewById(R.id.nine_grid_lines);
-        mReticleGridLines = (ReticleGridLines) mCameraRootView.findViewById(R.id.reticle_grid_lines);
-        mBoxGridLines = (BoxGridLines) mCameraRootView.findViewById(R.id.box_grid_lines);
-        mGoldenGridLines = (GoldenGridLines) mCameraRootView.findViewById(R.id.golden_grid_lines);
-
-        mTextureViewHelper.addPreviewAreaSizeChangedListener(mGridLines);
-        mTextureViewHelper.addPreviewAreaSizeChangedListener(mNineGridLines);
-        mTextureViewHelper.addPreviewAreaSizeChangedListener(mReticleGridLines);
-        mTextureViewHelper.addPreviewAreaSizeChangedListener(mBoxGridLines);
-        mTextureViewHelper.addPreviewAreaSizeChangedListener(mGoldenGridLines);
-        /* @} */
-
         mPreviewOverlay = (PreviewOverlay) mCameraRootView
                 .findViewById(R.id.preview_overlay);
 
-        mZoomPanel = (ZoomPanel) mCameraRootView.findViewById(R.id.zoom_panel);
-
         mPreviewOverlay.setOnTouchListener(new MyTouchListener());
-        mPreviewOverlay.setOnDreamZoomUIChangedListener(mZoomPanel);
-        mZoomPanel.setOnProgressChangeListener(mPreviewOverlay);
 
-        mAccessibilityUtil = new AccessibilityUtil(mPreviewOverlay,
-                mAccessibilityAffordances);
-
         mCaptureOverlay = (CaptureAnimationOverlay) mCameraRootView
                 .findViewById(R.id.capture_overlay);
         mTextureViewHelper.addPreviewAreaSizeChangedListener(mPreviewOverlay);
@@ -1799,21 +1664,13 @@
         mController.getButtonManager().setListener(null);
 
         mFocusRing = (FocusRing) mCameraRootView.findViewById(R.id.focus_ring);
-        mTutorialsPlaceHolderWrapper = (FrameLayout) mCameraRootView
-                .findViewById(R.id.tutorials_placeholder_wrapper);
-        mStickyBottomCaptureLayout = (StickyBottomCaptureLayout) mAppRootView
-                .findViewById(R.id.sticky_bottom_capture_layout);
-        mStickyBottomCaptureLayout.setCaptureLayoutHelper(mCaptureLayoutHelper);
-        mStickyBottomCaptureLayout.setCameraAppUI(this);// SPRD:fix bug474672
-        mCountdownCancelButton = (ImageButton) mStickyBottomCaptureLayout
-                .findViewById(R.id.shutter_cancel_button);
-
-        mTextureViewHelper.addPreviewAreaSizeChangedListener(mModeListView);
         mTextureViewHelper
                 .addAspectRatioChangedListener(new PreviewStatusListener.PreviewAspectRatioChangedListener() {
                     @Override
                     public void onPreviewAspectRatioChanged(float aspectRatio) {
-                        mBottomBar.requestLayout();
+                        if (mBottomBar != null) {
+                            mBottomBar.requestLayout();
+                        }
                         /* SPRD: Fix bug 613015 add SurfaceView support @{ */
                         if (null != mSurfaceView) {
                             mSurfaceView.setAspectRatio(aspectRatio);
@@ -1842,8 +1699,6 @@
             mModuleUI.removeAllViews();
         }
         removeShutterListener(mController.getCurrentModuleController());
-        mTutorialsPlaceHolderWrapper.removeAllViews();
-        mTutorialsPlaceHolderWrapper.setVisibility(View.GONE);
 
         setShutterButtonEnabled(true);
         mPreviewStatusListener = null;
@@ -1900,7 +1755,7 @@
             }
         }
         // SPRD:Fix bug 400555 && bug391138
-        if (!isInIntentReview() && !isInFreezeReview()) {
+        if (!isBottomBarNull() && !isInIntentReview()) {
         /*SPRD:fix bug607898 fix setting ui when back from home/secure camera, last time pause camera by pressing home @{ */
             if (isSettingLayoutOpen()) {
                 updatePreviewUI(View.GONE);//SPRD:fix bug 607898
@@ -2025,10 +1880,9 @@
 
     @Override
     public void onSettingsSelected() {
-        mController.getSettingsManager().set(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING, false);
+        
         mModeListView.setShouldShowSettingsCling(false);
-        mController.onSettingsSelected();
+       
     }
 
     @Override
@@ -2060,7 +1914,7 @@
      *            animation.
      */
     public void startCaptureIndicatorRevealAnimation(String accessibilityString) {
-        if (mSuppressCaptureIndicator) {
+        if (mSuppressCaptureIndicator || mRoundedThumbnailView == null) {
             return;
         }
         mRoundedThumbnailView
@@ -2075,7 +1929,7 @@
      */
     public void updateCaptureIndicatorThumbnail(Bitmap thumbnailBitmap,
             int rotation) {
-        if (mSuppressCaptureIndicator) {
+        if (mSuppressCaptureIndicator || mRoundedThumbnailView == null) {
             return;
         }
         mRoundedThumbnailView.setThumbnail(thumbnailBitmap, rotation);
@@ -2198,14 +2052,14 @@
     public void onSurfaceTextureUpdated() {
         Log.i(TAG, "onSurfaceTextureUpdated() mModeCoverState = "
                 + mModeCoverState);
-        if (mModeCoverState == COVER_WILL_HIDE_AT_NEXT_TEXTURE_UPDATE ) {
+        if (mModeCoverState == COVER_WILL_HIDE_AT_NEXT_TEXTURE_UPDATE) {
             Log.i(TAG, "hiding cover via onSurfaceTextureUpdated");
             onNewPreviewFrame();
             if (!isInIntentReview()
                     && !isInFreezeReview()
                     && mController != null
-                    && ((CameraActivity) mController).getCurrentModule() != null
-                    && !((CameraActivity) mController).getCurrentModule().isGifCapture()) {// SPRD:Fix bug 414865
+                    &&  mController.getCurrentModule() != null
+                    && !mController.getCurrentModule().isGifCapture()) {// SPRD:Fix bug 414865
                 setSwipeEnabled(true);
             }
         }
@@ -2214,9 +2068,6 @@
     @Override
     public void onSurfaceTextureUpdated(SurfaceTexture surface) {
         mSurface = surface;
-        if (mPreviewStatusListener != null) {
-            mPreviewStatusListener.onSurfaceTextureUpdated(surface);
-        }
         // Do not show the first preview frame. Due to the bug b/20724126, we
         // need to have
         // a WAR to request a preview frame followed by 5-frame ZSL burst before
@@ -2239,6 +2090,9 @@
             
         }
 		mDreamFilterModuleController.checkFrameCount();
+		if (mPreviewStatusListener != null) {
+            mPreviewStatusListener.onSurfaceTextureUpdated(surface);
+        }
     }
 
     /**************************** Grid lines api ******************************/
@@ -2263,24 +2117,7 @@
         }
     }
 
-    /**
-     * Return a callback which shows or hide the preview grid lines depending on
-     * whether the grid lines setting is set on.
-     */
-    public ButtonManager.ButtonCallback getGridLinesCallback() {
-        return new ButtonManager.ButtonCallback() {
-            @Override
-            public void onStateChanged(int state) {
-                if (!mController.isPaused()) {
-                    if (Keys.areGridLinesOn(mController.getSettingsManager())) {
-                        showGridLines();
-                    } else {
-                        hideGridLines();
-                    }
-                }
-            }
-        };
-    }
+    
 
     /**************************** Bottom bar api ******************************/
 
@@ -2369,6 +2206,9 @@
 
     public void setShutterButtonEnabled(final boolean enabled) {
         if (!mDisableAllUserInteractions) {
+			if(mBottomBar == null){
+                initBottomBar();
+            }
             mBottomBar.post(new Runnable() {
                 @Override
                 public void run() {
@@ -2378,11 +2218,16 @@
         }
     }
 
-    public void setShutterButtonImportantToA11y(boolean important) {
-        mBottomBar.setShutterButtonImportantToA11y(important);
+     public void setShutterButtonImportantToA11y(boolean important) {
+        if (mBottomBar != null) {
+            mBottomBar.setShutterButtonImportantToA11y(important);
+        }
     }
 
     public boolean isShutterButtonEnabled() {
+        if (mBottomBar == null) {
+            return false;
+        }
         return mBottomBar.isShutterButtonEnabled();
     }
 
@@ -2392,9 +2237,11 @@
          * code: mStickyBottomCaptureLayout.setVisibility(visible ? View.VISIBLE
          * : View.INVISIBLE);
          */
-        mStickyBottomCaptureLayout
-                .setVisibility(visible && showPanel ? View.VISIBLE
-                        : View.INVISIBLE);
+        if ( mStickyBottomCaptureLayout != null) {
+            mStickyBottomCaptureLayout
+                    .setVisibility(visible && showPanel ? View.VISIBLE
+                            : View.INVISIBLE);
+        }
     }
 
     /**
@@ -2410,7 +2257,9 @@
      */
     public void addShutterListener(
             ShutterButton.OnShutterButtonListener listener) {
-        mShutterButton.addOnShutterButtonListener(listener);
+        if(null != mShutterButton) {
+            mShutterButton.addOnShutterButtonListener(listener);
+        }
     }
 
     /**
@@ -2418,20 +2267,12 @@
      */
     public void removeShutterListener(
             ShutterButton.OnShutterButtonListener listener) {
-        mShutterButton.removeOnShutterButtonListener(listener);
+        if(null != mShutterButton) {
+            mShutterButton.removeOnShutterButtonListener(listener);
+        }
     }
 
     /**
-     * Sets or replaces the "cancel shutter" button listener.
-     * <p>
-     * TODO: Make this part of the interface the same way shutter button
-     * listeners are.
-     */
-    public void setCancelShutterButtonListener(View.OnClickListener listener) {
-        mCountdownCancelButton.setOnClickListener(listener);
-    }
-
-    /**
      * Performs a transition to the capture layout of the bottom bar.
      */
     public void transitionToCapture() {
@@ -2452,7 +2293,15 @@
                 moduleController.getBottomBarSpec());
         mBottomBar.transitionToCancel();
     }
-
+/**
+     * Sets or replaces the "cancel shutter" button listener.
+     * <p>
+     * TODO: Make this part of the interface the same way shutter button
+     * listeners are.
+     */
+    public void setCancelShutterButtonListener(View.OnClickListener listener) {
+        mCountdownCancelButton.setOnClickListener(listener);
+    }
     /**
      * Performs a transition to the global intent layout.
      */
@@ -2802,31 +2651,27 @@
         }
     }
 
-    /**
-     * Shows the given tutorial on the screen.
-     */
-    public void showTutorial(AbstractTutorialOverlay tutorial,
-            LayoutInflater inflater) {
-        tutorial.show(mTutorialsPlaceHolderWrapper, inflater);
-    }
+   
 
     /**
      * Whether the capture ratio selector dialog must be shown on this device.
      */
     public boolean shouldShowAspectRatioDialog() {
-        final boolean isAspectRatioPreferenceSet = mController
-                .getSettingsManager().getBoolean(SettingsManager.SCOPE_GLOBAL,
-                        Keys.KEY_USER_SELECTED_ASPECT_RATIO);
+       
         final boolean isAspectRatioDevice = ApiHelper.IS_NEXUS_4
                 || ApiHelper.IS_NEXUS_5 || ApiHelper.IS_NEXUS_6;
-        return isAspectRatioDevice && !isAspectRatioPreferenceSet;
+        return isAspectRatioDevice ;
     }
 
     /*************************** Filmstrip api *****************************/
 
     public void showFilmstrip() {
-        mModeListView.onBackPressed();
-        mFilmstripLayout.showFilmstrip();
+        if(mModeListView != null){
+            mModeListView.onBackPressed();
+        }
+        if (mFilmstripLayout != null) {
+            mFilmstripLayout.showFilmstrip();
+        }
     }
 
     public void hideFilmstrip() {
@@ -2849,7 +2694,10 @@
     }
 
     public boolean isInFreezeReview() {
-        return mBottomBar.isInFreezeReview();
+        if (mBottomBar == null) {
+            return false;
+        }
+		return mBottomBar.isInFreezeReview();
     }
 
     /* SPRD: add for bug 380597: switch camera preview has a frame error @{ */
@@ -2880,9 +2728,9 @@
      * volume key
      */
     public void hideModeList() {
-        if (mModeListView.isShown()) {
+       if (mModeListView != null && mModeListView.isShown()) {
             mModeListView.onBackPressed();
-        }
+       }
     }
 
     /* SPRD:fix bug521990 Back to Camera from lockscreen, the screen is freeze */
@@ -3097,24 +2945,23 @@
                 mController.getAndroidContext()).getDataModuleCamera();
         switch (icon) {
         case DreamUtil.SP_EXTERNAL_STORAGE:
-            Log.e(TAG,
-                    "cameraAppUI updateSidePanelItem key = DreamUtil.SP_EXTERNAL_STORAGE");
+            
             if (mDataModule == null
                     || StorageUtil.getInstance().getSideStorageState() != StorageUtil.EXTERNAL) {
                 visibility = View.GONE;
             }
-            Log.e(TAG, "spES = " + spES + " visibility = " + visibility);
+           
             if (spES != null){
                 spES.setVisibility(visibility);
             }
             break;
         case DreamUtil.SP_INTERNAL_STORAGE:
-            Log.e(TAG, "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_INTERNAL_STORAGE");
+            
             if (mDataModule == null
                     || StorageUtil.getInstance().getSideStorageState() != StorageUtil.INTERNAL) {
                 visibility = View.GONE;
             }
-            Log.e(TAG, "spIS = " + spIS + " visibility = " + visibility);
+           
             if (spIS != null){
                 spIS.setVisibility(visibility);
             }
@@ -3121,18 +2968,18 @@
             break;
 
         case DreamUtil.SP_USB_STORAGE:
-            Log.e(TAG, "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_USB_STORAGE");
+            
             if (mDataModule == null
                     || StorageUtil.getInstance().getSideStorageState() != StorageUtil.USB) {
                 visibility = View.GONE;
             }
-            Log.e(TAG, "spUSB = " + spUSB + " visibility = " + visibility);
+           
             if (spUSB != null){
                 spUSB.setVisibility(visibility);
             }
             break;
         case DreamUtil.SP_FACE_DETECT:
-            Log.e(TAG, "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_FACE_DETECT");
+           
             if (mDataModuleCurrent == null
                     || !mDataModuleCurrent
                     .isEnableSettingConfig(Keys.KEY_CAMERA_AI_DATECT) || mDataModuleCurrent
@@ -3140,18 +2987,12 @@
                             .getString(Keys.KEY_CAMERA_AI_DATECT))) {
                 visibility = View.GONE;
             }
-            Log.e(TAG, "spFD = " + spFD + " visibility = " + visibility);
+           
             if (spFD != null)
                 spFD.setVisibility(visibility);
             break;
         case DreamUtil.SP_LOCATE:
-            Log.e(TAG,
-                    "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_LOCATE");
-            Log.e(TAG,
-                    Keys.KEY_RECORD_LOCATION
-                            + " = "
-                            + mDataModuleCamera
-                                    .getString(Keys.KEY_RECORD_LOCATION));
+            
             if (!CameraUtil.isSupprtGps() || mDataModuleCamera == null
                     || "0".equals(mDataModuleCamera
                             .getString(Keys.KEY_RECORD_LOCATION))) {
@@ -3162,8 +3003,7 @@
                 spL.setVisibility(visibility);
             break;
         case DreamUtil.SP_TOUCH_CAPTURE:
-            Log.e(TAG,
-                    "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_TOUCH_CAPTURE");
+           
             // UNDONE KEY_TOUCH_TO_CAPTURE
             if (mDataModuleCurrent == null
                     || !mDataModuleCurrent
@@ -3172,25 +3012,17 @@
                             .getString(Keys.KEY_CAMERA_TOUCHING_PHOTOGRAPH))) {
                 visibility = View.GONE;
             }
-            Log.e(TAG, "spTC = " + spTC + " visibility = " + visibility);
+            
             if (spTC != null)
                 spTC.setVisibility(visibility);
             break;
         case DreamUtil.SP_FILTER:
-            Log.e(TAG,
-                    "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_FILTER");
-            Log.e(TAG, "spTC = " + spTC + " visibility = " + visibility);
+            
             if (spF != null)
                 spF.setVisibility(visibility);
             break;
         case DreamUtil.SP_OPPOSITE:
-            Log.e(TAG,
-                    "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_OPPOSITE");
-            Log.e(TAG,
-                    Keys.KEY_FRONT_CAMERA_MIRROR
-                            + " = "
-                            + mDataModuleCurrent
-                                    .getString(Keys.KEY_FRONT_CAMERA_MIRROR));
+            
             if (mDataModuleCurrent == null ||  !mDataModuleCurrent
                     .isEnableSettingConfig(Keys.KEY_FRONT_CAMERA_MIRROR) || mDataModuleCurrent
                     .getString(Keys.KEY_FRONT_CAMERA_MIRROR) == null
@@ -3198,7 +3030,7 @@
                             .getString(Keys.KEY_FRONT_CAMERA_MIRROR))) {
                 visibility = View.GONE;
             }
-            Log.e(TAG, "spOP = " + spOP + " visibility = " + visibility);
+            
             if (spOP != null)
                 spOP.setVisibility(visibility);
             break;
@@ -3223,9 +3055,7 @@
                 }
             }
 
-            Log.e(TAG,
-                    "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_CA");
-            Log.e(TAG, "spCA = " + spCA + " visibility = " + visibility);
+           
             if (spCA != null)
                 spCA.setVisibility(visibility);
             break;
@@ -3249,9 +3079,7 @@
                     }
                 }
             }
-            Log.e(TAG,
-                    "cameraAppUI   updateSidePanelItem key = DreamUtil.SP_VA");
-            Log.e(TAG, "spVA = " + spVA + " visibility = " + visibility);
+           
             if (spVA != null)
                 spVA.setVisibility(visibility);
             break;
@@ -3258,104 +3086,8 @@
         }
     }
 
-    // @Override
-    // public void onDreamSettingChangeListener(HashMap<String, String> keys) {
+   
 
-    // for (String key : keys.keySet()) {
-    // Log.e(TAG, "cameraAppUI  key = " + key);
-    // }
-    //
-    // for (String key : keys.keySet()) {
-    // // Update the mode options based on the hardware spec,
-    // // when hdr changes to prevent flash from getting out of sync.
-    // if (key.equals(Keys.KEY_CAMERA_HDR)) {
-    // ModuleController moduleController = mController
-    // .getCurrentModuleController();
-    // applyModuleSpecs(moduleController.getHardwareSpec(),
-    // moduleController.getBottomBarSpec(), true /* skipScopeCheck */);
-    // continue;
-    // }
-    //
-    // if (key.equals(Keys.KEY_CAMERA_STORAGE_PATH)) {
-    // updateSidePanelItem(DreamUtil.SP_EXTERNAL_STORAGE, true);
-    // updateSidePanelItem(DreamUtil.SP_INTERNAL_STORAGE, true);
-    // continue;
-    // }
-    //
-    // if (key.equals(Keys.KEY_CAMERA_AI_DATECT)) {
-    // updateSidePanelItem(DreamUtil.SP_FACE_DETECT, true);
-    // continue;
-    // }
-    //
-    // if (key.equals(Keys.KEY_RECORD_LOCATION)) {
-    // updateSidePanelItem(DreamUtil.SP_LOCATE, true);
-    // continue;
-    // }
-    //
-    // if (key.equals(Keys.KEY_CAMERA_PHOTOGRAPH_STABILIZATION)) {
-    // updateSidePanelItem(DreamUtil.SP_CA, true);
-    // continue;
-    // }
-    //
-    // if (key.equals(Keys.KEY_CAMERA_VIDEO_STABILIZATION)) {
-    // updateSidePanelItem(DreamUtil.SP_VA, true);
-    // continue;
-    // }
-    //
-    // if (key.equals(Keys.KEY_CAMERA_TOUCHING_PHOTOGRAPH)) {
-    // updateSidePanelItem(DreamUtil.SP_TOUCH_CAPTURE, true);
-    // continue;
-    // }
-    //
-    // // if (mDreamInterface != null) {
-    // // mDreamInterface.onSettingChanged(settingsManager, key);
-    // // }
-    // }
-    // }
-
-    @Override
-    public void onSettingChanged(SettingsManager settingsManager, String key) {
-//        // Update the mode options based on the hardware spec,
-//        // when hdr changes to prevent flash from getting out of sync.
-//        if (key.equals(Keys.KEY_CAMERA_HDR)) {
-//            ModuleController moduleController = mController
-//                    .getCurrentModuleController();
-//            applyModuleSpecs(moduleController.getHardwareSpec(),
-//                    moduleController.getBottomBarSpec(), true /* skipScopeCheck */);
-//            return;
-//        }
-//
-//        if (key.equals(Keys.KEY_CAMERA_STORAGE_PATH)) {
-//            updateSidePanelItem(DreamUtil.SP_EXTERNAL_STORAGE, true);
-//            updateSidePanelItem(DreamUtil.SP_INTERNAL_STORAGE, true);
-//            return;
-//        }
-//
-//        if (key.equals(Keys.KEY_CAMERA_AI_DATECT)) {
-//            updateSidePanelItem(DreamUtil.SP_FACE_DETECT, true);
-//            return;
-//        }
-//
-//        if (key.equals(Keys.KEY_RECORD_LOCATION)) {
-//            updateSidePanelItem(DreamUtil.SP_LOCATE, true);
-//            return;
-//        }
-//
-//        if (key.equals(Keys.KEY_CAMER_ANTIBANDING)) {
-//            updateSidePanelItem(DreamUtil.SP_CA, true);
-//            return;
-//        }
-//
-//        if (key.equals(Keys.KEY_VIDEO_ANTIBANDING)) {
-//            updateSidePanelItem(DreamUtil.SP_VA, true);
-//            return;
-//        }
-//
-//        if (mDreamInterface != null) {
-//            mDreamInterface.onSettingChanged(settingsManager, key);
-//        }
-    }
-
     // For Mode List
     private View topPanel;
     private View sidePanel;
@@ -3365,22 +3097,20 @@
     private View bottomPanelLeft;
     private View bottomPanelRight;
 
-    public void initAllPanels() {
+   public void initAllPanels() {
         if (mCameraRootView != null) {
             topPanel = mCameraRootView.findViewById(R.id.top_panel_parent);
             sidePanel = mCameraRootView.findViewById(R.id.side_panel);
-            extendPanel = mCameraRootView
-                    .findViewById(R.id.extend_panel_parent);
-            bottomPanel = mCameraRootView
-                    .findViewById(R.id.bottom_panel_parent);
-            slidePanel = mCameraRootView.findViewById(R.id.slide_panel_parent);
-            bottomPanelLeft = mCameraRootView
-                    .findViewById(R.id.bottom_panel_left);
-            bottomPanelRight = mCameraRootView
-                    .findViewById(R.id.bottom_panel_right);
         }
     }
 
+    public void initSlidePanel(View slidePanelParent){
+        slidePanel = slidePanelParent;
+        if (!mIsCaptureIntent) {
+            slidePanel.setVisibility(View.VISIBLE);
+        }
+    }
+
     public void onCloseFilmStrip() {
         if (topPanel != null)
             topPanel.setVisibility(View.VISIBLE);
@@ -3459,7 +3189,7 @@
         }
         if (bottomPanel != null)
             bottomPanel.setVisibility(View.INVISIBLE);
-        SlidePanelManager.getInstance((CameraActivity) mController).focusItem(
+        SlidePanelManager.getInstance(mController).focusItem(
                 SlidePanelManager.MODE, false);
     }
 
@@ -3468,9 +3198,9 @@
         int camera = 0;
 
         // if (mDreamInterface != null) {
-        mode = ((CameraActivity) mController).getCurrentModule().getMode();
+        mode = (mController).getCurrentModule().getMode();
         // }
-        if (mController != null && mController.getSettingsManager() != null)
+        if (mController != null )
             camera = mDataModule.getIndexOfCurrentValue(Keys.KEY_CAMERA_ID);
 
         if (mModeListView != null) {
@@ -3499,6 +3229,13 @@
                 .findViewById(R.id.gif_cancel);
         gifFinishBtn = (ImageView) mCameraRootView
                 .findViewById(R.id.gif_finish);
+		bottomPanel = mCameraRootView
+                .findViewById(R.id.bottom_panel_parent);
+        bottomPanelLeft = mCameraRootView
+                .findViewById(R.id.bottom_panel_left);
+        bottomPanelRight = mCameraRootView
+                .findViewById(R.id.bottom_panel_right);
+        mController.getButtonManager().load(mCameraRootView);
         /* @} */
     }
 
@@ -3512,7 +3249,7 @@
                     .findViewById(R.id.btn_mode_switch);
         if (/* dreamInterface != null && */switchModeBtn != null) {
             switchModeBtn.setImageResource(DreamUtil
-                    .getSwitchBtnResId(((CameraActivity) mController)
+                    .getSwitchBtnResId(( mController)
                             .getCurrentModule().getMode() + 1));
         }
     }
@@ -3615,7 +3352,7 @@
 
     public void showCurrentModuleUI(int moduleId) {
         showCurrentModuleTip(moduleId);
-        initSidePanel();
+        //initSidePanel();
         updateModeList();
     }
 
@@ -3921,8 +3658,10 @@
     }
 
     public void stopCircle() {
-       ((PhotoVoicePlayProgress)mFilmstripLayout.findViewById(R.id.photo_voice_play_progress)).stopVoice();
-       mFilmstripBottomControls.setVisible(true);
+       if (mFilmstripLayout != null)
+            ((PhotoVoicePlayProgress)mFilmstripLayout.findViewById(R.id.photo_voice_play_progress)).stopVoice();
+        if (mFilmstripBottomControls != null)
+            mFilmstripBottomControls.setVisible(true);
     }
 
     public void setCircleDuration(long duration) {
@@ -4005,6 +3744,14 @@
     /* @} */
 
     public void updateScreenGridLines(String grid) {
+		if(grid == "close" && mGridLines == null && mNineGridLines == null && mReticleGridLines == null && mBoxGridLines == null && mGoldenGridLines == null)
+            return; //  do not use this function yet
+
+        // mNineGridLines
+        if(null == mNineGridLines) {
+            mNineGridLines = (GridLines) mCameraRootView.findViewById(R.id.nine_grid_lines);
+            mTextureViewHelper.addPreviewAreaSizeChangedListener(mNineGridLines);
+        }
         if (mController.getAndroidContext().getResources()
                 .getString(R.string.pref_camera_composition_line_key_entry_values_grid)
                 .equals(grid)) {
@@ -4012,6 +3759,11 @@
         } else {
             hideNineGridLines();
         }
+
+        if(null == mReticleGridLines) {
+            mReticleGridLines = (ReticleGridLines) mCameraRootView.findViewById(R.id.reticle_grid_lines);
+            mTextureViewHelper.addPreviewAreaSizeChangedListener(mReticleGridLines);
+        }
         if (mController.getAndroidContext().getResources()
                 .getString(R.string.pref_camera_composition_line_key_entry_values_reticle)
                 .equals(grid)) {
@@ -4019,6 +3771,12 @@
         } else {
             hideReticleGridLines();
         }
+
+        // mBoxGridLines
+        if(null == mBoxGridLines) {
+            mBoxGridLines = (BoxGridLines) mCameraRootView.findViewById(R.id.box_grid_lines);
+            mTextureViewHelper.addPreviewAreaSizeChangedListener(mBoxGridLines);
+        }
         if (mController.getAndroidContext().getResources()
                 .getString(R.string.pref_camera_composition_line_key_entry_values_box)
                 .equals(grid)) {
@@ -4026,6 +3784,12 @@
         } else {
             hideBoxGridLines();
         }
+
+        // mGoldenGridLines
+        if(null == mGoldenGridLines) {
+            mGoldenGridLines = (GoldenGridLines) mCameraRootView.findViewById(R.id.golden_grid_lines);
+            mTextureViewHelper.addPreviewAreaSizeChangedListener(mGoldenGridLines);
+        }
         if (mController.getAndroidContext().getResources()
                 .getString(R.string.pref_camera_composition_line_key_entry_values_goldensection)
                 .equals(grid)) {
@@ -4069,7 +3833,7 @@
     }
 
     public void dismissDialog(String key) {
-        if (mSettingLayout.getVisibility() == View.VISIBLE){
+        if (mSettingLayout != null && mSettingLayout.getVisibility() == View.VISIBLE) {
             mSettingLayout.dialogDismiss(key);
         }
     }
@@ -4080,7 +3844,7 @@
         }
     }
     public boolean isShutterClicked(){
-        return ((CameraActivity) mController).getCurrentModule().isShutterClicked();
+        return mController.getCurrentModule().isShutterClicked();
     }
 
     /*SPRD:fix bug629900 add switch animation @{*/
@@ -4152,6 +3916,13 @@
     }
 	/* SPRD: Fix bug 613015 add SurfaceView support @{ */
     private SurfaceViewEx mSurfaceView;
+    public void setSurfaceHolderListener(SurfaceHolder.Callback surfaceHolderListener) {
+        if (mSurfaceView != null) {
+            mSurfaceView.setSurfaceHolderListener(surfaceHolderListener);
+            mSurfaceView.setVisibility(surfaceHolderListener == null ? View.GONE : View.VISIBLE);
+        }
+    }
+    /* @} */
     public SurfaceHolder getSurfaceHolder() {
         if (mSurfaceView != null) {
             return mSurfaceView.getSurfaceHolder();
@@ -4159,17 +3930,161 @@
         return null;
     }
 
-    public void setSurfaceHolderListener(SurfaceHolder.Callback surfaceHolderListener) {
+    public void onPreviewUpdated(byte[] data, CameraAgent.CameraProxy camera) {
         if (mSurfaceView != null) {
-            mSurfaceView.setSurfaceHolderListener(surfaceHolderListener);
-            mSurfaceView.setVisibility(surfaceHolderListener == null ? View.GONE : View.VISIBLE);
+            mSurfaceView.onPreviewUpdated(data, camera);
         }
     }
+	private SettingUIListener uiListener = null;
+    public void initSettingLayout(SettingUIListener listener){
+        if (mCameraRootView == null) return;
+        ViewStub viewStubSettingLayout = (ViewStub) mCameraRootView
+                .findViewById(R.id.dream_ui_preference_setting_layout_id);
+        if (viewStubSettingLayout != null) {
+            viewStubSettingLayout.inflate();
+            mSettingLayout = (DreamUIPreferenceSettingLayout) mCameraRootView
+                    .findViewById(R.id.dream_ui_preference_setting_layout);
+            DataModuleManager.getInstance(mController.getAndroidContext()).addListener(mSettingLayout);
+        }
+        if (listener != null && listener != uiListener) {
+            mSettingLayout.changeModule(listener);
+            uiListener = listener;
+        }
+    }
 
-    public void onPreviewUpdated(byte[] data, CameraAgent.CameraProxy camera) {
-        if (mSurfaceView != null) {
-            mSurfaceView.onPreviewUpdated(data, camera);
+    public void inflateFilmstrip() {
+        LayoutInflater inflater = LayoutInflater.from(mController);
+        mFilmstripLayout = (FilmstripLayout) inflater
+                .inflate(R.layout.dream_filmstrip, null, false);
+    }
+
+    public void initFilmstrip() {
+        mAppRootView.addView(mFilmstripLayout, 1);
+        mFilmstripView = (FilmstripView) mFilmstripLayout.findViewById(R.id.filmstrip_view);
+        mFilmstripBottomControls = new FilmstripBottomPanel(mController,
+                (ViewGroup) mAppRootView.findViewById(R.id.filmstrip_bottom_panel));
+        mFilmstripPanel = (FilmstripContentPanel) mAppRootView.findViewById(R.id.filmstrip_layout);
+    }
+    private ViewGroup extendPanelParent;
+    public void initExtendPanel(){
+        ViewStub viewStubExtentPanel = (ViewStub) mCameraRootView.findViewById(R.id.extend_panel_id);
+        if (viewStubExtentPanel != null){
+            viewStubExtentPanel.inflate();
         }
+        if (extendPanel == null) {
+            extendPanel = mCameraRootView
+                    .findViewById(R.id.extend_panel_parent);
+            extendPanelParent = (ViewGroup) extendPanel;
+        }
+        extendPanelParent.removeAllViews();
+        mDreamInterface.fitExtendPanel(extendPanelParent);
+        initZoomPanel();
     }
-    /* @} */
+    public void initZoomPanel(){
+        if (mZoomPanel == null){
+            mZoomPanel = (ZoomPanel) mCameraRootView.findViewById(R.id.zoom_panel);
+            mPreviewOverlay.setOnDreamZoomUIChangedListener(mZoomPanel);
+            mZoomPanel.setOnProgressChangeListener(mPreviewOverlay);
+        }
+    }
+
+    private boolean initModeListViewEnd = false;
+    public void initModeListView(){
+        mModeListView = (ModeListView) mAppRootView
+                .findViewById(R.id.mode_list_layout);
+        if (mModeListView != null) {
+            mModeListView.setModeSwitchListener(this);
+            mModeListView.setModeListOpenListener(this);
+            mModeListView
+                    .setCameraModuleScreenShotProvider(mCameraModuleScreenShotProvider);
+            mModeListView.setCaptureLayoutHelper(mCaptureLayoutHelper);
+            mTextureViewHelper.addPreviewAreaSizeChangedListener(mModeListView);
+            initModeListViewEnd = true;
+            mModeListView.setTouchable(true);
+        } else {
+            Log.e(TAG, "Cannot find mode list in the view hierarchy");
+        }
+    }
+    public void initBottomBar() {
+        ViewStub viewStubBottomBar = (ViewStub) mCameraRootView
+                .findViewById(R.id.dream_sticky_bottom_capture_layout_id);
+        if (viewStubBottomBar != null) {
+            viewStubBottomBar.inflate();
+        }
+        if (mBottomBar == null) {
+            mBottomBar = (BottomBar) mCameraRootView.findViewById(R.id.bottom_bar);
+            // int unpressedColor = mController.getAndroidContext().getResources()
+            // .getColor(R.color.camera_gray_background);
+            // setBottomBarColor(unpressedColor);
+            // updateModeSpecificUIColors();
+
+            mBottomBar.setCaptureLayoutHelper(mCaptureLayoutHelper);
+
+            // Sets the visibility of the bottom bar and the mode options.
+            resetBottomControls(mController.getCurrentModuleController(),
+                    mController.getCurrentModuleIndex());
+        }
+        if (mShutterButton == null) {
+            mShutterButton = (ShutterButton) mCameraRootView
+                    .findViewById(R.id.shutter_button);
+            addShutterListener(mController.getCurrentModuleController());
+            addShutterListener(this);
+
+        }
+        if (mStickyBottomCaptureLayout == null) {
+            mStickyBottomCaptureLayout = (StickyBottomCaptureLayout) mAppRootView
+                    .findViewById(R.id.sticky_bottom_capture_layout);
+            mStickyBottomCaptureLayout.setCaptureLayoutHelper(mCaptureLayoutHelper);
+            mStickyBottomCaptureLayout.setCameraAppUI(this);// SPRD:fix bug474672
+            mCountdownCancelButton = (ImageButton) mStickyBottomCaptureLayout
+                    .findViewById(R.id.shutter_cancel_button);
+        }
+        // if (mRoundedThumbnailView == null){
+        initRoundedThumbnailView();
+        // }
+
+        initBottomButtons();
+
+    }
+
+    public void initRoundedThumbnailView() {
+        mRoundedThumbnailView = (RoundedThumbnailView) mCameraRootView
+                .findViewById(R.id.rounded_thumbnail_view);
+        mRoundedThumbnailView.setCallback(new RoundedThumbnailView.Callback() {
+            @Override
+            public void onHitStateFinished() {
+                if (mFilmstripView == null)
+                    return;
+
+                if (mFilmstripView.getController().getCurrentAdapterIndex() == -1
+                        ||
+                        mFilmstripView.getCurrentData().getItemViewType() == FilmstripItemType.SECURE_ALBUM_PLACEHOLDER
+                        ||
+                        mController.getCurrentModule().isShutterClicked()) {
+                    setBottomPanelLeftRightClickable(true);
+                    return;
+                }
+                hidePanels();
+                mFilmstripLayout.showFilmstrip();
+                mController.doSometingWhenFilmStripShow();
+            }
+
+            @Override
+            public void onClick() {
+                setBottomPanelLeftRightClickable(false);
+            }
+        });
+    }
+
+    public void initGridlineView() {
+        ViewStub viewStubGridline = (ViewStub) mCameraRootView
+                .findViewById(R.id.layout_grid_lines_id);
+        if(viewStubGridline != null){
+            viewStubGridline.inflate();
+        }
+    }
+
+    public boolean isBottomBarNull() {
+        return mBottomBar == null;
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/MediaSaverImpl.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/MediaSaverImpl.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/MediaSaverImpl.java	(revision 175951)
@@ -33,7 +33,6 @@
 import com.android.camera.debug.Log;
 import com.android.camera.exif.ExifInterface;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.settings.SettingsScopeNamespaces;
 import com.android.camera.util.CameraUtil;
 import com.dream.camera.settings.DataModuleBasic;
@@ -561,7 +560,7 @@
         StorageUtil storageUtil = StorageUtil.getInstance();
         String path = storageUtil.generateFilePath(title , FilmstripItemData.MIME_TYPE_JPEG);
 
-        SettingsManager settingManager = new SettingsManager(mAppContext);
+        
 /*        int filterType = settingManager.getInteger(SettingsManager.SCOPE_GLOBAL
                 , Keys.KEY_CAMERA_FILTER_TYPE);*/
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/VideoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/VideoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/VideoUI.java	(revision 175951)
@@ -462,5 +462,10 @@
         Log.i(TAG, "surfaceDestroyed: " + holder);
         mController.onPreviewUIDestroyed();
     }
+
+    /* SPRD: Fix bug 659315, optimize camera launch time @{ */
+    public void onPreviewStarted() {
+
+    }
     /* @} */
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/CameraActivity.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/CameraActivity.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/CameraActivity.java	(revision 175951)
@@ -85,7 +85,7 @@
 import com.android.camera.app.CameraProvider;
 import com.android.camera.app.CameraServices;
 import com.android.camera.app.CameraServicesImpl;
-import com.android.camera.app.FirstRunDialog;
+
 import com.android.camera.app.LocationManager;
 import com.android.camera.app.MemoryManager;
 import com.android.camera.app.MemoryQuery;
@@ -173,6 +173,8 @@
 import com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;
 import com.dream.camera.ButtonManagerDream;
 import com.dream.camera.DreamModule;
+import com.dream.camera.util.Counter;
+
 import com.dream.camera.modules.AudioPicture.AudioPictureModule;
 import com.dream.camera.settings.DataModuleBasic;
 import com.dream.camera.settings.DataModuleBasic.DreamSettingChangeListener;
@@ -247,6 +249,8 @@
     private static final int PERMISSIONS_ACTIVITY_REQUEST_CODE = 1;
     private static final int PERMISSIONS_RESULT_CODE_OK = 1;
     private static final int PERMISSIONS_RESULT_CODE_FAILED = 2;
+	private ModeListView.ModeListViewHelper mModeListViewHelper;
+	private boolean isSupportGps;
 
     /** Should be used wherever a context is needed. */
     private Context mAppContext;
@@ -303,7 +307,6 @@
     private boolean mIsActivityRunning = false;
     private FatalErrorHandler mFatalErrorHandler;
     private boolean mHasCriticalPermissions;
-    private boolean isSupportGps = CameraUtil.isRecordLocationEnable();// SPRD: fix for bug 499642 delete location save function
     private int mFilmStripCount;// SPRD:fix bug520618 Video is still appear if it is deleted from
                                 // fileManager
 
@@ -502,32 +505,7 @@
                  */
                 @Override
                 public void onExternalViewer() {
-                    if (mPanoramaViewHelper == null) {
-                        return;
-                    }
-                    final FilmstripItem data = getCurrentLocalData();
-                    if (data == null) {
-                        Log.w(TAG, "Cannot open null data.");
-                        return;
-                    }
-                    final Uri contentUri = data.getData().getUri();
-                    if (contentUri == Uri.EMPTY) {
-                        Log.w(TAG, "Cannot open empty URL.");
-                        return;
-                    }
-
-                    if (data.getMetadata().isUsePanoramaViewer()) {
-                        mPanoramaViewHelper.showPanorama(CameraActivity.this, contentUri);
-                    } else if (data.getMetadata().isHasRgbzData()) {
-                        mPanoramaViewHelper.showRgbz(contentUri);
-                        if (mSettingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,
-                                Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING)) {
-                            mSettingsManager.set(SettingsManager.SCOPE_GLOBAL,
-                                    Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING, false);
-                            mCameraAppUI.clearClingForViewer(
-                                    CameraAppUI.BottomPanel.VIEWER_REFOCUS);
-                        }
-                    }
+                   
                 }
 
                 @Override
@@ -726,7 +704,7 @@
             IntentFilter batteryIntentFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
             registerReceiver(mBatteryReceiver, batteryIntentFilter);
         }
-        mCameraAppUI.onChangeCamera();
+        
     }
 
     private void resetExposureCompensationToDefault(CameraAgent.CameraProxy camera) {
@@ -1397,8 +1375,7 @@
 
     @Override
     public int getQuickSwitchToModuleId(int currentModuleIndex) {
-        return mModuleManager.getQuickSwitchToModuleId(currentModuleIndex, mSettingsManager,
-                mAppContext);
+        return 0;
     }
 
     @Override
@@ -1423,7 +1400,35 @@
         }
         /* @} */
     }
+/* SPRD: Fix bug 659315, optimize camera launch time @{ */
+    Runnable mModeListLoadTask = new Runnable() {
+        @Override
+        public void run() {
+            /*
+             * should be at front of mCameraAppUI.updateModeList()
+             */
+            mModeListViewHelper = new ModeListView.ModeListViewHelper(CameraActivity.this,
+                    mModuleManager.getSupportedModeIndexList());
+            mMainHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if(mModeListView != null){
+                        mModeListView.init(mModeListViewHelper);
+                        mCameraAppUI.updateModeList();
+                    }
+                }
+            });
+            /* @} */
+        }
+    };
 
+    public void onSurfaceTextureUpdate() {
+        if (mHasDelayWorkOnCreate) {
+            mHasDelayWorkOnCreate = false;
+            mOnCreateAsyncHandler.post(mModeListLoadTask);
+        }
+    }
+    /* @} */
     @Override
     public void addPreviewAreaSizeChangedListener(
             PreviewStatusListener.PreviewAreaChangedListener listener) {
@@ -1655,7 +1660,8 @@
             }
         }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, newData);
         */
-        if (mCurrentModule != null && mCurrentModule.getBurstHasCaptureCount() < 2) {
+         if (mCurrentModule != null && mCurrentModule.getModuleTpye() == DreamModule.CONTINUE_MODULE
+                && mCurrentModule.getBurstHasCaptureCount() < 2) {
             updateStorageSpaceAndHint(null);
         }
         new AsyncTask<Void, Void, FilmstripItem>() {
@@ -2167,10 +2173,10 @@
     }
      */
 
-    private boolean mOnCreateAsyncing;
-    private final Object mOnCreateLock = new Object();
     private Handler mOnCreateAsyncHandler;
-    private boolean mStorageCheckNeeded;
+    private boolean mExtraWorkNeeded;
+	private boolean mStorageCheckNeeded;
+    private boolean mHasDelayWorkOnCreate = true;
     String resultString = "";
     private String mSecureCheck;
     public static final String DAFAULT_SYSTEM = "0";
@@ -2198,58 +2204,15 @@
         return;
     }
 
-    @Override
-    public void onCreateTasks(Bundle state) {
-        Profile profile = mProfiler.create("CameraActivity.onCreateTasks").start();
-        CameraPerformanceTracker.onEvent(CameraPerformanceTracker.ACTIVITY_START);
-
-        profile.mark();
-        preInit();
-        profile.mark("preInit()");
-
-        //SPRD:fix Bug 616294 add warn location express when enter into Camera
-        Intent intent = getIntent();
-        Bundle bundle = (intent!=null)?intent.getExtras():null;
-        resultString = (bundle!=null)?bundle.getString("result"):null;
-
-        mSecureCheck = SystemProperties.get("persist.support.securetest", DAFAULT_SYSTEM);
-        switch(mSecureCheck){
-        case DAFAULT_SYSTEM_OK:
-            if(resultString == null){
-                 checkSystemPermission();
-                 return;
-            }else if (resultString.equals(DAFAULT_LOCATION_OK) || resultString.equals(DAFAULT_PERMISSION_OK)){
-                checkCameraPermission();
-            }
-            break;
-        default:
-            checkCameraPermission();
-            break;
-        }
-
-        if (!isCaptureIntent() && !mHasCriticalPermissions) {
-            Log.v(TAG, "onCreate: Missing critical permissions.");
-            finish();
-            return;
-        }
-        shutdown = false;
-        mOnCreateAsyncing = true;
+    public void initializeHandlerThread(){
         HandlerThread handlerThread = new HandlerThread("OnCreateAsync Task");
         handlerThread.start();
         mOnCreateAsyncHandler = new Handler(handlerThread.getLooper());
-        mOnCreateAsyncHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                performOnCreateAsync();
-                synchronized (mOnCreateLock) {
-                    mOnCreateAsyncing = false;
-                    mOnCreateLock.notify();
-                }
-            }
-        });
 
+        HandlerThread CameraRequest = new HandlerThread("CameraRequest Task");
+        CameraRequest.start();
         /* SPRD: Fix bug 605818, wait for background camera closed @{ */
-        mCameraRequestHandler = new Handler(handlerThread.getLooper()) {
+        mCameraRequestHandler = new Handler(CameraRequest.getLooper()) {
             public void handleMessage(Message msg) {
                 switch (msg.what) {
                     case MSG_CAMERA_REQUEST_PENDING: {
@@ -2266,344 +2229,501 @@
         mCameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);
         mCameraManager.registerAvailabilityCallback(mAvailabilityCallback, mCameraRequestHandler);
         /* @} */
+    }
+    private Counter mCounterOncreateWait = new Counter(4);
+    private Counter mCounterOncreateOpenCamera = new Counter(4);
+    private Counter mCounterCamAppUI = new Counter(0);
+    private Counter mCounterCamAppUIPrepareModuleUI = new Counter(1);
+    private Counter mCounterFeatureConfig = new Counter(1);
+    private Counter mCounterCameraController = new Counter(1);
+    private Counter mCounterOneCameraManager = new Counter(1);
+    private Counter mCounterDataModule = new Counter(1);
+    private Counter mCounterMemoryManager = new Counter(1);
+    private Counter mCounterUtil = new Counter(1);
 
-        getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
-        // SPRD：Add for bug 613572,this bug need some debug log.
-        profile.mark("requestFeature end");
-        // We suppress this flag via theme when drawing the system preview
-        // background, but once we create activity here, reactivate to the
-        // default value. The default is important for L, we don't want to
-        // change app behavior, just starting background drawable layout.
-        if (ApiHelper.isLOrHigher()) {
-            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
-        }
-        /* SPRD: Add for bug 561548 @{ */
-        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION
-                | WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
-        profile.mark("getWindow().addFlags end");
-        /* @} */
-        profile.mark();
-        setContentView(R.layout.dream_main);
-        profile.mark("setContentView");
+    // oncreate - request open camera
+    private Runnable mOncreateOpencamera = new Runnable() {
 
-        while (mOnCreateAsyncing) {
-            try {
-                synchronized (mOnCreateLock) {
-                    mOnCreateLock.wait(50);
-                }
-            } catch (Exception e) {
+        @Override
+        public void run() {
+            mCounterOncreateOpenCamera.waitCount();
+            mOnCreateTime = System.currentTimeMillis();
+
+            if (!isKeyguardLocked()
+                    && mCurrentModeIndex == getResources().getInteger(
+                            R.integer.camera_mode_auto_photo)
+                    && mFrontCameraAvailable && mBackCameraAvailable) {
+                mIsCameraRequestedOnCreate = true;
+                mCameraController.requestCamera(mDataModuleManager.getInstance(CameraActivity.this).getTempCameraModule().getInt(Keys.KEY_CAMERA_ID, 0),
+//                        mDataModule.getInt(Keys.KEY_CAMERA_ID),
+                        mCurrentModule.useNewApi());
             }
         }
-		setModuleChangeListen(SlidePanelManager.getInstance(this));
-        postInit();
-        profile.stop();
-    }
+    };
 
-    private void preInit() {
-        mAppContext = getApplicationContext();
-        mMainHandler = new MainHandler(this, getMainLooper());
-        // init before setContentView, because of TopRightWeightedLayout
-        mOrientationManager = new OrientationManagerImpl(this, mMainHandler);
-    }
+    // oncreate - module data setting
+    private Runnable mOnCreateDataSeting = new Runnable() {
 
-    private void postInit() {
-        Profile profile = mProfiler.create("CameraActivity.postInit").start();
-        // A window background is set in styles.xml for the system to show a
-        // drawable background with gray color and camera icon before the
-        // activity is created. We set the background to null here to prevent
-        // overdraw, all views must take care of drawing backgrounds if
-        // necessary. This call to setBackgroundDrawable must occur after
-        // setContentView, otherwise a background may be set again from the
-        // style.
-        getWindow().setBackgroundDrawable(null);
+        @Override
+        public void run() {
+            long startTime = System.currentTimeMillis();
+            mDataModuleManager = DataModuleManager
+                    .getInstance(CameraActivity.this);
+            mDataModuleManager.initializeDataModuleCamera();
+            mDataModule = mDataModuleManager.getDataModuleCamera();
 
-        // must done in main thread, because modules like GifModule and VideoModule
-        // init main handler as creating
-        setModuleFromModeIndex(getModeIndexDefault());
-        // request camera as soon as possible
-        if (mCurrentModeIndex == getResources().getInteger(R.integer.camera_mode_auto_photo)
-                && mFrontCameraAvailable && mBackCameraAvailable) {
-            mIsCameraRequestedOnCreate = true;
-            mCameraController.requestCamera(mDataModule.getInt(Keys.KEY_CAMERA_ID),
-                    mCurrentModule.useNewApi());
+            mCounterDataModule.count();
+            mCounterOncreateWait.count();
         }
+    };
 
-        mActionBar = getActionBar();
-        // set actionbar background to 100% or 50% transparent
-        if (ApiHelper.isLOrHigher()) {
-            mActionBar.setBackgroundDrawable(new ColorDrawable(0x00000000));
-        } else {
-            mActionBar.setBackgroundDrawable(new ColorDrawable(0x80000000));
+    // oncreate - camera controller
+    private Runnable mOncreateCameraController = new Runnable() {
+
+        @Override
+        public void run() {
+            long startTime = System.currentTimeMillis();
+            mActiveCameraDeviceTracker = ActiveCameraDeviceTracker.instance();
+            try {
+                mCameraController = new CameraController(mAppContext,
+                        CameraActivity.this, mCameraRequestHandler,
+                        CameraAgentFactory.getAndroidCameraAgent(mAppContext,
+                                CameraAgentFactory.CameraApi.API_1),
+                        CameraAgentFactory.getAndroidCameraAgent(mAppContext,
+                                CameraAgentFactory.CameraApi.AUTO),
+                        mActiveCameraDeviceTracker);
+                mCameraController
+                        .setCameraExceptionHandler(new CameraExceptionHandler(
+                                mCameraExceptionCallback, mMainHandler));
+            } catch (AssertionError e) {
+                Log.e(TAG, "Creating camera controller failed.", e);
+                mFatalErrorHandler.onGenericCameraAccessFailure();
+            }
+            mCounterCameraController.count();
+            mCameraController.initCameraDeviceInfo();
+            mCounterOncreateOpenCamera.count();
         }
+    };
 
-        profile.mark();
-        mModeListView = (ModeListView) findViewById(R.id.mode_list_layout);
-        mModeListView.init(mModuleManager.getSupportedModeIndexList());
-        profile.mark("ModeListView.init");
+    // oncreate - onecameramanager
+    private Runnable mOncreateOneCameraManager = new Runnable() {
 
-        mModeListView.setVisibilityChangedListener(new ModeListVisibilityChangedListener() {
-            @Override
-            public void onVisibilityChanged(boolean visible) {
-                mModeListVisible = visible;
-                mCameraAppUI.setShutterButtonImportantToA11y(!visible);
-                updatePreviewVisibility();
+        @Override
+        public void run() {
+            long startTime = System.currentTimeMillis();
+            try {
+                mOneCameraManager = OneCameraModule.provideOneCameraManager();
+            } catch (OneCameraException e) {
+                Log.e(TAG, "Creating camera manager failed.", e);
+                mFatalErrorHandler.onGenericCameraAccessFailure();
             }
-        });
+            mCounterOneCameraManager.count();
+            mCounterOncreateOpenCamera.count();
+        }
+    };
 
-        mAboveFilmstripControlLayout =
-                (FrameLayout) findViewById(R.id.camera_filmstrip_content_layout);
+    // oncreate modules info and set current module
+    private Runnable mOncreateModulesInfoAndCurrentModule = new Runnable() {
 
-        mCameraAppUI = new CameraAppUI(this,
-                (MainActivityLayout) findViewById(R.id.activity_root_view), isCaptureIntent());
-        mCameraAppUI.setFilmstripBottomControlsListener(mMyFilmstripBottomControlListener);
-        profile.mark("new CameraAppUI");
-        mCameraAppUI.prepareModuleUI();
-        profile.mark("prepareModuleUI");
+        @Override
+        public void run() {
+            long startTime = System.currentTimeMillis();
+            mModuleManager = new ModuleManagerImpl();
+            mCounterFeatureConfig.waitCount();
+            mCounterUtil.waitCount();
+            ModulesInfo.setupModules(mAppContext, mModuleManager,
+                    mFeatureConfig);
+            mCounterCameraController.waitCount();
+            setModuleFromModeIndex(getModeIndexDefault());
+            mCounterCamAppUIPrepareModuleUI.count();
+            mCounterOncreateOpenCamera.count();
+        }
+    };
 
-        // must done after CameraAppUI.prepareModuleUI
-        mOrientationManager.addOnOrientationChangeListener(mCameraAppUI);
+    // oncreate manager initialize
+    private Runnable mOncreateManagerInitialize = new Runnable() {
 
-        // must done after CameraAppUI
-        profile.mark();
-        mCurrentModule.init(this, isSecureCamera(), isCaptureIntent());
-        profile.mark("CurrentModule.init");
+        @Override
+        public void run() {
+            // feature config
+            mFeatureConfig = OneCameraFeatureConfigCreator.createDefault(
+                    getContentResolver(), getServices().getMemoryManager());
+            mCounterFeatureConfig.count();
 
-        mFilmstripController = ((FilmstripView) findViewById(R.id.filmstrip_view)).getController();
-        mFilmstripController.setImageGap(
-                getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
+            // SPRD:fix bug 473462 add for burst capture
+            CameraUtil.initialize(mAppContext);
 
-        preloadFilmstripItems();
+            isSupportGps = CameraUtil.isRecordLocationEnable();
 
-        // must done at last
-        mCameraAppUI.getFilmstripContentPanel().setFilmstripListener(mFilmstripListener);
-        if (mSettingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING)) {
-            mCameraAppUI.setupClingForViewer(CameraAppUI.BottomPanel.VIEWER_REFOCUS);
+            // SPRD: fix bug474674
+            UCamUtill.initialize(mAppContext);
+
+            mCounterUtil.count();
+            mCounterOncreateOpenCamera.count();
+
+            /* SPRD: Fix bug 535110, Photo voice record */
+            mPhotoVoicePlayer = new PhotoVoicePlayer(CameraActivity.this);
+            mLocationManager = new LocationManager(mAppContext);
+            mCounterOncreateWait.count();
+            mSettingsManager = getServices().getSettingsManager();
+            mMotionManager = getServices().getMotionManager();
+            mMemoryManager = getServices().getMemoryManager();
+            mCounterMemoryManager.count();
         }
-        profile.mark("stop");
-    }
+    };
 
-    private void performOnCreateAsync() {
-        Profile profile = mProfiler.create("CameraActivity.performOnCreateAsync").start();
+    private Runnable mOncreateOtherTask = new Runnable() {
 
-        /* SPRD: Fix bug 535110, Photo voice record */
-        mPhotoVoicePlayer = new PhotoVoicePlayer(this);
+        @Override
+        public void run() {
 
-        mOnCreateTime = System.currentTimeMillis();
-        mLocationManager = new LocationManager(mAppContext);
-        mSettingsManager = getServices().getSettingsManager();
-        profile.mark("getServices");
-        mFeatureConfig = OneCameraFeatureConfigCreator.createDefault(getContentResolver(),
-                getServices().getMemoryManager());
-        if (mFeatureConfig.isUsingCaptureModule()) {
-            mSoundPlayer = new SoundPlayer(mAppContext);
-        }
-        mFatalErrorHandler = new FatalErrorHandlerImpl(this);
+            /*
+             * SPRD:fix bug524433 Filmstripview is not refresh when sdcard
+             * removed @{
+             */
+            IntentFilter intentFilter = new IntentFilter(
+                    Intent.ACTION_MEDIA_EJECT);
+            intentFilter.addAction(Intent.ACTION_MEDIA_MOUNTED);
+            intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
+            intentFilter.addDataScheme("file");
+            mReceiver = new MyBroadcastReceiver();
+            CameraActivity.this.registerReceiver(mReceiver, intentFilter);
+            /* @} */
 
-        profile.mark();
-        if (!Glide.isSetup()) {
-            Context context = getAndroidContext();
-            Glide.setup(new GlideBuilder(context)
-                    .setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888)
-                    .setResizeService(new FifoPriorityThreadPoolExecutor(2)));
+            /*
+             * SPRD:fix bug641569 the storage path was changed after restart
+             * mobile @{
+             */
+            IntentFilter intentFilterShotDown = new IntentFilter(
+                    Intent.ACTION_SHUTDOWN);
+            mReceiverShutDown = new MyBroadcastReceiverShutDown();
+            CameraActivity.this.registerReceiver(mReceiverShutDown, intentFilterShotDown);
+            /* @} */
 
-            Glide glide = Glide.get(context);
+            AsyncTask.THREAD_POOL_EXECUTOR.execute(new Runnable() {
+                @Override
+                public void run() {
+                    mCounterMemoryManager.waitCount();
+                    HashMap memoryData = mMemoryManager.queryMemory();
+                    UsageStatistics.instance().reportMemoryConsumed(memoryData,
+                            MemoryQuery.REPORT_LABEL_LAUNCH);
+                }
+            });
 
-            // As a camera we will use a large amount of memory
-            // for displaying images.
-            glide.setMemoryCategory(MemoryCategory.HIGH);
-        }
-        profile.mark("Glide.setup");
+            setupNfcBeamPush();
 
-        mActiveCameraDeviceTracker = ActiveCameraDeviceTracker.instance();
-        try {
+            // Add the session listener so we can track the session progress
+            // updates.
+            getServices().getCaptureSessionManager().addSessionListener(
+                    mSessionListener);
+
+            if (ApiHelper.HAS_ROTATION_ANIMATION) {
+                setRotationAnimation();
+            }
+
+            // Check if this is in the secure camera mode.
+            Intent intent = getIntent();
+            String action = intent.getAction();
+            if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)
+                    || ACTION_IMAGE_CAPTURE_SECURE.equals(action)) {
+                mSecureCamera = true;
+            } else {
+                mSecureCamera = intent.getBooleanExtra(SECURE_CAMERA_EXTRA,
+                        false);
+            }
+
+            if (mSecureCamera) {
+                // Change the window flags so that secure camera can show when
+                // locked
+                Window win = getWindow();
+                WindowManager.LayoutParams params = win.getAttributes();
+                // SPRD: fix bug543384/511212 add open camera acquirement
+                /*
+                 * SPRD: Modify for bug640303, move flag FLAG_TURN_SCREEN_ON to
+                 * onCreateTasks also need add flag FLAG_TURN_SCREEN_ON for
+                 * CameraActivity @{ params.flags |=
+                 * (WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
+                 * WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
+                 */
+                params.flags |= WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
+                win.setAttributes(params);
+                /* @} */
+
+                // Filter for screen off so that we can finish secure camera
+                // activity when screen is off.
+                IntentFilter filter_screen_off = new IntentFilter(
+                        Intent.ACTION_SCREEN_OFF);
+                registerReceiver(mShutdownReceiver, filter_screen_off);
+
+                // Filter for phone unlock so that we can finish secure camera
+                // via this UI path:
+                // 1. from secure lock screen, user starts secure camera
+                // 2. user presses home button
+                // 3. user unlocks phone
+                IntentFilter filter_user_unlock = new IntentFilter(
+                        Intent.ACTION_USER_PRESENT);
+                CameraActivity.this.registerReceiver(mShutdownReceiver, filter_user_unlock);
+            }
+
+            mCounterOneCameraManager.waitCount();
+            mResolutionSetting = new ResolutionSetting(null, mOneCameraManager,
+                    getContentResolver());
+
+            mCounterFeatureConfig.waitCount();
             if (mFeatureConfig.isUsingCaptureModule()) {
-                mOneCameraOpener = OneCameraModule.provideOneCameraOpener(
-                        mFeatureConfig,
-                        mAppContext,
-                        mActiveCameraDeviceTracker,
-                        ResolutionUtil.getDisplayMetrics(this));
+                mSoundPlayer = new SoundPlayer(mAppContext);
             }
-            mOneCameraManager = OneCameraModule.provideOneCameraManager();
-        } catch (OneCameraException e) {
-            // Log error and continue start process while showing error dialog..
-            Log.e(TAG, "Creating camera manager failed.", e);
-            mFatalErrorHandler.onGenericCameraAccessFailure();
-        }
-        profile.mark("OneCameraManager.get");
 
-        try {
-            mCameraController = new CameraController(mAppContext, this, mMainHandler,
-                    CameraAgentFactory.getAndroidCameraAgent(mAppContext,
-                            CameraAgentFactory.CameraApi.API_1),
-                    CameraAgentFactory.getAndroidCameraAgent(mAppContext,
-                            CameraAgentFactory.CameraApi.AUTO),
-                    mActiveCameraDeviceTracker);
-            mCameraController.setCameraExceptionHandler(
-                    new CameraExceptionHandler(mCameraExceptionCallback, mMainHandler));
-        } catch (AssertionError e) {
-            Log.e(TAG, "Creating camera controller failed.", e);
-            mFatalErrorHandler.onGenericCameraAccessFailure();
+            mCounterDataModule.waitCount();
+
+            // Bug #533869 new feature: check UI 27,28: dream camera of intent
+            // capture
+            if (!isCaptureIntent()) {
+                DreamUtil dreamUtil = new DreamUtil();
+                dreamUtil.savaToCameraMode(CameraActivity.this, DataModuleManager.getInstance(mAppContext).getTempCameraModule(),
+                        mDataModule.getInt(Keys.KEY_CAMERA_ID),
+                        getModeIndexDefault());
+            }
+
+            StorageUtil storageUtil = StorageUtil.getInstance();
+            storageUtil.initialize(mDataModule);
+            // profile.stop("dream initialization");
+            mShutterSoundEnable = mDataModule
+                    .getBoolean(Keys.KEY_CAMERA_SHUTTER_SOUND);
         }
-        profile.mark("new CameraController");
-        // TODO: Try to move all the resources allocation to happen as soon as
-        // possible so we can call module.init() at the earliest time.
-        mModuleManager = new ModuleManagerImpl();
+    };
 
-        ModulesInfo.setupModules(mAppContext, mModuleManager, mFeatureConfig);
-        profile.mark("ModulesInfo.setupModules");
+    private Runnable mOncreateOtherTaskInOncreateProcess = new Runnable() {
 
-        AppUpgrader appUpgrader = new AppUpgrader(this);
-        appUpgrader.upgrade(mSettingsManager);
-        profile.mark("AppUpgrader.upgrade");
-        // Make sure the picture sizes are correctly cached for the current OS
-        // version.
-//        profile.mark();
-//        try {
-//            (new PictureSizeLoader(mAppContext)).computePictureSizes();
-//        } catch (AssertionError e) {
-//            Log.e(TAG, "Creating camera controller failed.", e);
-//            mFatalErrorHandler.onGenericCameraAccessFailure();
-//        }
-//        profile.mark("computePictureSizes");
+        @Override
+        public void run() {
 
-        Keys.setDefaults(mSettingsManager, mAppContext);
-        mResolutionSetting = new ResolutionSetting(mSettingsManager, mOneCameraManager,
-                getContentResolver());
-        // SPRD：Add for bug 613572,this bug need some debug log.
-        profile.mark("mResolutionSetting end");
+            mCounterDataModule.waitCount();
+            // Bug #533869 new feature: check UI 27,28: dream camera of intent
+            // capture
+            if (!isCaptureIntent()) {
+                mDataModule.set(Keys.KEY_CAMERA_SWITCH, true);
+                mDataModule.set(Keys.KEY_INTENT_CAMERA_SWITCH, false);
+                mDataModule.set(Keys.KEY_BACK_PHOTO_MODE, 0);
+                mDataModule.set(Keys.KEY_FRONT_PHOTO_MODE, 0);
+                mDataModule.set(Keys.KEY_BACK_VIDEO_MODE, 11);
+                mDataModule.set(Keys.KEY_FRONT_VIDEO_MODE, 11);
+            } else {
+                mDataModule.set(Keys.KEY_INTENT_CAMERA_SWITCH, true);
+                mDataModule.set(Keys.KEY_CAMERA_SWITCH, false);
+            }
+            mCounterOncreateWait.count();
 
-        if (ApiHelper.HAS_ROTATION_ANIMATION) {
-            setRotationAnimation();
         }
+    };
 
-        // Check if this is in the secure camera mode.
-        Intent intent = getIntent();
-        String action = intent.getAction();
-        if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)
-                || ACTION_IMAGE_CAPTURE_SECURE.equals(action)) {
-            mSecureCamera = true;
-        } else {
-            mSecureCamera = intent.getBooleanExtra(SECURE_CAMERA_EXTRA, false);
+
+    private Runnable mLoadFilmStrip = new Runnable() {
+
+        @Override
+        public void run() {
+            if (!Glide.isSetup()) {
+                Context context = getAndroidContext();
+                Glide.setup(new GlideBuilder(context)
+                        .setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888)
+                        .setResizeService(new FifoPriorityThreadPoolExecutor(2)));
+
+                Glide glide = Glide.get(context);
+
+                // As a camera we will use a large amount of memory
+                // for displaying images.
+                glide.setMemoryCategory(MemoryCategory.HIGH);
+            }
+
+            mLocalImagesObserver = new FilmstripContentObserver();
+            mLocalVideosObserver = new FilmstripContentObserver();
+
+            getContentResolver().registerContentObserver(
+                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI, true,
+                    mLocalImagesObserver);
+            getContentResolver().registerContentObserver(
+                    MediaStore.Video.Media.EXTERNAL_CONTENT_URI, true,
+                    mLocalVideosObserver);
+
+            ContentResolver appContentResolver = mAppContext.getContentResolver();
+            GlideFilmstripManager glideManager = new GlideFilmstripManager(mAppContext);
+            mPhotoItemFactory = new PhotoItemFactory(mAppContext, glideManager, appContentResolver,
+                    new PhotoDataFactory());
+            mVideoItemFactory = new VideoItemFactory(mAppContext, glideManager, appContentResolver,
+                    new VideoDataFactory());
+
+            preloadFilmstripItems();
+            mCounterOncreateWait.count();
         }
+    };
 
-        if (mSecureCamera) {
-            // Change the window flags so that secure camera can show when
-            // locked
-            Window win = getWindow();
-            WindowManager.LayoutParams params = win.getAttributes();
-            // SPRD: fix bug543384/511212 add open camera acquirement
-            params.flags |= (WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
-                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
-            win.setAttributes(params);
+    @Override
+    public void onCreateTasks(Bundle state) {
+        Profile profile = mProfiler.create("CameraActivity.onCreateTasks").start();
+        CameraPerformanceTracker.onEvent(CameraPerformanceTracker.ACTIVITY_START);
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOncreateManagerInitialize);
 
-            // SPRD：Add for bug 613572,this bug need some debug log.
-            profile.mark("mSecureCamera start");
-            // Filter for screen off so that we can finish secure camera
-            // activity when screen is off.
-            IntentFilter filter_screen_off = new IntentFilter(Intent.ACTION_SCREEN_OFF);
-            registerReceiver(mShutdownReceiver, filter_screen_off);
+        profile.mark();
+        preInit();
+        profile.mark("preInit()");
 
-            // Filter for phone unlock so that we can finish secure camera
-            // via this UI path:
-            //    1. from secure lock screen, user starts secure camera
-            //    2. user presses home button
-            //    3. user unlocks phone
-            IntentFilter filter_user_unlock = new IntentFilter(Intent.ACTION_USER_PRESENT);
-            registerReceiver(mShutdownReceiver, filter_user_unlock);
+        profile.mark();
+        mCounterUtil.waitCount();
+        boolean success = checkPermissionOnCreate();
+        profile.mark("checkPermissionOnCreate()");
+
+        /*
+         * SPRD: Fix bug 696868, without permissions,
+         * NullPointerException happens while run monkey @{
+         */
+        if (!success) {
+            return;
         }
-        // SPRD：Add for bug 613572,this bug need some debug log.
-        profile.mark("mSecureCamera end");
-        // Add the session listener so we can track the session progress
-        // updates.
-        getServices().getCaptureSessionManager().addSessionListener(mSessionListener);
-        profile.mark("Configure Camera UI");
+        /* @} */
 
-        mPanoramaViewHelper = new PanoramaViewHelper(this);
-        mPanoramaViewHelper.onCreate();
+        profile.mark();
+        initializeHandlerThread();
+        profile.mark("register camera request handler");
 
-        ContentResolver appContentResolver = mAppContext.getContentResolver();
-        GlideFilmstripManager glideManager = new GlideFilmstripManager(mAppContext);
-        mPhotoItemFactory = new PhotoItemFactory(mAppContext, glideManager, appContentResolver,
-                new PhotoDataFactory());
-        mVideoItemFactory = new VideoItemFactory(mAppContext, glideManager, appContentResolver,
-                new VideoDataFactory());
+        profile.mark();
+        // initialize
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOncreateOneCameraManager);
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOncreateModulesInfoAndCurrentModule);
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOncreateCameraController);
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOnCreateDataSeting);
 
-        setupNfcBeamPush();
+        // open camera task
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOncreateOpencamera);
 
-        mLocalImagesObserver = new FilmstripContentObserver();
-        mLocalVideosObserver = new FilmstripContentObserver();
+        // other task
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOncreateOtherTaskInOncreateProcess);
+        CameraFilmstripDataAdapter.THREAD_POOL_EXECUTOR.execute(mOncreateOtherTask);
+        mOnCreateAsyncHandler.post(mLoadFilmStrip);
 
-        getContentResolver().registerContentObserver(
-                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, true,
-                mLocalImagesObserver);
-        getContentResolver().registerContentObserver(
-                MediaStore.Video.Media.EXTERNAL_CONTENT_URI, true,
-                mLocalVideosObserver);
-        // SPRD：Add for bug 613572,this bug need some debug log.
-        profile.mark("FilmstripContentObserver end");
+        profile.mark("THREAD_POOL_EXECUTOR.exeture");
 
-        mMemoryManager = getServices().getMemoryManager();
+        profile.mark();
+        setContentView(R.layout.dream_main);
+//        mCounterOncreateOpenCamera.count();
+        profile.mark("setContentView");
 
-        AsyncTask.THREAD_POOL_EXECUTOR.execute(new Runnable() {
+        profile.mark();
+        postInit();
+        profile.mark("postInit");
+
+        profile.mark();
+        mCounterOncreateWait.waitCount();
+        profile.stop("mOncreateWaitCounter.waitCount");
+		
+
+    }
+
+    private void preInit() {
+        shutdown = false;
+        mAppContext = getApplicationContext();
+        mMainHandler = new MainHandler(this, getMainLooper());
+
+        mFatalErrorHandler = new FatalErrorHandlerImpl(CameraActivity.this);
+
+        // SPRD: Fix bug 572473 add for usb storage support
+        // SPRD: fix bug 620061 first start app, will not show OTG storage
+        MultiStorage.getInstance().initialize(mAppContext);
+
+        getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
+        /* SPRD: Add for bug 561548 @{ */
+        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION
+                | WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS
+                | WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
+    }
+
+    private void postInit() {
+        Profile profile = mProfiler.create("CameraActivity.postInit").start();
+        // init before setContentView, because of TopRightWeightedLayout
+        mOrientationManager = new OrientationManagerImpl(this, mMainHandler);
+
+        getDreamHandler().post(new Runnable() {
             @Override
             public void run() {
-                HashMap memoryData = mMemoryManager.queryMemory();
-                UsageStatistics.instance().reportMemoryConsumed(memoryData,
-                        MemoryQuery.REPORT_LABEL_LAUNCH);
+                captureShutterButtonIcon = getResources().getDrawable(R.drawable.ic_capture_camera_sprd);
             }
         });
+        // A window background is set in styles.xml for the system to show a
+        // drawable background with gray color and camera icon before the
+        // activity is created. We set the background to null here to prevent
+        // overdraw, all views must take care of drawing backgrounds if
+        // necessary. This call to setBackgroundDrawable must occur after
+        // setContentView, otherwise a background may be set again from the
+        // style.
+        getWindow().setBackgroundDrawable(null);
 
-        mMotionManager = getServices().getMotionManager();
+        mActionBar = getActionBar();
+        mActionBar.setBackgroundDrawable(new ColorDrawable(0x00000000));
+        mActionBar.hide();
 
-        /* SPRD: Add for bug 552560 @{
         profile.mark();
-        mAppContext.getContentResolver().acquireProvider(MediaStore.Images.Media.INTERNAL_CONTENT_URI);
-        profile.mark("acquireProvider");
-        @} */
+        mCounterCamAppUI.waitCount();
+        mCameraAppUI = new CameraAppUI(this,
+                (MainActivityLayout) findViewById(R.id.activity_root_view), isCaptureIntent());
+		setModuleChangeListen(SlidePanelManager.getInstance(this));
 
+        getDreamHandler().post(new Runnable() {
+            @Override
+            public void run() {
+                inflateFilmstrip();
+                mMainHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (isDestroyed()) return;
+                        initFilmstrip();
+                    }
+                });
+            }
+        });
+
+        profile.mark("new CameraAppUI");
         profile.mark();
-        mDataModuleManager = DataModuleManager.getInstance(this);
-        // Add for dream settings
-        mDataModule = mDataModuleManager.getDataModuleCamera();
-        // Bug #533869 new feature: check UI 27,28: dream camera of intent capture
-        if (!isCaptureIntent()) {
-            mDataModule.set(Keys.KEY_CAMERA_SWITCH, true);
-            mDataModule.set(Keys.KEY_INTENT_CAMERA_SWITCH, false);
-            mDataModule.set(Keys.KEY_BACK_PHOTO_MODE, 0);
-            mDataModule.set(Keys.KEY_FRONT_PHOTO_MODE, 0);
-            mDataModule.set(Keys.KEY_BACK_VIDEO_MODE, 11);
-            mDataModule.set(Keys.KEY_FRONT_VIDEO_MODE, 11);
-        } else {
-            mDataModule.set(Keys.KEY_INTENT_CAMERA_SWITCH, true);
-            mDataModule.set(Keys.KEY_CAMERA_SWITCH, false);
-        }
-        mShutterSoundEnable = mDataModule.getBoolean(Keys.KEY_CAMERA_SHUTTER_SOUND);
-        // Bug #533869 new feature: check UI 27,28: dream camera of intent capture
-        if (!isCaptureIntent()) {
-            DreamUtil dreamUtil = new DreamUtil();
-            dreamUtil.savaToCameraMode(this, mDataModule, mDataModule.getInt(Keys.KEY_CAMERA_ID),
-                    getModeIndexDefault());
-        }
+        mCounterCamAppUIPrepareModuleUI.waitCount();
+        mCameraAppUI.prepareModuleUI();
+        profile.mark("prepareModuleUI");
 
-        StorageUtil storageUtil = StorageUtil.getInstance();
-        storageUtil.initialize(mDataModule);
-        profile.stop("dream initialization");
-        /* SPRD:fix bug524433 Filmstripview is not refresh when sdcard removed @{ */
-        IntentFilter intentFilter = new IntentFilter(Intent.ACTION_MEDIA_EJECT);
-        intentFilter.addAction(Intent.ACTION_MEDIA_MOUNTED);
-        intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
-        intentFilter.addDataScheme("file");
-        mReceiver = new MyBroadcastReceiver();
-        this.registerReceiver(mReceiver, intentFilter);
-        /* @} */
+        // must done after CameraAppUI.prepareModuleUI
+        mOrientationManager.addOnOrientationChangeListener(mCameraAppUI);
 
-        /* SPRD:fix bug641569 the storage path was changed after restart mobile @{ */
-        IntentFilter intentFilterShotDown = new IntentFilter(Intent.ACTION_SHUTDOWN);
-        mReceiverShutDown = new MyBroadcastReceiverShutDown();
-        this.registerReceiver(mReceiverShutDown, intentFilterShotDown);
-        /* @} */
+        // must done after CameraAppUI
+        profile.mark();
+        mCurrentModule.init(this, isSecureCamera(), isCaptureIntent());
+        profile.mark("CurrentModule.init");
+
+        rollTask(new Runnable() {
+            @Override
+            public void run() {
+                if (isDestroyed()) return;
+                // must done at last
+                mCameraAppUI.getFilmstripContentPanel().setFilmstripListener(mFilmstripListener);
+            }
+        });
+
+        profile.stop("stop");
     }
+
+    public void initModelistview(){
+        ViewStub viewStubModeListPanel = (ViewStub) findViewById(R.id.dream_mode_list_layout_id);
+        if (viewStubModeListPanel == null) {
+            return;
+        }
+        viewStubModeListPanel.inflate();
+        mModeListView = (ModeListView) findViewById(R.id.mode_list_layout);
+        mModeListView.init(null);
+        mModeListView.setVisibilityChangedListener(new ModeListVisibilityChangedListener() {
+            @Override
+            public void onVisibilityChanged(boolean visible) {
+                mModeListVisible = visible;
+                mCameraAppUI.setShutterButtonImportantToA11y(!visible);
+                updatePreviewVisibility();
+            }
+        });
+        mCameraAppUI.initModeListView();
+    }
     /* @} */
 
     /**
@@ -2857,6 +2977,7 @@
         // steps: camera in filterModule, backpressed; entry camera ,now is in autophotomodule,
         // click shuttersound switch, crash.
         DataModuleManager.getInstance(this).getDataModuleCamera().removeListener(this);
+		DataModuleManager.getInstance(this).removeListener(this);
         // SPRD: Fix bug 612207 cameraActivity instances leak leads to OOM.
         mPhotoVoicePlayer.playPhotoVoice(null);
         mCameraAppUI.hideCaptureIndicator();
@@ -2866,7 +2987,7 @@
         performDeletion();
         mCurrentModule.pause();
         mOrientationManager.pause();
-        mPanoramaViewHelper.onPause();
+     
 
         mLocalImagesObserver.setForegroundChangeListener(null);
         mLocalImagesObserver.setActivityPaused(true);
@@ -2999,7 +3120,7 @@
         }
 
         // SPRD: Fix bug 572631, optimize camera launch time
-        mStorageCheckNeeded = true;
+        mExtraWorkNeeded = true;
         Log.i(TAG, "onResume end!");
     }
 
@@ -3113,7 +3234,7 @@
                     mDataAdapter,
                     mDataAdapter);
             if (!mSecureCamera) {
-                mFilmstripController.setDataAdapter(mDataAdapter);
+                
                 /**
                  * SPRD: Fix bug 572631, optimize camera launch time,
                  * loadFilmstripItems() will do this @{
@@ -3155,7 +3276,7 @@
                                 v.getDrawable().getIntrinsicHeight()));
                 // Flush out all the original data.
                 mDataAdapter.clear();
-                mFilmstripController.setDataAdapter(mDataAdapter);
+                
             }
         }
     }
@@ -3165,7 +3286,7 @@
         CameraPerformanceTracker.onEvent(CameraPerformanceTracker.ACTIVITY_RESUME);
         mCameraAppUI.resetIndicatorIcon();// SPRD:Add for bug 507813 The flash icon is not sync
         mCameraAppUI.reAddDreamUIPrefRestListener();
-        Log.v(TAG, "Build info: " + Build.DISPLAY);
+        
 
         /**
          * SPRD: Fix bug 572631, optimize camera launch time, done in onPreviewStarted() @{
@@ -3219,40 +3340,19 @@
                 mStartupOnCreate, mExecutionStartNanoTime);
 
         mGalleryIntent = IntentHelper.getGalleryIntent(mAppContext);
-        if (ApiHelper.isLOrHigher()) {
-            // hide the up affordance for L devices, it's not very Materially
-            mActionBar.setDisplayShowHomeEnabled(false);
-        }
+		mActionBar.setDisplayShowHomeEnabled(false);
 
         profile.mark();
         mOrientationManager.resume();
         profile.mark("mOrientationManager.resume");
 
-        mCurrentModule.hardResetSettings(mSettingsManager);
+       
 
         profile.mark();
         android.util.Log.e("Dream", "mCurrentModule:" + mCurrentModule);
-        mCameraAppUI.initSidePanel();
-        mCameraAppUI.updateModeList();
-
-        /*
-         * sync settings
-         * @{
-         */
-        int cameraId = DataModuleManager.getInstance(this).getDataModuleCamera()
-                .getInt(Keys.KEY_CAMERA_ID);
-
-        DataStructSetting dataSetting = new DataStructSetting(
-                DreamUtil.intToString(mCurrentModule.getMode()), DreamUtil.isFrontCamera(this,
-                        cameraId),
-                mCurrentModeIndex, cameraId);
-
-        // change the data storage module
-        DataModuleManager.getInstance(this).changeModuleStatus(dataSetting);
-        /* @} */
         DataModuleManager.getInstance(this).getDataModuleCamera().addListener(this);
         DataModuleManager.getInstance(this).addListener(this);
-        getCameraAppUI().getDreamVoiceImageView().addListener(this);
+        
 
         /* SPRD: Fix bug 605818, wait for background camera closed @{
          * Original code
@@ -3281,7 +3381,7 @@
         waitToChangeMode = false;
         profile.mark("mCurrentModule.resume");
 
-        if (!mResetToPreviewOnResume) {
+        if (!mResetToPreviewOnResume && mFilmstripController!=null) {
             FilmstripItem item = mDataAdapter.getItemAt(
                     mFilmstripController.getCurrentAdapterIndex());
             if (item != null) {
@@ -3290,7 +3390,10 @@
         }
 
         // The share button might be disabled to avoid double tapping.
-        mCameraAppUI.getFilmstripBottomControls().setShareEnabled(true);
+        if(mCameraAppUI.getFilmstripBottomControls()!=null){
+			mCameraAppUI.getFilmstripBottomControls().setShareEnabled(true);
+		}
+        
         // Default is showing the preview, unless disabled by explicitly
         // starting an activity we want to return from to the filmstrip rather
         // than the preview.
@@ -3363,10 +3466,7 @@
                 });
 
         profile.mark();
-        mPanoramaViewHelper.onResume();
-        profile.mark("mPanoramaViewHelper.onResume()");
-
-        ReleaseHelper.showReleaseInfoDialogOnStart(this, mSettingsManager);
+       
         // Enable location recording if the setting is on.
         final boolean locationRecordingEnabled =
                 DataModuleManager.getInstance(this)
@@ -3410,7 +3510,7 @@
         /* @} */
 
         mIsActivityRunning = true;
-        mPanoramaViewHelper.onStart();
+        
 
         /*
          * If we're starting after launching a different Activity (lockscreen), we need to use the
@@ -3472,7 +3572,7 @@
         mCameraAppUI.stop();
 
         mIsActivityRunning = false;
-        mPanoramaViewHelper.onStop();
+        
 
         mLocationManager.disconnect();
         //SPRD:fix bug535425 Open Camera from gallery, gif can not form
@@ -3523,7 +3623,9 @@
         getServices().getCaptureSessionManager().removeSessionListener(mSessionListener);
         /* SPRD: Fix bug 612207 cameraActivity instances leak leads to OOM. @{ */
         if (mCameraAppUI != null) {
-            mCameraAppUI.getFilmstripContentPanel().setFilmstripListener(null);
+            if (mCameraAppUI.getFilmstripContentPanel() != null) {
+                mCameraAppUI.getFilmstripContentPanel().setFilmstripListener(null);
+            }
             mCameraAppUI.onDestroy();
         }
         if (mPhotoVoicePlayer != null) {
@@ -3616,7 +3718,9 @@
             } else if (keyCode == KeyEvent.KEYCODE_MENU
                     || keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
                 // Let the mode list view consume the event.
-                if (!isCaptureIntent() && !mCameraAppUI.isInFreezeReview()) { // SPRD: FixBug 395783
+               if (!isCaptureIntent()
+                        && !mCameraAppUI.isBottomBarNull()
+                        && !mCameraAppUI.isInFreezeReview()) { // SPRD: FixBug 395783
                     mCameraAppUI.openModeList();
                 }
                 return true;
@@ -3700,14 +3804,7 @@
 
     @Override
     public boolean onPrepareOptionsMenu(Menu menu) {
-        if (isSecureCamera() && !ApiHelper.isLOrHigher()) {
-            // Compatibility pre-L: launching new activities right above
-            // lockscreen does not reliably work, only show help if not secure
-            /*
-             * SPRD Bug:488399 Remove Google Help and Feedback. @{ Original Android code:
-             * menu.removeItem(R.id.action_help_and_feedback);
-             */
-        }
+        
 
         return super.onPrepareOptionsMenu(menu);
     }
@@ -3794,10 +3891,10 @@
         } else if (storageSpace == Storage.UNKNOWN_SIZE) {
             message = getString(R.string.access_sd_fail);
         } else if (storageSpace <= Storage.LOW_STORAGE_THRESHOLD_BYTES) {
-            /* SPRD: fix bug 522261 Show different string with External and Internal @{ */
-            if (mSettingsManager != null && getCurrentStorage().equals("External")) {
+             /* SPRD: fix bug 522261 Show different string with External and Internal @{ */
+            if (getCurrentStorage().equals("External")) {
                 message = getString(R.string.spaceIsLow_content);
-            } else if (mSettingsManager != null && getCurrentStorage().equals("Internal")) {
+            } else if (getCurrentStorage().equals("Internal")) {
                 message = getString(R.string.Internal_spaceIsLow_content);
             }
             /* @} */
@@ -3873,12 +3970,7 @@
 
     @Override
     public int getPreferredChildModeIndex(int modeIndex) {
-        if (modeIndex == getResources().getInteger(R.integer.camera_mode_photo)) {
-            boolean hdrPlusOn = Keys.isHdrPlusOn(mSettingsManager);
-            if (hdrPlusOn && GcamHelper.hasGcamAsSeparateModule(mFeatureConfig)) {
-                modeIndex = getResources().getInteger(R.integer.camera_mode_gcam);
-            }
-        }
+        
         return modeIndex;
     }
 
@@ -4020,9 +4112,11 @@
         }
         mCurrentModeIndex = agent.getModuleId();
         mCurrentModule = (CameraModule) agent.createModule(this, getIntent());
-		mModuleChangeListen.onModuleChanged(mCurrentModule);
+		if(mModuleChangeListen!=null){
+			mModuleChangeListen.onModuleChanged(mCurrentModule);
+		}
         if (!isCaptureIntent()) { // Bug #533869 new feature: check UI 27,28: dream camera of intent capture
-            DataModuleManager.getInstance(this).getDataModuleCamera()
+             DataModuleManager.getInstance(this).getTempCameraModule()
                     .set(Keys.KEY_STARTUP_MODULE_INDEX, mCurrentModeIndex);
         }
         Log.e(TAG, "setModuleFromModeIndex modeIndex=" + modeIndex);
@@ -4236,12 +4330,10 @@
         if(mCameraAppUI != null && mCameraAppUI.getModuleView() != null) {
             mCameraAppUI.getModuleView().setVisibility(View.VISIBLE);
         }
-        module.hardResetSettings(mSettingsManager);
-        // Hide accessibility zoom UI by default. Modules will enable it themselves if required.
-        getCameraAppUI().hideAccessibilityZoomUI();
+       
 
         getCameraAppUI().showCurrentModuleUI(mCurrentModeIndex);
-        if (mModeListView.getModeListSize() == 1) {
+        if (mModeListView == null || mModeListView.getModeListSize() == 1) {
             SlidePanelManager.getInstance(this).udpateSlidePanelShow(SlidePanelManager.MODE,View.INVISIBLE);
         } else {
             SlidePanelManager.getInstance(this).udpateSlidePanelShow(SlidePanelManager.MODE,View.VISIBLE);
@@ -4424,11 +4516,6 @@
     }
 
     @Override
-    public void showTutorial(AbstractTutorialOverlay tutorial) {
-        mCameraAppUI.showTutorial(tutorial, getLayoutInflater());
-    }
-
-    @Override
     public void finishActivityWithIntentCompleted(Intent resultIntent) {
         finishActivityWithIntentResult(Activity.RESULT_OK, resultIntent);
     }
@@ -5035,6 +5122,7 @@
         /* SPRD:fix bug616685 add freeze for module from gif to other @{ */
         ModeSelectRunnable selectRunnable = new ModeSelectRunnable(modeIndex);
         mMainHandler.post(selectRunnable);
+		mCameraAppUI.updateModeList();
     }
 
     private class ModeSelectRunnable implements Runnable {
@@ -5084,12 +5172,13 @@
      * Add for thumbnail is not show when entry camera. @{
      */
     public void syncThumbnail() {
-        Log.i(TAG, "syncThumbnail");
+        
         FilmstripItem data = mDataAdapter.getItemAt(0);
         if (mSecureCamera && mDataAdapter.getTotalNumber() == 1) {
             data = null;
         }
         if (data != null) {
+			Log.i(TAG, "syncThumbnail");
             int width = mAboveFilmstripControlLayout.getWidth();
             int height = mAboveFilmstripControlLayout.getMeasuredHeight();
 
@@ -5117,7 +5206,7 @@
                 defaultBitmap = android.graphics.BitmapFactory.decodeResource(getResources(), R.drawable.ic_gallery_defult_security_camera_sprd);
             }
             indicateCapture(defaultBitmap, 0);
-            Log.d(TAG, "syncThumbnail fail");
+            Log.d(TAG, "syncThumbnail default");
             }
     }
     /* @} */
@@ -5435,4 +5524,65 @@
         mCameraAppUI.setSurfaceHolderListener(surfaceHolderListener);
     }
     /* @} */
+
+    public void rollTask(Runnable runnable) {
+        getDreamHandler().post(new Runnable() {
+            @Override
+            public void run() {
+                mMainHandler.post(runnable);
+            }
+        });
+    }
+
+    private void inflateFilmstrip() {
+        mCameraAppUI.inflateFilmstrip();
+    }
+
+    private void initFilmstrip() {
+        mCameraAppUI.initFilmstrip();
+        mCameraAppUI.setFilmstripBottomControlsListener(mMyFilmstripBottomControlListener);
+        mFilmstripController = ((FilmstripView) findViewById(R.id.filmstrip_view)).getController();
+        mFilmstripController.setImageGap(
+                getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
+        mFilmstripController.setDataAdapter(mDataAdapter);
+        mAboveFilmstripControlLayout =
+                (FrameLayout) findViewById(R.id.camera_filmstrip_content_layout);
+    }
+
+    private boolean checkPermissionOnCreate() {
+        // SPRD:fix Bug 616294 add warn location express when enter into Camera
+        Intent intent = getIntent();
+        Bundle bundle = (intent != null) ? intent.getExtras() : null;
+        resultString = (bundle != null) ? bundle.getString("result") : null;
+
+        mSecureCheck = SystemProperties.get("persist.support.securetest",
+                DAFAULT_SYSTEM);
+        switch (mSecureCheck) {
+        case DAFAULT_SYSTEM_OK:
+            if (resultString == null) {
+                checkSystemPermission();
+                return false;
+            } else if (resultString.equals(DAFAULT_LOCATION_OK)
+                    || resultString.equals(DAFAULT_PERMISSION_OK)) {
+                checkCameraPermission();
+            }
+            break;
+        default:
+            checkCameraPermission();
+            break;
+        }
+
+        if (!isCaptureIntent() && !mHasCriticalPermissions) {
+            Log.v(TAG, "onCreate: Missing critical permissions.");
+            finish();
+            return false;
+        }
+        return true;
+    }
+
+    private Drawable captureShutterButtonIcon;
+
+    public Drawable getCaptureShutterButtonIcon() {
+        return captureShutterButtonIcon;
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/VideoModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/VideoModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/VideoModule.java	(revision 175951)
@@ -73,7 +73,6 @@
 import com.android.camera.hardware.HardwareSpecImpl;
 import com.android.camera.module.ModuleController;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.settings.SettingsUtil;
 import com.android.camera.stats.UsageStatistics;
 import com.android.camera.stats.profiler.Profile;
@@ -141,7 +140,7 @@
     private static final int RECORD_LIMIT_TIME = 3000; // 3s
     // SPRD: Fix bug 540246 recording and music work together after we end call
     private final String PAUSE_ACTION = "com.android.music.musicservicecommand.pause";
-    private final Handler mHandler = new MainHandler();
+    private Handler mHandler;
     // module fields
     protected CameraActivity mActivity;
     private final MediaSaver.OnMediaSavedListener mOnPhotoSavedListener = new MediaSaver.OnMediaSavedListener() {
@@ -365,6 +364,7 @@
      */
     public VideoModule(AppController app) {
         super(app);
+		mHandler = new MainHandler(app.getAndroidContext().getMainLooper());
     }
 
     /**
@@ -550,7 +550,7 @@
         mUI = createUI(mActivity);
         mActivity.setPreviewStatusListener(mUI);
 
-        SettingsManager settingsManager = mActivity.getSettingsManager();
+        
         mCameraId = mDataModule.getInt(Keys.KEY_CAMERA_ID);
 
         /*
@@ -584,7 +584,7 @@
         return true;
     }
 
-    private void initializeControlByIntent() {
+    public void initializeControlByIntent() {
         if (isVideoCaptureIntent()) {
             if (!mDontResetIntentUiOnResume) {
                 mActivity.getCameraAppUI().transitionToIntentCaptureLayout();
@@ -792,10 +792,7 @@
         mUI.onOrientationChanged(orientationManager, deviceOrientation);
     }
 
-    @Override
-    public void hardResetSettings(SettingsManager settingsManager) {
-        // VideoModule does not need to hard reset any settings.
-    }
+    
 
     @Override
     public HardwareSpec getHardwareSpec() {
@@ -876,7 +873,7 @@
 /*            if(!mActivity.isFilmstripVisible())
                 ToastUtil.showToast(mActivity, R.string.slow_motion_does_not_support_zoom_change, ToastUtil.LENGTH_LONG);*/
         }
-        initializeControlByIntent();
+        
 
         mHardwareSpec = new HardwareSpecImpl(getCameraProvider(),
                 mCameraCapabilities, mAppController.getCameraFeatureConfig(),
@@ -1727,19 +1724,13 @@
     }
 
     private void logVideoCapture(long duration) {
-        String flashSetting = mActivity.getSettingsManager().getString(
-                mAppController.getCameraScope(),
-                Keys.KEY_VIDEOCAMERA_FLASH_MODE);
-        boolean gridLinesOn = Keys.areGridLinesOn(mActivity
-                .getSettingsManager());
+        
         int width = (Integer) mCurrentVideoValues.get(Video.Media.WIDTH);
         int height = (Integer) mCurrentVideoValues.get(Video.Media.HEIGHT);
         long size = new File(mCurrentVideoFilename).length();
         String name = new File(
                 mCurrentVideoValues.getAsString(Video.Media.DATA)).getName();
-        UsageStatistics.instance().videoCaptureDoneEvent(name, duration,
-                isCameraFrontFacing(), currentZoomValue(), width, height, size,
-                flashSetting, gridLinesOn);
+        
     }
 
     private void saveVideo() {
@@ -2133,7 +2124,7 @@
             Log.v(TAG, "Skip stopVideoRecording since snapshot in progress");
             return true;
         }
-        Log.v(TAG, "stopVideoRecording");
+        Log.i(TAG, "stopVideoRecording");
 
         // Re-enable sound as early as possible to avoid interfering with stop
         // recording sound.
@@ -2416,7 +2407,7 @@
 
     @SuppressWarnings("deprecation")
     private void setCameraParameters() {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
+        
         DataModuleManager.getInstance(
                 mAppController.getAndroidContext()).getCurrentDataModule();
         // Update Desired Preview size in case video camera resolution has
@@ -2553,6 +2544,7 @@
         if (!mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_CAMERA_GRID_LINES)) {
             return;
         }
+		mAppController.getCameraAppUI().initGridlineView();
         String grid = mDataModuleCurrent.getString(Keys.KEY_CAMERA_GRID_LINES);
         mAppController.getCameraAppUI().updateScreenGridLines(grid);
         Log.d(TAG, "updateParametersGridLine = " + grid);
@@ -2776,9 +2768,10 @@
     }
 
     private void updateParametersGridLineToDefault() {
-        if (!mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_CAMERA_GRID_LINES)) {
+		if (mDataModuleCurrent == null
+                || !mDataModuleCurrent.isEnableSettingConfig(Keys.KEY_CAMERA_GRID_LINES)) {
             return;
-        }
+		}
         String grid = mDataModuleCurrent.getStringDefault(Keys.KEY_CAMERA_GRID_LINES);
         mAppController.getCameraAppUI().updateScreenGridLines(grid);
         Log.d(TAG, "updateParametersGridLine = " + grid);
@@ -2830,11 +2823,8 @@
         setDisplayOrientation();
     }
 
-    // TODO: integrate this into the SettingsManager listeners.
-    public void onSharedPreferenceChanged() {
+    
 
-    }
-
     protected void switchCamera() {
         if (mPaused) {
             return;
@@ -2847,7 +2837,6 @@
             return;
         }
         /* @} */
-        SettingsManager settingsManager = mActivity.getSettingsManager();
 
         Log.d(TAG, "Start to switch camera.");
         mCameraId = mPendingSwitchCameraId;
@@ -3432,6 +3421,9 @@
      * application.
      */
     private class MainHandler extends Handler {
+		public MainHandler(Looper looper) {
+            super(looper);
+        }
         @Override
         public void handleMessage(Message msg) {
             switch (msg.what) {
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/FocusOverlayManager.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/FocusOverlayManager.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/FocusOverlayManager.java	(revision 175951)
@@ -29,7 +29,7 @@
 import com.android.camera.debug.Log;
 import com.android.camera.one.Settings3A;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
+
 import com.android.camera.ui.PreviewStatusListener;
 import com.android.camera.ui.TouchCoordinate;
 import com.android.camera.util.ApiHelper;
@@ -101,7 +101,6 @@
     private CameraCapabilities.FocusMode mOverrideFocusMode;
     private CameraCapabilities mCapabilities;
     private final AppController mAppController;
-    private final SettingsManager mSettingsManager;
     private final Handler mHandler;
     Listener mListener;
     TouchListener mTouchListener;
@@ -167,7 +166,7 @@
             List<CameraCapabilities.FocusMode> defaultFocusModes, CameraCapabilities capabilities,
             Listener listener, boolean mirror, Looper looper, FocusRing focusRing) {
         mAppController = appController;
-        mSettingsManager = appController.getSettingsManager();
+        
         mHandler = new MainHandler(this, looper);
         mDefaultFocusModes = new ArrayList<CameraCapabilities.FocusMode>(defaultFocusModes);
         updateCapabilities(capabilities);
@@ -181,7 +180,7 @@
             List<CameraCapabilities.FocusMode> defaultFocusModes, CameraCapabilities capabilities,
             Listener listener, boolean mirror, Looper looper, FocusRing focusRing, TouchListener touchListener) {
         mAppController = appController;
-        mSettingsManager = appController.getSettingsManager();
+        
         mHandler = new MainHandler(this, looper);
         mDefaultFocusModes = new ArrayList<CameraCapabilities.FocusMode>(defaultFocusModes);
         updateCapabilities(capabilities);
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/ResolutionSetting.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/ResolutionSetting.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/ResolutionSetting.java	(revision 175951)
@@ -71,49 +71,6 @@
      * @param cameraId The specific camera device.
      * @param aspectRatio The chosen aspect ratio.
      */
-    public void setPictureAspectRatio(CameraId cameraId, Rational aspectRatio)
-            throws OneCameraAccessException {
-        OneCameraCharacteristics cameraCharacteristics =
-                mOneCameraManager.getOneCameraCharacteristics(cameraId);
-
-        Facing cameraFacing = cameraCharacteristics.getCameraDirection();
-
-        // Pick the largest picture size with the selected aspect ratio and save
-        // the choice for front camera.
-        final String pictureSizeSettingKey = cameraFacing == OneCamera.Facing.FRONT ?
-                Keys.KEY_PICTURE_SIZE_FRONT : Keys.KEY_PICTURE_SIZE_BACK;
-        final String blacklist = cameraFacing == OneCamera.Facing.FRONT ? mResolutionBlackListFront
-                : mResolutionBlackListBack;
-
-        // All resolutions supported by the camera.
-        List<Size> supportedPictureSizes = cameraCharacteristics
-                .getSupportedPictureSizes(ImageFormat.JPEG);
-
-        // Filter sizes which we are showing to the user in settings.
-        // This might also add some new resolution we support on some devices
-        // non-natively.
-        supportedPictureSizes = ResolutionUtil.getDisplayableSizesFromSupported(
-                supportedPictureSizes, cameraFacing == OneCamera.Facing.BACK);
-
-        // Filter the remaining sizes through our backlist.
-        supportedPictureSizes = ResolutionUtil.filterBlackListedSizes(supportedPictureSizes,
-                blacklist);
-
-        final Size chosenPictureSize =
-                ResolutionUtil.getLargestPictureSize(aspectRatio, supportedPictureSizes);
-        mSettingsManager.set(
-                SettingsManager.SCOPE_GLOBAL,
-                pictureSizeSettingKey,
-                SettingsUtil.sizeToSettingString(chosenPictureSize));
-    }
-
-    /**
-     * Changes the picture size settings for the cameras with specified facing.
-     * Pick the largest picture size with the specified aspect ratio.
-     *
-     * @param cameraId The specific camera device.
-     * @param aspectRatio The chosen aspect ratio.
-     */
     public void setPictureAspectRatio(DataModuleManager dataModuleManager, CameraId cameraId, Rational aspectRatio)
             throws OneCameraAccessException {
         OneCameraCharacteristics cameraCharacteristics =
@@ -183,73 +140,7 @@
      */
     public Size getPictureSize(CameraId cameraId, Facing cameraFacing, Size preferredMaxSize)
             throws OneCameraAccessException {
-    /* @} */
-        final String pictureSizeSettingKey = cameraFacing == OneCamera.Facing.FRONT ?
-                Keys.KEY_PICTURE_SIZE_FRONT : Keys.KEY_PICTURE_SIZE_BACK;
-
-        Size pictureSize = null;
-
-        String blacklist = "";
-        if (cameraFacing == OneCamera.Facing.BACK) {
-            blacklist = mResolutionBlackListBack;
-        } else if (cameraFacing == OneCamera.Facing.FRONT) {
-            blacklist = mResolutionBlackListFront;
-        }
-
-        // If there is no saved picture size preference or the saved on is
-        // blacklisted., pick a largest size with 4:3 aspect
-        boolean isPictureSizeSettingSet =
-                mSettingsManager.isSet(SettingsManager.SCOPE_GLOBAL, pictureSizeSettingKey);
-        boolean isPictureSizeBlacklisted = false;
-
-        // If a picture size is set, check whether it's blacklisted.
-        if (isPictureSizeSettingSet) {
-            pictureSize = SettingsUtil.sizeFromSettingString(
-                    mSettingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                            pictureSizeSettingKey));
-            /* SPRD: Fix 474843 Add for Filter Feature @{ */
-            if (preferredMaxSize != null
-                    && pictureSize.height() * pictureSize.width() > preferredMaxSize.width() * preferredMaxSize.height()) {
-                pictureSize = preferredMaxSize;
-            }
-            /* @} */
-            isPictureSizeBlacklisted = pictureSize == null ||
-                    ResolutionUtil.isBlackListed(pictureSize, blacklist);
-        }
-
-        // Due to b/21758681, it is possible that an invalid picture size has
-        // been saved to the settings. Therefore, picture size is set AND is not
-        // blacklisted, but completely invalid. In these cases, need to take the
-        // fallback, instead of the saved value. This logic should now save a
-        // valid picture size to the settings and self-correct the state of the
-        // settings.
-        final boolean isPictureSizeFromSettingsValid = pictureSize != null &&
-                pictureSize.width() > 0 && pictureSize.height() > 0;
-
-        if (!isPictureSizeSettingSet || isPictureSizeBlacklisted || !isPictureSizeFromSettingsValid) {
-            final Rational aspectRatio = ResolutionUtil.ASPECT_RATIO_4x3;
-
-            OneCameraCharacteristics cameraCharacteristics =
-                    mOneCameraManager.getOneCameraCharacteristics(cameraId);
-
-            final List<Size> supportedPictureSizes =
-                    ResolutionUtil.filterBlackListedSizes(
-                            cameraCharacteristics.getSupportedPictureSizes(ImageFormat.JPEG),
-                            blacklist);
-            final Size fallbackPictureSize =
-                    ResolutionUtil.getLargestPictureSize(aspectRatio, supportedPictureSizes);
-            mSettingsManager.set(
-                    SettingsManager.SCOPE_GLOBAL,
-                    pictureSizeSettingKey,
-                    SettingsUtil.sizeToSettingString(fallbackPictureSize));
-            pictureSize = fallbackPictureSize;
-            Log.e(TAG, "Picture size setting is not set. Choose " + fallbackPictureSize);
-            // Crash here if invariants are violated
-            Preconditions.checkNotNull(fallbackPictureSize);
-            Preconditions.checkState(fallbackPictureSize.width() > 0
-                    && fallbackPictureSize.height() > 0);
-        }
-        return pictureSize;
+        return null;
     }
 
     /*
@@ -390,7 +281,6 @@
      */
     public Rational getPictureAspectRatio(CameraId cameraId, Facing facing)
             throws OneCameraAccessException {
-        Size pictureSize = getPictureSize(cameraId, facing);
-        return new Rational(pictureSize.getWidth(), pictureSize.getHeight());
+        return null;
     }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/CameraPictureSizesCacher.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/CameraPictureSizesCacher.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/CameraPictureSizesCacher.java	(revision 175951)
@@ -32,6 +32,7 @@
 import com.android.camera.one.OneCameraCharacteristics;
 import com.android.camera.one.OneCameraManager;
 import com.android.camera.one.OneCameraModule;
+import com.dream.camera.settings.DataModuleManager;
 
 import com.google.common.base.Optional;
 
@@ -57,16 +58,13 @@
     public static void updateSizesForCamera(Context context, int cameraId,
             List<Size> sizes) {
         String key_build = PICTURE_SIZES_BUILD_KEY + cameraId;
-        SharedPreferences defaultPrefs = PreferenceManager
-                .getDefaultSharedPreferences(context);
-        String thisCameraCachedBuild = defaultPrefs.getString(key_build, null);
+        String thisCameraCachedBuild = DataModuleManager.getInstance(context).getDataModuleCamera()
+                .getString(key_build);
         // Write to cache.
         if (thisCameraCachedBuild == null) {
             String key_sizes = PICTURE_SIZES_SIZES_KEY + cameraId;
-            SharedPreferences.Editor editor = defaultPrefs.edit();
-            editor.putString(key_build, Build.DISPLAY);
-            editor.putString(key_sizes, Size.listToString(sizes));
-            editor.apply();
+            DataModuleManager.getInstance(context).getDataModuleCamera().set(key_build, Build.DISPLAY);
+            DataModuleManager.getInstance(context).getDataModuleCamera().set(key_sizes, Size.listToString(sizes));
         }
     }
 
@@ -120,8 +118,6 @@
         try {
             String key_build = PICTURE_SIZES_BUILD_KEY + cameraId;
             String key_sizes = PICTURE_SIZES_SIZES_KEY + cameraId;
-            SharedPreferences defaultPrefs = PreferenceManager
-                    .getDefaultSharedPreferences(context);
 
             CameraId cameraIdIdentifier = CameraId.fromLegacyId(cameraId);
             OneCameraManager oneCameraManager = OneCameraModule.provideOneCameraManager();
@@ -129,10 +125,8 @@
                     oneCameraManager.getOneCameraCharacteristics(cameraIdIdentifier);
             List<Size> sizes = cameraCharacteristicsFront.getSupportedPictureSizes(ImageFormat.JPEG);
 
-            SharedPreferences.Editor editor = defaultPrefs.edit();
-            editor.putString(key_build, Build.DISPLAY);
-            editor.putString(key_sizes, Size.listToString(sizes));
-            editor.apply();
+            DataModuleManager.getInstance(context).getDataModuleCamera().set(key_build, Build.DISPLAY);
+            DataModuleManager.getInstance(context).getDataModuleCamera().set(key_sizes, Size.listToString(sizes));
             return sizes;
         } catch (Exception e) {
             Log.w(TAG, e.getMessage());
@@ -152,8 +146,6 @@
             try {
                 String key_build = PICTURE_SIZES_BUILD_KEY + cameraId;
                 String key_sizes = PICTURE_SIZES_SIZES_KEY + cameraId;
-                SharedPreferences defaultPrefs = PreferenceManager
-                        .getDefaultSharedPreferences(context);
 
                 CameraId cameraIdIdentifier = CameraId.fromLegacyId(cameraId);
                 OneCameraManager oneCameraManager = OneCameraModule.provideOneCameraManager();
@@ -161,10 +153,8 @@
                         oneCameraManager.getOneCameraCharacteristics(cameraIdIdentifier);
                 List<Size> sizes = cameraCharacteristicsFront.getSupportedPictureSizes(ImageFormat.JPEG);
 
-                SharedPreferences.Editor editor = defaultPrefs.edit();
-                editor.putString(key_build, Build.DISPLAY);
-                editor.putString(key_sizes, Size.listToString(sizes));
-                editor.apply();
+                DataModuleManager.getInstance(context).getDataModuleCamera().set(key_build, Build.DISPLAY);
+                DataModuleManager.getInstance(context).getDataModuleCamera().set(key_sizes, Size.listToString(sizes));
                 return sizes;
             } catch (Exception e) {
                 Log.w(TAG, e.getMessage());
@@ -188,14 +178,13 @@
             Context context) {
         String key_build = PICTURE_SIZES_BUILD_KEY + cameraId;
         String key_sizes = PICTURE_SIZES_SIZES_KEY + cameraId;
-        SharedPreferences defaultPrefs = PreferenceManager
-                .getDefaultSharedPreferences(context);
         // Return cached value for cameraId and current build, if available.
-        String thisCameraCachedBuild = defaultPrefs.getString(key_build, null);
+        String thisCameraCachedBuild = DataModuleManager.getInstance(context).getDataModuleCamera()
+                .getString(key_build);
         if (thisCameraCachedBuild != null
                 && thisCameraCachedBuild.equals(Build.DISPLAY)) {
-            String thisCameraCachedSizeList = defaultPrefs.getString(key_sizes,
-                    null);
+            String thisCameraCachedSizeList = DataModuleManager.getInstance(context)
+                    .getDataModuleCamera().getString(key_sizes);
             if (thisCameraCachedSizeList != null) {
                 return Optional.of(Size.stringToList(thisCameraCachedSizeList));
             }
@@ -245,15 +234,12 @@
     }
 
     public static void saveSlowMotion(Context context, String slowMotion) {
-        SharedPreferences defaultPrefs = PreferenceManager.getDefaultSharedPreferences(context);
-        SharedPreferences.Editor editor = defaultPrefs.edit();
-        editor.putString(Keys.KEY_VIDEO_SLOW_MOTION_ALL, slowMotion);
-        editor.apply();
+        DataModuleManager.getInstance(context).getDataModuleCamera().set(Keys.KEY_VIDEO_SLOW_MOTION_ALL, slowMotion);
     }
 
     public static String getCacheSlowMotionForCamera(Context context) {
-        SharedPreferences defaultPrefs = PreferenceManager.getDefaultSharedPreferences(context);
-        String slowMotionValues = defaultPrefs.getString(Keys.KEY_VIDEO_SLOW_MOTION_ALL, null);
+        String slowMotionValues = DataModuleManager.getInstance(context).getDataModuleCamera()
+                .getString(Keys.KEY_VIDEO_SLOW_MOTION_ALL);
         return slowMotionValues;
     }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/Keys.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/Keys.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/settings/Keys.java	(revision 175951)
@@ -100,8 +100,6 @@
     public static final String KEY_CAMERA_PANO_ORIENTATION = "pref_camera_pano_orientation";
     public static final String KEY_CAMERA_GRID_LINES = "pref_camera_grid_lines";
     public static final String KEY_RELEASE_DIALOG_LAST_SHOWN_VERSION = "pref_release_dialog_last_shown_version";
-    public static final String KEY_FLASH_SUPPORTED_BACK_CAMERA = "pref_flash_supported_back_camera";
-    public static final String KEY_HDR_SUPPORT_MODE_BACK_CAMERA = "pref_hdr_support_mode_back_camera";
     public static final String KEY_UPGRADE_VERSION = "pref_upgrade_version";
     public static final String KEY_REQUEST_RETURN_HDR_PLUS = "pref_request_return_hdr_plus";
     public static final String KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING = "pref_should_show_refocus_viewer_cling";
@@ -111,7 +109,6 @@
     /**
      * Whether the user has chosen an aspect ratio on the first run dialog.
      */
-    public static final String KEY_USER_SELECTED_ASPECT_RATIO = "pref_user_selected_aspect_ratio";
     public static final String KEY_COUNTDOWN_DURATION = "pref_camera_countdown_duration_key";
     public static final String KEY_HDR_PLUS_FLASH_MODE = "pref_hdr_plus_flash_mode";
     public static final String KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING = "pref_should_show_settings_button_cling";
@@ -243,209 +240,6 @@
      * set all defaults.
      */
     public static void setDefaults(SettingsManager settingsManager, Context context) {
-        // SPRD:add for antiband auto Bug549740
-        Resources resource = context.getResources();
-
-        settingsManager.setDefaults(KEY_COUNTDOWN_DURATION, 0,
-                resource.getIntArray(R.array.pref_countdown_duration));
-
-        settingsManager.setDefaults(KEY_CAMERA_ID, context.getString(R.string.pref_camera_id_default),
-                resource.getStringArray(R.array.camera_id_entryvalues));
-
-        settingsManager.setDefaults(KEY_SCENE_MODE,
-                context.getString(R.string.pref_camera_scenemode_default),
-                resource.getStringArray(R.array.pref_camera_scenemode_entryvalues));
-
-        settingsManager.setDefaults(KEY_VIDEO_FLASH_MODE, context
-                .getString(R.string.setting_off_value), resource
-                .getStringArray(R.array.pref_video_flashmode_entryvalues));
-
-        settingsManager.setDefaults(KEY_HDR_SUPPORT_MODE_BACK_CAMERA,
-                context.getString(R.string.pref_camera_hdr_supportmode_none),
-                resource.getStringArray(R.array.pref_camera_hdr_supportmode_entryvalues));
-
-        settingsManager.setDefaults(KEY_CAMERA_HDR, false);
-        settingsManager.setDefaults(KEY_CAMERA_HDR_PLUS, false);
-        settingsManager.setDefaults(KEY_CAMERA_FIRST_USE_HINT_SHOWN, true);
-
-        settingsManager.setDefaults(KEY_FOCUS_MODE,
-                context.getString(R.string.pref_camera_focusmode_default),
-                resource.getStringArray(R.array.pref_camera_focusmode_entryvalues));
-
-        String videoQualityBackDefaultValue = context
-                .getString(R.string.pref_video_quality_large);
-        // TODO: We tweaked the default setting based on model string which is
-        // not ideal. Detecting
-        // CamcorderProfile capability is a better way to get this job done.
-        // However,
-        // |CamcorderProfile.hasProfile| needs camera id info. We need a way to
-        // provide camera id to
-        // this method. b/17445274
-        // Don't set the default resolution to be large if the device supports
-        // 4k video.
-        if (ApiHelper.IS_NEXUS_6) {
-            videoQualityBackDefaultValue = context
-                    .getString(R.string.pref_video_quality_medium);
-        }
-        settingsManager.setDefaults(KEY_VIDEO_QUALITY_BACK,
-                videoQualityBackDefaultValue,
-                resource.getStringArray(R.array.pref_video_quality_entryvalues));
-        if (!settingsManager.isSet(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_VIDEO_QUALITY_BACK)) {
-            settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_VIDEO_QUALITY_BACK);
-        }
-
-        settingsManager.setDefaults(KEY_VIDEO_QUALITY_FRONT,
-                context.getString(R.string.pref_video_quality_large),
-                resource.getStringArray(R.array.pref_video_quality_entryvalues));
-        if (!settingsManager.isSet(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_VIDEO_QUALITY_FRONT)) {
-            settingsManager.setToDefault(SettingsManager.SCOPE_GLOBAL,
-                    Keys.KEY_VIDEO_QUALITY_FRONT);
-        }
-        // SPRD:Modify for jpegquality
-        settingsManager.setDefaults(KEY_JPEG_QUALITY,
-                context.getString(R.string.pref_camera_jpegh_quality_entry_value_super_hight),
-                resource.getStringArray(R.array.pref_camera_jpeg_quality_entry_values));
-
-        settingsManager.setDefaults(KEY_VIDEOCAMERA_FLASH_MODE,
-                context.getString(R.string.pref_camera_video_flashmode_default),
-                resource.getStringArray(R.array.pref_camera_video_flashmode_entryvalues));
-
-        settingsManager.setDefaults(KEY_VIDEO_EFFECT,
-                context.getString(R.string.pref_video_effect_default),
-                resource.getStringArray(R.array.pref_video_effect_entryvalues));
-
-        settingsManager.setDefaults(KEY_VIDEO_FIRST_USE_HINT_SHOWN, true);
-
-        settingsManager.setDefaults(KEY_STARTUP_MODULE_INDEX, 0,
-                context.getResources().getIntArray(R.array.camera_modes));
-
-        settingsManager.setDefaults(KEY_CAMERA_MODULE_LAST_USED,
-                context.getResources().getInteger(R.integer.camera_mode_photo),
-                resource.getIntArray(R.array.camera_modes));
-
-        settingsManager.setDefaults(KEY_CAMERA_PANO_ORIENTATION,
-                context.getString(R.string.pano_orientation_horizontal),
-                resource.getStringArray(R.array.pref_camera_pano_orientation_entryvalues));
-
-        settingsManager.setDefaults(KEY_CAMERA_GRID_LINES, false);
-
-        settingsManager.setDefaults(KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING, true);
-
-        settingsManager.setDefaults(KEY_HDR_PLUS_FLASH_MODE,
-                context.getString(R.string.pref_camera_hdr_plus_flashmode_default),
-                resource.getStringArray(R.array.pref_camera_hdr_plus_flashmode_entryvalues));
-
-        settingsManager.setDefaults(KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING, false);
-
-        /* SPRD: Add for FreezeDisplay */
-        settingsManager.setDefaults(KEY_FREEZE_FRAME_DISPLAY, false);
-
-        /* SPRD: Set Ddfault Value of face detect Feature */
-        settingsManager.setDefaults(KEY_CAMERA_AI_DATECT,
-                context.getString(R.string.pref_ai_detect_entry_value_face),
-                resource.getStringArray(R.array.pref_camera_ai_detect_entryvalues));
-
-        /* SPRD: Set Ddfault Value of Storage Feature */
-        settingsManager.setDefaults(KEY_CAMERA_STORAGE_PATH,
-                context.getString(R.string.storage_path_external_default),
-                resource.getStringArray(R.array.pref_camera_storage_path_entryvalues));
-
-        /* SPRD:Add for color effect Bug 474727 @{ */
-        settingsManager.setDefaults(KEY_CAMERA_COLOR_EFFECT,
-                context.getString(R.string.pref_camera_color_effect_entry_value_none),
-                resource.getStringArray(R.array.pref_camera_color_effect_entryvalues));
-        /* @} */
-
-        // SPRD Bug:474701 Feature:Video Encoding Type.
-        settingsManager.setDefaults(KEY_VIDEO_ENCODE_TYPE,
-                context.getString(R.string.pref_video_encode_type_value_default),
-                resource.getStringArray(R.array.pref_video_encode_type_entry_values));
-        /* SPRD: Set Ddfault Value of White Balance Feature */
-        settingsManager.setDefaults(KEY_WHITE_BALANCE,
-                context.getString(R.string.pref_camera_whitebalance_default),
-                resource.getStringArray(R.array.pref_camera_whitebalance_entryvalues));
-
-        /* SPRD: fix bug 474665 add shutter sound switch @{ */
-        settingsManager.setDefaults(KEY_CAMERA_SHUTTER_SOUND, true);
-
-        settingsManager.setDefaults(KEY_CAMERA_CONTINUE_CAPTURE,
-                context.getString(R.string.pref_camera_burst_entry_defaultvalue),
-                resource.getStringArray(R.array.pref_camera_burst_entryvalues));
-
-        // SPRD Bug:474721 Feature:Contrast.
-        settingsManager.setDefaults(KEY_CAMERA_CONTRAST,
-                context.getString(R.string.pref_contrast_entry_defaultvalue),
-                resource.getStringArray(R.array.pref_camera_contrast_entry_values));
-
-        // SPRD Bug:474715 Feature:Brightness.
-        settingsManager.setDefaults(KEY_CAMERA_BRIGHTNESS,
-                context.getString(R.string.pref_brightness_entry_defaultvalue),
-                resource.getStringArray(R.array.pref_camera_brightness_entryvalues));
-
-        // SPRD Bug:474724 Feature:ISO.
-        settingsManager.setDefaults(KEY_CAMERA_ISO,
-                context.getString(R.string.pref_entry_value_auto),
-                resource.getStringArray(R.array.pref_camera_iso_entryvalues));
-
-        // SPRD Bug:474718 Feature:Metering.
-        settingsManager.setDefaults(KEY_CAMER_METERING,
-                context.getString(R.string.pref_camera_metering_entry_value_center_weighted),
-                resource.getStringArray(R.array.pref_camera_metering_entryvalues));
-
-        // SPRD Bug:474722 Feature:Saturation.
-        settingsManager.setDefaults(KEY_CAMERA_SATURATION,
-                context.getString(R.string.pref_saturation_entry_defaultvalue),
-                resource.getStringArray(R.array.pref_camera_saturation_entry_values));
-
-        // SPRD: for bug 509708 add time lapse
-        settingsManager.setDefaults(KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,
-                context.getString(R.string.pref_timelapse_entry_value_default),
-                resource.getStringArray(R.array.pref_video_timelapse_entry_values));
-
-        // SPRD Bug:474696 Feature:Slow-Motion.
-        settingsManager.setDefaults(KEY_VIDEO_SLOW_MOTION,
-                context.getString(R.string.pref_entry_value_one),
-                resource.getStringArray(R.array.pref_video_slow_motion_entry_values));
-
-        // SPRD Bug:513927 reset Makeup
-        settingsManager.setDefaults(KEY_CAMERA_BEAUTY_ENTERED, false);
-
-        // SPRD Bug:474847 Feature: TimeStamp
-        settingsManager.setDefaults(KEY_CAMERA_TIME_STAMP, false);
-
-        /* SPRD: Add for mirror */
-        settingsManager.setDefaults(KEY_FRONT_CAMERA_MIRROR, false);
-
-        specialMutexDefault(settingsManager);
-
-        // SPRD Bug:474701 Feature:Video Encoding Type.
-        settingsManager.setDefaults(KEY_VIDEO_ENCODE_TYPE,
-                context.getString(R.string.pref_video_encode_type_value_default),
-                resource.getStringArray(R.array.pref_video_encode_type_entry_values));
-
-        // SPRD: add for GIF
-        settingsManager.setDefaults(KEY_GIF_FLASH_MODE,
-                context.getString(R.string.pref_camera_video_flashmode_default),
-                resource.getStringArray(R.array.pref_camera_video_flashmode_entryvalues));
-
-        settingsManager.setDefaults(KEY_FLASH_MODE,
-                context.getString(R.string.pref_camera_video_flashmode_default),
-                resource.getStringArray(R.array.pref_camera_flashmode_entryvalues));
-
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, KEY_BACK_PHOTO_MODE, 0);
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, KEY_FRONT_PHOTO_MODE, 0);
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, KEY_BACK_VIDEO_MODE, 11);
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, KEY_FRONT_VIDEO_MODE, 11);
-        /* SPRD: Add for VGesture */
-        settingsManager.setDefaults(KEY_CAMERA_VGESTURE, false);
-        // SPRD: Fix bug 533869 reset scenery .
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, KEY_CAMERA_SCENERY_TYPE, 0);
-        // SPRD: Fix bug 533869 reset filter .
-        settingsManager.set(SettingsManager.SCOPE_GLOBAL, KEY_CAMERA_FILTER_TYPE, 403);
-        settingsManager.setDefaults(KEY_HIGH_ISO, false);
     }
 
     /**
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/PhotoUI.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/PhotoUI.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/PhotoUI.java	(revision 175951)
@@ -39,7 +39,6 @@
 import com.android.camera.debug.DebugPropertyHelper;
 import com.android.camera.debug.Log;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.ui.CountDownView;
 import com.android.camera.ui.FaceView;
 import com.android.camera.ui.PreviewOverlay;
@@ -135,7 +134,7 @@
             mDialog = null;
         }
     };
-    private final CountDownView mCountdownView;
+    private  CountDownView mCountdownView;
 
     @Override
     public GestureDetector.OnGestureListener getGestureListener() {
@@ -189,6 +188,9 @@
      * Returns whether the countdown is on-going.
      */
     public boolean isCountingDown() {
+        if (mCountdownView == null) {
+            return false;
+        }
         return mCountdownView.isCountingDown();
     }
 
@@ -197,7 +199,9 @@
      */
     public void cancelCountDown() {
         mActivity.getCameraAppUI().updatePreviewUI(View.VISIBLE);
-        mCountdownView.cancelCountDown();
+        if (mCountdownView != null) {
+            mCountdownView.cancelCountDown();
+        }
     }
 
     @Override
@@ -205,7 +209,9 @@
         if (mFaceView != null) {
             mFaceView.onPreviewAreaChanged(previewArea);
         }
-        mCountdownView.onPreviewAreaChanged(previewArea);
+        if (mCountdownView != null) {
+            mCountdownView.onPreviewAreaChanged(previewArea);
+        }
     }
 
     private class DecodeTask extends AsyncTask<Void, Void, Bitmap> {
@@ -252,18 +258,11 @@
         mActivity = activity;
         mController = controller;
         mRootView = parent;
-
-        ViewGroup moduleRoot = (ViewGroup) mRootView.findViewById(R.id.module_layout);
-        mActivity.getLayoutInflater().inflate(R.layout.photo_module,
-                 moduleRoot, true);
-        initIndicators();
-
         Log.i(TAG, "PhotoUI  isSupportFilterFeature=" + UCamUtill.isUcamBeautyEnable()+",isImageCaptureIntent="+mController.isImageCaptureIntent());
 
 
         mFocusRing = (FocusRing) mRootView.findViewById(R.id.focus_ring);
         mPreviewOverlay = (PreviewOverlay) mRootView.findViewById(R.id.preview_overlay);
-        mCountdownView = (CountDownView) mRootView.findViewById(R.id.count_down_view);
         // Show faces if we are in debug mode.
         /*SPRD:Modify for ai detect @{
         if (DebugPropertyHelper.showCaptureDebugUI()) {
@@ -360,6 +359,9 @@
 
     @Override
     public void onSurfaceTextureUpdated(SurfaceTexture surface) {
+		if (mController instanceof PhotoModule) {
+            ((PhotoModule) mController).onSurfaceTextureUpdated();
+        }
     }
 
     private void initIndicators() {
@@ -549,21 +551,7 @@
     */
     @Override
     public void onFaceDetection(Face[] faces, CameraAgent.CameraProxy camera) {
-        /*SPRD:modify for Coverity 109107
-         * Orginal android code
-        int countDownDuration = mActivity.getSettingsManager().getInteger(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_COUNTDOWN_DURATION);
-         */
-        /*
-         * SPRD Bug:492347 Show FaceView in CountDown Mode. @{
-         * Original Android code:
-
-        boolean isCountDown = mActivity.getSettingsManager().getBoolean(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_COUNTDOWN_DURATION);
-        if (((mAIController == null || mAIController.isChooseOff()))
-                || Keys.isHdrOn(mActivity.getSettingsManager()) || isCountDown) {
-
-         */
+        
         if (isNeedClearFaceView()
                 || ((mController instanceof PhotoModule) && !((PhotoModule)mController).mFaceDetectionStarted)
                /* || Keys.isHdrOn(mActivity.getSettingsManager())*/) {//now face is not mutex with ai in UE's doc.
@@ -655,6 +643,9 @@
     }
 
     public boolean isOnTouchInside(MotionEvent ev) {
+		if (mShutterButton == null) {
+            mShutterButton = (ShutterButton) mRootView.findViewById(R.id.shutter_button);//SPRD:fix bug 473462
+        }
         if (mShutterButton != null) {
             return mShutterButton.isOnTouchInside(ev);
         }
@@ -674,122 +665,7 @@
         mPreviewOverlay.hideZoomProcessorIfNeeded();
     }
     /* SPRD: fix bug 474672 add for beauty @{ */
-    private void initFilterMakeupButton() {
-        Log.i(TAG, "initFilterMakeupButton  isSupportFilterFeature=" + UCamUtill.isUcamBeautyEnable());
-
-        if(UCamUtill.isUcamBeautyEnable()) {
-            mMakeupButton = (ImageView) mRootView.findViewById(R.id.btn_beauty_button);
-            if (mMakeupButton == null) {
-                return;
-            }
-            initMakeupButton();
-
-            /*
-             * SPRD Bug:519334 Refactor Rotation UI of Camera. @{
-             * Original Android code:
-
-            // SPRD Bug:514488 Click Button when rotation.
-            mMakeupButton.setOnClickListener(new View.OnClickListener() {
-
-                boolean clickable = true;
-
-                @Override
-                public void onClick(View view) {
-                    if (!clickable)
-                        return;
-                    SettingsManager settingsManager = mActivity.getSettingsManager();
-                    boolean isHasEnteredBeauty = settingsManager.getBoolean(
-                            SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_BEAUTY_ENTERED);
-                    Log.i(TAG, "onClick   isHasEnteredBeauty = " + isHasEnteredBeauty);
-                    if (!isHasEnteredBeauty) {
-                        clickable = false;
-                        mActivity.getOrientationManager().setRequestedOrientation(
-                                ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-                        ((PhotoModule) mController).postDelayed(new Runnable() {
-
-                            int tryTime = 0;
-
-                            @Override
-                            public void run() {
-                                if (mActivity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
-                                        && mActivity.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
-                                    resumeMakeupControllerView();
-                                    clickable = true;
-                                } else {
-                                    if (++tryTime <= 50) {
-                                        ((PhotoModule) mController).postDelayed(this, 20);
-                                    } else {
-                                        Log.e(TAG,
-                                                "onClick setRequestedOrientation PORTRAIT timeout.");
-                                        return;
-                                    }
-                                }
-                            }
-                        }, 20);
-                    } else {
-                        clickable = false;
-                        pauseMakeupControllerView();
-                        mActivity.getOrientationManager().resetOrientaion();
-                        ((PhotoModule) mController).postDelayed(new Runnable() {
-
-                            int tryTime = 0;
-
-                            @Override
-                            public void run() {
-                                if (mActivity.getRequestedOrientation() != ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
-                                    clickable = true;
-                                } else {
-                                    if (++tryTime <= 50) {
-                                        ((PhotoModule) mController).postDelayed(this, 20);
-                                    } else {
-                                        Log.e(TAG,
-                                                "onClick resetOrientaion timeout.");
-                                        return;
-                                    }
-                                }
-                            }
-                        }, 20);
-
-                    }
-                }
-            });
-
-             */
-
-            mMakeupButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    SettingsManager settingsManager = mActivity.getSettingsManager();
-                    boolean isHasEnteredBeauty = settingsManager.getBoolean(
-                            SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_BEAUTY_ENTERED);
-                    Log.i(TAG, "onClick isHasEnteredBeauty = " + isHasEnteredBeauty);
-                    if (!isHasEnteredBeauty) {
-                        mMakeupController.resumeMakeupControllerView();
-                    } else {
-                        mMakeupController.pauseMakeupControllerView();
-                    }
-                }
-            });
-
-            mBeautyControllerView = (LinearLayout) mRootView.findViewById(R.id.ucam_makeup_controls);
-            mBeautySeekBar = (SeekBar)mRootView.findViewById(R.id.makeup_seekbar);
-            mBeautySeekBar.setPadding(8,0,8,0);
-            mBeautySeekBar.setOnSeekBarChangeListener(new MakeUpSeekBarChangedListener());
-        }
-        setButtonOrientation(CameraUtil.getDisplayRotation());
-    }
-
-    /* SPRD: fix bug 487525 save makeup level for makeup module
-     * Note mBeautySeekBar.getProgress must be int*11 @{
-     */
-    public void initMakeupLevel() {
-        int makeupLevel = mActivity.getSettingsManager().getInteger(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_MAKEUP_MODE_LEVEL,
-                mBeautySeekBar.getProgress());
-        mBeautySeekBar.setProgress(makeupLevel);
-        mController.onBeautyValueChanged(makeupLevel);
-    }
-    /* @} */
+    
     public void setButtonOrientation(int orientation) {
         Log.i(TAG, "setButtonOrientation   orientation = "+orientation);
 
@@ -837,21 +713,8 @@
         }
     }
 
-    /**
-     * SPRD: Fix bug 513768 makeup module switch to normal photo module, makeup effect still works. @{
-     */
-    private void doMakeupLevel() {
-        boolean isMakeupEntry = mActivity.getSettingsManager().getBoolean(
-                SettingsManager.SCOPE_GLOBAL, Keys.KEY_CAMERA_BEAUTY_ENTERED, false);
+   
 
-        if (isMakeupEntry) {
-            initMakeupLevel();
-        } else {
-            mController.onBeautyValueReset();
-        }
-    }
-    /* @} */
-
     private boolean initMakeupButton() {
         mMakeupButton = (ImageView) mRootView.findViewById(R.id.btn_beauty_button);
         if (mMakeupButton != null) {
@@ -1022,4 +885,22 @@
         mController.onPreviewUIDestroyed();
     }
     /* @} */
+    //Sprd Fix Bug: 665197
+    public boolean isZooming(){
+        if (mPreviewOverlay == null) {
+            return false;
+        }
+        return mPreviewOverlay.isZooming();
+    }
+
+    /* SPRD: Fix bug 659315, optimize camera launch time @{ */
+    public void onPreviewStarted() {
+
+    }
+    /* @} */
+    protected void initModuleLayout() {
+        ViewGroup moduleRoot = (ViewGroup) mRootView.findViewById(R.id.module_layout);
+        moduleRoot.addView(mActivity.getLayoutInflater().inflate(R.layout.photo_module, null, false));
+        mCountdownView = (CountDownView) mRootView.findViewById(R.id.count_down_view);
+    }
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/PreviewOverlay.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/PreviewOverlay.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/PreviewOverlay.java	(revision 175951)
@@ -327,6 +327,7 @@
     };
 
     public void setZoom(float ratio) {
+        isZooming = true;
         mZoomProcessor.setZoom(ratio);
         // Fix bug 568175 that no zoom ui displays
         mZoomProcessor.showZoomUIDream();
@@ -337,6 +338,7 @@
         if (mhandler.hasMessages(EMPTY)) {
             mhandler.removeMessages(EMPTY);
         }
+        isZooming = false;
         mhandler.sendEmptyMessageDelayed(EMPTY, ZOOM_UI_HIDE_DELAY);
     }
     /**
@@ -478,7 +480,7 @@
             mFingerAngle = mScaleDetector.getAngle();
             //invalidate();
             mDreamZoomUIListener.initZoomLevel(mMinRatio, mMaxRatio, mCurrentRatio);
-
+            isZooming = true;
             return true;
         }
 
@@ -548,6 +550,9 @@
             if (mZoomListener != null) {
                 mZoomListener.onZoomEnd();
             }
+            if (mDreamZoomUIListener == null) {
+                return;
+            }
             mHandler.post(new Runnable() {
                 @Override
                 public void run() {
@@ -615,7 +620,12 @@
     }
 
     private boolean mZoomScaling = false;
+    //Sprd Fix Bug: 665197
+    private boolean isZooming = false;
 
+    public boolean isZooming(){
+        return isZooming;
+    }
     /*
      * SPRD Bug:607389 when zoom, open modeList, zoomBar display unnormal
      */
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/BottomBar.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/BottomBar.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/BottomBar.java	(revision 175951)
@@ -35,6 +35,7 @@
 // SPRD: Fix bug 535110, Photo voice record.
 import android.widget.ImageView;
 
+import com.android.camera.CameraActivity;
 import com.android.camera.CaptureLayoutHelper;
 import com.android.camera.ShutterButton;
 import com.android.camera.debug.Log;
@@ -41,6 +42,7 @@
 import com.android.camera.util.ApiHelper;
 import com.android.camera.util.CameraUtil;
 import com.android.camera2.R;
+import com.dream.camera.SlidePanelManager;
 
 /**
  * BottomBar swaps its width and height on rotation. In addition, it also
@@ -82,10 +84,8 @@
     private int mBackgroundAlpha = 0xff;
 
     private boolean mDrawCircle;
-    private final float mCircleRadius;
     private CaptureLayoutHelper mCaptureLayoutHelper = null;
 
-    private final Drawable.ConstantState[] mShutterButtonBackgroundConstantStates;
     // a reference to the shutter background's first contained drawable
     // if it's an animated circle drawable (for video mode)
     private AnimatedCircleDrawable mAnimatedCircleDrawable;
@@ -94,27 +94,15 @@
     private ColorDrawable mColorDrawable;
 
     private RectF mRect = new RectF();
+    private Context mContext;
 
     public BottomBar(Context context, AttributeSet attrs) {
         super(context, attrs);
-        mCircleRadius = getResources()
-                .getDimensionPixelSize(R.dimen.video_capture_circle_diameter) / 2;
+        mContext = context;
         mBackgroundAlphaOverlay = getResources()
                 .getInteger(R.integer.bottom_bar_background_alpha_overlay);
         mBackgroundAlphaDefault = getResources()
                 .getInteger(R.integer.bottom_bar_background_alpha);
-
-        // preload all the drawable BGs
-        TypedArray ar = context.getResources()
-                .obtainTypedArray(R.array.shutter_button_backgrounds);
-        int len = ar.length();
-        mShutterButtonBackgroundConstantStates = new Drawable.ConstantState[len];
-        for (int i = 0; i < len; i++) {
-            int drawableId = ar.getResourceId(i, -1);
-            mShutterButtonBackgroundConstantStates[i] =
-                    context.getResources().getDrawable(drawableId).getConstantState();
-        }
-        ar.recycle();
     }
 
     private void setPaintColor(int alpha, int color) {
@@ -404,51 +392,11 @@
         }
     }
 
-    private LayerDrawable applyCircleDrawableToShutterBackground(LayerDrawable shutterBackground) {
-        // the background for video has a circle_item drawable placeholder
-        // that gets replaced by an AnimatedCircleDrawable for the cool
-        // shrink-down-to-a-circle effect
-        // all other modes need not do this replace
-        Drawable d = shutterBackground.findDrawableByLayerId(R.id.circle_item);
-        if (d != null) {
-            Drawable animatedCircleDrawable =
-                    new AnimatedCircleDrawable((int) mCircleRadius);
-            shutterBackground
-                    .setDrawableByLayerId(R.id.circle_item, animatedCircleDrawable);
-            animatedCircleDrawable.setLevel(DRAWABLE_MAX_LEVEL);
-        }
-
-        return shutterBackground;
-    }
-
     private LayerDrawable newDrawableFromConstantState(Drawable.ConstantState constantState) {
         return (LayerDrawable) constantState.newDrawable(getContext().getResources());
     }
 
-    private void setupShutterBackgroundForModeIndex(int index) {
-        LayerDrawable shutterBackground = applyCircleDrawableToShutterBackground(
-                newDrawableFromConstantState(mShutterButtonBackgroundConstantStates[index]));
-        mShutterButton.setBackground(shutterBackground);
-        mCancelButton.setBackground(applyCircleDrawableToShutterBackground(
-                newDrawableFromConstantState(mShutterButtonBackgroundConstantStates[index])));
-
-        Drawable d = shutterBackground.getDrawable(0);
-        mAnimatedCircleDrawable = null;
-        mColorDrawable = null;
-        if (d instanceof AnimatedCircleDrawable) {
-            mAnimatedCircleDrawable = (AnimatedCircleDrawable) d;
-        } else if (d instanceof ColorDrawable) {
-            mColorDrawable = (ColorDrawable) d;
-        }
-
-        int colorId = CameraUtil.getCameraThemeColorId(index, getContext());
-        int pressedColor = getContext().getResources().getColor(colorId);
-        setBackgroundPressedColor(pressedColor);
-        refreshPaintColor();
-    }
-
     public void setColorsForModeIndex(int index) {
-        setupShutterBackgroundForModeIndex(index);
     }
 
     public void setBackgroundAlpha(int alpha) {
@@ -510,7 +458,13 @@
      * drawable which is guaranteed to not share states with other drawables.
      */
     public void setShutterButtonIcon(int resId) {
-        Drawable iconDrawable = getResources().getDrawable(resId);
+        Drawable iconDrawable;
+        if (resId == R.drawable.ic_capture_camera_sprd
+                && ((CameraActivity) getContext()).getCaptureShutterButtonIcon() != null) {
+            iconDrawable = ((CameraActivity) getContext()).getCaptureShutterButtonIcon();
+        } else {
+            iconDrawable = getResources().getDrawable(resId);
+        }
         if (iconDrawable != null) {
             iconDrawable = iconDrawable.mutate();
         }
@@ -595,20 +549,25 @@
     private LinearLayout uPanel;
     private LinearLayout extendPanel;
     private LinearLayout slidePanelParent;
+    private int slidePanelParentHeight;
+    private int pad;
 
     protected boolean setFrame(int left, int top, int right, int bottom) {
-        
-        int pad = bottom - top;
+        pad = bottom - top;
         if (getVisibility() == View.GONE)
             pad = 0;
 
-        int slidePanelParentHeight = 0;
+        // SPRD Bug:636454 Contact to enter the camera with flash screen phenomenon
+        int dpValue = 24;
+        final float scale = getContext().getResources().getDisplayMetrics().scaledDensity;
+        int slidePanelParentHeight = (int) (dpValue * scale + 0.5f);
 
         if (slidePanelParent == null)
-            slidePanelParent = (LinearLayout) ((Activity) getContext())
-                    .findViewById(R.id.slide_panel_parent);
-        if (slidePanelParent != null)
-            slidePanelParentHeight = slidePanelParent.getHeight();
+            slidePanelParent = (LinearLayout) SlidePanelManager.getInstance(
+                    (CameraActivity) getContext()).getSlidePanelParent();
+        if (slidePanelParent != null) {
+            slidePanelParentHeight = (int) (dpValue * scale + 0.5f);
+        }
 
         if (uPanel == null)
             uPanel = (LinearLayout) ((Activity) getContext())
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/ModeListView.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/ModeListView.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/ui/ModeListView.java	(revision 175951)
@@ -1209,8 +1209,11 @@
      *
      * @param modeIndexList a list of indices of supported modes
      */
+     /*
+     * SPRD: Fix bug 659315 optimize camera launch time @{
+     * Original Code
+     *
     public void init(List<Integer> modeIndexList) {
-        /*
         int[] modeSequence = getResources()
                 .getIntArray(R.array.camera_modes_in_nav_drawer_if_supported);
         int[] visibleModes = getResources()
@@ -1239,48 +1242,6 @@
         }
         mTotalModes = mSupportedModes.size();
         initializeModeSelectorItems();
-        */
-
-        
-        Log.d(TAG, "init");
-        /* SPRD: Fix 474843 Add for Filter Feature @{ */
-        for (int i = modeIndexList.size() - 1; i >= 0
-                && modeIndexList.get(i) > getResources().getInteger(
-                        R.integer.camera_mode_max_index); i--) {
-            modeIndexList.remove(modeIndexList.get(i));
-        }
-        /* @} */
-
-        int[] modeSequence = getResources()
-                .getIntArray(R.array.camera_modes_in_nav_drawer_if_supported);
-        int[] visibleModes = getResources()
-                .getIntArray(R.array.camera_modes_always_visible);
-
-        // Mark the supported modes in a boolean array to preserve the
-        // sequence of the modes
-        SparseBooleanArray modeIsSupported = new SparseBooleanArray();
-        for (int i = 0; i < modeIndexList.size(); i++) {
-            int mode = modeIndexList.get(i);
-            modeIsSupported.put(mode, true);
-        }
-        for (int i = 0; i < visibleModes.length; i++) {
-            int mode = visibleModes[i];
-            modeIsSupported.put(mode, true);
-        }
-
-        // Put the indices of supported modes into an array preserving their
-        // display order.
-        mSupportedModes = new ArrayList<Integer>();
-        for (int i = 0; i < modeSequence.length; i++) {
-            int mode = modeSequence[i];
-            if (modeIsSupported.get(mode, false)) {
-                mSupportedModes.add(mode);
-            }
-        }
-        mTotalModes = mSupportedModes.size();
-
-        initializeModeSelectorItems();
-
         mSettingsButton = findViewById(R.id.settings_button);
         mSettingsButton.setOnClickListener(new OnClickListener() {
             @Override
@@ -1290,15 +1251,14 @@
                 // unset after click happens. In order to ensure the pressed state
                 // gets unset in UI before getting in the low frame rate settings
                 // activity launch stage, the settings selected callback is posted.
-//                post(new Runnable() {
-//                    @Override
-//                    public void run() {
-//                        mModeSwitchListener.onSettingsSelected();
-//                    }
-//                });
+                post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mModeSwitchListener.onSettingsSelected();
+                    }
+                });
             }
         });
-        mSettingsButton.setVisibility(View.GONE);
         // The mode list is initialized to be all the way closed.
         onModeListOpenRatioUpdate(0);
         if (mCurrentStateManager.getCurrentState() == null) {
@@ -1305,6 +1265,7 @@
             mCurrentStateManager.setCurrentState(new FullyHiddenState());
         }
     }
+     */
 
     /**
      * Sets the screen shot provider for getting a preview frame and a bitmap
@@ -1315,8 +1276,11 @@
         mScreenShotProvider = provider;
     }
 
+     /*
+     * SPRD: Fix bug 659315 optimize camera launch time @{
+     * Original Code
+     *
     private void initializeModeSelectorItems() {
-        /*
         mModeSelectorItems = new ModeSelectorItem[mTotalModes];
         // Inflate the mode selector items and add them to a linear layout
         LayoutInflater inflater = AndroidServices.instance().provideLayoutInflater();
@@ -1364,99 +1328,8 @@
         // for a good timing to do corresponding UI adjustments.
         mModeSelectorItems[mTotalModes - 1].setVisibleWidthChangedListener(this);
         resetModeSelectors();
-        */
-        Log.d(TAG, "initializeModeSelectorItems");
-        mModeSelectorItems = new ModeSelectorItem[mTotalModes];
-        // Inflate the mode selector items and add them to a linear layout
-		LayoutInflater inflater = AndroidServices.instance()
-				.provideLayoutInflater();
-
-		mListView = (GridLayout) findViewById(R.id.mode_list);
-        mTitle = (TextView) findViewById(R.id.mode_list_title);
-
-        int[] modeSupportList = getResources().getIntArray(
-                R.array.dream_module_mode_support_list);
-        cameraSupportList = getResources().getIntArray(
-                R.array.dream_module_camera_support_list);
-
-		for (int i = 0; i < mTotalModes; i++) {
-
-            final ModeSelectorItem selectorItem = (ModeSelectorItem) inflater
-                    .inflate(R.layout.dream_mode_selector, null);
-            // params.setGravity(Gravity.FILL);
-//            mListView.addView(selectorItem);
-        /*
-         mListView = (TableLayout) findViewById(R.id.mode_list);
-        TableRow tableRow = (TableRow) findViewById(R.id.mode_list_row1);
-
-        for (int i = 0; i < mTotalModes; i++) {
-
-            if (i / 3 == 1) {
-                tableRow = (TableRow) findViewById(R.id.mode_list_row2);
-            } else if (i / 3 == 2) {
-                tableRow = (TableRow) findViewById(R.id.mode_list_row3);
-            }
-
-            final ModeSelectorItem selectorItem =
-                    (ModeSelectorItem) inflater.inflate(R.layout.mode_selector, null);
-            tableRow.addView(selectorItem);
-            
-            */
-        
-        
-            // Sets the top padding of the top item to 0.
-            /*
-            if (i == 0) {
-                selectorItem.setPadding(selectorItem.getPaddingLeft(), 0,
-                        selectorItem.getPaddingRight(), selectorItem.getPaddingBottom());
-            }
-            // Sets the bottom padding of the bottom item to 0.
-            if (i == mTotalModes - 1) {
-                selectorItem.setPadding(selectorItem.getPaddingLeft(), selectorItem.getPaddingTop(),
-                        selectorItem.getPaddingRight(), 0);
-            }
-            */
-
-            int modeId = getModeIndex(i);
-
-            int[] mc = {
-                    modeSupportList[modeId],
-                    cameraSupportList[modeId],
-            };
-            selectorItem.setMC(mc);
-
-            // Set image
-            selectorItem.setUnSelectedImageResource(CameraUtil.getCameraModeIconResId(modeId, getContext()));
-            selectorItem.setSelectedImageResource(DreamUtil.getCameraUnselectedModeIconResId(modeId, getContext()));
-            // Set text
-            String textString = CameraUtil.getCameraModeText(modeId, getContext());
-            Log.e(TAG, "mode item description = " + textString);
-            selectorItem.setText(textString);
-            // Set content description (for a11y)
-            selectorItem.setContentDescription(CameraUtil
-                    .getCameraModeContentDescription(modeId, getContext()));
-            selectorItem.setModeId(modeId);
-            selectorItem.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    onItemSelected(selectorItem);
-                }
-            });
-
-            selectorItem.setDefaultBackgroundColor(getResources()
-                    .getColor(R.color.dream_background_mode_item));
-            //FOCUS ICON COLOR
-            selectorItem.setHighlightColor(getResources()
-                    .getColor(R.color.dream_focus_mode_item));
-
-            mModeSelectorItems[i] = selectorItem;
-        }
-        // During drawer opening/closing, we change the visible width of the mode
-        // items in sequence, so we listen to the last item's visible width change
-        // for a good timing to do corresponding UI adjustments.
-        mModeSelectorItems[mTotalModes - 1].setVisibleWidthChangedListener(this);
-        //resetModeSelectors();
     }
+    /* @} */
 
     /**
      * Maps between the UI mode selector index to the actual mode id.
@@ -1992,7 +1865,7 @@
     @Override
     public void onWindowVisibilityChanged(int visibility) {
         super.onWindowVisibilityChanged(visibility);
-        if (visibility != VISIBLE) {
+        if (visibility != VISIBLE  && mCurrentStateManager.getCurrentState() != null) {
             mCurrentStateManager.getCurrentState().hide();
         }
     }
@@ -2544,17 +2417,181 @@
         return mCount;
     }
 
-    private int[] cameraSupportList = null;
+    private int[] mCameraSupportList = null;
 
     public boolean isSupportMC(int modeIndex, int camera) {
-        if (cameraSupportList == null) {
-            Log.e(TAG, "cameraSupportList == null");
+        if (mCameraSupportList == null) {
+            Log.e(TAG, "mCameraSupportList == null");
             return false;
         }
-        if (cameraSupportList[modeIndex] != -1 && cameraSupportList[modeIndex] != camera) {
+        if (mCameraSupportList[modeIndex] != -1 && mCameraSupportList[modeIndex] != camera) {
             Log.e(TAG, "modeindex and cameraid are inconsistent");
             return false;
         }
         return true;
     }
+
+    /**
+     * SPRD: Fix bug 659315 optimize camera launch time @{
+     * @param modeListHelper a container that contains supported modes
+     */
+    public void init(ModeListView.ModeListViewHelper modeListHelper) {
+        if (!mHasInitialized) {
+            mHasInitialized = true;
+            mListView = (GridLayout) findViewById(R.id.mode_list);
+            mTitle = (TextView) findViewById(R.id.mode_list_title);
+
+            mSettingsButton = findViewById(R.id.settings_button);
+            mSettingsButton.setVisibility(View.GONE);
+        }
+
+        if (modeListHelper == null) {
+            mSupportedModes = new ArrayList<>(0);
+            mTotalModes = 0;
+            mCameraSupportList = null;
+
+            LayoutInflater inflater = AndroidServices.instance().provideLayoutInflater();
+            final ModeSelectorItem selectorItem = (ModeSelectorItem) inflater
+                    .inflate(R.layout.dream_mode_selector, null);
+            mModeSelectorItems = new ModeSelectorItem[] {selectorItem};
+
+            if (mCurrentStateManager.getCurrentState() == null) {
+                mCurrentStateManager.setCurrentState(new DummyState());
+            }
+            return;
+        }
+
+        mSupportedModes = modeListHelper.mSupportedModes;
+        mTotalModes = modeListHelper.mTotalModes;
+        mCameraSupportList = modeListHelper.mCameraSupportList;
+        mModeSelectorItems = modeListHelper.mModeSelectorItems;
+        for (int i = 0; i < mTotalModes; i++) {
+            final ModeSelectorItem selectorItem = mModeSelectorItems[i];
+            selectorItem.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    onItemSelected(selectorItem);
+                }
+            });
+        }
+        // During drawer opening/closing, we change the visible width of the mode
+        // items in sequence, so we listen to the last item's visible width change
+        // for a good timing to do corresponding UI adjustments.
+        mModeSelectorItems[mTotalModes - 1].setVisibleWidthChangedListener(this);
+
+        mCurrentStateManager.setCurrentState(new FullyHiddenState());
+
+        onModeListOpenRatioUpdate(0);
+    }
+
+    private boolean mHasInitialized = false;
+
+    private class DummyState extends ModeListState {
+
+    }
+
+    // container that contains supported modes
+    public static class ModeListViewHelper {
+        private ArrayList<Integer> mSupportedModes;
+        private int mTotalModes;
+        private ModeSelectorItem[] mModeSelectorItems;
+        private int[] mCameraSupportList;
+
+        public ModeListViewHelper(Context context, List<Integer> modeIndexList) {
+            /* SPRD: Fix 474843 Add for Filter Feature @{ */
+            for (int i = modeIndexList.size() - 1; i >= 0
+                    && modeIndexList.get(i) > context.getResources().getInteger(
+                    R.integer.camera_mode_max_index); i--) {
+                modeIndexList.remove(modeIndexList.get(i));
+            }
+            /* @} */
+
+            int[] modeSequence = context.getResources()
+                    .getIntArray(R.array.camera_modes_in_nav_drawer_if_supported);
+            int[] visibleModes = context.getResources()
+                    .getIntArray(R.array.camera_modes_always_visible);
+
+            // Mark the supported modes in a boolean array to preserve the
+            // sequence of the modes
+            SparseBooleanArray modeIsSupported = new SparseBooleanArray();
+            for (int i = 0; i < modeIndexList.size(); i++) {
+                int mode = modeIndexList.get(i);
+                modeIsSupported.put(mode, true);
+            }
+            for (int i = 0; i < visibleModes.length; i++) {
+                int mode = visibleModes[i];
+                modeIsSupported.put(mode, true);
+            }
+
+            // Put the indices of supported modes into an array preserving their
+            // display order.
+            mSupportedModes = new ArrayList<Integer>();
+            for (int i = 0; i < modeSequence.length; i++) {
+                int mode = modeSequence[i];
+                if (modeIsSupported.get(mode, false)) {
+                    mSupportedModes.add(mode);
+                }
+            }
+            mTotalModes = mSupportedModes.size();
+
+            initializeModeSelectorItems(context);
+        }
+
+        private void initializeModeSelectorItems(Context context) {
+            Log.d(TAG, "initializeModeSelectorItems");
+            mModeSelectorItems = new ModeSelectorItem[mTotalModes];
+            // Inflate the mode selector items and add them to a linear layout
+            LayoutInflater inflater = AndroidServices.instance()
+                    .provideLayoutInflater();
+
+            int[] modeSupportList = context.getResources().getIntArray(
+                    R.array.dream_module_mode_support_list);
+            mCameraSupportList = context.getResources().getIntArray(
+                    R.array.dream_module_camera_support_list);
+
+            for (int i = 0; i < mTotalModes; i++) {
+
+                final ModeSelectorItem selectorItem = (ModeSelectorItem) inflater
+                        .inflate(R.layout.dream_mode_selector, null);
+
+                int modeId = getModeIndex(context, i);
+
+                int[] mc = {
+                        modeSupportList[modeId],
+                        mCameraSupportList[modeId],
+                };
+                selectorItem.setMC(mc);
+
+                // Set image
+                selectorItem.setUnSelectedImageResource(CameraUtil.getCameraModeIconResId(modeId, context));
+                selectorItem.setSelectedImageResource(DreamUtil.getCameraUnselectedModeIconResId(modeId, context));
+                // Set text
+                String textString = CameraUtil.getCameraModeText(modeId, context);
+                // Log.i(TAG, "mode item description = " + textString);
+                selectorItem.setText(textString);
+                // Set content description (for a11y)
+                selectorItem.setContentDescription(CameraUtil
+                        .getCameraModeContentDescription(modeId, context));
+                selectorItem.setModeId(modeId);
+
+                selectorItem.setDefaultBackgroundColor(context.getResources()
+                        .getColor(R.color.dream_background_mode_item));
+                //FOCUS ICON COLOR
+                selectorItem.setHighlightColor(context.getResources()
+                        .getColor(R.color.dream_focus_mode_item));
+
+                mModeSelectorItems[i] = selectorItem;
+            }
+        }
+
+        private int getModeIndex(Context context, int modeSelectorIndex) {
+            if (modeSelectorIndex < mTotalModes && modeSelectorIndex >= 0) {
+                return mSupportedModes.get(modeSelectorIndex);
+            }
+            Log.e(TAG, "Invalid mode selector index: " + modeSelectorIndex + ", total modes: " +
+                    mTotalModes);
+            return context.getResources().getInteger(R.integer.camera_mode_photo);
+        }
+    }
+    /* @} */
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/CameraModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/CameraModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_dream/com/dreamoverlay/camera/CameraModule.java	(revision 175951)
@@ -26,7 +26,7 @@
 import com.android.camera.app.CameraServices;
 import com.android.camera.module.ModuleController;
 import com.android.camera.settings.Keys;
-import com.android.camera.settings.SettingsManager;
+
 import com.dream.camera.DreamModule;
 
 import android.content.Intent;
@@ -139,10 +139,7 @@
 
     /* SPRD:Bug 535058 New feature: volume start @{ */
     protected int getVolumeControlStatus(CameraActivity mActivity) {
-        SettingsManager settingsManager = mActivity.getSettingsManager();
-        String index = settingsManager.getString(SettingsManager.SCOPE_GLOBAL,
-                Keys.KEY_CAMERA_VOLUME);
-        return Integer.parseInt(index);
+        return 0;
     }
 
     protected float increaseZoomValue(float mZoomValue) {
@@ -217,4 +214,5 @@
         return false;
     }
     public void doSometingWhenFilmStripShow(){}
+	public void waitInitDataSettingCounter (){}
 }
Index: vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/layout_extend_panel.xml
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/layout_extend_panel.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/layout_extend_panel.xml	(revision 175951)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout 
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:camera="http://schemas.android.com/apk/res/com.android.camera2"
+    android:id="@+id/extend_panel"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_gravity="bottom"
+    android:orientation="vertical">
+
+    <include layout="@layout/zoom_panel" />
+
+    <FrameLayout
+        android:id="@+id/extend_panel_parent"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content" />
+</LinearLayout>
\ No newline at end of file
Index: vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/layout_grid_lines.xml
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/layout_grid_lines.xml	(revision 0)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/layout_grid_lines.xml	(revision 175951)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:camera="http://schemas.android.com/apk/res/com.android.camera2"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <com.android.camera.ui.GridLines
+        android:id="@+id/grid_lines"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center_horizontal"
+        android:visibility="invisible" />
+
+    <com.android.camera.ui.GridLines
+        android:id="@+id/nine_grid_lines"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center_horizontal"
+        android:visibility="invisible" />
+
+    <com.android.camera.ui.ReticleGridLines
+        android:id="@+id/reticle_grid_lines"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center_horizontal"
+        android:visibility="invisible" />
+
+    <com.android.camera.ui.BoxGridLines
+        android:id="@+id/box_grid_lines"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center_horizontal"
+        android:visibility="invisible" />
+
+    <com.android.camera.ui.GoldenGridLines
+        android:id="@+id/golden_grid_lines"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center_horizontal"
+        android:visibility="invisible" />
+</FrameLayout>
\ No newline at end of file
Index: vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/dream_main.xml
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/dream_main.xml	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/dream_main.xml	(revision 175951)
@@ -6,9 +6,7 @@
     android:background="@null" >
 
     <include layout="@layout/dream_camera" />
-
-    <include layout="@layout/dream_filmstrip" />
-
+	
     <com.android.camera.ui.ModeTransitionView
         android:id="@+id/mode_transition_view"
         android:layout_width="match_parent"
Index: vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/dream_camera.xml
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/dream_camera.xml	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/dream_camera.xml	(revision 175951)
@@ -70,37 +70,12 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent" />
 
-    <com.android.camera.ui.GridLines
-        android:id="@+id/grid_lines"
+   <ViewStub
+        android:id="@+id/layout_grid_lines_id"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="center_horizontal"
-        android:visibility="invisible" />
-    <com.android.camera.ui.GridLines
-        android:id="@+id/nine_grid_lines"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_gravity="center_horizontal"
-        android:visibility="invisible" />
-    <com.android.camera.ui.ReticleGridLines
-        android:id="@+id/reticle_grid_lines"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_gravity="center_horizontal"
-        android:visibility="invisible" />
-    <com.android.camera.ui.BoxGridLines
-        android:id="@+id/box_grid_lines"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_gravity="center_horizontal"
-        android:visibility="invisible" />
-    <com.android.camera.ui.GoldenGridLines
-        android:id="@+id/golden_grid_lines"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_gravity="center_horizontal"
-        android:visibility="invisible" />
-
+        android:layout="@layout/layout_grid_lines" />
+   
     <com.android.camera.ui.RotateImageView
         android:id="@+id/intent_review_imageview"
         android:layout_width="match_parent"
@@ -173,26 +148,20 @@
     -->
     <!-- SPRD:Dream Camera extend panel -->
 
-   <LinearLayout
-        android:id="@+id/extend_panel"
+   <ViewStub
+        android:id="@+id/extend_panel_id"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_gravity="bottom"
-        android:orientation="vertical" >
+        android:layout="@layout/layout_extend_panel"
+        android:orientation="vertical" />
 
-        <include layout="@layout/zoom_panel" />
+    <ViewStub
+        android:id="@+id/dream_sticky_bottom_capture_layout_id"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout="@layout/dream_sticky_bottom_capture_layout" />
 
-        <FrameLayout
-            android:id="@+id/extend_panel_parent"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content" />
-    </LinearLayout>
-    <!-- SPRD:fix bug 529175 shutterbutton become dark -->
-
-    <include layout="@layout/dream_sticky_bottom_capture_layout" />
-
-
-
     <FrameLayout
         android:id="@+id/dream_module_layout"
         android:layout_width="match_parent"
@@ -199,19 +168,6 @@
         android:layout_height="match_parent"
         android:gravity="center" />
 
-    <FrameLayout
-        android:id="@+id/tutorials_placeholder_wrapper"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:background="@color/fullscreen_dialog_background_color"
-        android:clickable="true"
-        android:visibility="gone" >
-    </FrameLayout>
-
-    <!-- SPRD: Add for bug 461760 -->
-    <!--
-    <include layout="@layout/ucam_magiclens_bottom" />
-    -->
      <ViewStub
         android:id="@+id/layout_ucam_magiclens_bottom_id"
         android:layout_width="match_parent"
@@ -218,48 +174,20 @@
         android:layout_height="match_parent"
         android:layout="@layout/ucam_magiclens_bottom" />
 
-    <include layout="@layout/dream_mode_list_layout" />
-
-    <LinearLayout
-        android:id="@+id/accessibility_affordances"
-        android:layout_width="wrap_content"
+    <ViewStub
+        android:id="@+id/dream_mode_list_layout_id"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_gravity="top|left"
-        android:orientation="horizontal"
-        android:visibility="gone" >
+        android:layout_gravity="bottom"
+        android:layout="@layout/dream_mode_list_layout" />
 
-        <Button
-            android:id="@+id/accessibility_mode_toggle_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:contentDescription="@string/accessibility_mode_list_toggle"
-            android:text="@string/btn_mode_list_toggle" />
-
-        <Button
-            android:id="@+id/accessibility_filmstrip_toggle_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:contentDescription="@string/accessibility_filmstrip_toggle"
-            android:text="@string/btn_filmstrip_toggle" />
-
-        <Button
-            android:id="@+id/accessibility_zoom_minus_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:contentDescription="@string/accessibility_mode_zoom_minus"
-            android:text="@string/btn_zoom_minus"
-            android:visibility="gone" />
-
-        <Button
-            android:id="@+id/accessibility_zoom_plus_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:contentDescription="@string/accessibility_mode_zoom_plus"
-            android:text="@string/btn_zoom_plus"
-            android:visibility="gone" />
-    </LinearLayout>
     <!-- SPRD:Dream Camera slide panel -->
-    <include layout="@layout/slide_panel" />
+    <ViewStub
+        android:id="@+id/slide_panel_id"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom"
+        android:layout="@layout/slide_panel" />
 
      <ViewStub
         android:id="@+id/layout_dream_welcome_id"
@@ -266,12 +194,11 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent"
         android:layout="@layout/dream_welcome" />
-     <!--
-    <include layout="@layout/dream_welcome" />
-    -->
 
-    <include android:layout_width="match_parent"
-             android:layout_height="match_parent"
-             layout="@layout/dream_ui_preference_setting_layout" />
+    <ViewStub
+        android:id="@+id/dream_ui_preference_setting_layout_id"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout="@layout/dream_ui_preference_setting_layout" />
 
 </FrameLayout>
Index: vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/slide_panel.xml
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/slide_panel.xml	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/res_dream/layout/slide_panel.xml	(revision 175951)
@@ -3,6 +3,7 @@
     android:id="@+id/slide_panel_parent"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
+    android:visibility="gone"
     android:layout_gravity="bottom"
     android:orientation="vertical" >
 
Index: vendor/sprd/platform/packages/apps/DreamCamera2/src_fake/com/ucamera/ucam/modules/BasicModule.java
===================================================================
--- vendor/sprd/platform/packages/apps/DreamCamera2/src_fake/com/ucamera/ucam/modules/BasicModule.java	(revision 175950)
+++ vendor/sprd/platform/packages/apps/DreamCamera2/src_fake/com/ucamera/ucam/modules/BasicModule.java	(revision 175951)
@@ -26,7 +26,6 @@
 import com.android.camera.hardware.HardwareSpec;
 import android.view.View;
 import com.android.camera.module.ModuleController;
-import com.android.camera.settings.SettingsManager;
 import com.android.camera.ui.TouchCoordinate;
 import com.android.ex.camera2.portability.CameraAgent.CameraProxy;
 import com.ucamera.ucam.modules.ui.BasicUI;
@@ -49,7 +48,6 @@
     public boolean onBackPressed() {return false;}
     public void onCameraAvailable(CameraProxy cameraProxy) {}
     public CameraAppUI.BottomBarUISpec getBottomBarSpec() {return null;}
-    public void hardResetSettings(SettingsManager settingsManager) {}
     public boolean isUsingBottomBar() {return false;}
     public void onPreviewVisibilityChanged(int visibility) {}
     public void onShutterCoordinate(TouchCoordinate coord) {}
