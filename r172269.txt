Index: packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppObexClientSession.java
===================================================================
--- packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppObexClientSession.java	(revision 172268)
+++ packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppObexClientSession.java	(revision 172269)
@@ -320,8 +320,7 @@
         private BluetoothOppSendFileInfo processShareInfo() {
             if (D) Log.v(TAG, "Client thread processShareInfo() " + mInfo.mId);
 
-            BluetoothOppSendFileInfo fileInfo = BluetoothOppSendFileInfo.generateFileInfo(
-                    mContext1, mInfo.mUri, mInfo.mMimetype);
+            BluetoothOppSendFileInfo fileInfo = BluetoothOppUtility.getSendFileInfo(mInfo.mUri);
             if (fileInfo.mFileName == null || fileInfo.mLength == 0) {
                 if (V) Log.v(TAG, "BluetoothOppSendFileInfo get invalid file");
                     Constants.updateShareStatus(mContext1, mInfo.mId, fileInfo.mStatus);
@@ -562,9 +561,7 @@
                     if (outputStream != null) {
                       outputStream.close();
                     }
-                    if (fileInfo.mInputStream != null) {
-                        fileInfo.mInputStream.close();
-                    }
+                    BluetoothOppUtility.closeSendFileInfo(mInfo.mUri);
 
                     if (!error) {
                         responseCode = putOperation.getResponseCode();
Index: packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppService.java
===================================================================
--- packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppService.java	(revision 172268)
+++ packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppService.java	(revision 172269)
@@ -628,27 +628,15 @@
 
         if (info.isReadyToStart()) {
             if (info.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
-                InputStream i;
-                try {
-                    i = getContentResolver().openInputStream(info.mUri);
-                }catch (FileNotFoundException e) {
+                 /* check if the file exists */
+                BluetoothOppSendFileInfo sendFileInfo = BluetoothOppUtility.getSendFileInfo(
+                        info.mUri);
+                if (sendFileInfo == null || sendFileInfo.mInputStream == null) {
                     Log.e(TAG, "Can't open file for OUTBOUND info " + info.mId);
                     Constants.updateShareStatus(this, info.mId, BluetoothShare.STATUS_BAD_REQUEST);
+                    BluetoothOppUtility.closeSendFileInfo(info.mUri);
                     return;
-                }catch (SecurityException e) {
-                    Log.e(TAG, "Exception:" + e.toString() + " for OUTBOUND info " + info.mId);
-                    Constants.updateShareStatus(this, info.mId, BluetoothShare.STATUS_BAD_REQUEST);
-                    return ;
                 }
-                try {
-                    i.close();
-                }catch (IOException ex) {
-                    Log.e(TAG, "IO error when close file for OUTBOUND info " + info.mId);
-                    return;
-                }catch (NullPointerException ex) {
-                    Log.e(TAG, "NullPointerException happens when close file for OUTBOUND info " + info.mId);
-                    return;
-                }
             }
             if (mBatchs.size() == 0) {
                 BluetoothOppBatch newBatch = new BluetoothOppBatch(this, info);
Index: packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppUtility.java
===================================================================
--- packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppUtility.java	(revision 172268)
+++ packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppUtility.java	(revision 172269)
@@ -54,7 +54,9 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Queue;
 import java.util.concurrent.ConcurrentHashMap;
 
 import android.support.v4.content.FileProvider;
@@ -66,6 +68,9 @@
     private static final boolean D = Constants.DEBUG;
     private static final boolean V = Constants.VERBOSE;
 
+    private static final ConcurrentHashMap<Uri, Queue<BluetoothOppSendFileInfo>> sSendFileMap
+            = new ConcurrentHashMap<Uri, Queue<BluetoothOppSendFileInfo>>();
+
     //SPRD: Bug#483411 Add for Bluetooth Opp auto disconnect
     // when OBEX request or response timeout Feature BEG-->
     private static final int OBEX_TIMEOUT_DELAY = 120000;
@@ -324,15 +329,10 @@
      * Retry the failed transfer: Will insert a new transfer session to db
      */
     public static void retryTransfer(Context context, BluetoothOppTransferInfo transInfo) {
-        ContentValues values = new ContentValues();
-        values.put(BluetoothShare.URI, transInfo.mFileUri);
-        values.put(BluetoothShare.MIMETYPE, transInfo.mFileType);
-        values.put(BluetoothShare.DESTINATION, transInfo.mDestAddr);
-
-        final Uri contentUri = context.getContentResolver().insert(BluetoothShare.CONTENT_URI,
-                values);
-        if (V) Log.v(TAG, "Insert contentUri: " + contentUri + "  to device: " +
-                transInfo.mDeviceName);
+        BluetoothDevice bluetoothDevice = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(transInfo.mDestAddr);
+        BluetoothOppManager oppManager = BluetoothOppManager.getInstance(context);
+        oppManager.saveSendingFileInfo(transInfo.mFileType, transInfo.mFileUri, transInfo.mHandoverInitiated);
+        oppManager.startTransfer(bluetoothDevice);
     }
 
     //SPRD: Bug#483411 Add for Bluetooth Opp auto disconnect when OBEX request or response timeout Feature BEG-->
@@ -355,4 +355,51 @@
         }
     }
     //<-- Add for Bluetooth Opp auto disconnect when OBEX request or response timeout Feature END
+
+    static void putSendFileInfo(Uri uri, BluetoothOppSendFileInfo sendFileInfo) {
+        if (D) Log.d(TAG, "putSendFileInfo: uri=" + uri + " sendFileInfo=" + sendFileInfo);
+        Queue<BluetoothOppSendFileInfo> queue = sSendFileMap.get(uri);
+        if (queue != null) {
+            if (D) Log.d(TAG, "queue is not null, offer the info and replace the queue");
+            queue.offer(sendFileInfo);
+            sSendFileMap.replace(uri, queue);
+            return;
+        }
+        queue = new LinkedList<BluetoothOppSendFileInfo>();
+        queue.offer(sendFileInfo);
+        sSendFileMap.put(uri, queue);
+        if (D) Log.d(TAG, "queue is null, new a queue and put it");
+    }
+
+    static BluetoothOppSendFileInfo getSendFileInfo(Uri uri) {
+        if (D) Log.d(TAG, "getSendFileInfo: uri=" + uri);
+        Queue<BluetoothOppSendFileInfo> queue = sSendFileMap.get(uri);
+        if (queue == null) {
+            Log.e(TAG, "no queue for " + uri.toString());
+            return BluetoothOppSendFileInfo.SEND_FILE_INFO_ERROR;
+        }
+        BluetoothOppSendFileInfo info = queue.element();
+        return (info != null) ? info : BluetoothOppSendFileInfo.SEND_FILE_INFO_ERROR;
+    }
+
+    static void closeSendFileInfo(Uri uri) {
+        Queue<BluetoothOppSendFileInfo> queue = sSendFileMap.get(uri);
+        if (queue == null) {
+            Log.e(TAG, "no queue for " + uri.toString());
+            return;
+        }
+        BluetoothOppSendFileInfo info = queue.poll();
+        if (queue.isEmpty()) {
+            if (D) Log.d(TAG, "queue is null, remove the queue");
+            sSendFileMap.remove(uri);
+        }
+        if (info != null && info.mInputStream != null) {
+            if (D)
+                Log.d(TAG, "closeSendFileInfo: uri=" + uri + "InputStream = " + info.mInputStream);
+            try {
+                info.mInputStream.close();
+            } catch (IOException ignored) {
+            }
+        }
+    }
 }
Index: packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java
===================================================================
--- packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java	(revision 172268)
+++ packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java	(revision 172269)
@@ -34,10 +34,12 @@
 
 import android.content.ContentResolver;
 import android.content.Context;
+import android.content.Intent;
 import android.content.res.AssetFileDescriptor;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteException;
 import android.net.Uri;
+import android.provider.MediaStore;
 import android.provider.OpenableColumns;
 import android.util.Log;
 
@@ -108,12 +110,19 @@
         // This will allow more 3rd party applications to share files via
         // bluetooth
         if ("content".equals(scheme)) {
+            String filePath = null;
+            String[] columns = null;
+            String authority = uri.getAuthority();
+            boolean authIsMedia = (authority != null && "media".equals(authority));
+            if (authIsMedia) {
+                columns = new String[]{OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE, MediaStore.Files.FileColumns.DATA};
+            } else {
+                columns = new String[]{OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE};
+            }
             contentType = contentResolver.getType(uri);
             Cursor metadataCursor;
             try {
-                metadataCursor = contentResolver.query(uri, new String[] {
-                        OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE
-                }, null, null, null);
+                metadataCursor = contentResolver.query(uri, columns, null, null, null);
             } catch (SQLiteException e) {
                 // some content providers don't support the DISPLAY_NAME or SIZE columns
                 Log.e(TAG, e.toString());
@@ -129,7 +138,11 @@
                                 metadataCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
                         length = metadataCursor.getLong(
                                 metadataCursor.getColumnIndex(OpenableColumns.SIZE));
-                        if (D) Log.d(TAG, "fileName = " + fileName + " length = " + length);
+                        if (authIsMedia) {
+                            filePath = metadataCursor.getString(
+                                    metadataCursor.getColumnIndex(MediaStore.Files.FileColumns.DATA));
+                        }
+                        if (D) Log.d(TAG, "fileName = " + fileName + " length = " + length + " filePath = " + filePath);
                     }
                 } finally {
                     metadataCursor.close();
@@ -137,7 +150,11 @@
             }
             if (fileName == null) {
                 // use last segment of URI if DISPLAY_NAME query fails
-                fileName = uri.getLastPathSegment();
+                if (filePath != null) {
+                    fileName = Uri.parse(filePath).getLastPathSegment();
+                } else {
+                    fileName = uri.getLastPathSegment();
+                }
             }
         } else if ("file".equals(scheme)) {
             fileName = uri.getLastPathSegment();
@@ -186,8 +203,13 @@
                         // Ignore
                     }
                 }
+
+                // Granting temporary permissions to the URI for retransfer.
+                context.grantUriPermission(context.getPackageName(), uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
             } catch (FileNotFoundException e) {
                 // Ignore
+            } catch (SecurityException e) {
+                Log.e(TAG, e.toString());
             }
         }
 
@@ -203,9 +225,14 @@
                     is = (FileInputStream) contentResolver.openInputStream(uri);
                 }
             } catch (FileNotFoundException e) {
+                Log.e(TAG, e.toString());
                 return SEND_FILE_INFO_ERROR;
             } catch (IOException e) {
+                Log.e(TAG, e.toString());
                 return SEND_FILE_INFO_ERROR;
+            } catch (SecurityException e) {
+                Log.e(TAG, e.toString());
+                return SEND_FILE_INFO_ERROR;
             }
         }
 
Index: packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppManager.java
===================================================================
--- packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppManager.java	(revision 172268)
+++ packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppManager.java	(revision 172269)
@@ -248,40 +248,19 @@
         if (V) Log.v(TAG, "Application data stored to SharedPreference! ");
     }
 
-
-    private Uri parseUriExtra(Uri uri) {
-        isEmailUri = false;
-        if (uri != null) {
-            if (V)
-                Log.d(TAG, "parseUriExtra() uri = " + uri);
-            if (uri.getAuthority().equals(
-                    "com.google.android.apps.photos.contentprovider")) {
-                String[] parts = uri.toString().split("/");
-                /* Debug log to dump URI split result */
-                if (V) {
-                    for (int index = 0; index < parts.length; index++) {
-                        Log.d(TAG, "uri split(" + index + ") : " + parts[index]);
-                    }
-                }
-                if (parts.length > 5) {
-                    return Uri.parse(URLDecoder.decode(parts[5]));
-                }
-            } else if (uri.getAuthority().equals(
-                    "com.android.email.attachmentprovider")) {
-                    isEmailUri = true;
-            }
-        }
-        return uri;
-    }
-
     public void saveSendingFileInfo(String mimeType, String uriString, boolean isHandover) {
         synchronized (BluetoothOppManager.this) {
             mMultipleFlag = false;
             mMimeTypeOfSendingFile = mimeType;
             mIsHandoverInitiated = isHandover;
-            Uri uri = parseUriExtra(Uri.parse(uriString));
-            mUriOfSendingFile = uri.toString();
+            mUriOfSendingFile = uriString;
+            Uri uri = Uri.parse(uriString);
+            BluetoothOppUtility.putSendFileInfo(uri, BluetoothOppSendFileInfo
+                    .generateFileInfo(mContext, uri, mimeType));
             storeApplicationData();
+            if (uri != null && uri.getAuthority().equals("com.android.email.attachmentprovider")) {
+                isEmailUri = true;
+            }
         }
     }
 
@@ -292,8 +271,12 @@
             mIsHandoverInitiated = isHandover;
             mUrisOfSendingFiles.clear();
             for (Uri uri : uris) {
-                Uri u = parseUriExtra(uri);
-                mUrisOfSendingFiles.add(u);
+                BluetoothOppUtility.putSendFileInfo(uri, BluetoothOppSendFileInfo
+                        .generateFileInfo(mContext, uri, mimeType));
+                mUrisOfSendingFiles.add(uri);
+                if (uri != null && uri.getAuthority().equals("com.android.email.attachmentprovider")) {
+                    isEmailUri = true;
+                }
             }
             storeApplicationData();
         }
Index: packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppTransfer.java
===================================================================
--- packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppTransfer.java	(revision 172268)
+++ packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppTransfer.java	(revision 172269)
@@ -339,8 +339,8 @@
                 updateValues.put(BluetoothShare.STATUS, info.mStatus);
                 /* Update un-processed outbound transfer to show some info */
                 if (info.mDirection == BluetoothShare.DIRECTION_OUTBOUND) {
-                    BluetoothOppSendFileInfo fileInfo = BluetoothOppSendFileInfo.generateFileInfo(
-                            mContext, info.mUri,info.mMimetype);
+                    BluetoothOppSendFileInfo fileInfo = BluetoothOppUtility.getSendFileInfo(info.mUri);
+                    BluetoothOppUtility.closeSendFileInfo(info.mUri);
                     if (fileInfo.mFileName != null) {
                         updateValues.put(BluetoothShare.FILENAME_HINT, fileInfo.mFileName);
                         updateValues.put(BluetoothShare.TOTAL_BYTES, fileInfo.mLength);
